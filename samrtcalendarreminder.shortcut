Smart Calendar Reminder V3 (1900 actions, 546 KB)
"WFQuickActionSurfaces": [],
"WFWorkflowClientVersion": "3303.0.5",
"WFWorkflowHasOutputFallback": false,
"WFWorkflowHasShortcutInputVariables": true,
"WFWorkflowIcon": {
   "WFWorkflowIconStartColor": 431817727,
   "WFWorkflowIconGlyphNumber": 61701
},
"WFWorkflowImportQuestions": [],
"WFWorkflowInputContentItemClasses": [],
"WFWorkflowMinimumClientVersion": 3010,
"WFWorkflowMinimumClientVersionString": "3010",
"WFWorkflowOutputContentItemClasses": [],
"WFWorkflowTypes": []


〔0〕 If 〔Shortcut Input〕 does not have any value

〔1〕 Comment
Initial setup and version update check when no input is provided

〔2〕 Comment
Inspired by [Schedule Shortcut or Alarm] but designed to work smarter for my needs! Instead of manually inputting each trigger or alarm, this shortcut leverages my Calendar as the ultimate data source. It automatically scans for upcoming events, then:

• Speaks out the event details
• Sets a tailored alarm—accounting for travel and prep time—right when you need it

No more early, forgettable reminders. It keeps your schedule perfectly in sync. Give it a try and let your Calendar do the heavy lifting!

〔3〕 Dictionary 　➔ Version Dictionary 　» 4 5 7 9 10 11 12 20 21 25 31 46 72
{  "Name": "Smart Calendar Reminder",
   "Version": "3.2",
   "RH ID": "21959",
   "Icons": {
      "Update": "iVBORw0KGgoAAAANSUhEUgAAAHsAAAB7CAYAAABUx/9/AAAAAXNSR0IArs4c6QAAB7RJREFUeF7tnT2W5DQQgLuPAgk3gHAZOAcZIZyAYJmAE0BIxjmA2RBuQAJHMa/cVq/aLUslq34l9XvzdnasllT1qX4k29L10tFnWZYvI3Hg93c78eLr4dLbrsyH7f9v1+t1f821tq6ee7/Bfb/JkAJJJR5AXwfB9Xr9kapS6XpcwRaEW+LgEr552BFgTsstwS1df71cLubdvlnYy7KAu4SYaxlyahC8WnX1pmA7seKSlYfr5qCbgN0Z5P1gABdvIrFThd055Cfo2u5dDfYWk8O0Cesaeyin5t7FYQ9mzbnBKQ5dFPayLH86zK45vYkocBHYmzUD6PlJa0AEOjvsgWNz7cBmB84Ge8bmWtZreViFezn1TcSXWGBPt43QfL7IC8cdN3LYE3Qz6FABOXBS2DM+k4FmWXIlgz1Bk4MmB04Ce4JmA00KvBn2BM0Omgx4E+yZjImBJknaTsOeoMVBNwNvgb2oiTsbPjUtOwXb6w2Nv/+7XH7+/TZSvvj0cvn8k9uPw8+plbZq2F4TMgD9za/PWH/71i3w6rX0KtheQQPiz35I2y9YNgB3+qly57WwXcbpI6sOgB1bNzzbhmaILujZqnuGXXOnDAXbM2iw3s5hg4god46F7dJ9Bzc9AGxUdl6E7d2qB7FsELOYnWNgu7bqgWAX3XkWdg9WPRjsrDs/hN0L6MFgZ617wr7cFlWcLpum1oIOrTsH232sHigb30NPTsWSsHty4QO6cRA5ad1HsLux6kFhJ5dRn2D3ZtWjwk7Nu1Owu7LqgWE/ufIH2L0+ajTAcunRHdqHRG0PGzat6e4F+YFhP1j3HnZ3LnxgN75ae3y/+w67x8Rs4Hl27NbvrnzC7m8FbR+/7648ht3tFhgDx+yHBZYYdpfxevSYHcftFXbP8XrCXr36Grcn7P5j9t2VB9jdxutp2atlr0lagG02XodXduDf77++JZrffXW0YJT+O0eCRtGvOinaSsN82zTsX/74+G5WLCpArwFODZuqX234qr/9crW8Hn70yg6IWQOcEvYR6KB6w0+9rLBNroeXANUAL9WFBVQCDX3C1lVtl+1f8A0bC5wCNga0cdivYNlmM3F4xRZAlT4ll94KGwsa+vnPT6Xeql1/Mw27BAmbtJXqybneGtClQaeG+dawbdjQQwpln4VN0bYy4Lh5+7ApgJ+B3Rnou2WbXVCJh2WL8mtht7RlyJKfugIx2wXsFguvgd0raNCfK9hngWNh9wzaJewzwOE9rtROSfGqV7xtVskVG8+6D7vvzrKDJDVWCLBz8/XSdewUrzRItK+bnmeXlFMDvFQX5rpXi95k8zH1yoGQAu4ctI9FFYzFcQPvAHQ/sGuTNswACmU6AX2HbfIWZw2QM0kbpv6OQIO4610vOIyc9TS9MK2BnYDhU/OUCQZKXIbKpXODltTJph9+2Cnlc28O2wqcG7SGTtbHiTktO6d0DYVivIRmvzjbZn/gMPfwAbd1n0naOJUdBpqWTmLYLE+raAl2JoZLgIZ+Kenk4bnxbmFjLFwKtCLsdV/T8Nw4S0auNIqTodnKs95KOvkIG7TDcV9bSbDDPAymO/Dz17+3ImDR0jsbaugkvAzC+n62hmCYjFuzjIJOZF7GVxBMkyOqbQWd3Pchjy2bPG4rCIZSuGYhBZ08w+aI2wqCaXJEtS2tk+RuSRts0imYtGAobSsXEtbJw1ESrDscCgumjBHXvLBOjnc4pLZuYcFw2lYuJamT/QFvrLsSSwqmzBDdvKBOnk4DYt1vXFAwtLK1C0rpJHVs4xFskkRNSjBtgDXtC+kkecbXEWySObeQYDW6Vi8roZOjw1hzB8I0W7eEYOr0KjuQ2yeG6B7/4cl9OdjN1p2DDToyvEtBJUJ8capNgTIt1sOmmIaVXqiTvI+Mx8FXsvRsHIE+sudxlo5nbLLuEmxQK4GAfHQIay6BhqZad1oqHZyOOXi16bnynNva61L63jIhy2xVmE2ACMJa+ym7re68FLelFG69nVYPV7JqkL9o2RvsJndeY93WoXD1rzFZLVo1GnardWNiN5cSPdTbGKtRoKtgb8BP77+CSVA8gKHuo4T7Dn1GufFQuPXtkWnhj0Ol0aKhMrRVV1v2Zt1N2TnUMbqVc6+UHXmfKsuOLLx5KRXqCo/2wu/h8V5qN2mlvrAxPtH08vBA9Jy8Z2E3ZedWAHjtB2aalZLtFGyK6ZhXRRvod/LUe0y/TsOewDHqJS9zGvSpBG3ffasnEZCrWb/Cqsyb1I3HlU3g7COhGTSJZUcZevOUjF1lPhsgAU0Km2oO7pMHW6/JQJPDnkkbKfSmZIwtZieStjkPb+NODprFsneJG8lKW5veXH37bVvvhn/JP03zbExvZqaO0dJahjQ+i7nxhFufmXqeOYvb3jfJbtlzPp6lfOqGBtpX7AqKwp7Ts7v2WWPz0WAQhx06MnAsZ4/N5mAPCF3FmmPwapadiOXwp/dn45Hh76lDDroxAbvTJM4MZLOwnbt3APwB9gm16GnMWXZijg5Lr/Bj2cWbs2K1RRWqUb5l8FDdu20AUFVdW09YzoTMmmVps7ZDmPLmLTsnhCB8l3BVV9Awo6+1zPYiA7j94AHiKsPf47/tLfMDnCJ/T2ocWW5Jd/8DJiFz78yw9QcAAAAASUVORK5CYII=",
      "Skip": "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",
      "Not Now": "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"
   }
}

〔4〕 Get Contents of URL https://routinehub.co/api/v1/shortcuts/〔3 Version Dictionary .RH ID〕/versions/latest 　➔ RH Server　» 6 8 11 16 20

〔5〕 Get File at Path 〔3 Version Dictionary .Name〕/Skip.txt from Folder　»
• File: {  "fileLocation": {
      "crossDeviceItemID": "docs.icloud.com:com.apple.CloudDocs/documents/95d6214c39557e3de40d802073a860c04f3aed5b",
      "fileProviderDomainID": "com.apple.CloudDocs.iCloudDriveFileProvider/38059A1C-DC76-4B89-B62F-250A61DBFC73",
      "appContainerBundleIdentifier": "com.apple.shortcuts",
      "relativeSubpath": "",
      "WFFileLocationType": "Shortcuts"
   },
   "filename": "Documents",
   "displayName": "Shortcuts"
}
• FileErrorIfNotFound: false
• ShowFilePicker: false
• GetFolderContents: true

〔6〕 If 〔5 File as Text〕 is not 〔4 RH Server as Dictionary.Version〕

〔7〕 Get Dictionary Value for Version in 〔3 Version Dictionary 〕　»

〔8〕 If 〔7 Dictionary Value as Text〕 is not 〔4 RH Server as Dictionary.Version〕

〔9〕 Base64 Decode 〔3 Version Dictionary .Icons.Update〕

〔10〕 Show Alert A new version of 〔3 Version Dictionary .Name〕 is available to download!

〔11〕 Text　» 14
⬆️ Update ⬆️

A new version of 〔3 Version Dictionary .Name〕 is available to download!

〔3 Version Dictionary .Version〕 ↗ 〔4 RH Server as Dictionary.Version〕   —   〔4 RH Server as Dictionary.Release〕

〔4 RH Server as Dictionary.Notes〕

〔12〕 Text　»
BEGIN:VCARD
VERSION:3.0
N;CHARSET=utf-8:Update;;;;
PHOTO;ENCODING=b:〔3 Version Dictionary .Icons.Update〕
END:VCARD

BEGIN:VCARD
VERSION:3.0
N;CHARSET=utf-8:Skip;;;;
PHOTO;ENCODING=b:〔3 Version Dictionary .Icons.Skip〕
END:VCARD

BEGIN:VCARD
VERSION:3.0
N;CHARSET=utf-8:Not Now;;;;
PHOTO;ENCODING=b:〔3 Version Dictionary .Icons.Not Now〕
END:VCARD

〔13〕 Set Name of 〔12 Text〕 to updateprompt.vcf　»

〔14〕 Choose from List 〔13 Renamed Item as Contact〕　» 15 19
• ChooseFromListActionPrompt: 〔11 Text〕

〔15〕 If 〔14 Chosen Item as Text〕 is Update

〔16〕 Open URL 〔4 RH Server as Dictionary.URL〕
• Show-WFInput: true

〔17〕 Stop This Shortcut

〔18〕 End If

〔19〕 If 〔14 Chosen Item as Text〕 is Skip

〔20〕 Save File 〔4 RH Server as Dictionary.Version〕
• AskWhereToSave: false
• SaveFileOverwrite: true
• FileDestinationPath: 〔3 Version Dictionary .Name〕/Skip.txt

〔21〕 Show Alert This version of 〔3 Version Dictionary .Name〕 has been skipped!
• AlertActionTitle: ✅ Done ✅
• AlertActionCancelButtonShown: false

〔22〕 End If

〔23〕 End If　▵8

〔24〕 End If　▵6

〔25〕 Get File at Path 〔3 Version Dictionary .Name〕/Welcome.pdf from Folder　»
• FileErrorIfNotFound: false

〔26〕 If 〔25 File’s File Size〕 does not have any value

〔27〕 Text　»
<html><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Smart Calendar Reminder: Your Intelligent Schedule Assistant</title><style>
    /* cspell:disable-file */
    /* webkit printing magic: print all background colors */
    html {
        -webkit-print-color-adjust: exact;
    }
    * {
        box-sizing: border-box;
        -webkit-print-color-adjust: exact;
    }
\u{space}\u{space}\u{space}\u{space}
    html,
    body {
        margin: 0;
        padding: 0;
    }
    @media only screen {
        body {
            margin: 2em auto;
            max-width: 900px;
            color: rgb(55, 53, 47);
        }
    }
\u{space}\u{space}\u{space}\u{space}
    body {
        line-height: 1.5;
        white-space: pre-wrap;
    }
\u{space}\u{space}\u{space}\u{space}
    a,
    a.visited {
        color: inherit;
        text-decoration: underline;
    }
\u{space}\u{space}\u{space}\u{space}
    .pdf-relative-link-path {
        font-size: 80%;
        color: #444;
    }
\u{space}\u{space}\u{space}\u{space}
    h1,
    h2,
    h3 {
        letter-spacing: -0.01em;
        line-height: 1.2;
        font-weight: 600;
        margin-bottom: 0;
    }
\u{space}\u{space}\u{space}\u{space}
    .page-title {
        font-size: 2.5rem;
        font-weight: 700;
        margin-top: 0;
        margin-bottom: 0.75em;
    }
\u{space}\u{space}\u{space}\u{space}
    h1 {
        font-size: 1.875rem;
        margin-top: 1.875rem;
    }
\u{space}\u{space}\u{space}\u{space}
    h2 {
        font-size: 1.5rem;
        margin-top: 1.5rem;
    }
\u{space}\u{space}\u{space}\u{space}
    h3 {
        font-size: 1.25rem;
        margin-top: 1.25rem;
    }
\u{space}\u{space}\u{space}\u{space}
    .source {
        border: 1px solid #ddd;
        border-radius: 3px;
        padding: 1.5em;
        word-break: break-all;
    }
\u{space}\u{space}\u{space}\u{space}
    .callout {
        border-radius: 3px;
        padding: 1rem;
    }
\u{space}\u{space}\u{space}\u{space}
    figure {
        margin: 1.25em 0;
        page-break-inside: avoid;
    }
\u{space}\u{space}\u{space}\u{space}
    figcaption {
        opacity: 0.5;
        font-size: 85%;
        margin-top: 0.5em;
    }
\u{space}\u{space}\u{space}\u{space}
    mark {
        background-color: transparent;
    }
\u{space}\u{space}\u{space}\u{space}
    .indented {
        padding-left: 1.5em;
    }
\u{space}\u{space}\u{space}\u{space}
    hr {
        background: transparent;
        display: block;
        width: 100%;
        height: 1px;
        visibility: visible;
        border: none;
        border-bottom: 1px solid rgba(55, 53, 47, 0.09);
    }
\u{space}\u{space}\u{space}\u{space}
    img {
        max-width: 100%;
    }
\u{space}\u{space}\u{space}\u{space}
    @media only print {
        img {
            max-height: 100vh;
            object-fit: contain;
        }
    }
\u{space}\u{space}\u{space}\u{space}
    @page {
        margin: 1in;
    }
\u{space}\u{space}\u{space}\u{space}
    .collection-content {
        font-size: 0.875rem;
    }
\u{space}\u{space}\u{space}\u{space}
    .column-list {
        display: flex;
        justify-content: space-between;
    }
\u{space}\u{space}\u{space}\u{space}
    .column {
        padding: 0 1em;
    }
\u{space}\u{space}\u{space}\u{space}
    .column:first-child {
        padding-left: 0;
    }
\u{space}\u{space}\u{space}\u{space}
    .column:last-child {
        padding-right: 0;
    }
\u{space}\u{space}\u{space}\u{space}
    .table_of_contents-item {
        display: block;
        font-size: 0.875rem;
        line-height: 1.3;
        padding: 0.125rem;
    }
\u{space}\u{space}\u{space}\u{space}
    .table_of_contents-indent-1 {
        margin-left: 1.5rem;
    }
\u{space}\u{space}\u{space}\u{space}
    .table_of_contents-indent-2 {
        margin-left: 3rem;
    }
\u{space}\u{space}\u{space}\u{space}
    .table_of_contents-indent-3 {
        margin-left: 4.5rem;
    }
\u{space}\u{space}\u{space}\u{space}
    .table_of_contents-link {
        text-decoration: none;
        opacity: 0.7;
        border-bottom: 1px solid rgba(55, 53, 47, 0.18);
    }
\u{space}\u{space}\u{space}\u{space}
    table,
    th,
    td {
        border: 1px solid rgba(55, 53, 47, 0.09);
        border-collapse: collapse;
    }
\u{space}\u{space}\u{space}\u{space}
    table {
        border-left: none;
        border-right: none;
    }
\u{space}\u{space}\u{space}\u{space}
    th,
    td {
        font-weight: normal;
        padding: 0.25em 0.5em;
        line-height: 1.5;
        min-height: 1.5em;
        text-align: left;
    }
\u{space}\u{space}\u{space}\u{space}
    th {
        color: rgba(55, 53, 47, 0.6);
    }
\u{space}\u{space}\u{space}\u{space}
    ol,
    ul {
        margin: 0;
        margin-block-start: 0.6em;
        margin-block-end: 0.6em;
    }
\u{space}\u{space}\u{space}\u{space}
    li > ol:first-child,
    li > ul:first-child {
        margin-block-start: 0.6em;
    }
\u{space}\u{space}\u{space}\u{space}
    ul > li {
        list-style: disc;
    }
\u{space}\u{space}\u{space}\u{space}
    ul.to-do-list {
        padding-inline-start: 0;
    }
\u{space}\u{space}\u{space}\u{space}
    ul.to-do-list > li {
        list-style: none;
    }
\u{space}\u{space}\u{space}\u{space}
    .to-do-children-checked {
        text-decoration: line-through;
        opacity: 0.375;
    }
\u{space}\u{space}\u{space}\u{space}
    ul.toggle > li {
        list-style: none;
    }
\u{space}\u{space}\u{space}\u{space}
    ul {
        padding-inline-start: 1.7em;
    }
\u{space}\u{space}\u{space}\u{space}
    ul > li {
        padding-left: 0.1em;
    }
\u{space}\u{space}\u{space}\u{space}
    ol {
        padding-inline-start: 1.6em;
    }
\u{space}\u{space}\u{space}\u{space}
    ol > li {
        padding-left: 0.2em;
    }
\u{space}\u{space}\u{space}\u{space}
    .mono ol {
        padding-inline-start: 2em;
    }
\u{space}\u{space}\u{space}\u{space}
    .mono ol > li {
        text-indent: -0.4em;
    }
\u{space}\u{space}\u{space}\u{space}
    .toggle {
        padding-inline-start: 0em;
        list-style-type: none;
    }
\u{space}\u{space}\u{space}\u{space}
    /* Indent toggle children */
    .toggle > li > details {
        padding-left: 1.7em;
    }
\u{space}\u{space}\u{space}\u{space}
    .toggle > li > details > summary {
        margin-left: -1.1em;
    }
\u{space}\u{space}\u{space}\u{space}
    .selected-value {
        display: inline-block;
        padding: 0 0.5em;
        background: rgba(206, 205, 202, 0.5);
        border-radius: 3px;
        margin-right: 0.5em;
        margin-top: 0.3em;
        margin-bottom: 0.3em;
        white-space: nowrap;
    }
\u{space}\u{space}\u{space}\u{space}
    .collection-title {
        display: inline-block;
        margin-right: 1em;
    }
\u{space}\u{space}\u{space}\u{space}
    .page-description {
        margin-bottom: 2em;
    }
\u{space}\u{space}\u{space}\u{space}
    .simple-table {
        margin-top: 1em;
        font-size: 0.875rem;
        empty-cells: show;
    }
    .simple-table td {
        height: 29px;
        min-width: 120px;
    }
\u{space}\u{space}\u{space}\u{space}
    .simple-table th {
        height: 29px;
        min-width: 120px;
    }
\u{space}\u{space}\u{space}\u{space}
    .simple-table-header-color {
        background: rgb(247, 246, 243);
        color: black;
    }
    .simple-table-header {
        font-weight: 500;
    }
\u{space}\u{space}\u{space}\u{space}
    time {
        opacity: 0.5;
    }
\u{space}\u{space}\u{space}\u{space}
    .icon {
        display: inline-block;
        max-width: 1.2em;
        max-height: 1.2em;
        text-decoration: none;
        vertical-align: text-bottom;
        margin-right: 0.5em;
    }
\u{space}\u{space}\u{space}\u{space}
    img.icon {
        border-radius: 3px;
    }
\u{space}\u{space}\u{space}\u{space}
    .user-icon {
        width: 1.5em;
        height: 1.5em;
        border-radius: 100%;
        margin-right: 0.5rem;
    }
\u{space}\u{space}\u{space}\u{space}
    .user-icon-inner {
        font-size: 0.8em;
    }
\u{space}\u{space}\u{space}\u{space}
    .text-icon {
        border: 1px solid #000;
        text-align: center;
    }
\u{space}\u{space}\u{space}\u{space}
    .page-cover-image {
        display: block;
        object-fit: cover;
        width: 100%;
        max-height: 30vh;
    }
\u{space}\u{space}\u{space}\u{space}
    .page-header-icon {
        font-size: 3rem;
        margin-bottom: 1rem;
    }
\u{space}\u{space}\u{space}\u{space}
    .page-header-icon-with-cover {
        margin-top: -0.72em;
        margin-left: 0.07em;
    }
\u{space}\u{space}\u{space}\u{space}
    .page-header-icon img {
        border-radius: 3px;
    }
\u{space}\u{space}\u{space}\u{space}
    .link-to-page {
        margin: 1em 0;
        padding: 0;
        border: none;
        font-weight: 500;
    }
\u{space}\u{space}\u{space}\u{space}
    p > .user {
        opacity: 0.5;
    }
\u{space}\u{space}\u{space}\u{space}
    td > .user,
    td > time {
        white-space: nowrap;
    }
\u{space}\u{space}\u{space}\u{space}
    input[type="checkbox"] {
        transform: scale(1.5);
        margin-right: 0.6em;
        vertical-align: middle;
    }
\u{space}\u{space}\u{space}\u{space}
    p {
        margin-top: 0.5em;
        margin-bottom: 0.5em;
    }
\u{space}\u{space}\u{space}\u{space}
    .image {
        border: none;
        margin: 1.5em 0;
        padding: 0;
        border-radius: 0;
        text-align: center;
    }
\u{space}\u{space}\u{space}\u{space}
    .code,
    code {
        background: rgba(135, 131, 120, 0.15);
        border-radius: 3px;
        padding: 0.2em 0.4em;
        border-radius: 3px;
        font-size: 85%;
        tab-size: 2;
    }
\u{space}\u{space}\u{space}\u{space}
    code {
        color: #eb5757;
    }
\u{space}\u{space}\u{space}\u{space}
    .code {
        padding: 1.5em 1em;
    }
\u{space}\u{space}\u{space}\u{space}
    .code-wrap {
        white-space: pre-wrap;
        word-break: break-all;
    }
\u{space}\u{space}\u{space}\u{space}
    .code > code {
        background: none;
        padding: 0;
        font-size: 100%;
        color: inherit;
    }
\u{space}\u{space}\u{space}\u{space}
    blockquote {
        font-size: 1.25em;
        margin: 1em 0;
        padding-left: 1em;
        border-left: 3px solid rgb(55, 53, 47);
    }
\u{space}\u{space}\u{space}\u{space}
    .bookmark {
        text-decoration: none;
        max-height: 8em;
        padding: 0;
        display: flex;
        width: 100%;
        align-items: stretch;
    }
\u{space}\u{space}\u{space}\u{space}
    .bookmark-title {
        font-size: 0.85em;
        overflow: hidden;
        text-overflow: ellipsis;
        height: 1.75em;
        white-space: nowrap;
    }
\u{space}\u{space}\u{space}\u{space}
    .bookmark-text {
        display: flex;
        flex-direction: column;
    }
\u{space}\u{space}\u{space}\u{space}
    .bookmark-info {
        flex: 4 1 180px;
        padding: 12px 14px 14px;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
    }
\u{space}\u{space}\u{space}\u{space}
    .bookmark-image {
        width: 33%;
        flex: 1 1 180px;
        display: block;
        position: relative;
        object-fit: cover;
        border-radius: 1px;
    }
\u{space}\u{space}\u{space}\u{space}
    .bookmark-description {
        color: rgba(55, 53, 47, 0.6);
        font-size: 0.75em;
        overflow: hidden;
        max-height: 4.5em;
        word-break: break-word;
    }
\u{space}\u{space}\u{space}\u{space}
    .bookmark-href {
        font-size: 0.75em;
        margin-top: 0.25em;
    }
\u{space}\u{space}\u{space}\u{space}
    .sans { font-family: ui-sans-serif, -apple-system, BlinkMacSystemFont, "Segoe UI Variable Display", "Segoe UI", Helvetica, "Apple Color Emoji", Arial, sans-serif, "Segoe UI Emoji", "Segoe UI Symbol"; }
    .code { font-family: "SFMono-Regular", Menlo, Consolas, "PT Mono", "Liberation Mono", Courier, monospace; }
    .serif { font-family: Lyon-Text, Georgia, ui-serif, serif; }
    .mono { font-family: iawriter-mono, Nitti, Menlo, Courier, monospace; }
    .pdf .sans { font-family: Inter, ui-sans-serif, -apple-system, BlinkMacSystemFont, "Segoe UI Variable Display", "Segoe UI", Helvetica, "Apple Color Emoji", Arial, sans-serif, "Segoe UI Emoji", "Segoe UI Symbol", 'Twemoji', 'Noto Color Emoji', 'Noto Sans CJK JP'; }
    .pdf:lang(zh-CN) .sans { font-family: Inter, ui-sans-serif, -apple-system, BlinkMacSystemFont, "Segoe UI Variable Display", "Segoe UI", Helvetica, "Apple Color Emoji", Arial, sans-serif, "Segoe UI Emoji", "Segoe UI Symbol", 'Twemoji', 'Noto Color Emoji', 'Noto Sans CJK SC'; }
    .pdf:lang(zh-TW) .sans { font-family: Inter, ui-sans-serif, -apple-system, BlinkMacSystemFont, "Segoe UI Variable Display", "Segoe UI", Helvetica, "Apple Color Emoji", Arial, sans-serif, "Segoe UI Emoji", "Segoe UI Symbol", 'Twemoji', 'Noto Color Emoji', 'Noto Sans CJK TC'; }
    .pdf:lang(ko-KR) .sans { font-family: Inter, ui-sans-serif, -apple-system, BlinkMacSystemFont, "Segoe UI Variable Display", "Segoe UI", Helvetica, "Apple Color Emoji", Arial, sans-serif, "Segoe UI Emoji", "Segoe UI Symbol", 'Twemoji', 'Noto Color Emoji', 'Noto Sans CJK KR'; }
    .pdf .code { font-family: Source Code Pro, "SFMono-Regular", Menlo, Consolas, "PT Mono", "Liberation Mono", Courier, monospace, 'Twemoji', 'Noto Color Emoji', 'Noto Sans Mono CJK JP'; }
    .pdf:lang(zh-CN) .code { font-family: Source Code Pro, "SFMono-Regular", Menlo, Consolas, "PT Mono", "Liberation Mono", Courier, monospace, 'Twemoji', 'Noto Color Emoji', 'Noto Sans Mono CJK SC'; }
    .pdf:lang(zh-TW) .code { font-family: Source Code Pro, "SFMono-Regular", Menlo, Consolas, "PT Mono", "Liberation Mono", Courier, monospace, 'Twemoji', 'Noto Color Emoji', 'Noto Sans Mono CJK TC'; }
    .pdf:lang(ko-KR) .code { font-family: Source Code Pro, "SFMono-Regular", Menlo, Consolas, "PT Mono", "Liberation Mono", Courier, monospace, 'Twemoji', 'Noto Color Emoji', 'Noto Sans Mono CJK KR'; }
    .pdf .serif { font-family: PT Serif, Lyon-Text, Georgia, ui-serif, serif, 'Twemoji', 'Noto Color Emoji', 'Noto Serif CJK JP'; }
    .pdf:lang(zh-CN) .serif { font-family: PT Serif, Lyon-Text, Georgia, ui-serif, serif, 'Twemoji', 'Noto Color Emoji', 'Noto Serif CJK SC'; }
    .pdf:lang(zh-TW) .serif { font-family: PT Serif, Lyon-Text, Georgia, ui-serif, serif, 'Twemoji', 'Noto Color Emoji', 'Noto Serif CJK TC'; }
    .pdf:lang(ko-KR) .serif { font-family: PT Serif, Lyon-Text, Georgia, ui-serif, serif, 'Twemoji', 'Noto Color Emoji', 'Noto Serif CJK KR'; }
    .pdf .mono { font-family: PT Mono, iawriter-mono, Nitti, Menlo, Courier, monospace, 'Twemoji', 'Noto Color Emoji', 'Noto Sans Mono CJK JP'; }
    .pdf:lang(zh-CN) .mono { font-family: PT Mono, iawriter-mono, Nitti, Menlo, Courier, monospace, 'Twemoji', 'Noto Color Emoji', 'Noto Sans Mono CJK SC'; }
    .pdf:lang(zh-TW) .mono { font-family: PT Mono, iawriter-mono, Nitti, Menlo, Courier, monospace, 'Twemoji', 'Noto Color Emoji', 'Noto Sans Mono CJK TC'; }
    .pdf:lang(ko-KR) .mono { font-family: PT Mono, iawriter-mono, Nitti, Menlo, Courier, monospace, 'Twemoji', 'Noto Color Emoji', 'Noto Sans Mono CJK KR'; }
    .highlight-default {
        color: rgba(55, 53, 47, 1);
    }
    .highlight-gray {
        color: rgba(120, 119, 116, 1);
        fill: rgba(120, 119, 116, 1);
    }
    .highlight-brown {
        color: rgba(159, 107, 83, 1);
        fill: rgba(159, 107, 83, 1);
    }
    .highlight-orange {
        color: rgba(217, 115, 13, 1);
        fill: rgba(217, 115, 13, 1);
    }
    .highlight-yellow {
        color: rgba(203, 145, 47, 1);
        fill: rgba(203, 145, 47, 1);
    }
    .highlight-teal {
        color: rgba(68, 131, 97, 1);
        fill: rgba(68, 131, 97, 1);
    }
    .highlight-blue {
        color: rgba(51, 126, 169, 1);
        fill: rgba(51, 126, 169, 1);
    }
    .highlight-purple {
        color: rgba(144, 101, 176, 1);
        fill: rgba(144, 101, 176, 1);
    }
    .highlight-pink {
        color: rgba(193, 76, 138, 1);
        fill: rgba(193, 76, 138, 1);
    }
    .highlight-red {
        color: rgba(212, 76, 71, 1);
        fill: rgba(212, 76, 71, 1);
    }
    .highlight-default_background {
        color: rgba(55, 53, 47, 1);
    }
    .highlight-gray_background {
        background: rgba(248, 248, 247, 1);
    }
    .highlight-brown_background {
        background: rgba(244, 238, 238, 1);
    }
    .highlight-orange_background {
        background: rgba(251, 236, 221, 1);
    }
    .highlight-yellow_background {
        background: rgba(251, 243, 219, 1);
    }
    .highlight-teal_background {
        background: rgba(237, 243, 236, 1);
    }
    .highlight-blue_background {
        background: rgba(231, 243, 248, 1);
    }
    .highlight-purple_background {
        background: rgba(248, 243, 252, 1);
    }
    .highlight-pink_background {
        background: rgba(252, 241, 246, 1);
    }
    .highlight-red_background {
        background: rgba(253, 235, 236, 1);
    }
    .block-color-default {
        color: inherit;
        fill: inherit;
    }
    .block-color-gray {
        color: rgba(120, 119, 116, 1);
        fill: rgba(120, 119, 116, 1);
    }
    .block-color-brown {
        color: rgba(159, 107, 83, 1);
        fill: rgba(159, 107, 83, 1);
    }
    .block-color-orange {
        color: rgba(217, 115, 13, 1);
        fill: rgba(217, 115, 13, 1);
    }
    .block-color-yellow {
        color: rgba(203, 145, 47, 1);
        fill: rgba(203, 145, 47, 1);
    }
    .block-color-teal {
        color: rgba(68, 131, 97, 1);
        fill: rgba(68, 131, 97, 1);
    }
    .block-color-blue {
        color: rgba(51, 126, 169, 1);
        fill: rgba(51, 126, 169, 1);
    }
    .block-color-purple {
        color: rgba(144, 101, 176, 1);
        fill: rgba(144, 101, 176, 1);
    }
    .block-color-pink {
        color: rgba(193, 76, 138, 1);
        fill: rgba(193, 76, 138, 1);
    }
    .block-color-red {
        color: rgba(212, 76, 71, 1);
        fill: rgba(212, 76, 71, 1);
    }
    .block-color-default_background {
        color: inherit;
        fill: inherit;
    }
    .block-color-gray_background {
        background: rgba(248, 248, 247, 1);
    }
    .block-color-brown_background {
        background: rgba(244, 238, 238, 1);
    }
    .block-color-orange_background {
        background: rgba(251, 236, 221, 1);
    }
    .block-color-yellow_background {
        background: rgba(251, 243, 219, 1);
    }
    .block-color-teal_background {
        background: rgba(237, 243, 236, 1);
    }
    .block-color-blue_background {
        background: rgba(231, 243, 248, 1);
    }
    .block-color-purple_background {
        background: rgba(248, 243, 252, 1);
    }
    .block-color-pink_background {
        background: rgba(252, 241, 246, 1);
    }
    .block-color-red_background {
        background: rgba(253, 235, 236, 1);
    }
    .select-value-color-uiBlue { background-color: undefined; }
    .select-value-color-pink { background-color: rgba(225, 136, 179, 0.27); }
    .select-value-color-purple { background-color: rgba(168, 129, 197, 0.27); }
    .select-value-color-green { background-color: rgba(123, 183, 129, 0.27); }
    .select-value-color-gray { background-color: rgba(84, 72, 49, 0.15); }
    .select-value-color-transparentGray { background-color: undefined; }
    .select-value-color-translucentGray { background-color: undefined; }
    .select-value-color-orange { background-color: rgba(224, 124, 57, 0.27); }
    .select-value-color-brown { background-color: rgba(210, 162, 141, 0.35); }
    .select-value-color-red { background-color: rgba(244, 171, 159, 0.4); }
    .select-value-color-yellow { background-color: rgba(236, 191, 66, 0.39); }
    .select-value-color-blue { background-color: rgba(93, 165, 206, 0.27); }
    .select-value-color-pageGlass { background-color: undefined; }
    .select-value-color-washGlass { background-color: undefined; }
\u{space}\u{space}\u{space}\u{space}
    .checkbox {
        display: inline-flex;
        vertical-align: text-bottom;
        width: 16;
        height: 16;
        background-size: 16px;
        margin-left: 2px;
        margin-right: 5px;
    }
\u{space}\u{space}\u{space}\u{space}
    .checkbox-on {
        background-image: url("data:image/svg+xml;charset=UTF-8,%3Csvg%20width%3D%2216%22%20height%3D%2216%22%20viewBox%3D%220%200%2016%2016%22%20fill%3D%22none%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%0A%3Crect%20width%3D%2216%22%20height%3D%2216%22%20fill%3D%22%2358A9D7%22%2F%3E%0A%3Cpath%20d%3D%22M6.71429%2012.2852L14%204.9995L12.7143%203.71436L6.71429%209.71378L3.28571%206.2831L2%207.57092L6.71429%2012.2852Z%22%20fill%3D%22white%22%2F%3E%0A%3C%2Fsvg%3E");
    }
\u{space}\u{space}\u{space}\u{space}
    .checkbox-off {
        background-image: url("data:image/svg+xml;charset=UTF-8,%3Csvg%20width%3D%2216%22%20height%3D%2216%22%20viewBox%3D%220%200%2016%2016%22%20fill%3D%22none%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%0A%3Crect%20x%3D%220.75%22%20y%3D%220.75%22%20width%3D%2214.5%22%20height%3D%2214.5%22%20fill%3D%22white%22%20stroke%3D%22%2336352F%22%20stroke-width%3D%221.5%22%2F%3E%0A%3C%2Fsvg%3E");
    }
\u{space}\u{space}\u{space}\u{space}\u{space}\u{space}\u{space}\u{space}
    </style></head><body><article id="1d1604ef-9b4b-8020-9a43-e475a43661a0" class="page sans"><header><h1 class="page-title">Smart Calendar Reminder: Your Intelligent Schedule Assistant</h1><p class="page-description"></p></header><div class="page-body"><figure class="block-color-blue_background callout" style="white-space:pre-wrap;display:flex" id="1d1604ef-9b4b-80b2-927b-ddb2d55d6032"><div style="width:100%">👋 Welcome to Smart Calendar Reminder! This welcome message appears only during your first use.</div></figure><h1 id="1d1604ef-9b4b-80c5-a289-d2aedc69317d" class="block-color-yellow_background">Transform Your Calendar Experience</h1><p id="1d1604ef-9b4b-80f7-ac48-d98bc2a805e6" class="">While iOS Calendar is fantastic for basic scheduling, we all know those built-in reminders can be easy to miss. Adding manual alarms, calculating travel times, and customizing notifications with event details can become tedious and time-consuming. That&#x27;s where Smart Calendar Reminder comes in - your automated solution for intelligent schedule management!</p><h2 id="1d1604ef-9b4b-800f-9752-cb68ca87b1cf" class="">Powerful Features at Your Fingertips</h2><ul id="0ecdba52-af59-410f-9efb-321f8e2d4ba6" class="bulleted-list"><li style="list-style-type:disc">Seamless Calendar Integration - No manual input needed</li></ul><ul id="1d1604ef-9b4b-80b9-8d0d-fe7b3c28115b" class="bulleted-list"><li style="list-style-type:disc">Intelligent Travel Time Calculations powered by Apple Maps</li></ul><ul id="4f6b7aca-7c92-458d-9996-e8f891a3775d" class="bulleted-list"><li style="list-style-type:disc">Spoken Event Details - Hear your schedule clearly</li></ul><ul id="1d1604ef-9b4b-80f5-9fe9-ee50fd3e7795" class="bulleted-list"><li style="list-style-type:disc">Smart Preparation Time Management</li></ul><h2 id="fa2195d7-f08f-4058-a00a-18e2b562b5b2" class="">Smart Location Intelligence</h2><p id="1d1604ef-9b4b-80d3-9799-dd97b27a3773" class="">Our advanced travel time calculation system uses three methods to determine your departure location, in order of priority:</p><ol type="1" id="667c5bbb-f94c-480b-bccd-c84948a3c40f" class="numbered-list" start="1"><li>Custom Departure Address - Add this JSON format in your calendar event notes for specific departure points:<script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/prism.min.js" integrity="sha512-7Z9J3l1+EYfeaPKcGXu3MS/7T+w19WtKQY/n+xzmw4hZhJ9tyYmcUS+4QqAlzhicE5LAfMQSF3iFTK9bQdTxXg==" crossorigin="anonymous" referrerPolicy="no-referrer"></script><link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism.min.css" integrity="sha512-tN7Ec6zAFaVSG3TpNAKtk4DOHNpSwKHxxrsiw4GHKESGPs5njn/0sMCUMl2svV4wo4BK/rCP7juYz+zx+l6oeQ==" crossorigin="anonymous" referrerPolicy="no-referrer"/><pre id="1d1604ef-9b4b-80d1-9d4b-dfb42d06c7b8" class="code"><code class="language-JSON">{
        &quot;Street&quot;: &quot;your departure street&quot;,
        &quot;City&quot;: &quot;your departure city&quot;,
        &quot;State&quot;: &quot;your departure state&quot;,
        &quot;Country&quot;: &quot;your departure country&quot;,
        &quot;Postcode&quot;: &quot;your departure postcode&quot;
    }</code></pre></li></ol><ol type="1" id="1d1604ef-9b4b-80c6-b468-d002dd94b75d" class="numbered-list" start="2"><li>Home Address - Uses your pre-configured home address - perfect for regular schedules</li></ol><ol type="1" id="aba3d861-a84a-48f6-a163-ac441f18b1b3" class="numbered-list" start="3"><li>Current Location - Automatically uses your current position as a fallback</li></ol><figure class="block-color-yellow_background callout" style="white-space:pre-wrap;display:flex" id="1d1604ef-9b4b-80ed-a48d-f0cad158ed60"><div style="width:100%">Smart Travel Planning: The system automatically calculates additional travel time if you&#x27;re not at your departure location!</div></figure><h2 id="efb3fa4e-d05f-4bd3-bd94-b9b991e29ce4" class="">Voice Announcements</h2><ul id="1d1604ef-9b4b-8076-9c50-fcefa4c4903c" class="bulleted-list"><li style="list-style-type:disc">Hourly Schedule Updates: Hear upcoming events at the start of each hour</li></ul><ul id="a0eb2cf6-1637-4d13-94c8-356fd19cd78a" class="bulleted-list"><li style="list-style-type:disc">Smart Reminders: Get spoken alerts at perfectly timed intervals</li></ul><h2 id="1d1604ef-9b4b-80dd-9df1-d8fae003cae6" class="">Intelligent Automation System</h2><p id="15ce45ed-b4fa-4b81-bbd0-2fa585b5c7ce" class="">Our sophisticated automation system ensures you never miss an important event:</p><ul id="1d1604ef-9b4b-80c5-a181-f10518e7e73d" class="bulleted-list"><li style="list-style-type:disc">Daily Planning: 12:00 AM check of your next 24 hours</li></ul><ul id="f54bf941-4703-4cc3-9f61-408f1eed72ee" class="bulleted-list"><li style="list-style-type:disc">Real-time Updates: Hourly recalculation of travel times</li></ul><ul id="1d1604ef-9b4b-800d-b8f8-e85831f4b0ee" class="bulleted-list"><li style="list-style-type:disc">Dynamic Adjustments: Automatic alarm optimization</li></ul><figure class="block-color-gray_background callout" style="white-space:pre-wrap;display:flex" id="1d1604ef-9b4b-8075-9657-ed6135b16d17"><div style="width:100%">Example: For a 10:30 AM meeting with 3 hours total travel time, the system ensures your 7:30 AM alarm is set and continuously optimized based on real-time conditions.</div></figure><h1 id="1d1604ef-9b4b-803a-8fbf-c89822dbca0a" class="block-color-blue">Setup Guide</h1><p id="1d1604ef-9b4b-80a7-ae75-c35724896e17" class="">Let&#x27;s get your Smart Calendar Reminder configured with four essential automations:</p><h2 id="1d1604ef-9b4b-8072-ab56-d0757b2435ef" class="block-color-gray_background">Automation 1: Daily 12:00 AM Check</h2><p id="1d1604ef-9b4b-80c9-9b4a-ee2712524a0d" class="block-color-blue">Step 1. Open Shortcuts and tap [Automation], then tap [+] at the top right corner</p><figure id="1d1604ef-9b4b-8043-b390-ff859889379f" class="image"><a href="gZWfH4Kler-left.png"><img style="width:709.984375px" src="https://i.imgur.com/za6VDMA.jpeg"/></a></figure><p id="1d1604ef-9b4b-804a-9cb1-f487991237c6" class="">Step 2. Tap [Time of Day]</p><figure id="1d1604ef-9b4b-8085-99bb-e3d90115d5dd" class="image"><a href="NDyjdrLrYZ-left.png"><img style="width:709.984375px" src="https://i.imgur.com/z7aJ0OB.jpeg"/></a></figure><p id="1d1604ef-9b4b-806d-a7eb-f652a480cbc6" class="">Step 3. Follow the sequence shown in the image</p><figure id="1d1604ef-9b4b-80cd-9ca5-fc076df31898" class="image"><a href="6KJEFinDm6-left.png"><img style="width:709.984375px" src="https://i.imgur.com/u6C2AR9.jpeg"/></a></figure><p id="1d1604ef-9b4b-8050-b817-f0e2368f43ca" class="block-color-gray_background">Step 4. Tap [New Blank Automation]</p><figure id="1d1604ef-9b4b-8028-b872-eed1a3f6701a" class="image"><a href="XblW6TFHek-left.png"><img style="width:709.984375px" src="https://i.imgur.com/nrTr7Np.jpeg"/></a></figure><p id="b8f8c3cf-7fdc-4a99-b2ba-60e18fef34c7" class="">Step 5. Search for the [Number] action</p><figure id="1d1604ef-9b4b-80d0-ad58-f7a1dc1d1c48" class="image"><a href="4XgUTG3h3E-left.png"><img style="width:709.984375px" src="https://i.imgur.com/F6jogMJ.jpeg"/></a></figure><p id="1d1604ef-9b4b-804e-9fe3-c5b6fc8701fa" class="">Step 6. Input number 1</p><figure id="1d1604ef-9b4b-8056-be0b-c4cfaebae0f7" class="image"><a href="n0XhfXtA03-left.png"><img style="width:709.984375px" src="https://i.imgur.com/HUMvkry.jpeg"/></a></figure><p id="1d1604ef-9b4b-8004-b82f-c5b6250d69c0" class="">Step 7. Search for [Run Shortcut] action</p><figure id="1d1604ef-9b4b-801d-a2d0-e444c55bbdb1" class="image"><a href="BUB7V9ITn8-left.png"><img style="width:709.984375px" src="https://i.imgur.com/IbHA9Jf.jpeg"/></a></figure><p id="1d1604ef-9b4b-8031-a595-d6b268bb5bfc" class="">Step 8. Search and select [Smart Calendar Reminder] in [Run Shortcut] action’s shortcut field.</p><figure id="1d1604ef-9b4b-804c-8be0-d6060e3b5a73" class="image"><a href="b50xsbc2QT-left.png"><img style="width:709.984375px" src="https://i.imgur.com/41WbF2A.png"/></a></figure><p id="1d1604ef-9b4b-805d-96d8-c871e0493bdb" class="block-color-default_background">Step 9. Tap [Done] in the top right corner to complete setup</p><figure id="1d1604ef-9b4b-8024-864a-d9002a94e719" class="image"><a href="LjO11dxjS3-left.png"><img style="width:709.984375px" src="https://i.imgur.com/tmrW6r8.jpeg"/></a></figure><h2 id="1d1604ef-9b4b-8045-9247-e3afd799f547" class="">Automation 2: Hourly Check</h2><p id="1d1604ef-9b4b-809c-900e-e425d52b7a0a" class="">Follow the same steps as Automation 1, with these modifications:</p><ul id="1d1604ef-9b4b-80a8-9819-cfd9961eb078" class="bulleted-list"><li style="list-style-type:disc">In step 3, select all <em><strong><span style="border-bottom:0.05em solid">24 hourly times</span></strong></em></li></ul><ul id="1d1604ef-9b4b-80b3-b766-ed9c851957a5" class="bulleted-list"><li style="list-style-type:disc">In step 6, input number <strong>2</strong> instead of 1</li></ul><h2 id="1d1604ef-9b4b-80ad-a1ea-e247f84f2063" class="">Automation 3: Alarm Trigger</h2><p id="1d1604ef-9b4b-8044-9254-f9d3912d6d6c" class="">Follow the same steps as Automation 1, with these changes:</p><ul id="1d1604ef-9b4b-802e-98b3-c8202e4f8765" class="bulleted-list"><li style="list-style-type:disc">In step 2, tap [<strong>Alarm</strong>] instead of [Time of Day]</li></ul><ul id="1d1604ef-9b4b-80a5-9ccc-d6a2906a3429" class="bulleted-list"><li style="list-style-type:disc">Configure settings as shown:</li></ul><figure id="1d1604ef-9b4b-8014-b883-f88df7a348e1" class="image"><a href="fIF3p3ttC0-left.png"><img style="width:709.984375px" src="https://i.imgur.com/MTyZ3km.png"/></a></figure><ul id="1d1604ef-9b4b-80dc-a6f8-edc73fc17118" class="bulleted-list"><li style="list-style-type:disc">In step 6, input number <strong>3</strong> instead of 1</li></ul><h2 id="1d1604ef-9b4b-8025-9db9-e83367a64cdb" class="">Automation 4: Alarm Stop</h2><p id="1d1604ef-9b4b-805f-afe2-f2de398e695a" class="">Follow the same steps as Automation 1, with these changes:</p><ul id="10aa2fe6-80f0-4850-93c0-4fe14b146190" class="bulleted-list"><li style="list-style-type:disc">In step 2, tap [<strong>Alarm</strong>] instead of [Time of Day]</li></ul><ul id="1d1604ef-9b4b-80aa-baad-e6dd7acf4ad9" class="bulleted-list"><li style="list-style-type:disc">Configure settings as shown:</li></ul><figure id="1d1604ef-9b4b-8068-a490-e601bfafcfe7" class="image"><a href="E24uC2vV2j-left.png"><img style="width:709.984375px" src="https://i.imgur.com/2LbJK9D.png"/></a></figure><ul id="1d1604ef-9b4b-804f-bcba-f64ec9bd67f1" class="bulleted-list"><li style="list-style-type:disc">In step 6, input number <strong>4</strong> instead of 1</li></ul><figure class="block-color-teal_background callout" style="white-space:pre-wrap;display:flex" id="1d1604ef-9b4b-8031-8b44-ddb00fab6dee"><div style="width:100%">🎉 Congratulations! Once you&#x27;ve completed these automations, your Smart Calendar Reminder is ready to revolutionize your schedule management!</div></figure></div></article><span class="sans" style="font-size:14px;padding-top:2em"></span></body></html>

〔28〕 Set Name of 〔27 Text〕 to Welcome.html　» 29 30

〔29〕 Show Web View at 〔28 Renamed Item〕

〔30〕 Make PDF from 〔28 Renamed Item〕　»

〔31〕 Save File 〔30 PDF〕
• AskWhereToSave: false
• SaveFileOverwrite: true
• FileDestinationPath: 〔3 Version Dictionary .Name〕/Welcome.pdf

〔32〕 End If　▵26

〔33〕 Dictionary 　➔ menus　»
{  "mainMenu": {
      "Setup": {
         "title": "Setup",
         "sub": "Set Personal Preferences",
         "icon": "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"
      },
      "Change": {
         "title": "Change",
         "sub": "Change Personal Preferences",
         "icon": "iVBORw0KGgoAAAANSUhEUgAAAHsAAAB7CAYAAABUx/9/AAAAAXNSR0IArs4c6QAACAJJREFUeF7tnbt23DYQhndrVU7h3klnp3TvuMgjOK8j6XXiR0gRqXeZuEvcu4gr1RsND7GmuCAug39mAGp4jo8lLQEQ880NIBY4HnZ0nU6nXxbdoZ/frbq3/Dx8dLe6537+/e54PK4/G1pax5GffoZ7PfchBhLVPYI+KcHxeLxBVapdz1CwFeHmOAwJv3vYC8CSlpuDm/v89nA4dO/2u4V9Op3IXVLM7RlyTAlue3X1XcEexIpzVh4+7w56F7B3BnmtDOTiu0jsTGHvHPIFdGv3bgZ7jslh2FTqGvdwn5l7V4f9zKw5pZzq0FVhn06nPwfMriW9iSpwFdizNRNov+ISUIEuDvsZx+ZaxRYHLgbbY3Mt6+l+moV7zypZUEgEtrvtAsmnb3kv8cYNDttBN4MOFcCBQ2F7fIaBFplyhcF20HDQcOAQ2A5aDDQUeDNsbdDfPj9MAvj298PhxZurw4vXV+KSDg1Q2/98/Hr44fXV4ccPL9XanRtqHpo1wdZOxv79+HUS9vIi4G+vX4kLPtb2Tx9eakNvStrYsLVBk1V9uvkShSot9Bjo8CBvb16pepfHtXBs4C2wT+LmtGggJXBp6/50+2UKG7FLWtE2ZMwCzoJt8UIjBZsE8uvvP4vp3h+//bVZt7SibTTMmmmrhq2dkIXOpqzrGcKmLlcnbFWwrUBTzxx21Mar3HktbNU4veyew4479OPjWqfS+FV8I9qqw3g5DKW2EqDSjvR8H8V1GpvTJTA3UBy/i2AjQYeJiT3DzSkeZfBg6EXuvBQ2xH3nMuqckPb2OXDYVmTdWdgoq3bQcVUFAs9m5yWwm63aQad9EnAWLunOk7BRVp2alNiba+b2BwQ86c43YaNAu1WX4QfOxG1atzjsEqumjuauXPZeUkeuja3PW9vOlQ/tgqZ8N607Bbs5VqfeVIUOliYoo0+qlHg4kCsn0UatOwpby4WXgt7LdGkOeI08Ml4qat1bsJutmh4m17katzW6ZQc4Wm/QYtOoF7BRVp2zxtqExBI28n12qq5amWSs+2LcHYMNsWo07FT8BwvpQoaDwr5w5U9go5caobV4qz5grIsay5aicZQMLZOMdT9J1NawadMa2Bfk0R1bv0QJb5M0Vnqu8w9qe3qhUbm6FS2TmkRtDRvmwtFufN0pAl8raO44e1kuvJrltq0Mm/ZyOTM+/4BMzIJwtDuGgCldh4FMzq7cYUvTXdVvAPucqC1hw7fAMOiYMrr65gxkEoUNjdfSMbtezH2UMIB9jtuTZUvEa4cdVy4L2GGu3GErG7wR7MmVB9jweO2W3ZVlP4ENj9c52MoGNURznBm50o7ReDtYtsMulZrgfZKwp7iNng9fyiL3pkpQbkNWrQEbOh/usPl65rD5shuupDDsW3LjIpm4J2j1uiYM+85h1zMRK7Fr2JLLf8WINFacWla8W9jCHWtEIlfcaAaNOjS5cZExdi5mO+xLhZKWicOWM+JozYaWfXDYDhsjAUstxvQAX4ulTNyy8TyTNVrDNplUkU5GlBkWN2cI225SxWGrZ+MOu9gkQTe6ZYMEOUI11rBNXnG6G1d349NbLzqMXOQ0PUMt7tbIDWXisLW1whC23bIkd+O6btx0waHDtoMtMrFi6LK0vXNxe0Yy8S8JFBMC3pjaVEhwB4lpf5WwblwkIzfSYiAamapichEETZ34Dpt+k1jE4LC3lYUsnK7/Pj+wtuuoUcPwZRD/fnaN1Ma817+MPyY31lOf90NbWjY8brsbZ8FBF7qELRG3HTaaW3190d2SZtjQ8bbDrocDLvFkS8uhdjgEC+I5VLe9wyHaut2ybfVpvTPxMLsS24rte+u0w2HpyQDcZwZtz5nflRiZqO3JsnN7p3PBbpVrPVWgaL9xpCvfC2xt0EEBajbfXylN9IyvrZMEIGPuvcC22i6EO1++dRhr6kCY5mGYw25z7kzYmyf3pWA3W7fDHgQ2InbvBXbJkVVtWC9Lo62aWsgdz9hk3XuBTYIKryTDed9ouMv6uEu2cgenlxy8yl5XvifYSxjhNAEJ4NwTCsIChdQzZWG3uPNcFtswtJCQ89B15qw668ZD77lfJMjFOq67GpqKzMNnz84uhs217hxsqnc6QefNlcnhLjJyV6+1CHQVbO40askpu+riSTQ4mvKVuO/Q3aKY3eLOraYaWxWodW66tf3C8sVWXW3Zs3VXZ+e5RK2wY6q3DZBPVIFmwebE75LYrUqysLGORwubB6I3D73WFXCy8xGB9wq7Jk4v2VXF7GVBDnAqP4pLZ05XFvqMptuip96X1MiGPbtz1nRq70lbx/GaDZods1cWXp2wLcsvl/nQV2GsL87JuUrPXJ2QrZ+rybIXQ7Im4ErCGrmZZtAQy3bg4joEAQ2FzR2Di4tq7AZgoOGwW5K2sZmIPH1TMhZ7IkjMRozDRcQ1bqVw0CKWvcrUmxctjsuL9eR38yIE+h9+iVg2cmgG73G/FULjs5obj7h1H5qllUzEba+bFLdst/IkZdYLDa5zUoXtw7MzJtHYvKUM6rDDgzyeMPVcXbt4bO4O9jOEbmLNS/Bmlh2J5fSna2486ricOeQgmy5g7zSJ6wZyt7AHd+8E+J72Ce3R03Rn2ZExOi2QoH89u/jurNhsUgWl5XMGT9W9mxUAVXVtPWE6kzJrkanN2gcqub97y051QhH+kHBNZ9BKtK/1nnkhJLn94AGWVYa/L/+2tsx7Omv6nNQMZLk52f0PAc3Z/svaLKkAAAAASUVORK5CYII="
      },
      "View": {
         "title": "View",
         "sub": "View Personal Preferences or Automations Setup Inctructions",
         "icon": "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"
      }
   }
}

〔34〕 Get Dictionary from 〔33 menus.mainMenu〕　»

〔35〕 Repeat with Each in 〔34 Dictionary〕

〔36〕 Get Dictionary All Values in 〔Repeat Item as Dictionary〕 　➔ Options　»
• DictionaryKey: 〔Repeat Item as Dictionary’s Keys〕.title

〔37〕 Repeat[2] with Each in 〔36 Options as Dictionary〕

〔38〕 Text
BEGIN:VCARD
VERSION:3.0
N;CHARSET=utf-8:〔Repeat Item 2 as Dictionary.title〕;
ORG:〔Repeat Item 2 as Dictionary.sub〕;
PHOTO;ENCODING=b:〔Repeat Item 2 as Dictionary.icon〕;
END:VCARD

〔39〕 End Repeat[2] with Each

〔40〕 End Repeat with Each　»

〔41〕 Text　»
〔40 Repeat Results〕

〔42〕 Set Name of 〔41 Text〕 to mainMenu.vcf　»

〔43〕 Get Contacts from 〔42 Renamed Item〕　»

〔44〕 Choose from List 〔43 Contacts〕　» 45 78 83
• ChooseFromListActionPrompt: ☀️Welcome to Smart Calendar Reminder☀️

〔45〕 If 〔44 Selected Item’s Name〕 is Setup

〔46〕 Get File at Path 〔3 Version Dictionary .Name〕/aboutme.txt from Folder　»
• FileErrorIfNotFound: false

〔47〕 If 〔46 File’s File Size〕 does not have any value

〔48〕 Comment
All the information is stored in iCloud. The shortcut isn’t collecting anything.

〔49〕 Text　»
Choose Travel Time Calculation Method

1️⃣ Notes 🗓️ / Current 📍\u000D
Uses the address in the Calendar event Notes if available (routing via Notes if you're not already there), otherwise calculates directly from your current location to the event.\u000D
\u000D
2️⃣ Notes 🗓️ / Home 🏡\u000D
Uses the Notes address if available (same as 1️⃣), but if Notes are empty, routes via your home address if you're not already there, or directly from home if you are.\u000D
\u000D

〔50〕 Choose from Menu
• MenuPrompt: 〔49 Text〕
• MenuItems: [1️⃣ Notes 🗓️ / Current 📍,
2️⃣ Notes 🗓️ / Home 🏡]

〔51〕 Menu Item 1️⃣ Notes 🗓️ / Current 📍

〔52〕 Dictionary　»
{  "state": "\"\"",
   "street": "\"\"",
   "city": "\"\"",
   "country": "\"\"",
   "postcode": "\"\""
}

〔53〕 Set Variable HomeAddress to 〔52 Dictionary〕

〔54〕 Menu Item 2️⃣ Notes 🗓️ / Home 🏡

〔55〕 Text　»
Please provide your home address for accurate travel time calculations via Apple Maps.

〔56〕 Text　»
<!DOCTYPE html>
<html>
<head>
    <title>Address Collector</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        /* Modern CSS styling */
        body {
            font-family: 'Segoe UI', sans-serif;
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            padding: 20px;
            min-height: 100vh;
        }

        .form-container {
            max-width: 500px;
            margin: 20px auto;
            background: white;
            padding: 25px;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        }

        h2 {
            color: #2c3e50;
            text-align: center;
            margin-bottom: 25px;
        }

        .form-group {
            margin-bottom: 20px;
        }

        label {
            display: block;
            margin-bottom: 8px;
            color: #34495e;
            font-weight: 500;
        }

        input {
            width: 100%;
            padding: 12px;
            margin: 0; /* Equal left/right margins */
            border: 2px solid #e0e0e0;
            border-radius: 8px;
            font-size: 16px;
            transition: border-color 0.3s ease;
            box-sizing: border-box; /* Ensures padding doesn't affect width */
        }

        input:focus {
            outline: none;
            border-color: #3498db;
            box-shadow: 0 0 8px rgba(52, 152, 219, 0.2);
        }

        button {
            background: #3498db;
            color: white;
            padding: 15px 30px;
            border: none;
            border-radius: 8px;
            font-size: 16px;
            cursor: pointer;
            width: 100%;
            transition: background 0.3s ease;
        }

        button:hover {
            background: #2980b9;
        }

        /* New success message styling */
        .success-message {
            display: none;
            background: #e8f5e9;
            color: #2e7d32;
            padding: 20px;
            border-radius: 8px;
            margin-top: 20px;
            text-align: center;
        }

        .success-message.show {
            display: block;
        }
    </style>
</head>
<body>
    <div class="form-container">
        <h2>〔55 Text〕</h2>
        <form id="addressForm">
            <div class="form-group">
                <label>Street Address</label>
                <input type="text" id="street" placeholder="" required>
            </div>

            <div class="form-group">
                <label>City</label>
                <input type="text" id="city" placeholder="" required>
            </div>

            <div class="form-group">
                <label>State/Province</label>
                <input type="text" id="state" placeholder="" required>
            </div>

            <div class="form-group">
                <label>Country/Region</label>
                <input type="text" id="country" placeholder="" required>
            </div>

            <div class="form-group">
                <label>Postal Code</label>
                <input type="text" id="postcode" placeholder="" required>
            </div>

            <button type="button" onclick="sendToShortcut()">Submit Address</button>
        </form>

        <!-- Success message container -->
        <div class="success-message" id="successMessage">
            <p>Data collected successfully!</p>
        </div>
    </div>

<script>
function sendToShortcut() {
  const addressData = {
    street: document.getElementById('street').value,
    city: document.getElementById('city').value,
    state: document.getElementById('state').value,
    country: document.getElementById('country').value,
    postcode: document.getElementById('postcode').value
  };
\u{space}\u{space}
  // Copy data to clipboard
  navigator.clipboard.writeText(JSON.stringify(addressData));
\u{space}\u{space}
  // Show success message and hide form
  document.getElementById('addressForm').style.display = 'none';
  document.getElementById('successMessage').classList.add('show');
}
</script>
</body>
</html>

〔57〕 Set Name of 〔56 Text〕 to Address.html　»

〔58〕 Show Web View at 〔57 Renamed Item〕

〔59〕 Get Clipboard　»

〔60〕 Get Dictionary from 〔59 Clipboard〕　»

〔61〕 Set Variable HomeAddress to 〔60 Dictionary〕

〔62〕 End Menu　▵54

〔63〕 List　» 65
[Driving,
Walking,
Transit,
Biking]

〔64〕 Text　»
Select Travel Method (It will apply to all the events)

〔65〕 Choose from List 〔63 List〕 　➔ Travel Method Selected　»
• ChooseFromListActionPrompt: 〔64 Text〕

〔66〕 Set Variable TravelMethod to 〔65 Travel Method Selected〕

〔67〕 Text　»
Besides travel time, how many Extra Minutes Needed (e.g., '15 mins buffer')

〔68〕 Ask for Number Input 　➔ Extra Time Needed　»
• AskActionPrompt: 〔67 Text〕
• AskActionAllowsNegativeNumbers: false
• AskActionAllowsDecimalNumbers: false

〔69〕 Set Variable ExtraTime to 〔68 Extra Time Needed〕

〔70〕 Dictionary　»
{  "HomeAddress": "〔HomeAddress as Dictionary〕",
   "TravelMethod": "〔TravelMethod〕",
   "ExtraTime": "〔ExtraTime〕"
}

〔71〕 Text　»
〔70 Dictionary〕

〔72〕 Save File 〔71 Text〕
• Folder: {  "fileLocation": {
      "crossDeviceItemID": "docs.icloud.com:iCloud.is.workflow.my.workflows/documents/e51c720424ec90d3260ccd6f241343baea15b7f3",
      "fileProviderDomainID": "com.apple.CloudDocs.iCloudDriveFileProvider/46CA22EA-49CD-4A1D-9512-F48B36AA64B5",
      "appContainerBundleIdentifier": "com.apple.shortcuts",
      "relativeSubpath": "",
      "WFFileLocationType": "Shortcuts"
   },
   "filename": "Documents",
   "displayName": "Shortcuts"
}
• AskWhereToSave: false
• SaveFileOverwrite: true
• FileDestinationPath: 〔3 Version Dictionary .Name〕/aboutme.txt

〔73〕 Otherwise　▵47

〔74〕 Show Alert You have set up. If you want to modify, please tap [Change] instead.
• AlertActionCancelButtonShown: false

〔75〕 Run Shortcut Smart Calendar Reminder
• Workflow: {  "workflowIdentifier": "5A2BC55E-C195-4C6C-93E9-725F782CDD1B",
   "isSelf": true,
   "workflowName": "Smart Calendar Reminder"
}

〔76〕 End If

〔77〕 End If　▵45

〔78〕 If 〔44 Selected Item’s Name〕 is Change

〔79〕 Delete Files {  "fileLocation": {
      "crossDeviceItemID": "docs.icloud.com:iCloud.is.workflow.my.workflows/9F38EF56-AD52-45E7-8B63-200CBFF0E713/a708662a11276f4b1fa48be3c50990fd13a4ccdf",
      "fileProviderDomainID": "com.apple.CloudDocs.iCloudDriveFileProvider/F1A50FD9-D64E-426C-8EB2-9C6216034396",
      "appContainerBundleIdentifier": "com.apple.systemactions",
      "relativeSubpath": "Smart Calendar Reminder/aboutme.txt",
      "WFFileLocationType": "Shortcuts"
   },
   "filename": "aboutme.txt",
   "displayName": "aboutme.txt"
}
• DeleteImmediatelyDelete: true

〔80〕 Show Alert Your preferences are deleted. Please choose [Setup] from main menu to set up again.
• AlertActionCancelButtonShown: false

〔81〕 Run Shortcut Smart Calendar Reminder
• Workflow: {  "workflowIdentifier": "5A2BC55E-C195-4C6C-93E9-725F782CDD1B",
   "isSelf": true,
   "workflowName": "Smart Calendar Reminder"
}

〔82〕 End If

〔83〕 If 〔44 Selected Item’s Name〕 is View

〔84〕 Choose from Menu
• MenuItems: [Automations Setup Instructions,
Personal Preferences]

〔85〕 Menu Item Automations Setup Instructions

〔86〕 Open File {  "fileLocation": {
      "crossDeviceItemID": "docs.icloud.com:iCloud.is.workflow.my.workflows/E4DA358A-5903-4CC2-BBC8-FD498ED6EDB3/d459a12be98fb7e83aed794c6d0dcf774ef5d814",
      "fileProviderDomainID": "com.apple.CloudDocs.iCloudDriveFileProvider/F1A50FD9-D64E-426C-8EB2-9C6216034396",
      "appContainerBundleIdentifier": "com.apple.systemactions",
      "relativeSubpath": "Smart Calendar Reminder/Welcome.pdf",
      "WFFileLocationType": "Shortcuts"
   },
   "filename": "Welcome.pdf",
   "displayName": "Welcome.pdf"
}

〔87〕 Menu Item Personal Preferences

〔88〕 Open File {  "fileLocation": {
      "crossDeviceItemID": "docs.icloud.com:iCloud.is.workflow.my.workflows/81672621-501F-4225-8CDA-11AAF2112D81/06302c85b44ba41f3258ff7d1669b31859a28556",
      "fileProviderDomainID": "com.apple.CloudDocs.iCloudDriveFileProvider/F1A50FD9-D64E-426C-8EB2-9C6216034396",
      "appContainerBundleIdentifier": "com.apple.systemactions",
      "relativeSubpath": "Smart Calendar Reminder/aboutme.txt",
      "WFFileLocationType": "Shortcuts"
   },
   "filename": "aboutme.txt",
   "displayName": "aboutme.txt"
}

〔89〕 End Menu

〔90〕 End If　▵83

〔91〕 Otherwise　▵0

〔92〕 If 〔Shortcut Input as Number〕 is 1

〔93〕 Comment
*Revolutionizing event management by integrating calendar data with intelligent automation:

Voice announcements for upcoming events

Dynamic alarm calculation (travel + prep time)

Calendar-driven scheduling system
Eliminates manual reminders and ensures perfect timing synchronization*

〔94〕 Get File at Path Smart Calendar Reminder/aboutme.txt from Folder　»
• FileErrorIfNotFound: false

〔95〕 Get Dictionary from 〔94 File〕　» 96 99 100

〔96〕 Get Dictionary from 〔95 Dictionary.HomeAddress〕　»

〔97〕 Text　»
〔96 Dictionary.street〕 〔96 Dictionary.city〕 〔96 Dictionary.state〕 〔96 Dictionary.postcode〕 〔96 Dictionary.country〕\u{space}

〔98〕 Set Variable HomeAddress to 〔97 Text〕

〔99〕 Set Variable TravelMethod to 〔95 Dictionary.TravelMethod〕

〔100〕 Get Dictionary Value for ExtraTime in 〔95 Dictionary〕　»

〔101〕 Get Numbers from 〔100 Dictionary Value〕　»

〔102〕 Set Variable ExtraTime to 〔101 Numbers〕

〔103〕 Find Calendar Events All Calendar Events where　» 104 105
• ContentItemSortProperty: Start Date
• ContentItemSortOrder: Oldest First
• ContentItemFilter: • All the following are true
Start Date is in the next 1 days
Is Not All Day
Canceled is {"Bool":false}

〔104〕 If 〔103 Calendar Events〕 has any value

〔105〕 Repeat with Each in 〔103 Calendar Events〕

〔106〕 If 〔Repeat Item’s Location〕 has any value

〔107〕 Get Current Location　» 119 125 211
• Accuracy: Best

〔108〕 Comment
*To specify event-specific departure locations:

1. Create calendar event notes with JSON structure:
{
“Street”: “your departure street”,
“City”: “your departure city”,
“State”: “your departure state”,
“Country”: “your departure country”,
“Postcode”: “your departure postcode”
}
2. System prioritizes these over default locations*

〔109〕 If All are true　〔Repeat Item’s Notes〕 has any value　〔Repeat Item’s Notes〕 begins with {　〔Repeat Item’s Notes〕 ends with }

〔110〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY

〔111〕 Get Dictionary from 〔Repeat Item’s Notes〕 　➔ Notes Address Dictionary　» 112 113 114 115 116

〔112〕 Set Variable Calendar_Notes_Street to 〔111 Notes Address Dictionary.Street〕

〔113〕 Set Variable Calendar_Notes_City to 〔111 Notes Address Dictionary.City〕

〔114〕 Set Variable Calendar_Notes_State to 〔111 Notes Address Dictionary.State〕

〔115〕 Set Variable Calendar_Notes_Region to 〔111 Notes Address Dictionary.Country〕

〔116〕 Set Variable Calendar_Notes_ZIP_Code to 〔111 Notes Address Dictionary.Postcode〕

〔117〕 Text　»
〔Calendar_Notes_Street〕 〔Calendar_Notes_City〕 〔Calendar_Notes_State〕 〔Calendar_Notes_ZIP_Code〕 〔Calendar_Notes_Region〕

〔118〕 Set Variable NotesAddressString to 〔117 Text〕

〔119〕 If All are true　〔107 Current Location’s Street〕 is 〔Calendar_Notes_Street〕　〔107 Current Location’s City〕 is 〔Calendar_Notes_City〕　〔107 Current Location’s State〕 is 〔Calendar_Notes_State〕　〔107 Current Location’s Country〕 is 〔Calendar_Notes_Region〕　〔107 Current Location’s ZIP Code〕 is 〔Calendar_Notes_ZIP_Code〕

〔120〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY -> CALENDAR EVENT ADDRESS IS THE SAME WITH CURRENT LOCATION

〔121〕 Number 0　»

〔122〕 Set Variable CurrentToDeparture to 〔121 Number〕

〔123〕 Otherwise

〔124〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY -> CALENDAR EVENT ADDRESS IS NOT THE SAME WITH CURRENT LOCATION

〔125〕 Get 〔TravelMethod〕 Time　»
• GetDirectionsCustomLocation: 〔107 Current Location〕
• Destination: 〔NotesAddressString〕

〔126〕 Set Variable TravelTimeString to 〔125 Travel Time〕

〔127〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔128〕 Set Variable MatchString to 〔127 Matches〕

〔129〕 Count Items in 〔MatchString〕　»

〔130〕 If 〔129 Count〕 is 1

〔131〕 Get First Item from List 〔MatchString〕　»

〔132〕 Set Variable TravelDays to 〔131 Item from List〕

〔133〕 Otherwise

〔134〕 Number 0　»

〔135〕 Set Variable TravelDays to 〔134 Number〕

〔136〕 End If

〔137〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔138〕 Set Variable MatchString to 〔137 Matches〕

〔139〕 Count Items in 〔MatchString〕　»

〔140〕 If 〔139 Count〕 is 1

〔141〕 Get First Item from List 〔MatchString〕　»

〔142〕 Set Variable TravelHours to 〔141 Item from List〕

〔143〕 Otherwise

〔144〕 Number 0　»

〔145〕 Set Variable TravelHours to 〔144 Number〕

〔146〕 End If

〔147〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔148〕 Set Variable MatchString to 〔147 Matches〕

〔149〕 Count Items in 〔MatchString〕　»

〔150〕 If 〔149 Count〕 is 1

〔151〕 Get First Item from List 〔MatchString〕　»

〔152〕 Set Variable TravelMinutes to 〔151 Item from List〕

〔153〕 Otherwise

〔154〕 Number 0　»

〔155〕 Set Variable TravelMinutes to 〔154 Number〕

〔156〕 End If

〔157〕 Calculate 〔TravelDays〕 × 1440　» 159

〔158〕 Calculate 〔TravelHours〕 × 60　»

〔159〕 Calculate 〔158 Calculation Result〕 + 〔157 Calculation Result〕　»

〔160〕 Calculate 〔159 Calculation Result〕 + 〔TravelMinutes〕　»

〔161〕 Set Variable CurrentToDeparture to 〔160 Calculation Result〕

〔162〕 End If　▵123

〔163〕 Get 〔TravelMethod〕 Time 　➔ DepartureToDestination　»
• GetDirectionsCustomLocation: 〔NotesAddressString〕
• Destination: 〔Repeat Item’s Location〕

〔164〕 Set Variable TravelTimeString to 〔163 DepartureToDestination〕

〔165〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔166〕 Set Variable MatchString to 〔165 Matches〕

〔167〕 Count Items in 〔MatchString〕　»

〔168〕 If 〔167 Count〕 is 1

〔169〕 Get First Item from List 〔MatchString〕　»

〔170〕 Set Variable TravelDays to 〔169 Item from List〕

〔171〕 Otherwise

〔172〕 Number 0　»

〔173〕 Set Variable TravelDays to 〔172 Number〕

〔174〕 End If

〔175〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔176〕 Set Variable MatchString to 〔175 Matches〕

〔177〕 Count Items in 〔MatchString〕　»

〔178〕 If 〔177 Count〕 is 1

〔179〕 Get First Item from List 〔MatchString〕　»

〔180〕 Set Variable TravelHours to 〔179 Item from List〕

〔181〕 Otherwise

〔182〕 Number 0　»

〔183〕 Set Variable TravelHours to 〔182 Number〕

〔184〕 End If

〔185〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔186〕 Set Variable MatchString to 〔185 Matches〕

〔187〕 Count Items in 〔MatchString〕　»

〔188〕 If 〔187 Count〕 is 1

〔189〕 Get First Item from List 〔MatchString〕　»

〔190〕 Set Variable TravelMinutes to 〔189 Item from List〕

〔191〕 Otherwise

〔192〕 Number 0　»

〔193〕 Set Variable TravelMinutes to 〔192 Number〕

〔194〕 End If

〔195〕 Calculate 〔TravelDays〕 × 1440　» 197

〔196〕 Calculate 〔TravelHours〕 × 60　»

〔197〕 Calculate 〔196 Calculation Result〕 + 〔195 Calculation Result〕　»

〔198〕 Calculate 〔197 Calculation Result〕 + 〔TravelMinutes〕　»

〔199〕 Calculate 〔198 Calculation Result〕 + 〔CurrentToDeparture〕　»

〔200〕 Set Variable TravelTime to 〔199 Calculation Result〕

〔201〕 Otherwise　▵109

〔202〕 Comment
CALENDER EVENT NOTES IS BLANK

〔203〕 Get Dictionary from 〔HomeAddress〕 　➔ Home Address Dictionary　» 204 205 206 207 208

〔204〕 Get Dictionary Value for street in 〔203 Home Address Dictionary〕 　➔ home_Street　» 209 211

〔205〕 Get Dictionary Value for city in 〔203 Home Address Dictionary〕 　➔ home_City　» 209 211

〔206〕 Get Dictionary Value for state in 〔203 Home Address Dictionary〕 　➔ home_State　» 209 211

〔207〕 Get Dictionary Value for country in 〔203 Home Address Dictionary〕 　➔ home_Country　» 209 211

〔208〕 Get Dictionary Value for postcode in 〔203 Home Address Dictionary〕 　➔ home_Postcode　» 209 211

〔209〕 If All are true　〔204 home_Street〕 has any value　〔205 home_City〕 has any value　〔206 home_State〕 has any value　〔207 home_Country〕 has any value　〔208 home_Postcode〕 has any value

〔210〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED

〔211〕 If All are true　〔107 Current Location’s Street〕 is 〔204 home_Street〕　〔107 Current Location’s City〕 is 〔205 home_City〕　〔107 Current Location’s State〕 is 〔206 home_State〕　〔107 Current Location’s Country〕 is 〔207 home_Country〕　〔107 Current Location’s ZIP Code〕 is 〔208 home_Postcode〕

〔212〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED -> HOME ADDRESS IS THE SAME WITH CURRENT LOCATION

〔213〕 Number 0　»

〔214〕 Set Variable CurrentToDeparture to 〔213 Number〕

〔215〕 Otherwise

〔216〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED -> HOME ADDRESS IS NOT THE SAME WITH CURRENT LOCATION

〔217〕 Get 〔TravelMethod〕 Time　»
• Destination: 〔HomeAddress〕

〔218〕 Set Variable TravelTimeString to 〔217 Travel Time〕

〔219〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔220〕 Set Variable MatchString to 〔219 Matches〕

〔221〕 Count Items in 〔MatchString〕　»

〔222〕 If 〔221 Count〕 is 1

〔223〕 Get First Item from List 〔MatchString〕　»

〔224〕 Set Variable TravelDays to 〔223 Item from List〕

〔225〕 Otherwise

〔226〕 Number 0　»

〔227〕 Set Variable TravelDays to 〔226 Number〕

〔228〕 End If

〔229〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔230〕 Set Variable MatchString to 〔229 Matches〕

〔231〕 Count Items in 〔MatchString〕　»

〔232〕 If 〔231 Count〕 is 1

〔233〕 Get First Item from List 〔MatchString〕　»

〔234〕 Set Variable TravelHours to 〔233 Item from List〕

〔235〕 Otherwise

〔236〕 Number 0　»

〔237〕 Set Variable TravelHours to 〔236 Number〕

〔238〕 End If

〔239〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔240〕 Set Variable MatchString to 〔239 Matches〕

〔241〕 Count Items in 〔MatchString〕　»

〔242〕 If 〔241 Count〕 is 1

〔243〕 Get First Item from List 〔MatchString〕　»

〔244〕 Set Variable TravelMinutes to 〔243 Item from List〕

〔245〕 Otherwise

〔246〕 Number 0　»

〔247〕 Set Variable TravelMinutes to 〔246 Number〕

〔248〕 End If

〔249〕 Calculate 〔TravelDays〕 × 1440　» 251

〔250〕 Calculate 〔TravelHours〕 × 60　»

〔251〕 Calculate 〔250 Calculation Result〕 + 〔249 Calculation Result〕　»

〔252〕 Calculate 〔251 Calculation Result〕 + 〔TravelMinutes〕　»

〔253〕 Set Variable CurrentToDeparture to 〔252 Calculation Result〕

〔254〕 End If　▵215

〔255〕 Get 〔TravelMethod〕 Time 　➔ DepartureToDestination　»
• GetDirectionsCustomLocation: 〔HomeAddress〕
• Destination: 〔Repeat Item’s Location〕

〔256〕 Set Variable TravelTimeString to 〔255 DepartureToDestination〕

〔257〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔258〕 Set Variable MatchString to 〔257 Matches〕

〔259〕 Count Items in 〔MatchString〕　»

〔260〕 If 〔259 Count〕 is 1

〔261〕 Get First Item from List 〔MatchString〕　»

〔262〕 Set Variable TravelDays to 〔261 Item from List〕

〔263〕 Otherwise

〔264〕 Number 0　»

〔265〕 Set Variable TravelDays to 〔264 Number〕

〔266〕 End If

〔267〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔268〕 Set Variable MatchString to 〔267 Matches〕

〔269〕 Count Items in 〔MatchString〕　»

〔270〕 If 〔269 Count〕 is 1

〔271〕 Get First Item from List 〔MatchString〕　»

〔272〕 Set Variable TravelHours to 〔271 Item from List〕

〔273〕 Otherwise

〔274〕 Number 0　»

〔275〕 Set Variable TravelHours to 〔274 Number〕

〔276〕 End If

〔277〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔278〕 Set Variable MatchString to 〔277 Matches〕

〔279〕 Count Items in 〔MatchString〕　»

〔280〕 If 〔279 Count〕 is 1

〔281〕 Get First Item from List 〔MatchString〕　»

〔282〕 Set Variable TravelMinutes to 〔281 Item from List〕

〔283〕 Otherwise

〔284〕 Number 0　»

〔285〕 Set Variable TravelMinutes to 〔284 Number〕

〔286〕 End If

〔287〕 Calculate 〔TravelDays〕 × 1440　» 289

〔288〕 Calculate 〔TravelHours〕 × 60　»

〔289〕 Calculate 〔288 Calculation Result〕 + 〔287 Calculation Result〕　»

〔290〕 Calculate 〔289 Calculation Result〕 + 〔TravelMinutes〕　»

〔291〕 Calculate 〔290 Calculation Result〕 + 〔CurrentToDeparture〕　»

〔292〕 Set Variable TravelTime to 〔291 Calculation Result〕

〔293〕 Otherwise　▵209

〔294〕 Text
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS NOT MAINTAINED

〔295〕 Get 〔TravelMethod〕 Time　»
• Destination: 〔Repeat Item’s Location〕

〔296〕 Set Variable TravelTimeString to 〔295 Travel Time〕

〔297〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔298〕 Set Variable MatchString to 〔297 Matches〕

〔299〕 Count Items in 〔MatchString〕　»

〔300〕 If 〔299 Count〕 is 1

〔301〕 Get First Item from List 〔MatchString〕　»

〔302〕 Set Variable TravelDays to 〔301 Item from List〕

〔303〕 Otherwise

〔304〕 Number 0　»

〔305〕 Set Variable TravelDays to 〔304 Number〕

〔306〕 End If

〔307〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔308〕 Set Variable MatchString to 〔307 Matches〕

〔309〕 Count Items in 〔MatchString〕　»

〔310〕 If 〔309 Count〕 is 1

〔311〕 Get First Item from List 〔MatchString〕　»

〔312〕 Set Variable TravelHours to 〔311 Item from List〕

〔313〕 Otherwise

〔314〕 Number 0　»

〔315〕 Set Variable TravelHours to 〔314 Number〕

〔316〕 End If

〔317〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔318〕 Set Variable MatchString to 〔317 Matches〕

〔319〕 Count Items in 〔MatchString〕　»

〔320〕 If 〔319 Count〕 is 1

〔321〕 Get First Item from List 〔MatchString〕　»

〔322〕 Set Variable TravelMinutes to 〔321 Item from List〕

〔323〕 Otherwise

〔324〕 Number 0　»

〔325〕 Set Variable TravelMinutes to 〔324 Number〕

〔326〕 End If

〔327〕 Calculate 〔TravelDays〕 × 1440　» 329

〔328〕 Calculate 〔TravelHours〕 × 60　»

〔329〕 Calculate 〔328 Calculation Result〕 + 〔327 Calculation Result〕　»

〔330〕 Calculate 〔329 Calculation Result〕 + 〔TravelMinutes〕　»

〔331〕 Set Variable TravelTime to 〔330 Calculation Result〕

〔332〕 End If　▵293

〔333〕 End If　▵201

〔334〕 Otherwise　▵106

〔335〕 Number 0　»

〔336〕 Set Variable TravelTime to 〔335 Number〕

〔337〕 End If

〔338〕 Calculate 〔TravelTime〕 + 〔ExtraTime〕　»

〔339〕 Adjust Subtract Date 〔Repeat Item’s Start Date〕 　➔ Supposed Alarm Time　» 340 343 346 349 356 372 374 375 393 398 401
• Duration: 〔338 Calculation Result〕 min

〔340〕 Dictionary 　➔ Alarm Label Dictionary　» 372 377 393
{  "Event": "〔Repeat Item〕",
   "From": "〔Repeat Item’s Start Date〕",
   "To": "〔Repeat Item’s End Date〕",
   "Location": "〔Repeat Item’s Location〕",
   "AlarmTime": "〔339 Supposed Alarm Time〕"
}

〔341〕 Date Current Date 　➔ Current Date　» 342 343 374

〔342〕 Adjust Add Date 〔341 Current Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"dd MMM yyyy"}〕 　➔ 1 day after　» 356 375
• Duration: "1" days

〔343〕 If 〔339 Supposed Alarm Time〕 is 〔341 Current Date〕

〔344〕 Comment
supposed alarm time is exactly 12:00am

〔345〕 If 〔Repeat Item’s Location〕 has any value

〔346〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 at 〔Repeat Item’s Location〕 which  was supposed to get ready at 〔339 Supposed Alarm Time〕. Please check.

〔347〕 Set Variable Text to 〔346 Text〕

〔348〕 Otherwise

〔349〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 which  was supposed to get ready at 〔339 Supposed Alarm Time〕. Please check.

〔350〕 Set Variable Text to 〔349 Text〕

〔351〕 End If

〔352〕 Show Alert 〔Text〕

〔353〕 Show Notification 〔Text〕

〔354〕 Speak Text
• Text: 〔Text〕

〔355〕 Otherwise　▵343

〔356〕 If 〔339 Supposed Alarm Time〕 is 〔342 1 day after〕

〔357〕 Find Alarm All Alarm　» 358 359

〔358〕 If 〔357 Alarms〕 has any value

〔359〕 Repeat[2] with Each in 〔357 Alarms〕

〔360〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ AlarmLabelDictionary　» 361 362 364

〔361〕 Get Dictionary Value for Event in 〔360 AlarmLabelDictionary〕 　➔ Event　» 366

〔362〕 Get Dictionary Value for From in 〔360 AlarmLabelDictionary〕 　➔ From　»

〔363〕 Get Dates from 〔362 From〕 　➔ FromDate　» 366

〔364〕 Get Dictionary Value for To in 〔360 AlarmLabelDictionary〕 　➔ To　»

〔365〕 Get Dates from 〔364 To〕 　➔ ToDate　»

〔366〕 If All are true　〔361 Event’s Name〕 is 〔Repeat Item〕　〔363 FromDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔Repeat Item’s Start Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕　〔365 ToDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is • ConditionalActionString
〔Repeat Item’s End Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕• Date
〔Repeat Item’s End Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕

〔367〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔368〕 End If

〔369〕 End Repeat[2] with Each　▵359

〔370〕 End If　▵358

〔371〕 Comment
since this will be triggered at 12:00 am each day, when the supposed alarm time is 12:00 am in the next day, you can set alarm now

〔372〕 Add Alarm for 〔339 Supposed Alarm Time〕 called 〔340 Alarm Label Dictionary〕

〔373〕 Otherwise　▵356

〔374〕 If 〔339 Supposed Alarm Time〕 > 〔341 Current Date〕

〔375〕 If 〔339 Supposed Alarm Time〕 > 〔342 1 day after〕

〔376〕 Comment
when the time is other than 12:00 am of then next day, you cannot set alarm yet. If set, it will be today. For example, triggering time 2025-4-8 12:00 am, the supposed alarm time is 2025-4-9 08:00 am, if you set an alarm at 08:00 at 2025-4-8 12:00 am, it will alarm at 2025-4-8 08:00 am instead. So we need to record the supposed alarm time and trigger next day.

〔377〕 Set Variable Event to 〔340 Alarm Label Dictionary〕

〔378〕 Otherwise

〔379〕 Find Alarm All Alarm　» 380 381
• ContentItemFilter: {  "Value": {
      "WFActionParameterFilterPrefix": 1,
      "WFActionParameterFilterTemplates": [],
      "WFContentPredicateBoundedDate": false
   },
   "WFSerializationType": "WFContentPredicateTableTemplate"
}

〔380〕 If 〔379 Alarms〕 has any value

〔381〕 Repeat[2] with Each in 〔379 Alarms〕

〔382〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ AlarmLabelDictionary　» 383 384 386

〔383〕 Get Dictionary Value for Event in 〔382 AlarmLabelDictionary〕 　➔ Event　» 388

〔384〕 Get Dictionary Value for From in 〔382 AlarmLabelDictionary〕 　➔ From　»

〔385〕 Get Dates from 〔384 From〕 　➔ FromDate　» 388

〔386〕 Get Dictionary Value for To in 〔382 AlarmLabelDictionary〕 　➔ To　»

〔387〕 Get Dates from 〔386 To〕 　➔ ToDate　»

〔388〕 If All are true　〔383 Event’s Name〕 is 〔Repeat Item〕　〔385 FromDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔Repeat Item’s Start Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕　〔387 ToDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔Repeat Item’s End Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕

〔389〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔390〕 End If

〔391〕 End Repeat[2] with Each　▵381

〔392〕 End If　▵380

〔393〕 Add Alarm for 〔339 Supposed Alarm Time〕 called 〔340 Alarm Label Dictionary〕

〔394〕 End If　▵378

〔395〕 Otherwise　▵374

〔396〕 Comment
the supposed alarm time passed

〔397〕 If 〔Repeat Item’s Location〕 has any value

〔398〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 at 〔Repeat Item’s Location〕 which  was supposed to get ready at 〔339 Supposed Alarm Time〕. Please check.

〔399〕 Set Variable Text to 〔398 Text〕

〔400〕 Otherwise

〔401〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 which  was supposed to get ready at 〔339 Supposed Alarm Time〕. Please check.

〔402〕 Set Variable Text to 〔401 Text〕

〔403〕 End If

〔404〕 Show Alert 〔Text〕

〔405〕 Show Notification 〔Text〕

〔406〕 Speak Text
• Text: 〔Text〕

〔407〕 End If　▵395

〔408〕 End If　▵373

〔409〕 End If　▵355

〔410〕 If 〔Event〕 has any value

〔411〕 Get Dictionary from 〔Event〕　» 424

〔412〕 Text　»

〔413〕 Set Variable TextList to 〔412 Text〕

〔414〕 Add 〔Event〕 to Variable TextList

〔415〕 Get File at Path Smart Calendar Reminder/Future Alarms.txt from Folder　» 416 417
• FileErrorIfNotFound: false

〔416〕 If 〔415 File’s File Size〕 has any value

〔417〕 Split Text 〔415 File〕 by New Lines　»

〔418〕 Repeat[2] with Each in 〔417 Split Text〕

〔419〕 Get Dictionary from 〔Repeat Item 2〕　» 420 421 422 423

〔420〕 Get Dictionary Value for Event in 〔419 Dictionary〕 　➔ Event　» 424

〔421〕 Get Dictionary Value for From in 〔419 Dictionary〕 　➔ From　» 424

〔422〕 Get Dictionary Value for To in 〔419 Dictionary〕 　➔ To　» 424

〔423〕 Get Dictionary Value for Location in 〔419 Dictionary〕 　➔ Location　»

〔424〕 If Any are true　〔420 Event’s Name〕 is not 〔411 Dictionary.Event〕　〔421 From’s Name〕 is not 〔411 Dictionary.From〕　〔422 To’s Name〕 is not 〔411 Dictionary.To〕　〔423 Location’s Name〕 is not 〔411 Dictionary.Location〕

〔425〕 Add 〔Repeat Item 2〕 to Variable TextList

〔426〕 End If

〔427〕 End Repeat[2] with Each　▵418

〔428〕 Combine Text 〔TextList〕 with New Lines　»

〔429〕 Save File 〔428 Combined Text〕
• AskWhereToSave: false
• SaveFileOverwrite: true
• FileDestinationPath: Smart Calendar Reminder/Future Alarms.txt

〔430〕 Otherwise　▵416

〔431〕 Text　»

〔Event〕

〔432〕 Save File 〔431 Text〕
• AskWhereToSave: false
• FileDestinationPath: Smart Calendar Reminder/Future Alarms.txt

〔433〕 End If

〔434〕 End If　▵410

〔435〕 End Repeat with Each　▵105

〔436〕 End If　▵104

〔437〕 Get File at Path Smart Calendar Reminder/Future Alarms.txt from Folder　» 438 439
• FileErrorIfNotFound: false

〔438〕 If 〔437 File’s File Size〕 has any value

〔439〕 Split Text 〔437 File〕 by New Lines　»

〔440〕 Repeat with Each in 〔439 Split Text〕

〔441〕 Get Dictionary from 〔Repeat Item〕　» 442 443 453 464

〔442〕 If 〔441 Dictionary〕 has any value

〔443〕 Get Dates from 〔441 Dictionary.AlarmTime〕　» 444 464

〔444〕 If 〔443 Dates〕 is today

〔445〕 Find Alarm All Alarm　» 446 447
• ContentItemFilter: {  "Value": {
      "WFActionParameterFilterPrefix": 1,
      "WFContentPredicateBoundedDate": false,
      "WFActionParameterFilterTemplates": []
   },
   "WFSerializationType": "WFContentPredicateTableTemplate"
}

〔446〕 If 〔445 Alarms〕 has any value

〔447〕 Repeat[2] with Each in 〔445 Alarms〕

〔448〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ Alarm_Label_Dictionary　» 449 451 459

〔449〕 Get Dictionary Value for From in 〔448 Alarm_Label_Dictionary〕　»

〔450〕 Get Dates from 〔449 Dictionary Value〕 　➔ From_Date　» 459

〔451〕 Get Dictionary Value for To in 〔448 Alarm_Label_Dictionary〕　»

〔452〕 Get Dates from 〔451 Dictionary Value〕 　➔ To_Date　» 459

〔453〕 Get Dictionary from 〔441 Dictionary.Event〕 　➔ FutureAlarmLabelDictionary　» 454 455 457

〔454〕 Get Dictionary Value for Event in 〔453 FutureAlarmLabelDictionary〕 　➔ Event　» 459

〔455〕 Get Dictionary Value for From in 〔453 FutureAlarmLabelDictionary〕 　➔ From　»

〔456〕 Get Dates from 〔455 From〕 　➔ FromDate　» 459

〔457〕 Get Dictionary Value for To in 〔453 FutureAlarmLabelDictionary〕 　➔ To　»

〔458〕 Get Dates from 〔457 To〕 　➔ ToDate　»

〔459〕 If All are true　〔454 Event’s Name〕 is 〔448 Alarm_Label_Dictionary.Event〕　〔456 FromDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔450 From_Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕　〔458 ToDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔452 To_Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕

〔460〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔461〕 End If

〔462〕 End Repeat[2] with Each　▵447

〔463〕 End If　▵446

〔464〕 Add Alarm for 〔443 Dates〕 called 〔441 Dictionary.Event〕

〔465〕 End If　▵444

〔466〕 End If　▵442

〔467〕 End Repeat with Each　▵440

〔468〕 End If　▵438

〔469〕 End If　▵92

〔470〕 If 〔Shortcut Input as Number〕 is 2

〔471〕 Comment
1-Hour Event Processor
*Real-time event handler for immediate notifications:

Processes events within next 60 minutes

Provides most accurate travel estimates

Recommended for hourly automation*

〔472〕 Get File at Path Smart Calendar Reminder/aboutme.txt from Folder　»
• FileErrorIfNotFound: false

〔473〕 Get Dictionary from 〔472 File〕　» 474 477 478

〔474〕 Get Dictionary from 〔473 Dictionary.HomeAddress〕　»

〔475〕 Text　»
〔474 Dictionary.street〕 〔474 Dictionary.city〕 〔474 Dictionary.state〕 〔474 Dictionary.postcode〕 〔474 Dictionary.country〕

〔476〕 Set Variable Home_Address to 〔475 Text〕

〔477〕 Set Variable Travel_Method to 〔473 Dictionary.TravelMethod〕

〔478〕 Get Dictionary Value for ExtraTime in 〔473 Dictionary〕　»

〔479〕 Get Numbers from 〔478 Dictionary Value〕　»

〔480〕 Set Variable Extra_Time to 〔479 Numbers〕

〔481〕 Find Calendar Events All Calendar Events where　» 482 483 484 751
• ContentItemSortProperty: Start Date
• ContentItemSortOrder: Oldest First
• ContentItemFilter: • All the following are true
Start Date is in the next 1 hours
Is Not All Day
Canceled is {"Bool":false}

〔482〕 If 〔481 Calendar Events〕 has any value

〔483〕 Count Items in 〔481 Calendar Events〕　» 755 763

〔484〕 Repeat with Each in 〔481 Calendar Events〕

〔485〕 If 〔Repeat Item’s Location〕 has any value

〔486〕 Get Current Location　» 497 503 589
• Accuracy: Best

〔487〕 If All are true　〔Repeat Item’s Notes〕 has any value　〔Repeat Item’s Notes〕 begins with {　〔Repeat Item’s Notes〕 ends with }

〔488〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY

〔489〕 Get Dictionary from 〔Repeat Item’s Notes〕 　➔ NotesAddressDictionary　» 490 491 492 493 494

〔490〕 Set Variable CalendarNotesStreet to 〔489 NotesAddressDictionary.Street〕

〔491〕 Set Variable CalendarNotesCity to 〔489 NotesAddressDictionary.City〕

〔492〕 Set Variable CalendarNotesState to 〔489 NotesAddressDictionary.State〕

〔493〕 Set Variable CalendarNotesRegion to 〔489 NotesAddressDictionary.Country〕

〔494〕 Set Variable CalendarNotesZIPCode to 〔489 NotesAddressDictionary.Postcode〕

〔495〕 Text　»
〔CalendarNotesStreet〕 〔CalendarNotesCity〕 〔CalendarNotesState〕 〔CalendarNotesZIPCode〕 〔CalendarNotesRegion〕

〔496〕 Set Variable NotesAddressString to 〔495 Text〕

〔497〕 If All are true　〔486 Current Location’s Street〕 is 〔CalendarNotesStreet〕　〔486 Current Location’s City〕 is 〔CalendarNotesCity〕　〔486 Current Location’s State〕 is 〔CalendarNotesState〕　〔486 Current Location’s Country〕 is 〔CalendarNotesRegion〕　〔486 Current Location’s ZIP Code〕 is 〔CalendarNotesZIPCode〕

〔498〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY -> CALENDAR EVENT ADDRESS IS THE SAME WITH CURRENT LOCATION

〔499〕 Number 0　»

〔500〕 Set Variable CurrentToDeparture to 〔499 Number〕

〔501〕 Otherwise

〔502〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY -> CALENDAR EVENT ADDRESS IS NOT THE SAME WITH CURRENT LOCATION

〔503〕 Get 〔TravelMethod〕 Time　»
• GetDirectionsCustomLocation: 〔486 Current Location〕
• Destination: 〔NotesAddressString〕

〔504〕 Set Variable TravelTimeString to 〔503 Travel Time〕

〔505〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔506〕 Set Variable MatchString to 〔505 Matches〕

〔507〕 Count Items in 〔MatchString〕　»

〔508〕 If 〔507 Count〕 is 1

〔509〕 Get First Item from List 〔MatchString〕　»

〔510〕 Set Variable TravelDays to 〔509 Item from List〕

〔511〕 Otherwise

〔512〕 Number 0　»

〔513〕 Set Variable TravelDays to 〔512 Number〕

〔514〕 End If

〔515〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔516〕 Set Variable MatchString to 〔515 Matches〕

〔517〕 Count Items in 〔MatchString〕　»

〔518〕 If 〔517 Count〕 is 1

〔519〕 Get First Item from List 〔MatchString〕　»

〔520〕 Set Variable TravelHours to 〔519 Item from List〕

〔521〕 Otherwise

〔522〕 Number 0　»

〔523〕 Set Variable TravelHours to 〔522 Number〕

〔524〕 End If

〔525〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔526〕 Set Variable MatchString to 〔525 Matches〕

〔527〕 Count Items in 〔MatchString〕　»

〔528〕 If 〔527 Count〕 is 1

〔529〕 Get First Item from List 〔MatchString〕　»

〔530〕 Set Variable TravelMinutes to 〔529 Item from List〕

〔531〕 Otherwise

〔532〕 Number 0　»

〔533〕 Set Variable TravelMinutes to 〔532 Number〕

〔534〕 End If

〔535〕 Calculate 〔TravelDays〕 × 1440　» 537

〔536〕 Calculate 〔TravelHours〕 × 60　»

〔537〕 Calculate 〔536 Calculation Result〕 + 〔535 Calculation Result〕　»

〔538〕 Calculate 〔537 Calculation Result〕 + 〔TravelMinutes〕　»

〔539〕 Set Variable CurrentToDeparture to 〔538 Calculation Result〕

〔540〕 End If　▵501

〔541〕 Get 〔TravelMethod〕 Time 　➔ DepartureToDestination　»
• GetDirectionsCustomLocation: 〔NotesAddressString〕
• Destination: 〔Repeat Item’s Location〕

〔542〕 Set Variable TravelTimeString to 〔541 DepartureToDestination〕

〔543〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔544〕 Set Variable MatchString to 〔543 Matches〕

〔545〕 Count Items in 〔MatchString〕　»

〔546〕 If 〔545 Count〕 is 1

〔547〕 Get First Item from List 〔MatchString〕　»

〔548〕 Set Variable TravelDays to 〔547 Item from List〕

〔549〕 Otherwise

〔550〕 Number 0　»

〔551〕 Set Variable TravelDays to 〔550 Number〕

〔552〕 End If

〔553〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔554〕 Set Variable MatchString to 〔553 Matches〕

〔555〕 Count Items in 〔MatchString〕　»

〔556〕 If 〔555 Count〕 is 1

〔557〕 Get First Item from List 〔MatchString〕　»

〔558〕 Set Variable TravelHours to 〔557 Item from List〕

〔559〕 Otherwise

〔560〕 Number 0　»

〔561〕 Set Variable TravelHours to 〔560 Number〕

〔562〕 End If

〔563〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔564〕 Set Variable MatchString to 〔563 Matches〕

〔565〕 Count Items in 〔MatchString〕　»

〔566〕 If 〔565 Count〕 is 1

〔567〕 Get First Item from List 〔MatchString〕　»

〔568〕 Set Variable TravelMinutes to 〔567 Item from List〕

〔569〕 Otherwise

〔570〕 Number 0　»

〔571〕 Set Variable TravelMinutes to 〔570 Number〕

〔572〕 End If

〔573〕 Calculate 〔TravelDays〕 × 1440　» 575

〔574〕 Calculate 〔TravelHours〕 × 60　»

〔575〕 Calculate 〔574 Calculation Result〕 + 〔573 Calculation Result〕　»

〔576〕 Calculate 〔575 Calculation Result〕 + 〔TravelMinutes〕　»

〔577〕 Calculate 〔576 Calculation Result〕 + 〔CurrentToDeparture〕　»

〔578〕 Set Variable TravelTime to 〔577 Calculation Result〕

〔579〕 Otherwise　▵487

〔580〕 Comment
CALENDER EVENT NOTES IS BLANK

〔581〕 Get Dictionary from 〔HomeAddress〕 　➔ home_address_dictionary　» 582 583 584 585 586

〔582〕 Get Dictionary Value for street in 〔581 home_address_dictionary〕 　➔ HomeStreet　» 587 589

〔583〕 Get Dictionary Value for city in 〔581 home_address_dictionary〕 　➔ HomeCity　» 587 589

〔584〕 Get Dictionary Value for state in 〔581 home_address_dictionary〕 　➔ HomeState　» 587 589

〔585〕 Get Dictionary Value for country in 〔581 home_address_dictionary〕 　➔ HomeCountry　» 587 589

〔586〕 Get Dictionary Value for postcode in 〔581 home_address_dictionary〕 　➔ HomePostcode　» 587 589

〔587〕 If All are true　〔582 HomeStreet〕 has any value　〔583 HomeCity〕 has any value　〔584 HomeState〕 has any value　〔585 HomeCountry〕 has any value　〔586 HomePostcode〕 has any value

〔588〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED

〔589〕 If All are true　〔486 Current Location’s Street〕 is 〔582 HomeStreet〕　〔486 Current Location’s City〕 is 〔583 HomeCity〕　〔486 Current Location’s State〕 is 〔584 HomeState〕　〔486 Current Location’s Country〕 is 〔585 HomeCountry〕　〔486 Current Location’s ZIP Code〕 is 〔586 HomePostcode〕

〔590〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED -> HOME ADDRESS IS THE SAME WITH CURRENT LOCATION

〔591〕 Number 0　»

〔592〕 Set Variable CurrentToDeparture to 〔591 Number〕

〔593〕 Otherwise

〔594〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED -> HOME ADDRESS IS NOT THE SAME WITH CURRENT LOCATION

〔595〕 Get 〔TravelMethod〕 Time　»
• Destination: 〔HomeAddress〕

〔596〕 Set Variable TravelTimeString to 〔595 Travel Time〕

〔597〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔598〕 Set Variable MatchString to 〔597 Matches〕

〔599〕 Count Items in 〔MatchString〕　»

〔600〕 If 〔599 Count〕 is 1

〔601〕 Get First Item from List 〔MatchString〕　»

〔602〕 Set Variable TravelDays to 〔601 Item from List〕

〔603〕 Otherwise

〔604〕 Number 0　»

〔605〕 Set Variable TravelDays to 〔604 Number〕

〔606〕 End If

〔607〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔608〕 Set Variable MatchString to 〔607 Matches〕

〔609〕 Count Items in 〔MatchString〕　»

〔610〕 If 〔609 Count〕 is 1

〔611〕 Get First Item from List 〔MatchString〕　»

〔612〕 Set Variable TravelHours to 〔611 Item from List〕

〔613〕 Otherwise

〔614〕 Number 0　»

〔615〕 Set Variable TravelHours to 〔614 Number〕

〔616〕 End If

〔617〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔618〕 Set Variable MatchString to 〔617 Matches〕

〔619〕 Count Items in 〔MatchString〕　»

〔620〕 If 〔619 Count〕 is 1

〔621〕 Get First Item from List 〔MatchString〕　»

〔622〕 Set Variable TravelMinutes to 〔621 Item from List〕

〔623〕 Otherwise

〔624〕 Number 0　»

〔625〕 Set Variable TravelMinutes to 〔624 Number〕

〔626〕 End If

〔627〕 Calculate 〔TravelDays〕 × 1440　» 629

〔628〕 Calculate 〔TravelHours〕 × 60　»

〔629〕 Calculate 〔628 Calculation Result〕 + 〔627 Calculation Result〕　»

〔630〕 Calculate 〔629 Calculation Result〕 + 〔TravelMinutes〕　»

〔631〕 Set Variable CurrentToDeparture to 〔630 Calculation Result〕

〔632〕 End If　▵593

〔633〕 Get 〔TravelMethod〕 Time 　➔ DepartureToDestination　»
• GetDirectionsCustomLocation: 〔HomeAddress〕
• Destination: 〔Repeat Item’s Location〕

〔634〕 Set Variable TravelTimeString to 〔633 DepartureToDestination〕

〔635〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔636〕 Set Variable MatchString to 〔635 Matches〕

〔637〕 Count Items in 〔MatchString〕　»

〔638〕 If 〔637 Count〕 is 1

〔639〕 Get First Item from List 〔MatchString〕　»

〔640〕 Set Variable TravelDays to 〔639 Item from List〕

〔641〕 Otherwise

〔642〕 Number 0　»

〔643〕 Set Variable TravelDays to 〔642 Number〕

〔644〕 End If

〔645〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔646〕 Set Variable MatchString to 〔645 Matches〕

〔647〕 Count Items in 〔MatchString〕　»

〔648〕 If 〔647 Count〕 is 1

〔649〕 Get First Item from List 〔MatchString〕　»

〔650〕 Set Variable TravelHours to 〔649 Item from List〕

〔651〕 Otherwise

〔652〕 Number 0　»

〔653〕 Set Variable TravelHours to 〔652 Number〕

〔654〕 End If

〔655〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔656〕 Set Variable MatchString to 〔655 Matches〕

〔657〕 Count Items in 〔MatchString〕　»

〔658〕 If 〔657 Count〕 is 1

〔659〕 Get First Item from List 〔MatchString〕　»

〔660〕 Set Variable TravelMinutes to 〔659 Item from List〕

〔661〕 Otherwise

〔662〕 Number 0　»

〔663〕 Set Variable TravelMinutes to 〔662 Number〕

〔664〕 End If

〔665〕 Calculate 〔TravelDays〕 × 1440　» 667

〔666〕 Calculate 〔TravelHours〕 × 60　»

〔667〕 Calculate 〔666 Calculation Result〕 + 〔665 Calculation Result〕　»

〔668〕 Calculate 〔667 Calculation Result〕 + 〔TravelMinutes〕　»

〔669〕 Calculate 〔668 Calculation Result〕 + 〔CurrentToDeparture〕　»

〔670〕 Set Variable TravelTime to 〔669 Calculation Result〕

〔671〕 Otherwise　▵587

〔672〕 Text
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS NOT MAINTAINED

〔673〕 Get 〔TravelMethod〕 Time　»
• Destination: 〔Repeat Item’s Location〕

〔674〕 Set Variable TravelTimeString to 〔673 Travel Time〕

〔675〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔676〕 Set Variable MatchString to 〔675 Matches〕

〔677〕 Count Items in 〔MatchString〕　»

〔678〕 If 〔677 Count〕 is 1

〔679〕 Get First Item from List 〔MatchString〕　»

〔680〕 Set Variable TravelDays to 〔679 Item from List〕

〔681〕 Otherwise

〔682〕 Number 0　»

〔683〕 Set Variable TravelDays to 〔682 Number〕

〔684〕 End If

〔685〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔686〕 Set Variable MatchString to 〔685 Matches〕

〔687〕 Count Items in 〔MatchString〕　»

〔688〕 If 〔687 Count〕 is 1

〔689〕 Get First Item from List 〔MatchString〕　»

〔690〕 Set Variable TravelHours to 〔689 Item from List〕

〔691〕 Otherwise

〔692〕 Number 0　»

〔693〕 Set Variable TravelHours to 〔692 Number〕

〔694〕 End If

〔695〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔696〕 Set Variable MatchString to 〔695 Matches〕

〔697〕 Count Items in 〔MatchString〕　»

〔698〕 If 〔697 Count〕 is 1

〔699〕 Get First Item from List 〔MatchString〕　»

〔700〕 Set Variable TravelMinutes to 〔699 Item from List〕

〔701〕 Otherwise

〔702〕 Number 0　»

〔703〕 Set Variable TravelMinutes to 〔702 Number〕

〔704〕 End If

〔705〕 Calculate 〔TravelDays〕 × 1440　» 707

〔706〕 Calculate 〔TravelHours〕 × 60　»

〔707〕 Calculate 〔706 Calculation Result〕 + 〔705 Calculation Result〕　»

〔708〕 Calculate 〔707 Calculation Result〕 + 〔TravelMinutes〕　»

〔709〕 Set Variable TravelTime to 〔708 Calculation Result〕

〔710〕 End If　▵671

〔711〕 End If　▵579

〔712〕 Otherwise　▵485

〔713〕 Number 0　»

〔714〕 Set Variable TravelTime to 〔713 Number〕

〔715〕 End If

〔716〕 Find Alarm All Alarm　» 717 718
• ContentItemFilter: {  "Value": {
      "WFActionParameterFilterPrefix": 1,
      "WFActionParameterFilterTemplates": [],
      "WFContentPredicateBoundedDate": false
   },
   "WFSerializationType": "WFContentPredicateTableTemplate"
}

〔717〕 If 〔716 Alarms〕 has any value

〔718〕 Repeat[2] with Each in 〔716 Alarms〕

〔719〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ AlarmLabelDictionary　» 720 721 723

〔720〕 Get Dictionary Value for Event in 〔719 AlarmLabelDictionary〕 　➔ Event　» 725

〔721〕 Get Dictionary Value for From in 〔719 AlarmLabelDictionary〕 　➔ From　»

〔722〕 Get Dates from 〔721 From〕 　➔ FromDate　» 725

〔723〕 Get Dictionary Value for To in 〔719 AlarmLabelDictionary〕 　➔ To　»

〔724〕 Get Dates from 〔723 To〕 　➔ ToDate　»

〔725〕 If All are true　〔720 Event’s Name〕 is 〔Repeat Item〕　〔722 FromDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔Repeat Item’s Start Date{"Date Style":"Custom","WFDateFormat":"HH:mm","WFISO8601IncludeTime":false}〕　〔724 ToDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔Repeat Item’s End Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕

〔726〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔727〕 End If

〔728〕 End Repeat[2] with Each　▵718

〔729〕 End If　▵717

〔730〕 Calculate 〔TravelTime〕 + 〔Extra_Time〕　»

〔731〕 Adjust Subtract Date 〔Repeat Item’s Start Date〕 　➔ Supposed_Alarm_Time　» 733 735 738 745 746
• Duration: 〔730 Calculation Result〕 min

〔732〕 Date Current Date　»

〔733〕 If Any are true　〔731 Supposed_Alarm_Time〕 < 〔732 Date〕　〔731 Supposed_Alarm_Time〕 is 〔732 Date〕

〔734〕 If 〔Repeat Item’s Location〕 has any value

〔735〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 at 〔Repeat Item’s Location〕  which  was supposed to get ready at 〔731 Supposed_Alarm_Time〕. Please check.

〔736〕 Set Variable Text to 〔735 Text〕

〔737〕 Otherwise

〔738〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 which  was supposed to get ready at 〔731 Supposed_Alarm_Time〕. Please check.

〔739〕 Set Variable Text to 〔738 Text〕

〔740〕 End If

〔741〕 Show Alert 〔Text〕

〔742〕 Show Notification 〔Text〕

〔743〕 Speak Text
• Text: 〔Text〕

〔744〕 Otherwise　▵733

〔745〕 Dictionary　»
{  "Event": "〔Repeat Item〕",
   "From": "〔Repeat Item’s Start Date〕",
   "To": "〔Repeat Item’s End Date〕",
   "Location": "〔Repeat Item’s Location〕",
   "AlarmTime": "〔731 Supposed_Alarm_Time〕"
}

〔746〕 Add Alarm for 〔731 Supposed_Alarm_Time〕 called 〔745 Dictionary〕

〔747〕 End If

〔748〕 End Repeat with Each　▵484

〔749〕 Number 3　»

〔750〕 Repeat 〔749 Number〕 Times

〔751〕 Repeat[2] with Each in 〔481 Calendar Events〕

〔752〕 Format Date 〔Repeat Item 2’s Start Date〕　» 756 759 764 767
• DateFormatStyle: None

〔753〕 Format Date 〔Repeat Item 2’s End Date〕　» 756 759 764 767
• DateFormatStyle: None

〔754〕 If 〔Repeat Item 2’s Location〕 has any value

〔755〕 If 〔483 Count〕 > 1

〔756〕 Text　»
Event 〔Repeat Index 2〕 〔Repeat Item 2〕 from 〔752 Formatted Date〕 to 〔753 Formatted Date〕 at 〔Repeat Item 2’s Location〕

〔757〕 Set Variable Text to 〔756 Text〕

〔758〕 Otherwise

〔759〕 Text　»
Event  〔Repeat Item 2〕 from 〔752 Formatted Date〕 to 〔753 Formatted Date〕 at 〔Repeat Item 2’s Location〕

〔760〕 Set Variable Text to 〔759 Text〕

〔761〕 End If

〔762〕 Otherwise　▵754

〔763〕 If 〔483 Count〕 > 1

〔764〕 Text　»
Event 〔Repeat Index 2〕 〔Repeat Item 2〕 from 〔752 Formatted Date〕 to 〔753 Formatted Date〕

〔765〕 Set Variable Text to 〔764 Text〕

〔766〕 Otherwise

〔767〕 Text　»
Event  〔Repeat Item 2〕 from 〔752 Formatted Date〕 to 〔753 Formatted Date〕

〔768〕 Set Variable Text to 〔767 Text〕

〔769〕 End If

〔770〕 End If　▵762

〔771〕 Speak Text
• Text: 〔Text〕

〔772〕 Wait 1 seconds

〔773〕 End Repeat[2] with Each　▵751

〔774〕 End Repeat Times　▵750

〔775〕 End If　▵482

〔776〕 End If　▵470

〔777〕 If 〔Shortcut Input as Number〕 is 3

〔778〕 Comment
Alarm Activation Handler
Triggered by alarm events - manages notification flow

〔779〕 Dictionary　»
{  "stop": "no" }

〔780〕 Text　»
〔779 Dictionary〕

〔781〕 Save File 〔780 Text〕
• AskWhereToSave: false
• SaveFileOverwrite: true
• FileDestinationPath: Smart Calendar Reminder/stopflag.txt

〔782〕 Date Current Date　» 801

〔783〕 Find Alarm All Alarm　» 784 793
• ContentItemFilter: {  "Value": {
      "WFActionParameterFilterPrefix": 1,
      "WFActionParameterFilterTemplates": [],
      "WFContentPredicateBoundedDate": false
   },
   "WFSerializationType": "WFContentPredicateTableTemplate"
}

〔784〕 If 〔783 Alarms〕 has any value

〔785〕 Number 10000　»

〔786〕 Repeat 〔785 Number〕 Times

〔787〕 Get File at Path Smart Calendar Reminder/stopflag.txt from Folder　»
• FileErrorIfNotFound: false

〔788〕 Get Dictionary from 〔787 File〕　»

〔789〕 Get Dictionary Value for stop in 〔788 Dictionary〕　»

〔790〕 If 〔789 Dictionary Value’s Name〕 is yes

〔791〕 Stop This Shortcut

〔792〕 End If

〔793〕 Repeat[2] with Each in 〔783 Alarms〕

〔794〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ alarm_label_dictionary　» 795 797 799 804 808 811

〔795〕 Get Dictionary Value for From in 〔794 alarm_label_dictionary〕　»

〔796〕 Get Dates from 〔795 Dictionary Value〕 　➔ From　» 802

〔797〕 Get Dictionary Value for To in 〔794 alarm_label_dictionary〕　»

〔798〕 Get Dates from 〔797 Dictionary Value〕 　➔ To　» 803

〔799〕 Get Dictionary Value for AlarmTime in 〔794 alarm_label_dictionary〕　»

〔800〕 Get Dates from 〔799 Dictionary Value〕 　➔ AlarmTime　»

〔801〕 If All are true　〔800 AlarmTime{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH"}〕 is 〔782 Date{"Date Style":"Custom","WFDateFormat":"HH","WFISO8601IncludeTime":false}〕　〔800 AlarmTime{"Date Style":"Custom","WFDateFormat":"mm","WFISO8601IncludeTime":false}〕 is 〔782 Date{"Date Style":"Custom","WFDateFormat":"mm","WFISO8601IncludeTime":false}〕

〔802〕 Format Date 〔796 From’s Time〕　» 808 811

〔803〕 Format Date 〔798 To’s Time〕　» 808 811

〔804〕 Get Dictionary Value for Location in 〔794 alarm_label_dictionary〕　»

〔805〕 Text　»
〔804 Dictionary Value〕

〔806〕 Count Characters in 〔805 Text〕　»

〔807〕 If 〔806 Count〕 > • ConditionalActionString
""• NumberValue
0

〔808〕 Text　»
Prepare for 〔794 alarm_label_dictionary.Event〕 from 〔802 Formatted Date〕 to 〔803 Formatted Date〕 at 〔794 alarm_label_dictionary.Location〕

〔809〕 Set Variable Text to 〔808 Text〕

〔810〕 Otherwise

〔811〕 Text　»
Prepare for 〔794 alarm_label_dictionary.Event〕 from 〔802 Formatted Date〕 to 〔803 Formatted Date〕

〔812〕 Set Variable Text to 〔811 Text〕

〔813〕 End If

〔814〕 Speak Text
• Text: 〔Text〕

〔815〕 End If　▵801

〔816〕 End Repeat[2] with Each　▵793

〔817〕 End Repeat Times　▵786

〔818〕 End If　▵784

〔819〕 End If　▵777

〔820〕 If 〔Shortcut Input as Number〕 is 4

〔821〕 Comment
input case 4:
Notification Interrupt System
Stop protocol for voice announcements when any alarm is stopped.

〔822〕 Dictionary　»
{  "stop": "yes" }

〔823〕 Text　»
〔822 Dictionary〕

〔824〕 Save File 〔823 Text〕
• AskWhereToSave: false
• SaveFileOverwrite: true
• FileDestinationPath: Smart Calendar Reminder/stopflag.txt

〔825〕 End If

〔826〕 If 〔Shortcut Input as Number〕 is 5

〔827〕 Comment
*Revolutionizing event management by integrating calendar data with intelligent automation:

Voice announcements for upcoming events

Dynamic alarm calculation (travel + prep time)

Calendar-driven scheduling system
Eliminates manual reminders and ensures perfect timing synchronization*

〔828〕 Get File at Path Smart Calendar Reminder/aboutme.txt from Folder　»
• FileErrorIfNotFound: false

〔829〕 Get Dictionary from 〔828 File〕　» 830 833 834

〔830〕 Get Dictionary from 〔829 Dictionary.HomeAddress〕　»

〔831〕 Text　»
〔830 Dictionary.street〕 〔830 Dictionary.city〕 〔830 Dictionary.state〕 〔830 Dictionary.postcode〕 〔830 Dictionary.country〕\u{space}

〔832〕 Set Variable HomeAddress to 〔831 Text〕

〔833〕 Set Variable TravelMethod to 〔829 Dictionary.TravelMethod〕

〔834〕 Get Dictionary Value for ExtraTime in 〔829 Dictionary〕　»

〔835〕 Get Numbers from 〔834 Dictionary Value〕　»

〔836〕 Set Variable ExtraTime to 〔835 Numbers〕

〔837〕 Find Calendar Events All Calendar Events where　» 838 839
• ContentItemSortProperty: Start Date
• ContentItemSortOrder: Oldest First
• ContentItemFilter: • All the following are true
Start Date is in the next 1 months
Is Not All Day
Canceled is {"Bool":false}

〔838〕 If 〔837 Calendar Events〕 has any value

〔839〕 Repeat with Each in 〔837 Calendar Events〕

〔840〕 Set Variable Event to  

〔841〕 If 〔Repeat Item’s Location〕 has any value

〔842〕 Get Current Location　» 854 860 946
• Accuracy: Best

〔843〕 Comment
*To specify event-specific departure locations:

1. Create calendar event notes with JSON structure:
{
“Street”: “your departure street”,
“City”: “your departure city”,
“State”: “your departure state”,
“Country”: “your departure country”,
“Postcode”: “your departure postcode”
}
2. System prioritizes these over default locations*

〔844〕 If All are true　〔Repeat Item’s Notes〕 has any value　〔Repeat Item’s Notes〕 begins with {　〔Repeat Item’s Notes〕 ends with }

〔845〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY

〔846〕 Get Dictionary from 〔Repeat Item’s Notes〕 　➔ Notes Address Dictionary　» 847 848 849 850 851

〔847〕 Set Variable Calendar_Notes_Street to 〔846 Notes Address Dictionary.Street〕

〔848〕 Set Variable Calendar_Notes_City to 〔846 Notes Address Dictionary.City〕

〔849〕 Set Variable Calendar_Notes_State to 〔846 Notes Address Dictionary.State〕

〔850〕 Set Variable Calendar_Notes_Region to 〔846 Notes Address Dictionary.Country〕

〔851〕 Set Variable Calendar_Notes_ZIP_Code to 〔846 Notes Address Dictionary.Postcode〕

〔852〕 Text　»
〔Calendar_Notes_Street〕 〔Calendar_Notes_City〕 〔Calendar_Notes_State〕 〔Calendar_Notes_ZIP_Code〕 〔Calendar_Notes_Region〕

〔853〕 Set Variable NotesAddressString to 〔852 Text〕

〔854〕 If All are true　〔842 Current Location’s Street〕 is 〔Calendar_Notes_Street〕　〔842 Current Location’s City〕 is 〔Calendar_Notes_City〕　〔842 Current Location’s State〕 is 〔Calendar_Notes_State〕　〔842 Current Location’s Country〕 is 〔Calendar_Notes_Region〕　〔842 Current Location’s ZIP Code〕 is 〔Calendar_Notes_ZIP_Code〕

〔855〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY -> CALENDAR EVENT ADDRESS IS THE SAME WITH CURRENT LOCATION

〔856〕 Number 0　»

〔857〕 Set Variable CurrentToDeparture to 〔856 Number〕

〔858〕 Otherwise

〔859〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY -> CALENDAR EVENT ADDRESS IS NOT THE SAME WITH CURRENT LOCATION

〔860〕 Get 〔TravelMethod〕 Time　»
• GetDirectionsCustomLocation: 〔842 Current Location〕
• Destination: 〔NotesAddressString〕

〔861〕 Set Variable TravelTimeString to 〔860 Travel Time〕

〔862〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔863〕 Set Variable MatchString to 〔862 Matches〕

〔864〕 Count Items in 〔MatchString〕　»

〔865〕 If 〔864 Count〕 is 1

〔866〕 Get First Item from List 〔MatchString〕　»

〔867〕 Set Variable TravelDays to 〔866 Item from List〕

〔868〕 Otherwise

〔869〕 Number 0　»

〔870〕 Set Variable TravelDays to 〔869 Number〕

〔871〕 End If

〔872〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔873〕 Set Variable MatchString to 〔872 Matches〕

〔874〕 Count Items in 〔MatchString〕　»

〔875〕 If 〔874 Count〕 is 1

〔876〕 Get First Item from List 〔MatchString〕　»

〔877〕 Set Variable TravelHours to 〔876 Item from List〕

〔878〕 Otherwise

〔879〕 Number 0　»

〔880〕 Set Variable TravelHours to 〔879 Number〕

〔881〕 End If

〔882〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔883〕 Set Variable MatchString to 〔882 Matches〕

〔884〕 Count Items in 〔MatchString〕　»

〔885〕 If 〔884 Count〕 is 1

〔886〕 Get First Item from List 〔MatchString〕　»

〔887〕 Set Variable TravelMinutes to 〔886 Item from List〕

〔888〕 Otherwise

〔889〕 Number 0　»

〔890〕 Set Variable TravelMinutes to 〔889 Number〕

〔891〕 End If

〔892〕 Calculate 〔TravelDays〕 × 1440　» 894

〔893〕 Calculate 〔TravelHours〕 × 60　»

〔894〕 Calculate 〔893 Calculation Result〕 + 〔892 Calculation Result〕　»

〔895〕 Calculate 〔894 Calculation Result〕 + 〔TravelMinutes〕　»

〔896〕 Set Variable CurrentToDeparture to 〔895 Calculation Result〕

〔897〕 End If　▵858

〔898〕 Get 〔TravelMethod〕 Time 　➔ DepartureToDestination　»
• GetDirectionsCustomLocation: 〔NotesAddressString〕
• Destination: 〔Repeat Item’s Location〕

〔899〕 Set Variable TravelTimeString to 〔898 DepartureToDestination〕

〔900〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔901〕 Set Variable MatchString to 〔900 Matches〕

〔902〕 Count Items in 〔MatchString〕　»

〔903〕 If 〔902 Count〕 is 1

〔904〕 Get First Item from List 〔MatchString〕　»

〔905〕 Set Variable TravelDays to 〔904 Item from List〕

〔906〕 Otherwise

〔907〕 Number 0　»

〔908〕 Set Variable TravelDays to 〔907 Number〕

〔909〕 End If

〔910〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔911〕 Set Variable MatchString to 〔910 Matches〕

〔912〕 Count Items in 〔MatchString〕　»

〔913〕 If 〔912 Count〕 is 1

〔914〕 Get First Item from List 〔MatchString〕　»

〔915〕 Set Variable TravelHours to 〔914 Item from List〕

〔916〕 Otherwise

〔917〕 Number 0　»

〔918〕 Set Variable TravelHours to 〔917 Number〕

〔919〕 End If

〔920〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔921〕 Set Variable MatchString to 〔920 Matches〕

〔922〕 Count Items in 〔MatchString〕　»

〔923〕 If 〔922 Count〕 is 1

〔924〕 Get First Item from List 〔MatchString〕　»

〔925〕 Set Variable TravelMinutes to 〔924 Item from List〕

〔926〕 Otherwise

〔927〕 Number 0　»

〔928〕 Set Variable TravelMinutes to 〔927 Number〕

〔929〕 End If

〔930〕 Calculate 〔TravelDays〕 × 1440　» 932

〔931〕 Calculate 〔TravelHours〕 × 60　»

〔932〕 Calculate 〔931 Calculation Result〕 + 〔930 Calculation Result〕　»

〔933〕 Calculate 〔932 Calculation Result〕 + 〔TravelMinutes〕　»

〔934〕 Calculate 〔933 Calculation Result〕 + 〔CurrentToDeparture〕　»

〔935〕 Set Variable TravelTime to 〔934 Calculation Result〕

〔936〕 Otherwise　▵844

〔937〕 Comment
CALENDER EVENT NOTES IS BLANK

〔938〕 Get Dictionary from 〔HomeAddress〕 　➔ Home Address Dictionary　» 939 940 941 942 943

〔939〕 Get Dictionary Value for street in 〔938 Home Address Dictionary〕 　➔ home_Street　» 944 946

〔940〕 Get Dictionary Value for city in 〔938 Home Address Dictionary〕 　➔ home_City　» 944 946

〔941〕 Get Dictionary Value for state in 〔938 Home Address Dictionary〕 　➔ home_State　» 944 946

〔942〕 Get Dictionary Value for country in 〔938 Home Address Dictionary〕 　➔ home_Country　» 944 946

〔943〕 Get Dictionary Value for postcode in 〔938 Home Address Dictionary〕 　➔ home_Postcode　» 944 946

〔944〕 If All are true　〔939 home_Street〕 has any value　〔940 home_City〕 has any value　〔941 home_State〕 has any value　〔942 home_Country〕 has any value　〔943 home_Postcode〕 has any value

〔945〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED

〔946〕 If All are true　〔842 Current Location’s Street〕 is 〔939 home_Street〕　〔842 Current Location’s City〕 is 〔940 home_City〕　〔842 Current Location’s State〕 is 〔941 home_State〕　〔842 Current Location’s Country〕 is 〔942 home_Country〕　〔842 Current Location’s ZIP Code〕 is 〔943 home_Postcode〕

〔947〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED -> HOME ADDRESS IS THE SAME WITH CURRENT LOCATION

〔948〕 Number 0　»

〔949〕 Set Variable CurrentToDeparture to 〔948 Number〕

〔950〕 Otherwise

〔951〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED -> HOME ADDRESS IS NOT THE SAME WITH CURRENT LOCATION

〔952〕 Get 〔TravelMethod〕 Time　»
• Destination: 〔HomeAddress〕

〔953〕 Set Variable TravelTimeString to 〔952 Travel Time〕

〔954〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔955〕 Set Variable MatchString to 〔954 Matches〕

〔956〕 Count Items in 〔MatchString〕　»

〔957〕 If 〔956 Count〕 is 1

〔958〕 Get First Item from List 〔MatchString〕　»

〔959〕 Set Variable TravelDays to 〔958 Item from List〕

〔960〕 Otherwise

〔961〕 Number 0　»

〔962〕 Set Variable TravelDays to 〔961 Number〕

〔963〕 End If

〔964〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔965〕 Set Variable MatchString to 〔964 Matches〕

〔966〕 Count Items in 〔MatchString〕　»

〔967〕 If 〔966 Count〕 is 1

〔968〕 Get First Item from List 〔MatchString〕　»

〔969〕 Set Variable TravelHours to 〔968 Item from List〕

〔970〕 Otherwise

〔971〕 Number 0　»

〔972〕 Set Variable TravelHours to 〔971 Number〕

〔973〕 End If

〔974〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔975〕 Set Variable MatchString to 〔974 Matches〕

〔976〕 Count Items in 〔MatchString〕　»

〔977〕 If 〔976 Count〕 is 1

〔978〕 Get First Item from List 〔MatchString〕　»

〔979〕 Set Variable TravelMinutes to 〔978 Item from List〕

〔980〕 Otherwise

〔981〕 Number 0　»

〔982〕 Set Variable TravelMinutes to 〔981 Number〕

〔983〕 End If

〔984〕 Calculate 〔TravelDays〕 × 1440　» 986

〔985〕 Calculate 〔TravelHours〕 × 60　»

〔986〕 Calculate 〔985 Calculation Result〕 + 〔984 Calculation Result〕　»

〔987〕 Calculate 〔986 Calculation Result〕 + 〔TravelMinutes〕　»

〔988〕 Set Variable CurrentToDeparture to 〔987 Calculation Result〕

〔989〕 End If　▵950

〔990〕 Get 〔TravelMethod〕 Time 　➔ DepartureToDestination　»
• GetDirectionsCustomLocation: 〔HomeAddress〕
• Destination: 〔Repeat Item’s Location〕

〔991〕 Set Variable TravelTimeString to 〔990 DepartureToDestination〕

〔992〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔993〕 Set Variable MatchString to 〔992 Matches〕

〔994〕 Count Items in 〔MatchString〕　»

〔995〕 If 〔994 Count〕 is 1

〔996〕 Get First Item from List 〔MatchString〕　»

〔997〕 Set Variable TravelDays to 〔996 Item from List〕

〔998〕 Otherwise

〔999〕 Number 0　»

〔1000〕 Set Variable TravelDays to 〔999 Number〕

〔1001〕 End If

〔1002〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1003〕 Set Variable MatchString to 〔1002 Matches〕

〔1004〕 Count Items in 〔MatchString〕　»

〔1005〕 If 〔1004 Count〕 is 1

〔1006〕 Get First Item from List 〔MatchString〕　»

〔1007〕 Set Variable TravelHours to 〔1006 Item from List〕

〔1008〕 Otherwise

〔1009〕 Number 0　»

〔1010〕 Set Variable TravelHours to 〔1009 Number〕

〔1011〕 End If

〔1012〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1013〕 Set Variable MatchString to 〔1012 Matches〕

〔1014〕 Count Items in 〔MatchString〕　»

〔1015〕 If 〔1014 Count〕 is 1

〔1016〕 Get First Item from List 〔MatchString〕　»

〔1017〕 Set Variable TravelMinutes to 〔1016 Item from List〕

〔1018〕 Otherwise

〔1019〕 Number 0　»

〔1020〕 Set Variable TravelMinutes to 〔1019 Number〕

〔1021〕 End If

〔1022〕 Calculate 〔TravelDays〕 × 1440　» 1024

〔1023〕 Calculate 〔TravelHours〕 × 60　»

〔1024〕 Calculate 〔1023 Calculation Result〕 + 〔1022 Calculation Result〕　»

〔1025〕 Calculate 〔1024 Calculation Result〕 + 〔TravelMinutes〕　»

〔1026〕 Calculate 〔1025 Calculation Result〕 + 〔CurrentToDeparture〕　»

〔1027〕 Set Variable TravelTime to 〔1026 Calculation Result〕

〔1028〕 Otherwise　▵944

〔1029〕 Text
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS NOT MAINTAINED

〔1030〕 Get 〔TravelMethod〕 Time　»
• Destination: 〔Repeat Item’s Location〕

〔1031〕 Set Variable TravelTimeString to 〔1030 Travel Time〕

〔1032〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1033〕 Set Variable MatchString to 〔1032 Matches〕

〔1034〕 Count Items in 〔MatchString〕　»

〔1035〕 If 〔1034 Count〕 is 1

〔1036〕 Get First Item from List 〔MatchString〕　»

〔1037〕 Set Variable TravelDays to 〔1036 Item from List〕

〔1038〕 Otherwise

〔1039〕 Number 0　»

〔1040〕 Set Variable TravelDays to 〔1039 Number〕

〔1041〕 End If

〔1042〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1043〕 Set Variable MatchString to 〔1042 Matches〕

〔1044〕 Count Items in 〔MatchString〕　»

〔1045〕 If 〔1044 Count〕 is 1

〔1046〕 Get First Item from List 〔MatchString〕　»

〔1047〕 Set Variable TravelHours to 〔1046 Item from List〕

〔1048〕 Otherwise

〔1049〕 Number 0　»

〔1050〕 Set Variable TravelHours to 〔1049 Number〕

〔1051〕 End If

〔1052〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1053〕 Set Variable MatchString to 〔1052 Matches〕

〔1054〕 Count Items in 〔MatchString〕　»

〔1055〕 If 〔1054 Count〕 is 1

〔1056〕 Get First Item from List 〔MatchString〕　»

〔1057〕 Set Variable TravelMinutes to 〔1056 Item from List〕

〔1058〕 Otherwise

〔1059〕 Number 0　»

〔1060〕 Set Variable TravelMinutes to 〔1059 Number〕

〔1061〕 End If

〔1062〕 Calculate 〔TravelDays〕 × 1440　» 1064

〔1063〕 Calculate 〔TravelHours〕 × 60　»

〔1064〕 Calculate 〔1063 Calculation Result〕 + 〔1062 Calculation Result〕　»

〔1065〕 Calculate 〔1064 Calculation Result〕 + 〔TravelMinutes〕　»

〔1066〕 Set Variable TravelTime to 〔1065 Calculation Result〕

〔1067〕 End If　▵1028

〔1068〕 End If　▵936

〔1069〕 Otherwise　▵841

〔1070〕 Number 0　»

〔1071〕 Set Variable TravelTime to 〔1070 Number〕

〔1072〕 End If

〔1073〕 Calculate 〔TravelTime〕 + 〔ExtraTime〕　»

〔1074〕 Adjust Subtract Date 〔Repeat Item’s Start Date〕 　➔ Supposed Alarm Time　» 1075 1078 1081 1084 1091 1107 1109 1110 1129 1134 1137
• Duration: 〔1073 Calculation Result〕 min

〔1075〕 Dictionary 　➔ Alarm Label Dictionary　» 1107 1112 1129
{  "Event": "〔Repeat Item〕",
   "From": "〔Repeat Item’s Start Date〕",
   "To": "〔Repeat Item’s End Date〕",
   "Location": "〔Repeat Item’s Location〕",
   "AlarmTime": "〔1074 Supposed Alarm Time〕"
}

〔1076〕 Date Current Date 　➔ Current Date　» 1077 1078 1109

〔1077〕 Adjust Add Date 〔1076 Current Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"dd MMM yyyy"}〕 　➔ 1 day after　» 1091 1110
• Duration: "1" days

〔1078〕 If 〔1074 Supposed Alarm Time〕 is 〔1076 Current Date〕

〔1079〕 Comment
supposed alarm time is exactly 12:00am

〔1080〕 If 〔Repeat Item’s Location〕 has any value

〔1081〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 at 〔Repeat Item’s Location〕 which  was supposed to get ready at 〔1074 Supposed Alarm Time〕. Please check.

〔1082〕 Set Variable Text to 〔1081 Text〕

〔1083〕 Otherwise

〔1084〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 which  was supposed to get ready at 〔1074 Supposed Alarm Time〕. Please check.

〔1085〕 Set Variable Text to 〔1084 Text〕

〔1086〕 End If

〔1087〕 Show Alert 〔Text〕

〔1088〕 Show Notification 〔Text〕

〔1089〕 Speak Text
• Text: 〔Text〕

〔1090〕 Otherwise　▵1078

〔1091〕 If 〔1074 Supposed Alarm Time〕 is 〔1077 1 day after〕

〔1092〕 Find Alarm All Alarm　» 1093 1094

〔1093〕 If 〔1092 Alarms〕 has any value

〔1094〕 Repeat[2] with Each in 〔1092 Alarms〕

〔1095〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ AlarmLabelDictionary　» 1096 1097 1099

〔1096〕 Get Dictionary Value for Event in 〔1095 AlarmLabelDictionary〕 　➔ Event　» 1101

〔1097〕 Get Dictionary Value for From in 〔1095 AlarmLabelDictionary〕 　➔ From　»

〔1098〕 Get Dates from 〔1097 From〕 　➔ FromDate　» 1101

〔1099〕 Get Dictionary Value for To in 〔1095 AlarmLabelDictionary〕 　➔ To　»

〔1100〕 Get Dates from 〔1099 To〕 　➔ ToDate　»

〔1101〕 If All are true　〔1096 Event’s Name〕 is 〔Repeat Item〕　〔1098 FromDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔Repeat Item’s Start Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕　〔1100 ToDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is • ConditionalActionString
〔Repeat Item’s End Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕• Date
〔Repeat Item’s End Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕

〔1102〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔1103〕 End If

〔1104〕 End Repeat[2] with Each　▵1094

〔1105〕 End If　▵1093

〔1106〕 Comment
since this will be triggered at 12:00 am each day, when the supposed alarm time is 12:00 am in the next day, you can set alarm now

〔1107〕 Add Alarm for 〔1074 Supposed Alarm Time〕 called 〔1075 Alarm Label Dictionary〕

〔1108〕 Otherwise　▵1091

〔1109〕 If 〔1074 Supposed Alarm Time〕 > 〔1076 Current Date〕

〔1110〕 If 〔1074 Supposed Alarm Time〕 > 〔1077 1 day after〕

〔1111〕 Comment
when the time is other than 12:00 am of then next day, you cannot set alarm yet. If set, it will be today. For example, triggering time 2025-4-8 12:00 am, the supposed alarm time is 2025-4-9 08:00 am, if you set an alarm at 08:00 at 2025-4-8 12:00 am, it will alarm at 2025-4-8 08:00 am instead. So we need to record the supposed alarm time and trigger next day.

〔1112〕 Set Variable Event to 〔1075 Alarm Label Dictionary〕

〔1113〕 Otherwise

〔1114〕 Find Alarm All Alarm　» 1115 1116
• ContentItemFilter: {  "Value": {
      "WFActionParameterFilterPrefix": 1,
      "WFContentPredicateBoundedDate": false,
      "WFActionParameterFilterTemplates": []
   },
   "WFSerializationType": "WFContentPredicateTableTemplate"
}

〔1115〕 If 〔1114 Alarms〕 has any value

〔1116〕 Repeat[2] with Each in 〔1114 Alarms〕

〔1117〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ AlarmLabelDictionary　» 1118 1120 1122

〔1118〕 Get Dictionary Value for Event in 〔1117 AlarmLabelDictionary〕 　➔ Event　»

〔1119〕 Get Text from 〔1118 Event〕　» 1124

〔1120〕 Get Dictionary Value for From in 〔1117 AlarmLabelDictionary〕 　➔ From　»

〔1121〕 Get Dates from 〔1120 From〕 　➔ FromDate　» 1124

〔1122〕 Get Dictionary Value for To in 〔1117 AlarmLabelDictionary〕 　➔ To　»

〔1123〕 Get Dates from 〔1122 To〕 　➔ ToDate　»

〔1124〕 If All are true　〔1119 Text〕 is 〔Repeat Item〕　〔1121 FromDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm:ss Z"}〕 is 〔Repeat Item’s Start Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm:ss Z"}〕　〔1123 ToDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm:ss Z"}〕 is 〔Repeat Item’s End Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm:ss Z"}〕

〔1125〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔1126〕 End If

〔1127〕 End Repeat[2] with Each　▵1116

〔1128〕 End If　▵1115

〔1129〕 Add Alarm for 〔1074 Supposed Alarm Time〕 called 〔1075 Alarm Label Dictionary〕

〔1130〕 End If　▵1113

〔1131〕 Otherwise　▵1109

〔1132〕 Comment
the supposed alarm time passed

〔1133〕 If 〔Repeat Item’s Location〕 has any value

〔1134〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 at 〔Repeat Item’s Location〕 which  was supposed to get ready at 〔1074 Supposed Alarm Time〕. Please check.

〔1135〕 Set Variable Text to 〔1134 Text〕

〔1136〕 Otherwise

〔1137〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 which  was supposed to get ready at 〔1074 Supposed Alarm Time〕. Please check.

〔1138〕 Set Variable Text to 〔1137 Text〕

〔1139〕 End If

〔1140〕 Show Alert 〔Text〕

〔1141〕 Show Notification 〔Text〕

〔1142〕 Speak Text
• Text: 〔Text〕

〔1143〕 End If　▵1131

〔1144〕 End If　▵1108

〔1145〕 End If　▵1090

〔1146〕 If 〔Event〕 has any value

〔1147〕 Get Dictionary from 〔Event〕　» 1148 1149 1151

〔1148〕 Get Text from 〔1147 Dictionary.Event〕　» 1166

〔1149〕 Get Dates from 〔1147 Dictionary.From〕　»

〔1150〕 Format Date 〔1149 Dates〕　» 1166
• DateFormatStyle: ISO 8601
• ISO8601IncludeTime: true

〔1151〕 Get Dates from 〔1147 Dictionary.To〕　»

〔1152〕 Format Date 〔1151 Dates〕　» 1166
• DateFormatStyle: ISO 8601
• ISO8601IncludeTime: true

〔1153〕 Text　»

〔1154〕 Set Variable TextList to 〔1153 Text〕

〔1155〕 Add 〔Event〕 to Variable TextList

〔1156〕 Get File at Path Smart Calendar Reminder/Future Alarms.txt from Folder　» 1157 1158
• FileErrorIfNotFound: false

〔1157〕 If 〔1156 File’s File Size〕 has any value

〔1158〕 Split Text 〔1156 File〕 by New Lines　»

〔1159〕 Repeat[2] with Each in 〔1158 Split Text〕

〔1160〕 Get Dictionary from 〔Repeat Item 2〕　» 1161 1162 1164

〔1161〕 Get Text from 〔1160 Dictionary.Event〕　» 1166

〔1162〕 Get Dates from 〔1160 Dictionary.From〕　» 1163 1166

〔1163〕 Format Date 〔1162 Dates〕　» 1166
• DateFormatStyle: ISO 8601
• ISO8601IncludeTime: true

〔1164〕 Get Dates from 〔1160 Dictionary.To〕　» 1165 1166

〔1165〕 Format Date 〔1164 Dates〕　»
• DateFormatStyle: ISO 8601
• ISO8601IncludeTime: true

〔1166〕 If All are true　〔1148 Text〕 is 〔1161 Text〕　〔1150 Formatted Date〕 is • ConditionalActionString
〔1163 Formatted Date〕• Date
〔1162 Dates〕　〔1152 Formatted Date〕 is • ConditionalActionString
〔1165 Formatted Date〕• Date
〔1164 Dates〕

〔1167〕 Nothing

〔1168〕 Otherwise

〔1169〕 Add 〔Repeat Item 2〕 to Variable TextList

〔1170〕 End If

〔1171〕 End Repeat[2] with Each　▵1159

〔1172〕 Combine Text 〔TextList〕 with New Lines　»

〔1173〕 Save File 〔1172 Combined Text〕
• AskWhereToSave: false
• SaveFileOverwrite: true
• FileDestinationPath: Smart Calendar Reminder/Future Alarms.txt

〔1174〕 Otherwise　▵1157

〔1175〕 Text　»

〔Event〕

〔1176〕 Save File 〔1175 Text〕
• AskWhereToSave: false
• FileDestinationPath: Smart Calendar Reminder/Future Alarms.txt

〔1177〕 End If

〔1178〕 End If　▵1146

〔1179〕 End Repeat with Each　▵839

〔1180〕 End If　▵838

〔1181〕 Get File at Path Smart Calendar Reminder/Future Alarms.txt from Folder　» 1182 1183
• FileErrorIfNotFound: false

〔1182〕 If 〔1181 File’s File Size〕 has any value

〔1183〕 Split Text 〔1181 File〕 by New Lines　»

〔1184〕 Repeat with Each in 〔1183 Split Text〕

〔1185〕 Get Dictionary from 〔Repeat Item〕　» 1186 1187 1197 1208

〔1186〕 If 〔1185 Dictionary〕 has any value

〔1187〕 Get Dates from 〔1185 Dictionary.AlarmTime〕　» 1188 1208

〔1188〕 If 〔1187 Dates〕 is today

〔1189〕 Find Alarm Library　» 1190 1191
• ContentItemFilter: {  "Value": {
      "WFActionParameterFilterPrefix": 1,
      "WFContentPredicateBoundedDate": false,
      "WFActionParameterFilterTemplates": []
   },
   "WFSerializationType": "WFContentPredicateTableTemplate"
}

〔1190〕 If 〔1189 Alarms〕 has any value

〔1191〕 Repeat[2] with Each in 〔1189 Alarms〕

〔1192〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ Alarm_Label_Dictionary　» 1193 1195 1203

〔1193〕 Get Dictionary Value for From in 〔1192 Alarm_Label_Dictionary〕　»

〔1194〕 Get Dates from 〔1193 Dictionary Value〕 　➔ From_Date　» 1203

〔1195〕 Get Dictionary Value for To in 〔1192 Alarm_Label_Dictionary〕　»

〔1196〕 Get Dates from 〔1195 Dictionary Value〕 　➔ To_Date　» 1203

〔1197〕 Get Dictionary from 〔1185 Dictionary.Event〕 　➔ FutureAlarmLabelDictionary　» 1198 1199 1201

〔1198〕 Get Dictionary Value for Event in 〔1197 FutureAlarmLabelDictionary〕 　➔ Event　» 1203

〔1199〕 Get Dictionary Value for From in 〔1197 FutureAlarmLabelDictionary〕 　➔ From　»

〔1200〕 Get Dates from 〔1199 From〕 　➔ FromDate　» 1203

〔1201〕 Get Dictionary Value for To in 〔1197 FutureAlarmLabelDictionary〕 　➔ To　»

〔1202〕 Get Dates from 〔1201 To〕 　➔ ToDate　»

〔1203〕 If All are true　〔1198 Event’s Name〕 is 〔1192 Alarm_Label_Dictionary.Event〕　〔1200 FromDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔1194 From_Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕　〔1202 ToDate{"Date Style":"Custom","WFDateFormat":"HH:mm","WFISO8601IncludeTime":false}〕 is 〔1196 To_Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕

〔1204〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔1205〕 End If

〔1206〕 End Repeat[2] with Each　▵1191

〔1207〕 End If　▵1190

〔1208〕 Add Alarm for 〔1187 Dates〕 called 〔1185 Dictionary.Event〕

〔1209〕 End If　▵1188

〔1210〕 End If　▵1186

〔1211〕 End Repeat with Each　▵1184

〔1212〕 End If　▵1182

〔1213〕 End If　▵826

〔1214〕 If 〔Shortcut Input as Number〕 is 6

〔1215〕 Comment
*Revolutionizing event management by integrating calendar data with intelligent automation:

Voice announcements for upcoming events

Dynamic alarm calculation (travel + prep time)

Calendar-driven scheduling system
Eliminates manual reminders and ensures perfect timing synchronization*

〔1216〕 Get File at Path Smart Calendar Reminder/aboutme.txt from Folder　»
• FileErrorIfNotFound: false

〔1217〕 Get Dictionary from 〔1216 File〕　» 1218 1221 1222

〔1218〕 Get Dictionary from 〔1217 Dictionary.HomeAddress〕　»

〔1219〕 Text　»
〔1218 Dictionary.street〕 〔1218 Dictionary.city〕 〔1218 Dictionary.state〕 〔1218 Dictionary.postcode〕 〔1218 Dictionary.country〕\u{space}

〔1220〕 Set Variable HomeAddress to 〔1219 Text〕

〔1221〕 Set Variable TravelMethod to 〔1217 Dictionary.TravelMethod〕

〔1222〕 Get Dictionary Value for ExtraTime in 〔1217 Dictionary〕　»

〔1223〕 Get Numbers from 〔1222 Dictionary Value〕　»

〔1224〕 Set Variable ExtraTime to 〔1223 Numbers〕

〔1225〕 Find Calendar Events All Calendar Events where　» 1226 1227
• ContentItemSortProperty: Start Date
• ContentItemSortOrder: Oldest First
• ContentItemFilter: • All the following are true
Start Date is in the next 1 weeks
Is Not All Day
Canceled is {"Bool":false}

〔1226〕 If 〔1225 Calendar Events〕 has any value

〔1227〕 Repeat with Each in 〔1225 Calendar Events〕

〔1228〕 If 〔Repeat Item’s Location〕 has any value

〔1229〕 Get Current Location　» 1241 1247 1333
• Accuracy: Best

〔1230〕 Comment
*To specify event-specific departure locations:

1. Create calendar event notes with JSON structure:
{
“Street”: “your departure street”,
“City”: “your departure city”,
“State”: “your departure state”,
“Country”: “your departure country”,
“Postcode”: “your departure postcode”
}
2. System prioritizes these over default locations*

〔1231〕 If All are true　〔Repeat Item’s Notes〕 has any value　〔Repeat Item’s Notes〕 begins with {　〔Repeat Item’s Notes〕 ends with }

〔1232〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY

〔1233〕 Get Dictionary from 〔Repeat Item’s Notes〕 　➔ Notes Address Dictionary　» 1234 1235 1236 1237 1238

〔1234〕 Set Variable Calendar_Notes_Street to 〔1233 Notes Address Dictionary.Street〕

〔1235〕 Set Variable Calendar_Notes_City to 〔1233 Notes Address Dictionary.City〕

〔1236〕 Set Variable Calendar_Notes_State to 〔1233 Notes Address Dictionary.State〕

〔1237〕 Set Variable Calendar_Notes_Region to 〔1233 Notes Address Dictionary.Country〕

〔1238〕 Set Variable Calendar_Notes_ZIP_Code to 〔1233 Notes Address Dictionary.Postcode〕

〔1239〕 Text　»
〔Calendar_Notes_Street〕 〔Calendar_Notes_City〕 〔Calendar_Notes_State〕 〔Calendar_Notes_ZIP_Code〕 〔Calendar_Notes_Region〕

〔1240〕 Set Variable NotesAddressString to 〔1239 Text〕

〔1241〕 If All are true　〔1229 Current Location’s Street〕 is 〔Calendar_Notes_Street〕　〔1229 Current Location’s City〕 is 〔Calendar_Notes_City〕　〔1229 Current Location’s State〕 is 〔Calendar_Notes_State〕　〔1229 Current Location’s Country〕 is 〔Calendar_Notes_Region〕　〔1229 Current Location’s ZIP Code〕 is 〔Calendar_Notes_ZIP_Code〕

〔1242〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY -> CALENDAR EVENT ADDRESS IS THE SAME WITH CURRENT LOCATION

〔1243〕 Number 0　»

〔1244〕 Set Variable CurrentToDeparture to 〔1243 Number〕

〔1245〕 Otherwise

〔1246〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY -> CALENDAR EVENT ADDRESS IS NOT THE SAME WITH CURRENT LOCATION

〔1247〕 Get 〔TravelMethod〕 Time　»
• GetDirectionsCustomLocation: 〔1229 Current Location〕
• Destination: 〔NotesAddressString〕

〔1248〕 Set Variable TravelTimeString to 〔1247 Travel Time〕

〔1249〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1250〕 Set Variable MatchString to 〔1249 Matches〕

〔1251〕 Count Items in 〔MatchString〕　»

〔1252〕 If 〔1251 Count〕 is 1

〔1253〕 Get First Item from List 〔MatchString〕　»

〔1254〕 Set Variable TravelDays to 〔1253 Item from List〕

〔1255〕 Otherwise

〔1256〕 Number 0　»

〔1257〕 Set Variable TravelDays to 〔1256 Number〕

〔1258〕 End If

〔1259〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1260〕 Set Variable MatchString to 〔1259 Matches〕

〔1261〕 Count Items in 〔MatchString〕　»

〔1262〕 If 〔1261 Count〕 is 1

〔1263〕 Get First Item from List 〔MatchString〕　»

〔1264〕 Set Variable TravelHours to 〔1263 Item from List〕

〔1265〕 Otherwise

〔1266〕 Number 0　»

〔1267〕 Set Variable TravelHours to 〔1266 Number〕

〔1268〕 End If

〔1269〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1270〕 Set Variable MatchString to 〔1269 Matches〕

〔1271〕 Count Items in 〔MatchString〕　»

〔1272〕 If 〔1271 Count〕 is 1

〔1273〕 Get First Item from List 〔MatchString〕　»

〔1274〕 Set Variable TravelMinutes to 〔1273 Item from List〕

〔1275〕 Otherwise

〔1276〕 Number 0　»

〔1277〕 Set Variable TravelMinutes to 〔1276 Number〕

〔1278〕 End If

〔1279〕 Calculate 〔TravelDays〕 × 1440　» 1281

〔1280〕 Calculate 〔TravelHours〕 × 60　»

〔1281〕 Calculate 〔1280 Calculation Result〕 + 〔1279 Calculation Result〕　»

〔1282〕 Calculate 〔1281 Calculation Result〕 + 〔TravelMinutes〕　»

〔1283〕 Set Variable CurrentToDeparture to 〔1282 Calculation Result〕

〔1284〕 End If　▵1245

〔1285〕 Get 〔TravelMethod〕 Time 　➔ DepartureToDestination　»
• GetDirectionsCustomLocation: 〔NotesAddressString〕
• Destination: 〔Repeat Item’s Location〕

〔1286〕 Set Variable TravelTimeString to 〔1285 DepartureToDestination〕

〔1287〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1288〕 Set Variable MatchString to 〔1287 Matches〕

〔1289〕 Count Items in 〔MatchString〕　»

〔1290〕 If 〔1289 Count〕 is 1

〔1291〕 Get First Item from List 〔MatchString〕　»

〔1292〕 Set Variable TravelDays to 〔1291 Item from List〕

〔1293〕 Otherwise

〔1294〕 Number 0　»

〔1295〕 Set Variable TravelDays to 〔1294 Number〕

〔1296〕 End If

〔1297〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1298〕 Set Variable MatchString to 〔1297 Matches〕

〔1299〕 Count Items in 〔MatchString〕　»

〔1300〕 If 〔1299 Count〕 is 1

〔1301〕 Get First Item from List 〔MatchString〕　»

〔1302〕 Set Variable TravelHours to 〔1301 Item from List〕

〔1303〕 Otherwise

〔1304〕 Number 0　»

〔1305〕 Set Variable TravelHours to 〔1304 Number〕

〔1306〕 End If

〔1307〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1308〕 Set Variable MatchString to 〔1307 Matches〕

〔1309〕 Count Items in 〔MatchString〕　»

〔1310〕 If 〔1309 Count〕 is 1

〔1311〕 Get First Item from List 〔MatchString〕　»

〔1312〕 Set Variable TravelMinutes to 〔1311 Item from List〕

〔1313〕 Otherwise

〔1314〕 Number 0　»

〔1315〕 Set Variable TravelMinutes to 〔1314 Number〕

〔1316〕 End If

〔1317〕 Calculate 〔TravelDays〕 × 1440　» 1319

〔1318〕 Calculate 〔TravelHours〕 × 60　»

〔1319〕 Calculate 〔1318 Calculation Result〕 + 〔1317 Calculation Result〕　»

〔1320〕 Calculate 〔1319 Calculation Result〕 + 〔TravelMinutes〕　»

〔1321〕 Calculate 〔1320 Calculation Result〕 + 〔CurrentToDeparture〕　»

〔1322〕 Set Variable TravelTime to 〔1321 Calculation Result〕

〔1323〕 Otherwise　▵1231

〔1324〕 Comment
CALENDER EVENT NOTES IS BLANK

〔1325〕 Get Dictionary from 〔HomeAddress〕 　➔ Home Address Dictionary　» 1326 1327 1328 1329 1330

〔1326〕 Get Dictionary Value for street in 〔1325 Home Address Dictionary〕 　➔ home_Street　» 1331 1333

〔1327〕 Get Dictionary Value for city in 〔1325 Home Address Dictionary〕 　➔ home_City　» 1331 1333

〔1328〕 Get Dictionary Value for state in 〔1325 Home Address Dictionary〕 　➔ home_State　» 1331 1333

〔1329〕 Get Dictionary Value for country in 〔1325 Home Address Dictionary〕 　➔ home_Country　» 1331 1333

〔1330〕 Get Dictionary Value for postcode in 〔1325 Home Address Dictionary〕 　➔ home_Postcode　» 1331 1333

〔1331〕 If All are true　〔1326 home_Street〕 has any value　〔1327 home_City〕 has any value　〔1328 home_State〕 has any value　〔1329 home_Country〕 has any value　〔1330 home_Postcode〕 has any value

〔1332〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED

〔1333〕 If All are true　〔1229 Current Location’s Street〕 is 〔1326 home_Street〕　〔1229 Current Location’s City〕 is 〔1327 home_City〕　〔1229 Current Location’s State〕 is 〔1328 home_State〕　〔1229 Current Location’s Country〕 is 〔1329 home_Country〕　〔1229 Current Location’s ZIP Code〕 is 〔1330 home_Postcode〕

〔1334〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED -> HOME ADDRESS IS THE SAME WITH CURRENT LOCATION

〔1335〕 Number 0　»

〔1336〕 Set Variable CurrentToDeparture to 〔1335 Number〕

〔1337〕 Otherwise

〔1338〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED -> HOME ADDRESS IS NOT THE SAME WITH CURRENT LOCATION

〔1339〕 Get 〔TravelMethod〕 Time　»
• Destination: 〔HomeAddress〕

〔1340〕 Set Variable TravelTimeString to 〔1339 Travel Time〕

〔1341〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1342〕 Set Variable MatchString to 〔1341 Matches〕

〔1343〕 Count Items in 〔MatchString〕　»

〔1344〕 If 〔1343 Count〕 is 1

〔1345〕 Get First Item from List 〔MatchString〕　»

〔1346〕 Set Variable TravelDays to 〔1345 Item from List〕

〔1347〕 Otherwise

〔1348〕 Number 0　»

〔1349〕 Set Variable TravelDays to 〔1348 Number〕

〔1350〕 End If

〔1351〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1352〕 Set Variable MatchString to 〔1351 Matches〕

〔1353〕 Count Items in 〔MatchString〕　»

〔1354〕 If 〔1353 Count〕 is 1

〔1355〕 Get First Item from List 〔MatchString〕　»

〔1356〕 Set Variable TravelHours to 〔1355 Item from List〕

〔1357〕 Otherwise

〔1358〕 Number 0　»

〔1359〕 Set Variable TravelHours to 〔1358 Number〕

〔1360〕 End If

〔1361〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1362〕 Set Variable MatchString to 〔1361 Matches〕

〔1363〕 Count Items in 〔MatchString〕　»

〔1364〕 If 〔1363 Count〕 is 1

〔1365〕 Get First Item from List 〔MatchString〕　»

〔1366〕 Set Variable TravelMinutes to 〔1365 Item from List〕

〔1367〕 Otherwise

〔1368〕 Number 0　»

〔1369〕 Set Variable TravelMinutes to 〔1368 Number〕

〔1370〕 End If

〔1371〕 Calculate 〔TravelDays〕 × 1440　» 1373

〔1372〕 Calculate 〔TravelHours〕 × 60　»

〔1373〕 Calculate 〔1372 Calculation Result〕 + 〔1371 Calculation Result〕　»

〔1374〕 Calculate 〔1373 Calculation Result〕 + 〔TravelMinutes〕　»

〔1375〕 Set Variable CurrentToDeparture to 〔1374 Calculation Result〕

〔1376〕 End If　▵1337

〔1377〕 Get 〔TravelMethod〕 Time 　➔ DepartureToDestination　»
• GetDirectionsCustomLocation: 〔HomeAddress〕
• Destination: 〔Repeat Item’s Location〕

〔1378〕 Set Variable TravelTimeString to 〔1377 DepartureToDestination〕

〔1379〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1380〕 Set Variable MatchString to 〔1379 Matches〕

〔1381〕 Count Items in 〔MatchString〕　»

〔1382〕 If 〔1381 Count〕 is 1

〔1383〕 Get First Item from List 〔MatchString〕　»

〔1384〕 Set Variable TravelDays to 〔1383 Item from List〕

〔1385〕 Otherwise

〔1386〕 Number 0　»

〔1387〕 Set Variable TravelDays to 〔1386 Number〕

〔1388〕 End If

〔1389〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1390〕 Set Variable MatchString to 〔1389 Matches〕

〔1391〕 Count Items in 〔MatchString〕　»

〔1392〕 If 〔1391 Count〕 is 1

〔1393〕 Get First Item from List 〔MatchString〕　»

〔1394〕 Set Variable TravelHours to 〔1393 Item from List〕

〔1395〕 Otherwise

〔1396〕 Number 0　»

〔1397〕 Set Variable TravelHours to 〔1396 Number〕

〔1398〕 End If

〔1399〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1400〕 Set Variable MatchString to 〔1399 Matches〕

〔1401〕 Count Items in 〔MatchString〕　»

〔1402〕 If 〔1401 Count〕 is 1

〔1403〕 Get First Item from List 〔MatchString〕　»

〔1404〕 Set Variable TravelMinutes to 〔1403 Item from List〕

〔1405〕 Otherwise

〔1406〕 Number 0　»

〔1407〕 Set Variable TravelMinutes to 〔1406 Number〕

〔1408〕 End If

〔1409〕 Calculate 〔TravelDays〕 × 1440　» 1411

〔1410〕 Calculate 〔TravelHours〕 × 60　»

〔1411〕 Calculate 〔1410 Calculation Result〕 + 〔1409 Calculation Result〕　»

〔1412〕 Calculate 〔1411 Calculation Result〕 + 〔TravelMinutes〕　»

〔1413〕 Calculate 〔1412 Calculation Result〕 + 〔CurrentToDeparture〕　»

〔1414〕 Set Variable TravelTime to 〔1413 Calculation Result〕

〔1415〕 Otherwise　▵1331

〔1416〕 Text
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS NOT MAINTAINED

〔1417〕 Get 〔TravelMethod〕 Time　»
• Destination: 〔Repeat Item’s Location〕

〔1418〕 Set Variable TravelTimeString to 〔1417 Travel Time〕

〔1419〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1420〕 Set Variable MatchString to 〔1419 Matches〕

〔1421〕 Count Items in 〔MatchString〕　»

〔1422〕 If 〔1421 Count〕 is 1

〔1423〕 Get First Item from List 〔MatchString〕　»

〔1424〕 Set Variable TravelDays to 〔1423 Item from List〕

〔1425〕 Otherwise

〔1426〕 Number 0　»

〔1427〕 Set Variable TravelDays to 〔1426 Number〕

〔1428〕 End If

〔1429〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1430〕 Set Variable MatchString to 〔1429 Matches〕

〔1431〕 Count Items in 〔MatchString〕　»

〔1432〕 If 〔1431 Count〕 is 1

〔1433〕 Get First Item from List 〔MatchString〕　»

〔1434〕 Set Variable TravelHours to 〔1433 Item from List〕

〔1435〕 Otherwise

〔1436〕 Number 0　»

〔1437〕 Set Variable TravelHours to 〔1436 Number〕

〔1438〕 End If

〔1439〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1440〕 Set Variable MatchString to 〔1439 Matches〕

〔1441〕 Count Items in 〔MatchString〕　»

〔1442〕 If 〔1441 Count〕 is 1

〔1443〕 Get First Item from List 〔MatchString〕　»

〔1444〕 Set Variable TravelMinutes to 〔1443 Item from List〕

〔1445〕 Otherwise

〔1446〕 Number 0　»

〔1447〕 Set Variable TravelMinutes to 〔1446 Number〕

〔1448〕 End If

〔1449〕 Calculate 〔TravelDays〕 × 1440　» 1451

〔1450〕 Calculate 〔TravelHours〕 × 60　»

〔1451〕 Calculate 〔1450 Calculation Result〕 + 〔1449 Calculation Result〕　»

〔1452〕 Calculate 〔1451 Calculation Result〕 + 〔TravelMinutes〕　»

〔1453〕 Set Variable TravelTime to 〔1452 Calculation Result〕

〔1454〕 End If　▵1415

〔1455〕 End If　▵1323

〔1456〕 Otherwise　▵1228

〔1457〕 Number 0　»

〔1458〕 Set Variable TravelTime to 〔1457 Number〕

〔1459〕 End If

〔1460〕 Calculate 〔TravelTime〕 + 〔ExtraTime〕　»

〔1461〕 Adjust Subtract Date 〔Repeat Item’s Start Date〕 　➔ Supposed Alarm Time　» 1462 1465 1468 1471 1478 1494 1496 1497 1515 1520 1523
• Duration: 〔1460 Calculation Result〕 min

〔1462〕 Dictionary 　➔ Alarm Label Dictionary　» 1494 1499 1515
{  "Event": "〔Repeat Item〕",
   "From": "〔Repeat Item’s Start Date〕",
   "To": "〔Repeat Item’s End Date〕",
   "Location": "〔Repeat Item’s Location〕",
   "AlarmTime": "〔1461 Supposed Alarm Time〕"
}

〔1463〕 Date Current Date 　➔ Current Date　» 1464 1465 1496

〔1464〕 Adjust Add Date 〔1463 Current Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"dd MMM yyyy"}〕 　➔ 1 day after　» 1478 1497
• Duration: "1" days

〔1465〕 If 〔1461 Supposed Alarm Time〕 is 〔1463 Current Date〕

〔1466〕 Comment
supposed alarm time is exactly 12:00am

〔1467〕 If 〔Repeat Item’s Location〕 has any value

〔1468〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 at 〔Repeat Item’s Location〕 which  was supposed to get ready at 〔1461 Supposed Alarm Time〕. Please check.

〔1469〕 Set Variable Text to 〔1468 Text〕

〔1470〕 Otherwise

〔1471〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 which  was supposed to get ready at 〔1461 Supposed Alarm Time〕. Please check.

〔1472〕 Set Variable Text to 〔1471 Text〕

〔1473〕 End If

〔1474〕 Show Alert 〔Text〕

〔1475〕 Show Notification 〔Text〕

〔1476〕 Speak Text
• Text: 〔Text〕

〔1477〕 Otherwise　▵1465

〔1478〕 If 〔1461 Supposed Alarm Time〕 is 〔1464 1 day after〕

〔1479〕 Find Alarm All Alarm　» 1480 1481

〔1480〕 If 〔1479 Alarms〕 has any value

〔1481〕 Repeat[2] with Each in 〔1479 Alarms〕

〔1482〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ AlarmLabelDictionary　» 1483 1484 1486

〔1483〕 Get Dictionary Value for Event in 〔1482 AlarmLabelDictionary〕 　➔ Event　» 1488

〔1484〕 Get Dictionary Value for From in 〔1482 AlarmLabelDictionary〕 　➔ From　»

〔1485〕 Get Dates from 〔1484 From〕 　➔ FromDate　» 1488

〔1486〕 Get Dictionary Value for To in 〔1482 AlarmLabelDictionary〕 　➔ To　»

〔1487〕 Get Dates from 〔1486 To〕 　➔ ToDate　»

〔1488〕 If All are true　〔1483 Event’s Name〕 is 〔Repeat Item〕　〔1485 FromDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔Repeat Item’s Start Date{"Date Style":"Custom","WFDateFormat":"HH:mm","WFISO8601IncludeTime":false}〕　〔1487 ToDate{"Date Style":"Custom","WFDateFormat":"HH:mm","WFISO8601IncludeTime":false}〕 is • ConditionalActionString
〔Repeat Item’s End Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕• Date
〔Repeat Item’s End Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕

〔1489〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔1490〕 End If

〔1491〕 End Repeat[2] with Each　▵1481

〔1492〕 End If　▵1480

〔1493〕 Comment
since this will be triggered at 12:00 am each day, when the supposed alarm time is 12:00 am in the next day, you can set alarm now

〔1494〕 Add Alarm for 〔1461 Supposed Alarm Time〕 called 〔1462 Alarm Label Dictionary〕

〔1495〕 Otherwise　▵1478

〔1496〕 If 〔1461 Supposed Alarm Time〕 > 〔1463 Current Date〕

〔1497〕 If 〔1461 Supposed Alarm Time〕 > 〔1464 1 day after〕

〔1498〕 Comment
when the time is other than 12:00 am of then next day, you cannot set alarm yet. If set, it will be today. For example, triggering time 2025-4-8 12:00 am, the supposed alarm time is 2025-4-9 08:00 am, if you set an alarm at 08:00 at 2025-4-8 12:00 am, it will alarm at 2025-4-8 08:00 am instead. So we need to record the supposed alarm time and trigger next day.

〔1499〕 Set Variable Event to 〔1462 Alarm Label Dictionary〕

〔1500〕 Otherwise

〔1501〕 Find Alarm All Alarm　» 1502 1503
• ContentItemFilter: {  "Value": {
      "WFActionParameterFilterPrefix": 1,
      "WFContentPredicateBoundedDate": false,
      "WFActionParameterFilterTemplates": []
   },
   "WFSerializationType": "WFContentPredicateTableTemplate"
}

〔1502〕 If 〔1501 Alarms〕 has any value

〔1503〕 Repeat[2] with Each in 〔1501 Alarms〕

〔1504〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ AlarmLabelDictionary　» 1505 1506 1508

〔1505〕 Get Dictionary Value for Event in 〔1504 AlarmLabelDictionary〕 　➔ Event　» 1510

〔1506〕 Get Dictionary Value for From in 〔1504 AlarmLabelDictionary〕 　➔ From　»

〔1507〕 Get Dates from 〔1506 From〕 　➔ FromDate　» 1510

〔1508〕 Get Dictionary Value for To in 〔1504 AlarmLabelDictionary〕 　➔ To　»

〔1509〕 Get Dates from 〔1508 To〕 　➔ ToDate　»

〔1510〕 If All are true　〔1505 Event’s Name〕 is 〔Repeat Item〕　〔1507 FromDate{"Date Style":"Custom","WFDateFormat":"HH:mm","WFISO8601IncludeTime":false}〕 is 〔Repeat Item’s Start Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕　〔1509 ToDate{"Date Style":"Custom","WFDateFormat":"HH:mm","WFISO8601IncludeTime":false}〕 is 〔Repeat Item’s End Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕

〔1511〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔1512〕 End If

〔1513〕 End Repeat[2] with Each　▵1503

〔1514〕 End If　▵1502

〔1515〕 Add Alarm for 〔1461 Supposed Alarm Time〕 called 〔1462 Alarm Label Dictionary〕

〔1516〕 End If　▵1500

〔1517〕 Otherwise　▵1496

〔1518〕 Comment
the supposed alarm time passed

〔1519〕 If 〔Repeat Item’s Location〕 has any value

〔1520〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 at 〔Repeat Item’s Location〕 which  was supposed to get ready at 〔1461 Supposed Alarm Time〕. Please check.

〔1521〕 Set Variable Text to 〔1520 Text〕

〔1522〕 Otherwise

〔1523〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 which  was supposed to get ready at 〔1461 Supposed Alarm Time〕. Please check.

〔1524〕 Set Variable Text to 〔1523 Text〕

〔1525〕 End If

〔1526〕 Show Alert 〔Text〕

〔1527〕 Show Notification 〔Text〕

〔1528〕 Speak Text
• Text: 〔Text〕

〔1529〕 End If　▵1517

〔1530〕 End If　▵1495

〔1531〕 End If　▵1477

〔1532〕 If 〔Event〕 has any value

〔1533〕 Get Dictionary from 〔Event〕　» 1546

〔1534〕 Text　»

〔1535〕 Set Variable TextList to 〔1534 Text〕

〔1536〕 Add 〔Event〕 to Variable TextList

〔1537〕 Get File at Path Smart Calendar Reminder/Future Alarms.txt from Folder　» 1538 1539
• FileErrorIfNotFound: false

〔1538〕 If 〔1537 File’s File Size〕 has any value

〔1539〕 Split Text 〔1537 File〕 by New Lines　»

〔1540〕 Repeat[2] with Each in 〔1539 Split Text〕

〔1541〕 Get Dictionary from 〔Repeat Item 2〕　» 1542 1543 1544 1545

〔1542〕 Get Dictionary Value for Event in 〔1541 Dictionary〕 　➔ Event　» 1546

〔1543〕 Get Dictionary Value for From in 〔1541 Dictionary〕 　➔ From　» 1546

〔1544〕 Get Dictionary Value for To in 〔1541 Dictionary〕 　➔ To　» 1546

〔1545〕 Get Dictionary Value for Location in 〔1541 Dictionary〕 　➔ Location　»

〔1546〕 If Any are true　〔1542 Event’s Name〕 is not 〔1533 Dictionary.Event〕　〔1543 From’s Name〕 is not 〔1533 Dictionary.From〕　〔1544 To’s Name〕 is not 〔1533 Dictionary.To〕　〔1545 Location’s Name〕 is not 〔1533 Dictionary.Location〕

〔1547〕 Add 〔Repeat Item 2〕 to Variable TextList

〔1548〕 End If

〔1549〕 End Repeat[2] with Each　▵1540

〔1550〕 Combine Text 〔TextList〕 with New Lines　»

〔1551〕 Save File 〔1550 Combined Text〕
• AskWhereToSave: false
• SaveFileOverwrite: true
• FileDestinationPath: Smart Calendar Reminder/Future Alarms.txt

〔1552〕 Otherwise　▵1538

〔1553〕 Text　»

〔Event〕

〔1554〕 Save File 〔1553 Text〕
• AskWhereToSave: false
• FileDestinationPath: Smart Calendar Reminder/Future Alarms.txt

〔1555〕 End If

〔1556〕 End If　▵1532

〔1557〕 End Repeat with Each　▵1227

〔1558〕 End If　▵1226

〔1559〕 Get File at Path Smart Calendar Reminder/Future Alarms.txt from Folder　» 1560 1561
• FileErrorIfNotFound: false

〔1560〕 If 〔1559 File’s File Size〕 has any value

〔1561〕 Split Text 〔1559 File〕 by New Lines　»

〔1562〕 Repeat with Each in 〔1561 Split Text〕

〔1563〕 Get Dictionary from 〔Repeat Item〕　» 1564 1565 1575 1586

〔1564〕 If 〔1563 Dictionary〕 has any value

〔1565〕 Get Dates from 〔1563 Dictionary.AlarmTime〕　» 1566 1586

〔1566〕 If 〔1565 Dates〕 is today

〔1567〕 Find Alarm All Alarm　» 1568 1569
• ContentItemFilter: {  "Value": {
      "WFActionParameterFilterPrefix": 1,
      "WFContentPredicateBoundedDate": false,
      "WFActionParameterFilterTemplates": []
   },
   "WFSerializationType": "WFContentPredicateTableTemplate"
}

〔1568〕 If 〔1567 Alarms〕 has any value

〔1569〕 Repeat[2] with Each in 〔1567 Alarms〕

〔1570〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ Alarm_Label_Dictionary　» 1571 1573 1581

〔1571〕 Get Dictionary Value for From in 〔1570 Alarm_Label_Dictionary〕　»

〔1572〕 Get Dates from 〔1571 Dictionary Value〕 　➔ From_Date　» 1581

〔1573〕 Get Dictionary Value for To in 〔1570 Alarm_Label_Dictionary〕　»

〔1574〕 Get Dates from 〔1573 Dictionary Value〕 　➔ To_Date　» 1581

〔1575〕 Get Dictionary from 〔1563 Dictionary.Event〕 　➔ FutureAlarmLabelDictionary　» 1576 1577 1579

〔1576〕 Get Dictionary Value for Event in 〔1575 FutureAlarmLabelDictionary〕 　➔ Event　» 1581

〔1577〕 Get Dictionary Value for From in 〔1575 FutureAlarmLabelDictionary〕 　➔ From　»

〔1578〕 Get Dates from 〔1577 From〕 　➔ FromDate　» 1581

〔1579〕 Get Dictionary Value for To in 〔1575 FutureAlarmLabelDictionary〕 　➔ To　»

〔1580〕 Get Dates from 〔1579 To〕 　➔ ToDate　»

〔1581〕 If All are true　〔1576 Event’s Name〕 is 〔1570 Alarm_Label_Dictionary.Event〕　〔1578 FromDate{"Date Style":"Custom","WFDateFormat":"HH:mm","WFISO8601IncludeTime":false}〕 is 〔1572 From_Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕　〔1580 ToDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔1574 To_Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕

〔1582〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔1583〕 End If

〔1584〕 End Repeat[2] with Each　▵1569

〔1585〕 End If　▵1568

〔1586〕 Add Alarm for 〔1565 Dates〕 called 〔1563 Dictionary.Event〕

〔1587〕 End If　▵1566

〔1588〕 End If　▵1564

〔1589〕 End Repeat with Each　▵1562

〔1590〕 End If　▵1560

〔1591〕 End If　▵1214

〔1592〕 If 〔Shortcut Input as Number〕 is 7

〔1593〕 Comment
1-Hour Event Processor
*Real-time event handler for immediate notifications:

Processes events within next 60 minutes

Provides most accurate travel estimates

Recommended for hourly automation*

〔1594〕 Get File at Path Smart Calendar Reminder/aboutme.txt from Folder　»
• FileErrorIfNotFound: false

〔1595〕 Get Dictionary from 〔1594 File〕　» 1596 1599 1600

〔1596〕 Get Dictionary from 〔1595 Dictionary.HomeAddress〕　»

〔1597〕 Text　»
〔1596 Dictionary.street〕 〔1596 Dictionary.city〕 〔1596 Dictionary.state〕 〔1596 Dictionary.postcode〕 〔1596 Dictionary.country〕

〔1598〕 Set Variable Home_Address to 〔1597 Text〕

〔1599〕 Set Variable Travel_Method to 〔1595 Dictionary.TravelMethod〕

〔1600〕 Get Dictionary Value for ExtraTime in 〔1595 Dictionary〕　»

〔1601〕 Get Numbers from 〔1600 Dictionary Value〕　»

〔1602〕 Set Variable Extra_Time to 〔1601 Numbers〕

〔1603〕 Find Calendar Events All Calendar Events where　» 1604 1605 1606 1873
• ContentItemSortProperty: Start Date
• ContentItemSortOrder: Oldest First
• ContentItemFilter: • All the following are true
Start Date is in the next 30 minutes
Is Not All Day
Canceled is {"Bool":false}

〔1604〕 If 〔1603 Calendar Events〕 has any value

〔1605〕 Count Items in 〔1603 Calendar Events〕　» 1877 1885

〔1606〕 Repeat with Each in 〔1603 Calendar Events〕

〔1607〕 If 〔Repeat Item’s Location〕 has any value

〔1608〕 Get Current Location　» 1619 1625 1711
• Accuracy: Best

〔1609〕 If All are true　〔Repeat Item’s Notes〕 has any value　〔Repeat Item’s Notes〕 begins with {　〔Repeat Item’s Notes〕 ends with }

〔1610〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY

〔1611〕 Get Dictionary from 〔Repeat Item’s Notes〕 　➔ NotesAddressDictionary　» 1612 1613 1614 1615 1616

〔1612〕 Set Variable CalendarNotesStreet to 〔1611 NotesAddressDictionary.Street〕

〔1613〕 Set Variable CalendarNotesCity to 〔1611 NotesAddressDictionary.City〕

〔1614〕 Set Variable CalendarNotesState to 〔1611 NotesAddressDictionary.State〕

〔1615〕 Set Variable CalendarNotesRegion to 〔1611 NotesAddressDictionary.Country〕

〔1616〕 Set Variable CalendarNotesZIPCode to 〔1611 NotesAddressDictionary.Postcode〕

〔1617〕 Text　»
〔CalendarNotesStreet〕 〔CalendarNotesCity〕 〔CalendarNotesState〕 〔CalendarNotesZIPCode〕 〔CalendarNotesRegion〕

〔1618〕 Set Variable NotesAddressString to 〔1617 Text〕

〔1619〕 If All are true　〔1608 Current Location’s Street〕 is 〔CalendarNotesStreet〕　〔1608 Current Location’s City〕 is 〔CalendarNotesCity〕　〔1608 Current Location’s State〕 is 〔CalendarNotesState〕　〔1608 Current Location’s Country〕 is 〔CalendarNotesRegion〕　〔1608 Current Location’s ZIP Code〕 is 〔CalendarNotesZIPCode〕

〔1620〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY -> CALENDAR EVENT ADDRESS IS THE SAME WITH CURRENT LOCATION

〔1621〕 Number 0　»

〔1622〕 Set Variable CurrentToDeparture to 〔1621 Number〕

〔1623〕 Otherwise

〔1624〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY -> CALENDAR EVENT ADDRESS IS NOT THE SAME WITH CURRENT LOCATION

〔1625〕 Get 〔TravelMethod〕 Time　»
• GetDirectionsCustomLocation: 〔1608 Current Location〕
• Destination: 〔NotesAddressString〕

〔1626〕 Set Variable TravelTimeString to 〔1625 Travel Time〕

〔1627〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1628〕 Set Variable MatchString to 〔1627 Matches〕

〔1629〕 Count Items in 〔MatchString〕　»

〔1630〕 If 〔1629 Count〕 is 1

〔1631〕 Get First Item from List 〔MatchString〕　»

〔1632〕 Set Variable TravelDays to 〔1631 Item from List〕

〔1633〕 Otherwise

〔1634〕 Number 0　»

〔1635〕 Set Variable TravelDays to 〔1634 Number〕

〔1636〕 End If

〔1637〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1638〕 Set Variable MatchString to 〔1637 Matches〕

〔1639〕 Count Items in 〔MatchString〕　»

〔1640〕 If 〔1639 Count〕 is 1

〔1641〕 Get First Item from List 〔MatchString〕　»

〔1642〕 Set Variable TravelHours to 〔1641 Item from List〕

〔1643〕 Otherwise

〔1644〕 Number 0　»

〔1645〕 Set Variable TravelHours to 〔1644 Number〕

〔1646〕 End If

〔1647〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1648〕 Set Variable MatchString to 〔1647 Matches〕

〔1649〕 Count Items in 〔MatchString〕　»

〔1650〕 If 〔1649 Count〕 is 1

〔1651〕 Get First Item from List 〔MatchString〕　»

〔1652〕 Set Variable TravelMinutes to 〔1651 Item from List〕

〔1653〕 Otherwise

〔1654〕 Number 0　»

〔1655〕 Set Variable TravelMinutes to 〔1654 Number〕

〔1656〕 End If

〔1657〕 Calculate 〔TravelDays〕 × 1440　» 1659

〔1658〕 Calculate 〔TravelHours〕 × 60　»

〔1659〕 Calculate 〔1658 Calculation Result〕 + 〔1657 Calculation Result〕　»

〔1660〕 Calculate 〔1659 Calculation Result〕 + 〔TravelMinutes〕　»

〔1661〕 Set Variable CurrentToDeparture to 〔1660 Calculation Result〕

〔1662〕 End If　▵1623

〔1663〕 Get 〔TravelMethod〕 Time 　➔ DepartureToDestination　»
• GetDirectionsCustomLocation: 〔NotesAddressString〕
• Destination: 〔Repeat Item’s Location〕

〔1664〕 Set Variable TravelTimeString to 〔1663 DepartureToDestination〕

〔1665〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1666〕 Set Variable MatchString to 〔1665 Matches〕

〔1667〕 Count Items in 〔MatchString〕　»

〔1668〕 If 〔1667 Count〕 is 1

〔1669〕 Get First Item from List 〔MatchString〕　»

〔1670〕 Set Variable TravelDays to 〔1669 Item from List〕

〔1671〕 Otherwise

〔1672〕 Number 0　»

〔1673〕 Set Variable TravelDays to 〔1672 Number〕

〔1674〕 End If

〔1675〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1676〕 Set Variable MatchString to 〔1675 Matches〕

〔1677〕 Count Items in 〔MatchString〕　»

〔1678〕 If 〔1677 Count〕 is 1

〔1679〕 Get First Item from List 〔MatchString〕　»

〔1680〕 Set Variable TravelHours to 〔1679 Item from List〕

〔1681〕 Otherwise

〔1682〕 Number 0　»

〔1683〕 Set Variable TravelHours to 〔1682 Number〕

〔1684〕 End If

〔1685〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1686〕 Set Variable MatchString to 〔1685 Matches〕

〔1687〕 Count Items in 〔MatchString〕　»

〔1688〕 If 〔1687 Count〕 is 1

〔1689〕 Get First Item from List 〔MatchString〕　»

〔1690〕 Set Variable TravelMinutes to 〔1689 Item from List〕

〔1691〕 Otherwise

〔1692〕 Number 0　»

〔1693〕 Set Variable TravelMinutes to 〔1692 Number〕

〔1694〕 End If

〔1695〕 Calculate 〔TravelDays〕 × 1440　» 1697

〔1696〕 Calculate 〔TravelHours〕 × 60　»

〔1697〕 Calculate 〔1696 Calculation Result〕 + 〔1695 Calculation Result〕　»

〔1698〕 Calculate 〔1697 Calculation Result〕 + 〔TravelMinutes〕　»

〔1699〕 Calculate 〔1698 Calculation Result〕 + 〔CurrentToDeparture〕　»

〔1700〕 Set Variable TravelTime to 〔1699 Calculation Result〕

〔1701〕 Otherwise　▵1609

〔1702〕 Comment
CALENDER EVENT NOTES IS BLANK

〔1703〕 Get Dictionary from 〔HomeAddress〕 　➔ home_address_dictionary　» 1704 1705 1706 1707 1708

〔1704〕 Get Dictionary Value for street in 〔1703 home_address_dictionary〕 　➔ HomeStreet　» 1709 1711

〔1705〕 Get Dictionary Value for city in 〔1703 home_address_dictionary〕 　➔ HomeCity　» 1709 1711

〔1706〕 Get Dictionary Value for state in 〔1703 home_address_dictionary〕 　➔ HomeState　» 1709 1711

〔1707〕 Get Dictionary Value for country in 〔1703 home_address_dictionary〕 　➔ HomeCountry　» 1709 1711

〔1708〕 Get Dictionary Value for postcode in 〔1703 home_address_dictionary〕 　➔ HomePostcode　» 1709 1711

〔1709〕 If All are true　〔1704 HomeStreet〕 has any value　〔1705 HomeCity〕 has any value　〔1706 HomeState〕 has any value　〔1707 HomeCountry〕 has any value　〔1708 HomePostcode〕 has any value

〔1710〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED

〔1711〕 If All are true　〔1608 Current Location’s Street〕 is 〔1704 HomeStreet〕　〔1608 Current Location’s City〕 is 〔1705 HomeCity〕　〔1608 Current Location’s State〕 is 〔1706 HomeState〕　〔1608 Current Location’s Country〕 is 〔1707 HomeCountry〕　〔1608 Current Location’s ZIP Code〕 is 〔1708 HomePostcode〕

〔1712〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED -> HOME ADDRESS IS THE SAME WITH CURRENT LOCATION

〔1713〕 Number 0　»

〔1714〕 Set Variable CurrentToDeparture to 〔1713 Number〕

〔1715〕 Otherwise

〔1716〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED -> HOME ADDRESS IS NOT THE SAME WITH CURRENT LOCATION

〔1717〕 Get 〔TravelMethod〕 Time　»
• Destination: 〔HomeAddress〕

〔1718〕 Set Variable TravelTimeString to 〔1717 Travel Time〕

〔1719〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1720〕 Set Variable MatchString to 〔1719 Matches〕

〔1721〕 Count Items in 〔MatchString〕　»

〔1722〕 If 〔1721 Count〕 is 1

〔1723〕 Get First Item from List 〔MatchString〕　»

〔1724〕 Set Variable TravelDays to 〔1723 Item from List〕

〔1725〕 Otherwise

〔1726〕 Number 0　»

〔1727〕 Set Variable TravelDays to 〔1726 Number〕

〔1728〕 End If

〔1729〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1730〕 Set Variable MatchString to 〔1729 Matches〕

〔1731〕 Count Items in 〔MatchString〕　»

〔1732〕 If 〔1731 Count〕 is 1

〔1733〕 Get First Item from List 〔MatchString〕　»

〔1734〕 Set Variable TravelHours to 〔1733 Item from List〕

〔1735〕 Otherwise

〔1736〕 Number 0　»

〔1737〕 Set Variable TravelHours to 〔1736 Number〕

〔1738〕 End If

〔1739〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1740〕 Set Variable MatchString to 〔1739 Matches〕

〔1741〕 Count Items in 〔MatchString〕　»

〔1742〕 If 〔1741 Count〕 is 1

〔1743〕 Get First Item from List 〔MatchString〕　»

〔1744〕 Set Variable TravelMinutes to 〔1743 Item from List〕

〔1745〕 Otherwise

〔1746〕 Number 0　»

〔1747〕 Set Variable TravelMinutes to 〔1746 Number〕

〔1748〕 End If

〔1749〕 Calculate 〔TravelDays〕 × 1440　» 1751

〔1750〕 Calculate 〔TravelHours〕 × 60　»

〔1751〕 Calculate 〔1750 Calculation Result〕 + 〔1749 Calculation Result〕　»

〔1752〕 Calculate 〔1751 Calculation Result〕 + 〔TravelMinutes〕　»

〔1753〕 Set Variable CurrentToDeparture to 〔1752 Calculation Result〕

〔1754〕 End If　▵1715

〔1755〕 Get 〔TravelMethod〕 Time 　➔ DepartureToDestination　»
• GetDirectionsCustomLocation: 〔HomeAddress〕
• Destination: 〔Repeat Item’s Location〕

〔1756〕 Set Variable TravelTimeString to 〔1755 DepartureToDestination〕

〔1757〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1758〕 Set Variable MatchString to 〔1757 Matches〕

〔1759〕 Count Items in 〔MatchString〕　»

〔1760〕 If 〔1759 Count〕 is 1

〔1761〕 Get First Item from List 〔MatchString〕　»

〔1762〕 Set Variable TravelDays to 〔1761 Item from List〕

〔1763〕 Otherwise

〔1764〕 Number 0　»

〔1765〕 Set Variable TravelDays to 〔1764 Number〕

〔1766〕 End If

〔1767〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1768〕 Set Variable MatchString to 〔1767 Matches〕

〔1769〕 Count Items in 〔MatchString〕　»

〔1770〕 If 〔1769 Count〕 is 1

〔1771〕 Get First Item from List 〔MatchString〕　»

〔1772〕 Set Variable TravelHours to 〔1771 Item from List〕

〔1773〕 Otherwise

〔1774〕 Number 0　»

〔1775〕 Set Variable TravelHours to 〔1774 Number〕

〔1776〕 End If

〔1777〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1778〕 Set Variable MatchString to 〔1777 Matches〕

〔1779〕 Count Items in 〔MatchString〕　»

〔1780〕 If 〔1779 Count〕 is 1

〔1781〕 Get First Item from List 〔MatchString〕　»

〔1782〕 Set Variable TravelMinutes to 〔1781 Item from List〕

〔1783〕 Otherwise

〔1784〕 Number 0　»

〔1785〕 Set Variable TravelMinutes to 〔1784 Number〕

〔1786〕 End If

〔1787〕 Calculate 〔TravelDays〕 × 1440　» 1789

〔1788〕 Calculate 〔TravelHours〕 × 60　»

〔1789〕 Calculate 〔1788 Calculation Result〕 + 〔1787 Calculation Result〕　»

〔1790〕 Calculate 〔1789 Calculation Result〕 + 〔TravelMinutes〕　»

〔1791〕 Calculate 〔1790 Calculation Result〕 + 〔CurrentToDeparture〕　»

〔1792〕 Set Variable TravelTime to 〔1791 Calculation Result〕

〔1793〕 Otherwise　▵1709

〔1794〕 Text
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS NOT MAINTAINED

〔1795〕 Get 〔TravelMethod〕 Time　»
• Destination: 〔Repeat Item’s Location〕

〔1796〕 Set Variable TravelTimeString to 〔1795 Travel Time〕

〔1797〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1798〕 Set Variable MatchString to 〔1797 Matches〕

〔1799〕 Count Items in 〔MatchString〕　»

〔1800〕 If 〔1799 Count〕 is 1

〔1801〕 Get First Item from List 〔MatchString〕　»

〔1802〕 Set Variable TravelDays to 〔1801 Item from List〕

〔1803〕 Otherwise

〔1804〕 Number 0　»

〔1805〕 Set Variable TravelDays to 〔1804 Number〕

〔1806〕 End If

〔1807〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1808〕 Set Variable MatchString to 〔1807 Matches〕

〔1809〕 Count Items in 〔MatchString〕　»

〔1810〕 If 〔1809 Count〕 is 1

〔1811〕 Get First Item from List 〔MatchString〕　»

〔1812〕 Set Variable TravelHours to 〔1811 Item from List〕

〔1813〕 Otherwise

〔1814〕 Number 0　»

〔1815〕 Set Variable TravelHours to 〔1814 Number〕

〔1816〕 End If

〔1817〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1818〕 Set Variable MatchString to 〔1817 Matches〕

〔1819〕 Count Items in 〔MatchString〕　»

〔1820〕 If 〔1819 Count〕 is 1

〔1821〕 Get First Item from List 〔MatchString〕　»

〔1822〕 Set Variable TravelMinutes to 〔1821 Item from List〕

〔1823〕 Otherwise

〔1824〕 Number 0　»

〔1825〕 Set Variable TravelMinutes to 〔1824 Number〕

〔1826〕 End If

〔1827〕 Calculate 〔TravelDays〕 × 1440　» 1829

〔1828〕 Calculate 〔TravelHours〕 × 60　»

〔1829〕 Calculate 〔1828 Calculation Result〕 + 〔1827 Calculation Result〕　»

〔1830〕 Calculate 〔1829 Calculation Result〕 + 〔TravelMinutes〕　»

〔1831〕 Set Variable TravelTime to 〔1830 Calculation Result〕

〔1832〕 End If　▵1793

〔1833〕 End If　▵1701

〔1834〕 Otherwise　▵1607

〔1835〕 Number 0　»

〔1836〕 Set Variable TravelTime to 〔1835 Number〕

〔1837〕 End If

〔1838〕 Find Alarm All Alarm　» 1839 1840
• ContentItemFilter: {  "Value": {
      "WFActionParameterFilterPrefix": 1,
      "WFContentPredicateBoundedDate": false,
      "WFActionParameterFilterTemplates": []
   },
   "WFSerializationType": "WFContentPredicateTableTemplate"
}

〔1839〕 If 〔1838 Alarms〕 has any value

〔1840〕 Repeat[2] with Each in 〔1838 Alarms〕

〔1841〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ AlarmLabelDictionary　» 1842 1843 1845

〔1842〕 Get Dictionary Value for Event in 〔1841 AlarmLabelDictionary〕 　➔ Event　» 1847

〔1843〕 Get Dictionary Value for From in 〔1841 AlarmLabelDictionary〕 　➔ From　»

〔1844〕 Get Dates from 〔1843 From〕 　➔ FromDate　» 1847

〔1845〕 Get Dictionary Value for To in 〔1841 AlarmLabelDictionary〕 　➔ To　»

〔1846〕 Get Dates from 〔1845 To〕 　➔ ToDate　»

〔1847〕 If All are true　〔1842 Event’s Name〕 is 〔Repeat Item〕　〔1844 FromDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔Repeat Item’s Start Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕　〔1846 ToDate{"Date Style":"Custom","WFDateFormat":"HH:mm","WFISO8601IncludeTime":false}〕 is 〔Repeat Item’s End Date{"Date Style":"Custom","WFDateFormat":"HH:mm","WFISO8601IncludeTime":false}〕

〔1848〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔1849〕 End If

〔1850〕 End Repeat[2] with Each　▵1840

〔1851〕 End If　▵1839

〔1852〕 Calculate 〔TravelTime〕 + 〔Extra_Time〕　»

〔1853〕 Adjust Subtract Date 〔Repeat Item’s Start Date〕 　➔ Supposed_Alarm_Time　» 1855 1857 1860 1867 1868
• Duration: 〔1852 Calculation Result〕 min

〔1854〕 Date Current Date　»

〔1855〕 If Any are true　〔1853 Supposed_Alarm_Time〕 < 〔1854 Date〕　〔1853 Supposed_Alarm_Time〕 is 〔1854 Date〕

〔1856〕 If 〔Repeat Item’s Location〕 has any value

〔1857〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 at 〔Repeat Item’s Location〕  which  was supposed to get ready at 〔1853 Supposed_Alarm_Time〕. Please check.

〔1858〕 Set Variable Text to 〔1857 Text〕

〔1859〕 Otherwise

〔1860〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 which  was supposed to get ready at 〔1853 Supposed_Alarm_Time〕. Please check.

〔1861〕 Set Variable Text to 〔1860 Text〕

〔1862〕 End If

〔1863〕 Show Alert 〔Text〕

〔1864〕 Show Notification 〔Text〕

〔1865〕 Speak Text
• Text: 〔Text〕

〔1866〕 Otherwise　▵1855

〔1867〕 Dictionary　»
{  "Event": "〔Repeat Item〕",
   "From": "〔Repeat Item’s Start Date〕",
   "To": "〔Repeat Item’s End Date〕",
   "Location": "〔Repeat Item’s Location〕",
   "AlarmTime": "〔1853 Supposed_Alarm_Time〕"
}

〔1868〕 Add Alarm for 〔1853 Supposed_Alarm_Time〕 called 〔1867 Dictionary〕

〔1869〕 End If

〔1870〕 End Repeat with Each　▵1606

〔1871〕 Number 3　»

〔1872〕 Repeat 〔1871 Number〕 Times

〔1873〕 Repeat[2] with Each in 〔1603 Calendar Events〕

〔1874〕 Format Date 〔Repeat Item 2’s Start Date〕　» 1878 1881 1886 1889
• DateFormatStyle: None

〔1875〕 Format Date 〔Repeat Item 2’s End Date〕　» 1878 1881 1886 1889
• DateFormatStyle: None

〔1876〕 If 〔Repeat Item 2’s Location〕 has any value

〔1877〕 If 〔1605 Count〕 > 1

〔1878〕 Text　»
Event 〔Repeat Index 2〕 〔Repeat Item 2〕 from 〔1874 Formatted Date〕 to 〔1875 Formatted Date〕 at 〔Repeat Item 2’s Location〕

〔1879〕 Set Variable Text to 〔1878 Text〕

〔1880〕 Otherwise

〔1881〕 Text　»
Event  〔Repeat Item 2〕 from 〔1874 Formatted Date〕 to 〔1875 Formatted Date〕 at 〔Repeat Item 2’s Location〕

〔1882〕 Set Variable Text to 〔1881 Text〕

〔1883〕 End If

〔1884〕 Otherwise　▵1876

〔1885〕 If 〔1605 Count〕 > 1

〔1886〕 Text　»
Event 〔Repeat Index 2〕 〔Repeat Item 2〕 from 〔1874 Formatted Date〕 to 〔1875 Formatted Date〕

〔1887〕 Set Variable Text to 〔1886 Text〕

〔1888〕 Otherwise

〔1889〕 Text　»
Event  〔Repeat Item 2〕 from 〔1874 Formatted Date〕 to 〔1875 Formatted Date〕

〔1890〕 Set Variable Text to 〔1889 Text〕

〔1891〕 End If

〔1892〕 End If　▵1884

〔1893〕 Speak Text
• Text: 〔Text〕

〔1894〕 Wait 1 seconds

〔1895〕 End Repeat[2] with Each　▵1873

〔1896〕 End Repeat Times　▵1872

〔1897〕 End If　▵1604

〔1898〕 End If　▵1592

〔1899〕 End If　▵91