Smart Calendar Reminder V1 (1618 actions, 513 KB)
"WFQuickActionSurfaces": [],
"WFWorkflowClientVersion": "3303.0.5",
"WFWorkflowHasOutputFallback": false,
"WFWorkflowHasShortcutInputVariables": true,
"WFWorkflowIcon": {
   "WFWorkflowIconStartColor": 431817727,
   "WFWorkflowIconGlyphNumber": 61701
},
"WFWorkflowImportQuestions": [],
"WFWorkflowInputContentItemClasses": [],
"WFWorkflowMinimumClientVersion": 3010,
"WFWorkflowMinimumClientVersionString": "3010",
"WFWorkflowOutputContentItemClasses": [],
"WFWorkflowTypes": []


〔0〕 If 〔Shortcut Input〕 does not have any value

〔1〕 Comment
Initial setup and version update check when no input is provided

〔2〕 Comment
Inspired by [Schedule Shortcut or Alarm] but designed to work smarter for my needs! Instead of manually inputting each trigger or alarm, this shortcut leverages my Calendar as the ultimate data source. It automatically scans for upcoming events, then:

• Speaks out the event details
• Sets a tailored alarm—accounting for travel and prep time—right when you need it

No more early, forgettable reminders. It keeps your schedule perfectly in sync. Give it a try and let your Calendar do the heavy lifting!

〔3〕 Dictionary 　➔ Version Dictionary 　» 4 5 7 9 10 11 12 20 21 25 31 46 72
{  "Name": "Smart Calendar Reminder",
   "Version": "2.6",
   "RH ID": "21959",
   "Icons": {
      "Update": "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",
      "Skip": "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",
      "Not Now": "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"
   }
}

〔4〕 Get Contents of URL https://routinehub.co/api/v1/shortcuts/〔3 Version Dictionary .RH ID〕/versions/latest 　➔ RH Server　» 6 8 11 16 20

〔5〕 Get File at Path 〔3 Version Dictionary .Name〕/Skip.txt from Folder　»
• File: {  "fileLocation": {
      "crossDeviceItemID": "docs.icloud.com:com.apple.CloudDocs/documents/95d6214c39557e3de40d802073a860c04f3aed5b",
      "fileProviderDomainID": "com.apple.CloudDocs.iCloudDriveFileProvider/38059A1C-DC76-4B89-B62F-250A61DBFC73",
      "appContainerBundleIdentifier": "com.apple.shortcuts",
      "relativeSubpath": "",
      "WFFileLocationType": "Shortcuts"
   },
   "filename": "Documents",
   "displayName": "Shortcuts"
}
• FileErrorIfNotFound: false
• ShowFilePicker: false
• GetFolderContents: true

〔6〕 If 〔5 File as Text〕 is not 〔4 RH Server as Dictionary.Version〕

〔7〕 Get Dictionary Value for Version in 〔3 Version Dictionary 〕　»

〔8〕 If 〔7 Dictionary Value as Text〕 is not 〔4 RH Server as Dictionary.Version〕

〔9〕 Base64 Decode 〔3 Version Dictionary .Icons.Update〕

〔10〕 Show Alert A new version of 〔3 Version Dictionary .Name〕 is available to download!

〔11〕 Text　» 14
⬆️ Update ⬆️

A new version of 〔3 Version Dictionary .Name〕 is available to download!

〔3 Version Dictionary .Version〕 ↗ 〔4 RH Server as Dictionary.Version〕   —   〔4 RH Server as Dictionary.Release〕

〔4 RH Server as Dictionary.Notes〕

〔12〕 Text　»
BEGIN:VCARD
VERSION:3.0
N;CHARSET=utf-8:Update;;;;
PHOTO;ENCODING=b:〔3 Version Dictionary .Icons.Update〕
END:VCARD

BEGIN:VCARD
VERSION:3.0
N;CHARSET=utf-8:Skip;;;;
PHOTO;ENCODING=b:〔3 Version Dictionary .Icons.Skip〕
END:VCARD

BEGIN:VCARD
VERSION:3.0
N;CHARSET=utf-8:Not Now;;;;
PHOTO;ENCODING=b:〔3 Version Dictionary .Icons.Not Now〕
END:VCARD

〔13〕 Set Name of 〔12 Text〕 to updateprompt.vcf　»

〔14〕 Choose from List 〔13 Renamed Item as Contact〕　» 15 19
• ChooseFromListActionPrompt: 〔11 Text〕

〔15〕 If 〔14 Chosen Item as Text〕 is Update

〔16〕 Open URL 〔4 RH Server as Dictionary.URL〕
• Show-WFInput: true

〔17〕 Stop This Shortcut

〔18〕 End If

〔19〕 If 〔14 Chosen Item as Text〕 is Skip

〔20〕 Save File 〔4 RH Server as Dictionary.Version〕
• AskWhereToSave: false
• SaveFileOverwrite: true
• FileDestinationPath: 〔3 Version Dictionary .Name〕/Skip.txt

〔21〕 Show Alert This version of 〔3 Version Dictionary .Name〕 has been skipped!
• AlertActionTitle: ✅ Done ✅
• AlertActionCancelButtonShown: false

〔22〕 End If

〔23〕 End If　▵8

〔24〕 End If　▵6

〔25〕 Get File at Path 〔3 Version Dictionary .Name〕/Welcome.pdf from Folder　»
• FileErrorIfNotFound: false

〔26〕 If 〔25 File’s File Size〕 does not have any value

〔27〕 Text　»
<html><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Smart Calendar Reminder: Your Intelligent Schedule Assistant</title><style>
    /* cspell:disable-file */
    /* webkit printing magic: print all background colors */
    html {
        -webkit-print-color-adjust: exact;
    }
    * {
        box-sizing: border-box;
        -webkit-print-color-adjust: exact;
    }
\u{space}\u{space}\u{space}\u{space}
    html,
    body {
        margin: 0;
        padding: 0;
    }
    @media only screen {
        body {
            margin: 2em auto;
            max-width: 900px;
            color: rgb(55, 53, 47);
        }
    }
\u{space}\u{space}\u{space}\u{space}
    body {
        line-height: 1.5;
        white-space: pre-wrap;
    }
\u{space}\u{space}\u{space}\u{space}
    a,
    a.visited {
        color: inherit;
        text-decoration: underline;
    }
\u{space}\u{space}\u{space}\u{space}
    .pdf-relative-link-path {
        font-size: 80%;
        color: #444;
    }
\u{space}\u{space}\u{space}\u{space}
    h1,
    h2,
    h3 {
        letter-spacing: -0.01em;
        line-height: 1.2;
        font-weight: 600;
        margin-bottom: 0;
    }
\u{space}\u{space}\u{space}\u{space}
    .page-title {
        font-size: 2.5rem;
        font-weight: 700;
        margin-top: 0;
        margin-bottom: 0.75em;
    }
\u{space}\u{space}\u{space}\u{space}
    h1 {
        font-size: 1.875rem;
        margin-top: 1.875rem;
    }
\u{space}\u{space}\u{space}\u{space}
    h2 {
        font-size: 1.5rem;
        margin-top: 1.5rem;
    }
\u{space}\u{space}\u{space}\u{space}
    h3 {
        font-size: 1.25rem;
        margin-top: 1.25rem;
    }
\u{space}\u{space}\u{space}\u{space}
    .source {
        border: 1px solid #ddd;
        border-radius: 3px;
        padding: 1.5em;
        word-break: break-all;
    }
\u{space}\u{space}\u{space}\u{space}
    .callout {
        border-radius: 3px;
        padding: 1rem;
    }
\u{space}\u{space}\u{space}\u{space}
    figure {
        margin: 1.25em 0;
        page-break-inside: avoid;
    }
\u{space}\u{space}\u{space}\u{space}
    figcaption {
        opacity: 0.5;
        font-size: 85%;
        margin-top: 0.5em;
    }
\u{space}\u{space}\u{space}\u{space}
    mark {
        background-color: transparent;
    }
\u{space}\u{space}\u{space}\u{space}
    .indented {
        padding-left: 1.5em;
    }
\u{space}\u{space}\u{space}\u{space}
    hr {
        background: transparent;
        display: block;
        width: 100%;
        height: 1px;
        visibility: visible;
        border: none;
        border-bottom: 1px solid rgba(55, 53, 47, 0.09);
    }
\u{space}\u{space}\u{space}\u{space}
    img {
        max-width: 100%;
    }
\u{space}\u{space}\u{space}\u{space}
    @media only print {
        img {
            max-height: 100vh;
            object-fit: contain;
        }
    }
\u{space}\u{space}\u{space}\u{space}
    @page {
        margin: 1in;
    }
\u{space}\u{space}\u{space}\u{space}
    .collection-content {
        font-size: 0.875rem;
    }
\u{space}\u{space}\u{space}\u{space}
    .column-list {
        display: flex;
        justify-content: space-between;
    }
\u{space}\u{space}\u{space}\u{space}
    .column {
        padding: 0 1em;
    }
\u{space}\u{space}\u{space}\u{space}
    .column:first-child {
        padding-left: 0;
    }
\u{space}\u{space}\u{space}\u{space}
    .column:last-child {
        padding-right: 0;
    }
\u{space}\u{space}\u{space}\u{space}
    .table_of_contents-item {
        display: block;
        font-size: 0.875rem;
        line-height: 1.3;
        padding: 0.125rem;
    }
\u{space}\u{space}\u{space}\u{space}
    .table_of_contents-indent-1 {
        margin-left: 1.5rem;
    }
\u{space}\u{space}\u{space}\u{space}
    .table_of_contents-indent-2 {
        margin-left: 3rem;
    }
\u{space}\u{space}\u{space}\u{space}
    .table_of_contents-indent-3 {
        margin-left: 4.5rem;
    }
\u{space}\u{space}\u{space}\u{space}
    .table_of_contents-link {
        text-decoration: none;
        opacity: 0.7;
        border-bottom: 1px solid rgba(55, 53, 47, 0.18);
    }
\u{space}\u{space}\u{space}\u{space}
    table,
    th,
    td {
        border: 1px solid rgba(55, 53, 47, 0.09);
        border-collapse: collapse;
    }
\u{space}\u{space}\u{space}\u{space}
    table {
        border-left: none;
        border-right: none;
    }
\u{space}\u{space}\u{space}\u{space}
    th,
    td {
        font-weight: normal;
        padding: 0.25em 0.5em;
        line-height: 1.5;
        min-height: 1.5em;
        text-align: left;
    }
\u{space}\u{space}\u{space}\u{space}
    th {
        color: rgba(55, 53, 47, 0.6);
    }
\u{space}\u{space}\u{space}\u{space}
    ol,
    ul {
        margin: 0;
        margin-block-start: 0.6em;
        margin-block-end: 0.6em;
    }
\u{space}\u{space}\u{space}\u{space}
    li > ol:first-child,
    li > ul:first-child {
        margin-block-start: 0.6em;
    }
\u{space}\u{space}\u{space}\u{space}
    ul > li {
        list-style: disc;
    }
\u{space}\u{space}\u{space}\u{space}
    ul.to-do-list {
        padding-inline-start: 0;
    }
\u{space}\u{space}\u{space}\u{space}
    ul.to-do-list > li {
        list-style: none;
    }
\u{space}\u{space}\u{space}\u{space}
    .to-do-children-checked {
        text-decoration: line-through;
        opacity: 0.375;
    }
\u{space}\u{space}\u{space}\u{space}
    ul.toggle > li {
        list-style: none;
    }
\u{space}\u{space}\u{space}\u{space}
    ul {
        padding-inline-start: 1.7em;
    }
\u{space}\u{space}\u{space}\u{space}
    ul > li {
        padding-left: 0.1em;
    }
\u{space}\u{space}\u{space}\u{space}
    ol {
        padding-inline-start: 1.6em;
    }
\u{space}\u{space}\u{space}\u{space}
    ol > li {
        padding-left: 0.2em;
    }
\u{space}\u{space}\u{space}\u{space}
    .mono ol {
        padding-inline-start: 2em;
    }
\u{space}\u{space}\u{space}\u{space}
    .mono ol > li {
        text-indent: -0.4em;
    }
\u{space}\u{space}\u{space}\u{space}
    .toggle {
        padding-inline-start: 0em;
        list-style-type: none;
    }
\u{space}\u{space}\u{space}\u{space}
    /* Indent toggle children */
    .toggle > li > details {
        padding-left: 1.7em;
    }
\u{space}\u{space}\u{space}\u{space}
    .toggle > li > details > summary {
        margin-left: -1.1em;
    }
\u{space}\u{space}\u{space}\u{space}
    .selected-value {
        display: inline-block;
        padding: 0 0.5em;
        background: rgba(206, 205, 202, 0.5);
        border-radius: 3px;
        margin-right: 0.5em;
        margin-top: 0.3em;
        margin-bottom: 0.3em;
        white-space: nowrap;
    }
\u{space}\u{space}\u{space}\u{space}
    .collection-title {
        display: inline-block;
        margin-right: 1em;
    }
\u{space}\u{space}\u{space}\u{space}
    .page-description {
        margin-bottom: 2em;
    }
\u{space}\u{space}\u{space}\u{space}
    .simple-table {
        margin-top: 1em;
        font-size: 0.875rem;
        empty-cells: show;
    }
    .simple-table td {
        height: 29px;
        min-width: 120px;
    }
\u{space}\u{space}\u{space}\u{space}
    .simple-table th {
        height: 29px;
        min-width: 120px;
    }
\u{space}\u{space}\u{space}\u{space}
    .simple-table-header-color {
        background: rgb(247, 246, 243);
        color: black;
    }
    .simple-table-header {
        font-weight: 500;
    }
\u{space}\u{space}\u{space}\u{space}
    time {
        opacity: 0.5;
    }
\u{space}\u{space}\u{space}\u{space}
    .icon {
        display: inline-block;
        max-width: 1.2em;
        max-height: 1.2em;
        text-decoration: none;
        vertical-align: text-bottom;
        margin-right: 0.5em;
    }
\u{space}\u{space}\u{space}\u{space}
    img.icon {
        border-radius: 3px;
    }
\u{space}\u{space}\u{space}\u{space}
    .user-icon {
        width: 1.5em;
        height: 1.5em;
        border-radius: 100%;
        margin-right: 0.5rem;
    }
\u{space}\u{space}\u{space}\u{space}
    .user-icon-inner {
        font-size: 0.8em;
    }
\u{space}\u{space}\u{space}\u{space}
    .text-icon {
        border: 1px solid #000;
        text-align: center;
    }
\u{space}\u{space}\u{space}\u{space}
    .page-cover-image {
        display: block;
        object-fit: cover;
        width: 100%;
        max-height: 30vh;
    }
\u{space}\u{space}\u{space}\u{space}
    .page-header-icon {
        font-size: 3rem;
        margin-bottom: 1rem;
    }
\u{space}\u{space}\u{space}\u{space}
    .page-header-icon-with-cover {
        margin-top: -0.72em;
        margin-left: 0.07em;
    }
\u{space}\u{space}\u{space}\u{space}
    .page-header-icon img {
        border-radius: 3px;
    }
\u{space}\u{space}\u{space}\u{space}
    .link-to-page {
        margin: 1em 0;
        padding: 0;
        border: none;
        font-weight: 500;
    }
\u{space}\u{space}\u{space}\u{space}
    p > .user {
        opacity: 0.5;
    }
\u{space}\u{space}\u{space}\u{space}
    td > .user,
    td > time {
        white-space: nowrap;
    }
\u{space}\u{space}\u{space}\u{space}
    input[type="checkbox"] {
        transform: scale(1.5);
        margin-right: 0.6em;
        vertical-align: middle;
    }
\u{space}\u{space}\u{space}\u{space}
    p {
        margin-top: 0.5em;
        margin-bottom: 0.5em;
    }
\u{space}\u{space}\u{space}\u{space}
    .image {
        border: none;
        margin: 1.5em 0;
        padding: 0;
        border-radius: 0;
        text-align: center;
    }
\u{space}\u{space}\u{space}\u{space}
    .code,
    code {
        background: rgba(135, 131, 120, 0.15);
        border-radius: 3px;
        padding: 0.2em 0.4em;
        border-radius: 3px;
        font-size: 85%;
        tab-size: 2;
    }
\u{space}\u{space}\u{space}\u{space}
    code {
        color: #eb5757;
    }
\u{space}\u{space}\u{space}\u{space}
    .code {
        padding: 1.5em 1em;
    }
\u{space}\u{space}\u{space}\u{space}
    .code-wrap {
        white-space: pre-wrap;
        word-break: break-all;
    }
\u{space}\u{space}\u{space}\u{space}
    .code > code {
        background: none;
        padding: 0;
        font-size: 100%;
        color: inherit;
    }
\u{space}\u{space}\u{space}\u{space}
    blockquote {
        font-size: 1.25em;
        margin: 1em 0;
        padding-left: 1em;
        border-left: 3px solid rgb(55, 53, 47);
    }
\u{space}\u{space}\u{space}\u{space}
    .bookmark {
        text-decoration: none;
        max-height: 8em;
        padding: 0;
        display: flex;
        width: 100%;
        align-items: stretch;
    }
\u{space}\u{space}\u{space}\u{space}
    .bookmark-title {
        font-size: 0.85em;
        overflow: hidden;
        text-overflow: ellipsis;
        height: 1.75em;
        white-space: nowrap;
    }
\u{space}\u{space}\u{space}\u{space}
    .bookmark-text {
        display: flex;
        flex-direction: column;
    }
\u{space}\u{space}\u{space}\u{space}
    .bookmark-info {
        flex: 4 1 180px;
        padding: 12px 14px 14px;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
    }
\u{space}\u{space}\u{space}\u{space}
    .bookmark-image {
        width: 33%;
        flex: 1 1 180px;
        display: block;
        position: relative;
        object-fit: cover;
        border-radius: 1px;
    }
\u{space}\u{space}\u{space}\u{space}
    .bookmark-description {
        color: rgba(55, 53, 47, 0.6);
        font-size: 0.75em;
        overflow: hidden;
        max-height: 4.5em;
        word-break: break-word;
    }
\u{space}\u{space}\u{space}\u{space}
    .bookmark-href {
        font-size: 0.75em;
        margin-top: 0.25em;
    }
\u{space}\u{space}\u{space}\u{space}
    .sans { font-family: ui-sans-serif, -apple-system, BlinkMacSystemFont, "Segoe UI Variable Display", "Segoe UI", Helvetica, "Apple Color Emoji", Arial, sans-serif, "Segoe UI Emoji", "Segoe UI Symbol"; }
    .code { font-family: "SFMono-Regular", Menlo, Consolas, "PT Mono", "Liberation Mono", Courier, monospace; }
    .serif { font-family: Lyon-Text, Georgia, ui-serif, serif; }
    .mono { font-family: iawriter-mono, Nitti, Menlo, Courier, monospace; }
    .pdf .sans { font-family: Inter, ui-sans-serif, -apple-system, BlinkMacSystemFont, "Segoe UI Variable Display", "Segoe UI", Helvetica, "Apple Color Emoji", Arial, sans-serif, "Segoe UI Emoji", "Segoe UI Symbol", 'Twemoji', 'Noto Color Emoji', 'Noto Sans CJK JP'; }
    .pdf:lang(zh-CN) .sans { font-family: Inter, ui-sans-serif, -apple-system, BlinkMacSystemFont, "Segoe UI Variable Display", "Segoe UI", Helvetica, "Apple Color Emoji", Arial, sans-serif, "Segoe UI Emoji", "Segoe UI Symbol", 'Twemoji', 'Noto Color Emoji', 'Noto Sans CJK SC'; }
    .pdf:lang(zh-TW) .sans { font-family: Inter, ui-sans-serif, -apple-system, BlinkMacSystemFont, "Segoe UI Variable Display", "Segoe UI", Helvetica, "Apple Color Emoji", Arial, sans-serif, "Segoe UI Emoji", "Segoe UI Symbol", 'Twemoji', 'Noto Color Emoji', 'Noto Sans CJK TC'; }
    .pdf:lang(ko-KR) .sans { font-family: Inter, ui-sans-serif, -apple-system, BlinkMacSystemFont, "Segoe UI Variable Display", "Segoe UI", Helvetica, "Apple Color Emoji", Arial, sans-serif, "Segoe UI Emoji", "Segoe UI Symbol", 'Twemoji', 'Noto Color Emoji', 'Noto Sans CJK KR'; }
    .pdf .code { font-family: Source Code Pro, "SFMono-Regular", Menlo, Consolas, "PT Mono", "Liberation Mono", Courier, monospace, 'Twemoji', 'Noto Color Emoji', 'Noto Sans Mono CJK JP'; }
    .pdf:lang(zh-CN) .code { font-family: Source Code Pro, "SFMono-Regular", Menlo, Consolas, "PT Mono", "Liberation Mono", Courier, monospace, 'Twemoji', 'Noto Color Emoji', 'Noto Sans Mono CJK SC'; }
    .pdf:lang(zh-TW) .code { font-family: Source Code Pro, "SFMono-Regular", Menlo, Consolas, "PT Mono", "Liberation Mono", Courier, monospace, 'Twemoji', 'Noto Color Emoji', 'Noto Sans Mono CJK TC'; }
    .pdf:lang(ko-KR) .code { font-family: Source Code Pro, "SFMono-Regular", Menlo, Consolas, "PT Mono", "Liberation Mono", Courier, monospace, 'Twemoji', 'Noto Color Emoji', 'Noto Sans Mono CJK KR'; }
    .pdf .serif { font-family: PT Serif, Lyon-Text, Georgia, ui-serif, serif, 'Twemoji', 'Noto Color Emoji', 'Noto Serif CJK JP'; }
    .pdf:lang(zh-CN) .serif { font-family: PT Serif, Lyon-Text, Georgia, ui-serif, serif, 'Twemoji', 'Noto Color Emoji', 'Noto Serif CJK SC'; }
    .pdf:lang(zh-TW) .serif { font-family: PT Serif, Lyon-Text, Georgia, ui-serif, serif, 'Twemoji', 'Noto Color Emoji', 'Noto Serif CJK TC'; }
    .pdf:lang(ko-KR) .serif { font-family: PT Serif, Lyon-Text, Georgia, ui-serif, serif, 'Twemoji', 'Noto Color Emoji', 'Noto Serif CJK KR'; }
    .pdf .mono { font-family: PT Mono, iawriter-mono, Nitti, Menlo, Courier, monospace, 'Twemoji', 'Noto Color Emoji', 'Noto Sans Mono CJK JP'; }
    .pdf:lang(zh-CN) .mono { font-family: PT Mono, iawriter-mono, Nitti, Menlo, Courier, monospace, 'Twemoji', 'Noto Color Emoji', 'Noto Sans Mono CJK SC'; }
    .pdf:lang(zh-TW) .mono { font-family: PT Mono, iawriter-mono, Nitti, Menlo, Courier, monospace, 'Twemoji', 'Noto Color Emoji', 'Noto Sans Mono CJK TC'; }
    .pdf:lang(ko-KR) .mono { font-family: PT Mono, iawriter-mono, Nitti, Menlo, Courier, monospace, 'Twemoji', 'Noto Color Emoji', 'Noto Sans Mono CJK KR'; }
    .highlight-default {
        color: rgba(55, 53, 47, 1);
    }
    .highlight-gray {
        color: rgba(120, 119, 116, 1);
        fill: rgba(120, 119, 116, 1);
    }
    .highlight-brown {
        color: rgba(159, 107, 83, 1);
        fill: rgba(159, 107, 83, 1);
    }
    .highlight-orange {
        color: rgba(217, 115, 13, 1);
        fill: rgba(217, 115, 13, 1);
    }
    .highlight-yellow {
        color: rgba(203, 145, 47, 1);
        fill: rgba(203, 145, 47, 1);
    }
    .highlight-teal {
        color: rgba(68, 131, 97, 1);
        fill: rgba(68, 131, 97, 1);
    }
    .highlight-blue {
        color: rgba(51, 126, 169, 1);
        fill: rgba(51, 126, 169, 1);
    }
    .highlight-purple {
        color: rgba(144, 101, 176, 1);
        fill: rgba(144, 101, 176, 1);
    }
    .highlight-pink {
        color: rgba(193, 76, 138, 1);
        fill: rgba(193, 76, 138, 1);
    }
    .highlight-red {
        color: rgba(212, 76, 71, 1);
        fill: rgba(212, 76, 71, 1);
    }
    .highlight-default_background {
        color: rgba(55, 53, 47, 1);
    }
    .highlight-gray_background {
        background: rgba(248, 248, 247, 1);
    }
    .highlight-brown_background {
        background: rgba(244, 238, 238, 1);
    }
    .highlight-orange_background {
        background: rgba(251, 236, 221, 1);
    }
    .highlight-yellow_background {
        background: rgba(251, 243, 219, 1);
    }
    .highlight-teal_background {
        background: rgba(237, 243, 236, 1);
    }
    .highlight-blue_background {
        background: rgba(231, 243, 248, 1);
    }
    .highlight-purple_background {
        background: rgba(248, 243, 252, 1);
    }
    .highlight-pink_background {
        background: rgba(252, 241, 246, 1);
    }
    .highlight-red_background {
        background: rgba(253, 235, 236, 1);
    }
    .block-color-default {
        color: inherit;
        fill: inherit;
    }
    .block-color-gray {
        color: rgba(120, 119, 116, 1);
        fill: rgba(120, 119, 116, 1);
    }
    .block-color-brown {
        color: rgba(159, 107, 83, 1);
        fill: rgba(159, 107, 83, 1);
    }
    .block-color-orange {
        color: rgba(217, 115, 13, 1);
        fill: rgba(217, 115, 13, 1);
    }
    .block-color-yellow {
        color: rgba(203, 145, 47, 1);
        fill: rgba(203, 145, 47, 1);
    }
    .block-color-teal {
        color: rgba(68, 131, 97, 1);
        fill: rgba(68, 131, 97, 1);
    }
    .block-color-blue {
        color: rgba(51, 126, 169, 1);
        fill: rgba(51, 126, 169, 1);
    }
    .block-color-purple {
        color: rgba(144, 101, 176, 1);
        fill: rgba(144, 101, 176, 1);
    }
    .block-color-pink {
        color: rgba(193, 76, 138, 1);
        fill: rgba(193, 76, 138, 1);
    }
    .block-color-red {
        color: rgba(212, 76, 71, 1);
        fill: rgba(212, 76, 71, 1);
    }
    .block-color-default_background {
        color: inherit;
        fill: inherit;
    }
    .block-color-gray_background {
        background: rgba(248, 248, 247, 1);
    }
    .block-color-brown_background {
        background: rgba(244, 238, 238, 1);
    }
    .block-color-orange_background {
        background: rgba(251, 236, 221, 1);
    }
    .block-color-yellow_background {
        background: rgba(251, 243, 219, 1);
    }
    .block-color-teal_background {
        background: rgba(237, 243, 236, 1);
    }
    .block-color-blue_background {
        background: rgba(231, 243, 248, 1);
    }
    .block-color-purple_background {
        background: rgba(248, 243, 252, 1);
    }
    .block-color-pink_background {
        background: rgba(252, 241, 246, 1);
    }
    .block-color-red_background {
        background: rgba(253, 235, 236, 1);
    }
    .select-value-color-uiBlue { background-color: undefined; }
    .select-value-color-pink { background-color: rgba(225, 136, 179, 0.27); }
    .select-value-color-purple { background-color: rgba(168, 129, 197, 0.27); }
    .select-value-color-green { background-color: rgba(123, 183, 129, 0.27); }
    .select-value-color-gray { background-color: rgba(84, 72, 49, 0.15); }
    .select-value-color-transparentGray { background-color: undefined; }
    .select-value-color-translucentGray { background-color: undefined; }
    .select-value-color-orange { background-color: rgba(224, 124, 57, 0.27); }
    .select-value-color-brown { background-color: rgba(210, 162, 141, 0.35); }
    .select-value-color-red { background-color: rgba(244, 171, 159, 0.4); }
    .select-value-color-yellow { background-color: rgba(236, 191, 66, 0.39); }
    .select-value-color-blue { background-color: rgba(93, 165, 206, 0.27); }
    .select-value-color-pageGlass { background-color: undefined; }
    .select-value-color-washGlass { background-color: undefined; }
\u{space}\u{space}\u{space}\u{space}
    .checkbox {
        display: inline-flex;
        vertical-align: text-bottom;
        width: 16;
        height: 16;
        background-size: 16px;
        margin-left: 2px;
        margin-right: 5px;
    }
\u{space}\u{space}\u{space}\u{space}
    .checkbox-on {
        background-image: url("data:image/svg+xml;charset=UTF-8,%3Csvg%20width%3D%2216%22%20height%3D%2216%22%20viewBox%3D%220%200%2016%2016%22%20fill%3D%22none%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%0A%3Crect%20width%3D%2216%22%20height%3D%2216%22%20fill%3D%22%2358A9D7%22%2F%3E%0A%3Cpath%20d%3D%22M6.71429%2012.2852L14%204.9995L12.7143%203.71436L6.71429%209.71378L3.28571%206.2831L2%207.57092L6.71429%2012.2852Z%22%20fill%3D%22white%22%2F%3E%0A%3C%2Fsvg%3E");
    }
\u{space}\u{space}\u{space}\u{space}
    .checkbox-off {
        background-image: url("data:image/svg+xml;charset=UTF-8,%3Csvg%20width%3D%2216%22%20height%3D%2216%22%20viewBox%3D%220%200%2016%2016%22%20fill%3D%22none%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%0A%3Crect%20x%3D%220.75%22%20y%3D%220.75%22%20width%3D%2214.5%22%20height%3D%2214.5%22%20fill%3D%22white%22%20stroke%3D%22%2336352F%22%20stroke-width%3D%221.5%22%2F%3E%0A%3C%2Fsvg%3E");
    }
\u{space}\u{space}\u{space}\u{space}\u{space}\u{space}\u{space}\u{space}
    </style></head><body><article id="1d1604ef-9b4b-8020-9a43-e475a43661a0" class="page sans"><header><h1 class="page-title">Smart Calendar Reminder: Your Intelligent Schedule Assistant</h1><p class="page-description"></p></header><div class="page-body"><figure class="block-color-blue_background callout" style="white-space:pre-wrap;display:flex" id="1d1604ef-9b4b-80b2-927b-ddb2d55d6032"><div style="width:100%">👋 Welcome to Smart Calendar Reminder! This welcome message appears only during your first use.</div></figure><h1 id="1d1604ef-9b4b-80c5-a289-d2aedc69317d" class="block-color-yellow_background">Transform Your Calendar Experience</h1><p id="1d1604ef-9b4b-80f7-ac48-d98bc2a805e6" class="">While iOS Calendar is fantastic for basic scheduling, we all know those built-in reminders can be easy to miss. Adding manual alarms, calculating travel times, and customizing notifications with event details can become tedious and time-consuming. That&#x27;s where Smart Calendar Reminder comes in - your automated solution for intelligent schedule management!</p><h2 id="1d1604ef-9b4b-800f-9752-cb68ca87b1cf" class="">Powerful Features at Your Fingertips</h2><ul id="0ecdba52-af59-410f-9efb-321f8e2d4ba6" class="bulleted-list"><li style="list-style-type:disc">Seamless Calendar Integration - No manual input needed</li></ul><ul id="1d1604ef-9b4b-80b9-8d0d-fe7b3c28115b" class="bulleted-list"><li style="list-style-type:disc">Intelligent Travel Time Calculations powered by Apple Maps</li></ul><ul id="4f6b7aca-7c92-458d-9996-e8f891a3775d" class="bulleted-list"><li style="list-style-type:disc">Spoken Event Details - Hear your schedule clearly</li></ul><ul id="1d1604ef-9b4b-80f5-9fe9-ee50fd3e7795" class="bulleted-list"><li style="list-style-type:disc">Smart Preparation Time Management</li></ul><h2 id="fa2195d7-f08f-4058-a00a-18e2b562b5b2" class="">Smart Location Intelligence</h2><p id="1d1604ef-9b4b-80d3-9799-dd97b27a3773" class="">Our advanced travel time calculation system uses three methods to determine your departure location, in order of priority:</p><ol type="1" id="667c5bbb-f94c-480b-bccd-c84948a3c40f" class="numbered-list" start="1"><li>Custom Departure Address - Add this JSON format in your calendar event notes for specific departure points:<script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/prism.min.js" integrity="sha512-7Z9J3l1+EYfeaPKcGXu3MS/7T+w19WtKQY/n+xzmw4hZhJ9tyYmcUS+4QqAlzhicE5LAfMQSF3iFTK9bQdTxXg==" crossorigin="anonymous" referrerPolicy="no-referrer"></script><link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism.min.css" integrity="sha512-tN7Ec6zAFaVSG3TpNAKtk4DOHNpSwKHxxrsiw4GHKESGPs5njn/0sMCUMl2svV4wo4BK/rCP7juYz+zx+l6oeQ==" crossorigin="anonymous" referrerPolicy="no-referrer"/><pre id="1d1604ef-9b4b-80d1-9d4b-dfb42d06c7b8" class="code"><code class="language-JSON">{
        &quot;Street&quot;: &quot;your departure street&quot;,
        &quot;City&quot;: &quot;your departure city&quot;,
        &quot;State&quot;: &quot;your departure state&quot;,
        &quot;Country&quot;: &quot;your departure country&quot;,
        &quot;Postcode&quot;: &quot;your departure postcode&quot;
    }</code></pre></li></ol><ol type="1" id="1d1604ef-9b4b-80c6-b468-d002dd94b75d" class="numbered-list" start="2"><li>Home Address - Uses your pre-configured home address - perfect for regular schedules</li></ol><ol type="1" id="aba3d861-a84a-48f6-a163-ac441f18b1b3" class="numbered-list" start="3"><li>Current Location - Automatically uses your current position as a fallback</li></ol><figure class="block-color-yellow_background callout" style="white-space:pre-wrap;display:flex" id="1d1604ef-9b4b-80ed-a48d-f0cad158ed60"><div style="width:100%">Smart Travel Planning: The system automatically calculates additional travel time if you&#x27;re not at your departure location!</div></figure><h2 id="efb3fa4e-d05f-4bd3-bd94-b9b991e29ce4" class="">Voice Announcements</h2><ul id="1d1604ef-9b4b-8076-9c50-fcefa4c4903c" class="bulleted-list"><li style="list-style-type:disc">Hourly Schedule Updates: Hear upcoming events at the start of each hour</li></ul><ul id="a0eb2cf6-1637-4d13-94c8-356fd19cd78a" class="bulleted-list"><li style="list-style-type:disc">Smart Reminders: Get spoken alerts at perfectly timed intervals</li></ul><h2 id="1d1604ef-9b4b-80dd-9df1-d8fae003cae6" class="">Intelligent Automation System</h2><p id="15ce45ed-b4fa-4b81-bbd0-2fa585b5c7ce" class="">Our sophisticated automation system ensures you never miss an important event:</p><ul id="1d1604ef-9b4b-80c5-a181-f10518e7e73d" class="bulleted-list"><li style="list-style-type:disc">Daily Planning: 12:00 AM check of your next 24 hours</li></ul><ul id="f54bf941-4703-4cc3-9f61-408f1eed72ee" class="bulleted-list"><li style="list-style-type:disc">Real-time Updates: Hourly recalculation of travel times</li></ul><ul id="1d1604ef-9b4b-800d-b8f8-e85831f4b0ee" class="bulleted-list"><li style="list-style-type:disc">Dynamic Adjustments: Automatic alarm optimization</li></ul><figure class="block-color-gray_background callout" style="white-space:pre-wrap;display:flex" id="1d1604ef-9b4b-8075-9657-ed6135b16d17"><div style="width:100%">Example: For a 10:30 AM meeting with 3 hours total travel time, the system ensures your 7:30 AM alarm is set and continuously optimized based on real-time conditions.</div></figure><h1 id="1d1604ef-9b4b-803a-8fbf-c89822dbca0a" class="block-color-blue">Setup Guide</h1><p id="1d1604ef-9b4b-80a7-ae75-c35724896e17" class="">Let&#x27;s get your Smart Calendar Reminder configured with four essential automations:</p><h2 id="1d1604ef-9b4b-8072-ab56-d0757b2435ef" class="block-color-gray_background">Automation 1: Daily 12:00 AM Check</h2><p id="1d1604ef-9b4b-80c9-9b4a-ee2712524a0d" class="block-color-blue">Step 1. Open Shortcuts and tap [Automation], then tap [+] at the top right corner</p><figure id="1d1604ef-9b4b-8043-b390-ff859889379f" class="image"><a href="gZWfH4Kler-left.png"><img style="width:709.984375px" src="https://i.imgur.com/za6VDMA.jpeg"/></a></figure><p id="1d1604ef-9b4b-804a-9cb1-f487991237c6" class="">Step 2. Tap [Time of Day]</p><figure id="1d1604ef-9b4b-8085-99bb-e3d90115d5dd" class="image"><a href="NDyjdrLrYZ-left.png"><img style="width:709.984375px" src="https://i.imgur.com/z7aJ0OB.jpeg"/></a></figure><p id="1d1604ef-9b4b-806d-a7eb-f652a480cbc6" class="">Step 3. Follow the sequence shown in the image</p><figure id="1d1604ef-9b4b-80cd-9ca5-fc076df31898" class="image"><a href="6KJEFinDm6-left.png"><img style="width:709.984375px" src="https://i.imgur.com/u6C2AR9.jpeg"/></a></figure><p id="1d1604ef-9b4b-8050-b817-f0e2368f43ca" class="block-color-gray_background">Step 4. Tap [New Blank Automation]</p><figure id="1d1604ef-9b4b-8028-b872-eed1a3f6701a" class="image"><a href="XblW6TFHek-left.png"><img style="width:709.984375px" src="https://i.imgur.com/nrTr7Np.jpeg"/></a></figure><p id="b8f8c3cf-7fdc-4a99-b2ba-60e18fef34c7" class="">Step 5. Search for the [Number] action</p><figure id="1d1604ef-9b4b-80d0-ad58-f7a1dc1d1c48" class="image"><a href="4XgUTG3h3E-left.png"><img style="width:709.984375px" src="https://i.imgur.com/F6jogMJ.jpeg"/></a></figure><p id="1d1604ef-9b4b-804e-9fe3-c5b6fc8701fa" class="">Step 6. Input number 1</p><figure id="1d1604ef-9b4b-8056-be0b-c4cfaebae0f7" class="image"><a href="n0XhfXtA03-left.png"><img style="width:709.984375px" src="https://i.imgur.com/HUMvkry.jpeg"/></a></figure><p id="1d1604ef-9b4b-8004-b82f-c5b6250d69c0" class="">Step 7. Search for [Run Shortcut] action</p><figure id="1d1604ef-9b4b-801d-a2d0-e444c55bbdb1" class="image"><a href="BUB7V9ITn8-left.png"><img style="width:709.984375px" src="https://i.imgur.com/IbHA9Jf.jpeg"/></a></figure><p id="1d1604ef-9b4b-8031-a595-d6b268bb5bfc" class="">Step 8. Search and select [Smart Calendar Reminder] in [Run Shortcut] action’s shortcut field.</p><figure id="1d1604ef-9b4b-804c-8be0-d6060e3b5a73" class="image"><a href="b50xsbc2QT-left.png"><img style="width:709.984375px" src="https://i.imgur.com/41WbF2A.png"/></a></figure><p id="1d1604ef-9b4b-805d-96d8-c871e0493bdb" class="block-color-default_background">Step 9. Tap [Done] in the top right corner to complete setup</p><figure id="1d1604ef-9b4b-8024-864a-d9002a94e719" class="image"><a href="LjO11dxjS3-left.png"><img style="width:709.984375px" src="https://i.imgur.com/tmrW6r8.jpeg"/></a></figure><h2 id="1d1604ef-9b4b-8045-9247-e3afd799f547" class="">Automation 2: Hourly Check</h2><p id="1d1604ef-9b4b-809c-900e-e425d52b7a0a" class="">Follow the same steps as Automation 1, with these modifications:</p><ul id="1d1604ef-9b4b-80a8-9819-cfd9961eb078" class="bulleted-list"><li style="list-style-type:disc">In step 3, select all <em><strong><span style="border-bottom:0.05em solid">24 hourly times</span></strong></em></li></ul><ul id="1d1604ef-9b4b-80b3-b766-ed9c851957a5" class="bulleted-list"><li style="list-style-type:disc">In step 6, input number <strong>2</strong> instead of 1</li></ul><h2 id="1d1604ef-9b4b-80ad-a1ea-e247f84f2063" class="">Automation 3: Alarm Trigger</h2><p id="1d1604ef-9b4b-8044-9254-f9d3912d6d6c" class="">Follow the same steps as Automation 1, with these changes:</p><ul id="1d1604ef-9b4b-802e-98b3-c8202e4f8765" class="bulleted-list"><li style="list-style-type:disc">In step 2, tap [<strong>Alarm</strong>] instead of [Time of Day]</li></ul><ul id="1d1604ef-9b4b-80a5-9ccc-d6a2906a3429" class="bulleted-list"><li style="list-style-type:disc">Configure settings as shown:</li></ul><figure id="1d1604ef-9b4b-8014-b883-f88df7a348e1" class="image"><a href="fIF3p3ttC0-left.png"><img style="width:709.984375px" src="https://i.imgur.com/MTyZ3km.png"/></a></figure><ul id="1d1604ef-9b4b-80dc-a6f8-edc73fc17118" class="bulleted-list"><li style="list-style-type:disc">In step 6, input number <strong>3</strong> instead of 1</li></ul><h2 id="1d1604ef-9b4b-8025-9db9-e83367a64cdb" class="">Automation 4: Alarm Stop</h2><p id="1d1604ef-9b4b-805f-afe2-f2de398e695a" class="">Follow the same steps as Automation 1, with these changes:</p><ul id="10aa2fe6-80f0-4850-93c0-4fe14b146190" class="bulleted-list"><li style="list-style-type:disc">In step 2, tap [<strong>Alarm</strong>] instead of [Time of Day]</li></ul><ul id="1d1604ef-9b4b-80aa-baad-e6dd7acf4ad9" class="bulleted-list"><li style="list-style-type:disc">Configure settings as shown:</li></ul><figure id="1d1604ef-9b4b-8068-a490-e601bfafcfe7" class="image"><a href="E24uC2vV2j-left.png"><img style="width:709.984375px" src="https://i.imgur.com/2LbJK9D.png"/></a></figure><ul id="1d1604ef-9b4b-804f-bcba-f64ec9bd67f1" class="bulleted-list"><li style="list-style-type:disc">In step 6, input number <strong>4</strong> instead of 1</li></ul><figure class="block-color-teal_background callout" style="white-space:pre-wrap;display:flex" id="1d1604ef-9b4b-8031-8b44-ddb00fab6dee"><div style="width:100%">🎉 Congratulations! Once you&#x27;ve completed these automations, your Smart Calendar Reminder is ready to revolutionize your schedule management!</div></figure></div></article><span class="sans" style="font-size:14px;padding-top:2em"></span></body></html>

〔28〕 Set Name of 〔27 Text〕 to Welcome.html　» 29 30

〔29〕 Show Web View at 〔28 Renamed Item〕

〔30〕 Make PDF from 〔28 Renamed Item〕　»

〔31〕 Save File 〔30 PDF〕
• AskWhereToSave: false
• SaveFileOverwrite: true
• FileDestinationPath: 〔3 Version Dictionary .Name〕/Welcome.pdf

〔32〕 End If　▵26

〔33〕 Dictionary 　➔ menus　»
{  "mainMenu": {
      "Setup": {
         "title": "Setup",
         "sub": "Set Personal Preferences",
         "icon": "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"
      },
      "Change": {
         "title": "Change",
         "sub": "Change Personal Preferences",
         "icon": "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"
      },
      "View": {
         "title": "View",
         "sub": "View Personal Preferences or Automations Setup Inctructions",
         "icon": "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"
      }
   }
}

〔34〕 Get Dictionary from 〔33 menus.mainMenu〕　»

〔35〕 Repeat with Each in 〔34 Dictionary〕

〔36〕 Get Dictionary All Values in 〔Repeat Item as Dictionary〕 　➔ Options　»
• DictionaryKey: 〔Repeat Item as Dictionary’s Keys〕.title

〔37〕 Repeat[2] with Each in 〔36 Options as Dictionary〕

〔38〕 Text
BEGIN:VCARD
VERSION:3.0
N;CHARSET=utf-8:〔Repeat Item 2 as Dictionary.title〕;
ORG:〔Repeat Item 2 as Dictionary.sub〕;
PHOTO;ENCODING=b:〔Repeat Item 2 as Dictionary.icon〕;
END:VCARD

〔39〕 End Repeat[2] with Each

〔40〕 End Repeat with Each　»

〔41〕 Text　»
〔40 Repeat Results〕

〔42〕 Set Name of 〔41 Text〕 to mainMenu.vcf　»

〔43〕 Get Contacts from 〔42 Renamed Item〕　»

〔44〕 Choose from List 〔43 Contacts〕　» 45 78 83
• ChooseFromListActionPrompt: ☀️Welcome to Smart Calendar Reminder☀️

〔45〕 If 〔44 Selected Item’s Name〕 is Setup

〔46〕 Get File at Path 〔3 Version Dictionary .Name〕/aboutme.txt from Folder　»
• FileErrorIfNotFound: false

〔47〕 If 〔46 File’s File Size〕 does not have any value

〔48〕 Comment
All the information is stored in iCloud. The shortcut isn’t collecting anything.

〔49〕 Text　»
Choose Travel Time Calculation Method

1️⃣ Notes 🗓️ / Current 📍\u000D
Uses the address in the Calendar event Notes if available (routing via Notes if you're not already there), otherwise calculates directly from your current location to the event.\u000D
\u000D
2️⃣ Notes 🗓️ / Home 🏡\u000D
Uses the Notes address if available (same as 1️⃣), but if Notes are empty, routes via your home address if you're not already there, or directly from home if you are.\u000D
\u000D

〔50〕 Choose from Menu
• MenuPrompt: 〔49 Text〕
• MenuItems: [1️⃣ Notes 🗓️ / Current 📍,
2️⃣ Notes 🗓️ / Home 🏡]

〔51〕 Menu Item 1️⃣ Notes 🗓️ / Current 📍

〔52〕 Dictionary　»
{  "state": "\"\"",
   "street": "\"\"",
   "city": "\"\"",
   "country": "\"\"",
   "postcode": "\"\""
}

〔53〕 Set Variable HomeAddress to 〔52 Dictionary〕

〔54〕 Menu Item 2️⃣ Notes 🗓️ / Home 🏡

〔55〕 Text　»
Please provide your home address for accurate travel time calculations via Apple Maps.

〔56〕 Text　»
<!DOCTYPE html>
<html>
<head>
    <title>Address Collector</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        /* Modern CSS styling */
        body {
            font-family: 'Segoe UI', sans-serif;
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            padding: 20px;
            min-height: 100vh;
        }

        .form-container {
            max-width: 500px;
            margin: 20px auto;
            background: white;
            padding: 25px;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        }

        h2 {
            color: #2c3e50;
            text-align: center;
            margin-bottom: 25px;
        }

        .form-group {
            margin-bottom: 20px;
        }

        label {
            display: block;
            margin-bottom: 8px;
            color: #34495e;
            font-weight: 500;
        }

        input {
            width: 100%;
            padding: 12px;
            margin: 0; /* Equal left/right margins */
            border: 2px solid #e0e0e0;
            border-radius: 8px;
            font-size: 16px;
            transition: border-color 0.3s ease;
            box-sizing: border-box; /* Ensures padding doesn't affect width */
        }

        input:focus {
            outline: none;
            border-color: #3498db;
            box-shadow: 0 0 8px rgba(52, 152, 219, 0.2);
        }

        button {
            background: #3498db;
            color: white;
            padding: 15px 30px;
            border: none;
            border-radius: 8px;
            font-size: 16px;
            cursor: pointer;
            width: 100%;
            transition: background 0.3s ease;
        }

        button:hover {
            background: #2980b9;
        }

        /* New success message styling */
        .success-message {
            display: none;
            background: #e8f5e9;
            color: #2e7d32;
            padding: 20px;
            border-radius: 8px;
            margin-top: 20px;
            text-align: center;
        }

        .success-message.show {
            display: block;
        }
    </style>
</head>
<body>
    <div class="form-container">
        <h2>〔55 Text〕</h2>
        <form id="addressForm">
            <div class="form-group">
                <label>Street Address</label>
                <input type="text" id="street" placeholder="" required>
            </div>

            <div class="form-group">
                <label>City</label>
                <input type="text" id="city" placeholder="" required>
            </div>

            <div class="form-group">
                <label>State/Province</label>
                <input type="text" id="state" placeholder="" required>
            </div>

            <div class="form-group">
                <label>Country/Region</label>
                <input type="text" id="country" placeholder="" required>
            </div>

            <div class="form-group">
                <label>Postal Code</label>
                <input type="text" id="postcode" placeholder="" required>
            </div>

            <button type="button" onclick="sendToShortcut()">Submit Address</button>
        </form>

        <!-- Success message container -->
        <div class="success-message" id="successMessage">
            <p>Data collected successfully!</p>
        </div>
    </div>

<script>
function sendToShortcut() {
  const addressData = {
    street: document.getElementById('street').value,
    city: document.getElementById('city').value,
    state: document.getElementById('state').value,
    country: document.getElementById('country').value,
    postcode: document.getElementById('postcode').value
  };
\u{space}\u{space}
  // Copy data to clipboard
  navigator.clipboard.writeText(JSON.stringify(addressData));
\u{space}\u{space}
  // Show success message and hide form
  document.getElementById('addressForm').style.display = 'none';
  document.getElementById('successMessage').classList.add('show');
}
</script>
</body>
</html>

〔57〕 Set Name of 〔56 Text〕 to Address.html　»

〔58〕 Show Web View at 〔57 Renamed Item〕

〔59〕 Get Clipboard　»

〔60〕 Get Dictionary from 〔59 Clipboard〕　»

〔61〕 Set Variable HomeAddress to 〔60 Dictionary〕

〔62〕 End Menu　▵54

〔63〕 List　» 65
[Driving,
Walking,
Transit,
Biking]

〔64〕 Text　»
Select Travel Method (It will apply to all the events)

〔65〕 Choose from List 〔63 List〕 　➔ Travel Method Selected　»
• ChooseFromListActionPrompt: 〔64 Text〕

〔66〕 Set Variable TravelMethod to 〔65 Travel Method Selected〕

〔67〕 Text　»
Besides travel time, how many Extra Minutes Needed (e.g., '15 mins buffer')

〔68〕 Ask for Number Input 　➔ Extra Time Needed　»
• AskActionPrompt: 〔67 Text〕
• AskActionAllowsNegativeNumbers: false
• AskActionAllowsDecimalNumbers: false

〔69〕 Set Variable ExtraTime to 〔68 Extra Time Needed〕

〔70〕 Dictionary　»
{  "HomeAddress": "〔HomeAddress as Dictionary〕",
   "TravelMethod": "〔TravelMethod〕",
   "ExtraTime": "〔ExtraTime〕"
}

〔71〕 Text　»
〔70 Dictionary〕

〔72〕 Save File 〔71 Text〕
• Folder: {  "fileLocation": {
      "crossDeviceItemID": "docs.icloud.com:iCloud.is.workflow.my.workflows/documents/e51c720424ec90d3260ccd6f241343baea15b7f3",
      "fileProviderDomainID": "com.apple.CloudDocs.iCloudDriveFileProvider/46CA22EA-49CD-4A1D-9512-F48B36AA64B5",
      "appContainerBundleIdentifier": "com.apple.shortcuts",
      "relativeSubpath": "",
      "WFFileLocationType": "Shortcuts"
   },
   "filename": "Documents",
   "displayName": "Shortcuts"
}
• AskWhereToSave: false
• SaveFileOverwrite: true
• FileDestinationPath: 〔3 Version Dictionary .Name〕/aboutme.txt

〔73〕 Otherwise　▵47

〔74〕 Show Alert You have set up. If you want to modify, please tap [Change] instead.
• AlertActionCancelButtonShown: false

〔75〕 Run Shortcut Smart Calendar Reminder
• Workflow: {  "workflowIdentifier": "5A2BC55E-C195-4C6C-93E9-725F782CDD1B",
   "isSelf": true,
   "workflowName": "Smart Calendar Reminder"
}

〔76〕 End If

〔77〕 End If　▵45

〔78〕 If 〔44 Selected Item’s Name〕 is Change

〔79〕 Delete Files {  "fileLocation": {
      "crossDeviceItemID": "docs.icloud.com:iCloud.is.workflow.my.workflows/9F38EF56-AD52-45E7-8B63-200CBFF0E713/a708662a11276f4b1fa48be3c50990fd13a4ccdf",
      "fileProviderDomainID": "com.apple.CloudDocs.iCloudDriveFileProvider/F1A50FD9-D64E-426C-8EB2-9C6216034396",
      "appContainerBundleIdentifier": "com.apple.systemactions",
      "relativeSubpath": "Smart Calendar Reminder/aboutme.txt",
      "WFFileLocationType": "Shortcuts"
   },
   "filename": "aboutme.txt",
   "displayName": "aboutme.txt"
}
• DeleteImmediatelyDelete: true

〔80〕 Show Alert Your preferences are deleted. Please choose [Setup] from main menu to set up again.
• AlertActionCancelButtonShown: false

〔81〕 Run Shortcut Smart Calendar Reminder
• Workflow: {  "workflowIdentifier": "5A2BC55E-C195-4C6C-93E9-725F782CDD1B",
   "isSelf": true,
   "workflowName": "Smart Calendar Reminder"
}

〔82〕 End If

〔83〕 If 〔44 Selected Item’s Name〕 is View

〔84〕 Choose from Menu
• MenuItems: [Automations Setup Instructions,
Personal Preferences]

〔85〕 Menu Item Automations Setup Instructions

〔86〕 Open File {  "fileLocation": {
      "crossDeviceItemID": "docs.icloud.com:iCloud.is.workflow.my.workflows/E4DA358A-5903-4CC2-BBC8-FD498ED6EDB3/d459a12be98fb7e83aed794c6d0dcf774ef5d814",
      "fileProviderDomainID": "com.apple.CloudDocs.iCloudDriveFileProvider/F1A50FD9-D64E-426C-8EB2-9C6216034396",
      "appContainerBundleIdentifier": "com.apple.systemactions",
      "relativeSubpath": "Smart Calendar Reminder/Welcome.pdf",
      "WFFileLocationType": "Shortcuts"
   },
   "filename": "Welcome.pdf",
   "displayName": "Welcome.pdf"
}

〔87〕 Menu Item Personal Preferences

〔88〕 Open File {  "fileLocation": {
      "crossDeviceItemID": "docs.icloud.com:iCloud.is.workflow.my.workflows/81672621-501F-4225-8CDA-11AAF2112D81/06302c85b44ba41f3258ff7d1669b31859a28556",
      "fileProviderDomainID": "com.apple.CloudDocs.iCloudDriveFileProvider/F1A50FD9-D64E-426C-8EB2-9C6216034396",
      "appContainerBundleIdentifier": "com.apple.systemactions",
      "relativeSubpath": "Smart Calendar Reminder/aboutme.txt",
      "WFFileLocationType": "Shortcuts"
   },
   "filename": "aboutme.txt",
   "displayName": "aboutme.txt"
}

〔89〕 End Menu

〔90〕 End If　▵83

〔91〕 Otherwise　▵0

〔92〕 If 〔Shortcut Input as Number〕 is 1

〔93〕 Comment
*Revolutionizing event management by integrating calendar data with intelligent automation:

Voice announcements for upcoming events

Dynamic alarm calculation (travel + prep time)

Calendar-driven scheduling system
Eliminates manual reminders and ensures perfect timing synchronization*

〔94〕 Get File at Path Smart Calendar Reminder/aboutme.txt from Folder　»
• FileErrorIfNotFound: false

〔95〕 Get Dictionary from 〔94 File〕　» 96 99 100

〔96〕 Get Dictionary from 〔95 Dictionary.HomeAddress〕　»

〔97〕 Text　»
〔96 Dictionary.street〕 〔96 Dictionary.city〕 〔96 Dictionary.state〕 〔96 Dictionary.postcode〕 〔96 Dictionary.country〕\u{space}

〔98〕 Set Variable HomeAddress to 〔97 Text〕

〔99〕 Set Variable TravelMethod to 〔95 Dictionary.TravelMethod〕

〔100〕 Get Dictionary Value for ExtraTime in 〔95 Dictionary〕　»

〔101〕 Get Numbers from 〔100 Dictionary Value〕　»

〔102〕 Set Variable ExtraTime to 〔101 Numbers〕

〔103〕 Find Calendar Events All Calendar Events where　» 104 105
• ContentItemSortProperty: Start Date
• ContentItemSortOrder: Oldest First
• ContentItemFilter: • All the following are true
Start Date is in the next 1 days
Is All Day
Canceled is {"Bool":{"Value":false,"WFSerializationType":"WFBooleanSubstitutableState"}}

〔104〕 If 〔103 Calendar Events〕 has any value

〔105〕 Repeat with Each in 〔103 Calendar Events〕

〔106〕 If 〔Repeat Item’s Location〕 has any value

〔107〕 Get Current Location　» 119 125 189
• Accuracy: Best

〔108〕 Comment
*To specify event-specific departure locations:

1. Create calendar event notes with JSON structure:
{
“Street”: “your departure street”,
“City”: “your departure city”,
“State”: “your departure state”,
“Country”: “your departure country”,
“Postcode”: “your departure postcode”
}
2. System prioritizes these over default locations*

〔109〕 If All are true　〔Repeat Item’s Notes〕 has any value　〔Repeat Item’s Notes〕 begins with {　〔Repeat Item’s Notes〕 ends with }

〔110〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY

〔111〕 Get Dictionary from 〔Repeat Item’s Notes〕 　➔ Notes Address Dictionary　» 112 113 114 115 116

〔112〕 Set Variable Calendar_Notes_Street to 〔111 Notes Address Dictionary.Street〕

〔113〕 Set Variable Calendar_Notes_City to 〔111 Notes Address Dictionary.City〕

〔114〕 Set Variable Calendar_Notes_State to 〔111 Notes Address Dictionary.State〕

〔115〕 Set Variable Calendar_Notes_Region to 〔111 Notes Address Dictionary.Country〕

〔116〕 Set Variable Calendar_Notes_ZIP_Code to 〔111 Notes Address Dictionary.Postcode〕

〔117〕 Text　»
〔Calendar_Notes_Street〕 〔Calendar_Notes_City〕 〔Calendar_Notes_State〕 〔Calendar_Notes_ZIP_Code〕 〔Calendar_Notes_Region〕

〔118〕 Set Variable NotesAddressString to 〔117 Text〕

〔119〕 If All are true　〔107 Current Location’s Street〕 is 〔Calendar_Notes_Street〕　〔107 Current Location’s City〕 is 〔Calendar_Notes_City〕　〔107 Current Location’s State〕 is 〔Calendar_Notes_State〕　〔107 Current Location’s Country〕 is 〔Calendar_Notes_Region〕　〔107 Current Location’s ZIP Code〕 is 〔Calendar_Notes_ZIP_Code〕

〔120〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY -> CALENDAR EVENT ADDRESS IS THE SAME WITH CURRENT LOCATION

〔121〕 Number 0　»

〔122〕 Set Variable CurrentToDeparture to 〔121 Number〕

〔123〕 Otherwise

〔124〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY -> CALENDAR EVENT ADDRESS IS NOT THE SAME WITH CURRENT LOCATION

〔125〕 Get 〔TravelMethod〕 Time　»
• GetDirectionsCustomLocation: 〔107 Current Location〕
• Destination: 〔NotesAddressString〕

〔126〕 Set Variable TravelTimeString to 〔125 Travel Time〕

〔127〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　» 128 130 132 137 144
• MatchTextCaseSensitive: false

〔128〕 Count Items in 〔127 C2DMatches〕　»

〔129〕 If 〔128 Count〕 > 1

〔130〕 Get First Item from List 〔127 C2DMatches〕　»

〔131〕 Set Variable C2DHours to 〔130 Item from List〕

〔132〕 Get Last Item from List 〔127 C2DMatches〕　»

〔133〕 Set Variable C2DMinutes to 〔132 Item from List〕

〔134〕 Otherwise

〔135〕 Match Text hour(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔136〕 If 〔135 C2DMatches’s text〕 has any value

〔137〕 Get First Item from List 〔127 C2DMatches〕　»

〔138〕 Set Variable C2DHours to 〔137 Item from List〕

〔139〕 Number 0　»

〔140〕 Set Variable C2DMinutes to 〔139 Number〕

〔141〕 Otherwise

〔142〕 Number 0　»

〔143〕 Set Variable C2DHours to 〔142 Number〕

〔144〕 Get First Item from List 〔127 C2DMatches〕　»

〔145〕 Set Variable C2DMinutes to 〔144 Item from List〕

〔146〕 End If

〔147〕 End If　▵134

〔148〕 Calculate 〔C2DHours〕 × 60　»

〔149〕 Calculate 〔148 Calculation Result〕 + 〔C2DMinutes〕　»

〔150〕 Set Variable CurrentToDeparture to 〔149 Calculation Result〕

〔151〕 End If　▵123

〔152〕 Get 〔TravelMethod〕 Time 　➔ DepartureToDestination　» 153 1505
• GetDirectionsCustomLocation: 〔NotesAddressString〕
• Destination: 〔Repeat Item’s Location〕

〔153〕 Set Variable TravelTimeString to 〔152 DepartureToDestination〕

〔154〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　» 155 157 159 164 171
• MatchTextCaseSensitive: false

〔155〕 Count Items in 〔154 C2DMatches〕　»

〔156〕 If 〔155 Count〕 > 1

〔157〕 Get First Item from List 〔154 C2DMatches〕　»

〔158〕 Set Variable C2DHours to 〔157 Item from List〕

〔159〕 Get Last Item from List 〔154 C2DMatches〕　»

〔160〕 Set Variable C2DMinutes to 〔159 Item from List〕

〔161〕 Otherwise

〔162〕 Match Text hour(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔163〕 If 〔162 C2DMatches’s text〕 has any value

〔164〕 Get First Item from List 〔154 C2DMatches〕　»

〔165〕 Set Variable C2DHours to 〔164 Item from List〕

〔166〕 Number 0　»

〔167〕 Set Variable C2DMinutes to 〔166 Number〕

〔168〕 Otherwise

〔169〕 Number 0　»

〔170〕 Set Variable C2DHours to 〔169 Number〕

〔171〕 Get First Item from List 〔154 C2DMatches〕　»

〔172〕 Set Variable C2DMinutes to 〔171 Item from List〕

〔173〕 End If

〔174〕 End If　▵161

〔175〕 Calculate 〔C2DHours〕 × 60　»

〔176〕 Calculate 〔175 Calculation Result〕 + 〔C2DMinutes〕　»

〔177〕 Calculate 〔176 Calculation Result〕 + 〔CurrentToDeparture〕　»

〔178〕 Set Variable TravelTime to 〔177 Calculation Result〕

〔179〕 Otherwise　▵109

〔180〕 Comment
CALENDER EVENT NOTES IS BLANK

〔181〕 Get Dictionary from 〔HomeAddress〕 　➔ Home Address Dictionary　» 182 183 184 185 186

〔182〕 Get Dictionary Value for street in 〔181 Home Address Dictionary〕 　➔ home_Street　» 187 189

〔183〕 Get Dictionary Value for city in 〔181 Home Address Dictionary〕 　➔ home_City　» 187 189

〔184〕 Get Dictionary Value for state in 〔181 Home Address Dictionary〕 　➔ home_State　» 187 189

〔185〕 Get Dictionary Value for country in 〔181 Home Address Dictionary〕 　➔ home_Country　» 187 189

〔186〕 Get Dictionary Value for postcode in 〔181 Home Address Dictionary〕 　➔ home_Postcode　» 187 189

〔187〕 If All are true　〔182 home_Street〕 has any value　〔183 home_City〕 has any value　〔184 home_State〕 has any value　〔185 home_Country〕 has any value　〔186 home_Postcode〕 has any value

〔188〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED

〔189〕 If All are true　〔107 Current Location’s Street〕 is 〔182 home_Street〕　〔107 Current Location’s City〕 is 〔183 home_City〕　〔107 Current Location’s State〕 is 〔184 home_State〕　〔107 Current Location’s Country〕 is 〔185 home_Country〕　〔107 Current Location’s ZIP Code〕 is 〔186 home_Postcode〕

〔190〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED -> HOME ADDRESS IS THE SAME WITH CURRENT LOCATION

〔191〕 Number 0　»

〔192〕 Set Variable CurrentToDeparture to 〔191 Number〕

〔193〕 Otherwise

〔194〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED -> HOME ADDRESS IS NOT THE SAME WITH CURRENT LOCATION

〔195〕 Get 〔TravelMethod〕 Time　»
• Destination: 〔HomeAddress〕

〔196〕 Set Variable TravelTimeString to 〔195 Travel Time〕

〔197〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　» 198 200 202 207 214
• MatchTextCaseSensitive: false

〔198〕 Count Items in 〔197 C2DMatches〕　»

〔199〕 If 〔198 Count〕 > 1

〔200〕 Get First Item from List 〔197 C2DMatches〕　»

〔201〕 Set Variable C2DHours to 〔200 Item from List〕

〔202〕 Get Last Item from List 〔197 C2DMatches〕　»

〔203〕 Set Variable C2DMinutes to 〔202 Item from List〕

〔204〕 Otherwise

〔205〕 Match Text hour(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔206〕 If 〔205 C2DMatches’s text〕 has any value

〔207〕 Get First Item from List 〔197 C2DMatches〕　»

〔208〕 Set Variable C2DHours to 〔207 Item from List〕

〔209〕 Number 0　»

〔210〕 Set Variable C2DMinutes to 〔209 Number〕

〔211〕 Otherwise

〔212〕 Number 0　»

〔213〕 Set Variable C2DHours to 〔212 Number〕

〔214〕 Get First Item from List 〔197 C2DMatches〕　»

〔215〕 Set Variable C2DMinutes to 〔214 Item from List〕

〔216〕 End If

〔217〕 End If　▵204

〔218〕 Calculate 〔C2DHours〕 × 60　»

〔219〕 Calculate 〔218 Calculation Result〕 + 〔C2DMinutes〕　»

〔220〕 Set Variable CurrentToDeparture to 〔219 Calculation Result〕

〔221〕 End If　▵193

〔222〕 Get 〔TravelMethod〕 Time 　➔ DepartureToDestination　»
• GetDirectionsCustomLocation: 〔HomeAddress〕
• Destination: 〔Repeat Item’s Location〕

〔223〕 Set Variable TravelTimeString to 〔222 DepartureToDestination〕

〔224〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　» 225 227 229 234 241
• MatchTextCaseSensitive: false

〔225〕 Count Items in 〔224 C2DMatches〕　»

〔226〕 If 〔225 Count〕 > 1

〔227〕 Get First Item from List 〔224 C2DMatches〕　»

〔228〕 Set Variable C2DHours to 〔227 Item from List〕

〔229〕 Get Last Item from List 〔224 C2DMatches〕　»

〔230〕 Set Variable C2DMinutes to 〔229 Item from List〕

〔231〕 Otherwise

〔232〕 Match Text hour(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔233〕 If 〔232 C2DMatches’s text〕 has any value

〔234〕 Get First Item from List 〔224 C2DMatches〕　»

〔235〕 Set Variable C2DHours to 〔234 Item from List〕

〔236〕 Number 0　»

〔237〕 Set Variable C2DMinutes to 〔236 Number〕

〔238〕 Otherwise

〔239〕 Number 0　»

〔240〕 Set Variable C2DHours to 〔239 Number〕

〔241〕 Get First Item from List 〔224 C2DMatches〕　»

〔242〕 Set Variable C2DMinutes to 〔241 Item from List〕

〔243〕 End If

〔244〕 End If　▵231

〔245〕 Calculate 〔C2DHours〕 × 60　»

〔246〕 Calculate 〔245 Calculation Result〕 + 〔C2DMinutes〕　»

〔247〕 Calculate 〔246 Calculation Result〕 + 〔CurrentToDeparture〕　»

〔248〕 Set Variable TravelTime to 〔247 Calculation Result〕

〔249〕 Otherwise　▵187

〔250〕 Text
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS NOT MAINTAINED

〔251〕 Get 〔TravelMethod〕 Time　»
• Destination: 〔Repeat Item’s Location〕

〔252〕 Set Variable TravelTimeString to 〔251 Travel Time〕

〔253〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　» 254 256 258 263 270
• MatchTextCaseSensitive: false

〔254〕 Count Items in 〔253 C2DMatches〕　»

〔255〕 If 〔254 Count〕 > 1

〔256〕 Get First Item from List 〔253 C2DMatches〕　»

〔257〕 Set Variable C2DHours to 〔256 Item from List〕

〔258〕 Get Last Item from List 〔253 C2DMatches〕　»

〔259〕 Set Variable C2DMinutes to 〔258 Item from List〕

〔260〕 Otherwise

〔261〕 Match Text hour(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔262〕 If 〔261 C2DMatches’s text〕 has any value

〔263〕 Get First Item from List 〔253 C2DMatches〕　»

〔264〕 Set Variable C2DHours to 〔263 Item from List〕

〔265〕 Number 0　»

〔266〕 Set Variable C2DMinutes to 〔265 Number〕

〔267〕 Otherwise

〔268〕 Number 0　»

〔269〕 Set Variable C2DHours to 〔268 Number〕

〔270〕 Get First Item from List 〔253 C2DMatches〕　»

〔271〕 Set Variable C2DMinutes to 〔270 Item from List〕

〔272〕 End If

〔273〕 End If　▵260

〔274〕 Calculate 〔C2DHours〕 × 60　»

〔275〕 Calculate 〔274 Calculation Result〕 + 〔C2DMinutes〕　»

〔276〕 Set Variable TravelTime to 〔275 Calculation Result〕

〔277〕 End If　▵249

〔278〕 End If　▵179

〔279〕 Otherwise　▵106

〔280〕 Number 0　»

〔281〕 Set Variable TravelTime to 〔280 Number〕

〔282〕 End If

〔283〕 Calculate 〔TravelTime〕 + 〔ExtraTime〕　»

〔284〕 Adjust Subtract Date 〔Repeat Item’s Start Date〕 　➔ Supposed Alarm Time　» 285 288 291 294 301 317 319 320 338 343 346
• Duration: 〔283 Calculation Result〕 min

〔285〕 Dictionary 　➔ Alarm Label Dictionary　» 317 322 338
{  "Event": "〔Repeat Item〕",
   "From": "〔Repeat Item’s Start Date〕",
   "To": "〔Repeat Item’s End Date〕",
   "Location": "〔Repeat Item’s Location〕",
   "AlarmTime": "〔284 Supposed Alarm Time〕"
}

〔286〕 Date Current Date 　➔ Current Date　» 287 288 319

〔287〕 Adjust Add Date 〔286 Current Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"dd MMM yyyy"}〕 　➔ 1 day after　» 301 320
• Duration: "1" days

〔288〕 If 〔284 Supposed Alarm Time〕 is 〔286 Current Date〕

〔289〕 Comment
supposed alarm time is exactly 12:00am

〔290〕 If 〔Repeat Item’s Location〕 has any value

〔291〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 at 〔Repeat Item’s Location〕 which  was supposed to get ready at 〔284 Supposed Alarm Time〕. Please check.

〔292〕 Set Variable Text to 〔291 Text〕

〔293〕 Otherwise

〔294〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 which  was supposed to get ready at 〔284 Supposed Alarm Time〕. Please check.

〔295〕 Set Variable Text to 〔294 Text〕

〔296〕 End If

〔297〕 Show Alert 〔Text〕

〔298〕 Show Notification 〔Text〕

〔299〕 Speak Text
• Text: 〔Text〕

〔300〕 Otherwise　▵288

〔301〕 If 〔284 Supposed Alarm Time〕 is 〔287 1 day after〕

〔302〕 Find Alarm All Alarm　» 303 304

〔303〕 If 〔302 Alarms〕 has any value

〔304〕 Repeat[2] with Each in 〔302 Alarms〕

〔305〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ AlarmLabelDictionary　» 306 307 309

〔306〕 Get Dictionary Value for Event in 〔305 AlarmLabelDictionary〕 　➔ Event　» 311

〔307〕 Get Dictionary Value for From in 〔305 AlarmLabelDictionary〕 　➔ From　»

〔308〕 Get Dates from 〔307 From〕 　➔ FromDate　» 311

〔309〕 Get Dictionary Value for To in 〔305 AlarmLabelDictionary〕 　➔ To　»

〔310〕 Get Dates from 〔309 To〕 　➔ ToDate　»

〔311〕 If All are true　〔306 Event’s Name〕 is 〔Repeat Item〕　〔308 FromDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔Repeat Item’s Start Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕　〔310 ToDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is • ConditionalActionString
〔Repeat Item’s End Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕• Date
〔Repeat Item’s End Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕

〔312〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔313〕 End If

〔314〕 End Repeat[2] with Each　▵304

〔315〕 End If　▵303

〔316〕 Comment
since this will be triggered at 12:00 am each day, when the supposed alarm time is 12:00 am in the next day, you can set alarm now

〔317〕 Add Alarm for 〔284 Supposed Alarm Time〕 called 〔285 Alarm Label Dictionary〕

〔318〕 Otherwise　▵301

〔319〕 If 〔284 Supposed Alarm Time〕 > 〔286 Current Date〕

〔320〕 If 〔284 Supposed Alarm Time〕 > 〔287 1 day after〕

〔321〕 Comment
when the time is other than 12:00 am of then next day, you cannot set alarm yet. If set, it will be today. For example, triggering time 2025-4-8 12:00 am, the supposed alarm time is 2025-4-9 08:00 am, if you set an alarm at 08:00 at 2025-4-8 12:00 am, it will alarm at 2025-4-8 08:00 am instead. So we need to record the supposed alarm time and trigger next day.

〔322〕 Set Variable Event to 〔285 Alarm Label Dictionary〕

〔323〕 Otherwise

〔324〕 Find Alarm All Alarm　» 325 326
• ContentItemFilter: {  "Value": {
      "WFActionParameterFilterPrefix": 1,
      "WFContentPredicateBoundedDate": false,
      "WFActionParameterFilterTemplates": []
   },
   "WFSerializationType": "WFContentPredicateTableTemplate"
}

〔325〕 If 〔324 Alarms〕 has any value

〔326〕 Repeat[2] with Each in 〔324 Alarms〕

〔327〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ AlarmLabelDictionary　» 328 329 331

〔328〕 Get Dictionary Value for Event in 〔327 AlarmLabelDictionary〕 　➔ Event　» 333

〔329〕 Get Dictionary Value for From in 〔327 AlarmLabelDictionary〕 　➔ From　»

〔330〕 Get Dates from 〔329 From〕 　➔ FromDate　» 333

〔331〕 Get Dictionary Value for To in 〔327 AlarmLabelDictionary〕 　➔ To　»

〔332〕 Get Dates from 〔331 To〕 　➔ ToDate　»

〔333〕 If All are true　〔328 Event’s Name〕 is 〔Repeat Item〕　〔330 FromDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔Repeat Item’s Start Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕　〔332 ToDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔Repeat Item’s End Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕

〔334〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔335〕 End If

〔336〕 End Repeat[2] with Each　▵326

〔337〕 End If　▵325

〔338〕 Add Alarm for 〔284 Supposed Alarm Time〕 called 〔285 Alarm Label Dictionary〕

〔339〕 End If　▵323

〔340〕 Otherwise　▵319

〔341〕 Comment
the supposed alarm time passed

〔342〕 If 〔Repeat Item’s Location〕 has any value

〔343〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 at 〔Repeat Item’s Location〕 which  was supposed to get ready at 〔284 Supposed Alarm Time〕. Please check.

〔344〕 Set Variable Text to 〔343 Text〕

〔345〕 Otherwise

〔346〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 which  was supposed to get ready at 〔284 Supposed Alarm Time〕. Please check.

〔347〕 Set Variable Text to 〔346 Text〕

〔348〕 End If

〔349〕 Show Alert 〔Text〕

〔350〕 Show Notification 〔Text〕

〔351〕 Speak Text
• Text: 〔Text〕

〔352〕 End If　▵340

〔353〕 End If　▵318

〔354〕 End If　▵300

〔355〕 Text
〔Event〕

〔356〕 If 〔Event〕 has any value

〔357〕 Get Dictionary from 〔Event〕　» 370

〔358〕 Text　»

〔359〕 Set Variable TextList to 〔358 Text〕

〔360〕 Add 〔Event〕 to Variable TextList

〔361〕 Get File at Path Smart Calendar Reminder/Future Alarms.txt from Folder　» 362 363
• FileErrorIfNotFound: false

〔362〕 If 〔361 File’s File Size〕 has any value

〔363〕 Split Text 〔361 File〕 by New Lines　»

〔364〕 Repeat[2] with Each in 〔363 Split Text〕

〔365〕 Get Dictionary from 〔Repeat Item 2〕　» 366 367 368 369

〔366〕 Get Dictionary Value for Event in 〔365 Dictionary〕 　➔ Event　» 370

〔367〕 Get Dictionary Value for From in 〔365 Dictionary〕 　➔ From　» 370

〔368〕 Get Dictionary Value for To in 〔365 Dictionary〕 　➔ To　» 370

〔369〕 Get Dictionary Value for Location in 〔365 Dictionary〕 　➔ Location　»

〔370〕 If Any are true　〔366 Event’s Name〕 is not 〔357 Dictionary.Event〕　〔367 From’s Name〕 is not 〔357 Dictionary.From〕　〔368 To’s Name〕 is not 〔357 Dictionary.To〕　〔369 Location’s Name〕 is not 〔357 Dictionary.Location〕

〔371〕 Add 〔Repeat Item 2〕 to Variable TextList

〔372〕 End If

〔373〕 End Repeat[2] with Each　▵364

〔374〕 Combine Text 〔TextList〕 with New Lines　»

〔375〕 Save File 〔374 Combined Text〕
• AskWhereToSave: false
• SaveFileOverwrite: true
• FileDestinationPath: Smart Calendar Reminder/Future Alarms.txt

〔376〕 Otherwise　▵362

〔377〕 Text　»

〔Event〕

〔378〕 Save File 〔377 Text〕
• AskWhereToSave: false
• FileDestinationPath: Smart Calendar Reminder/Future Alarms.txt

〔379〕 End If

〔380〕 End If　▵356

〔381〕 End Repeat with Each　▵105

〔382〕 End If　▵104

〔383〕 Get File at Path Smart Calendar Reminder/Future Alarms.txt from Folder　» 384 385
• FileErrorIfNotFound: false

〔384〕 If 〔383 File’s File Size〕 has any value

〔385〕 Split Text 〔383 File〕 by New Lines　»

〔386〕 Repeat with Each in 〔385 Split Text〕

〔387〕 Get Dictionary from 〔Repeat Item〕　» 388 389 399 410

〔388〕 If 〔387 Dictionary〕 has any value

〔389〕 Get Dates from 〔387 Dictionary.AlarmTime〕　» 390 410

〔390〕 If 〔389 Dates〕 is today

〔391〕 Find Alarm All Alarm　» 392 393
• ContentItemFilter: {  "Value": {
      "WFActionParameterFilterPrefix": 1,
      "WFActionParameterFilterTemplates": [],
      "WFContentPredicateBoundedDate": false
   },
   "WFSerializationType": "WFContentPredicateTableTemplate"
}

〔392〕 If 〔391 Alarms〕 has any value

〔393〕 Repeat[2] with Each in 〔391 Alarms〕

〔394〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ Alarm_Label_Dictionary　» 395 397 405

〔395〕 Get Dictionary Value for From in 〔394 Alarm_Label_Dictionary〕　»

〔396〕 Get Dates from 〔395 Dictionary Value〕 　➔ From_Date　» 405

〔397〕 Get Dictionary Value for To in 〔394 Alarm_Label_Dictionary〕　»

〔398〕 Get Dates from 〔397 Dictionary Value〕 　➔ To_Date　» 405

〔399〕 Get Dictionary from 〔387 Dictionary.Event〕 　➔ FutureAlarmLabelDictionary　» 400 401 403

〔400〕 Get Dictionary Value for Event in 〔399 FutureAlarmLabelDictionary〕 　➔ Event　» 405

〔401〕 Get Dictionary Value for From in 〔399 FutureAlarmLabelDictionary〕 　➔ From　»

〔402〕 Get Dates from 〔401 From〕 　➔ FromDate　» 405

〔403〕 Get Dictionary Value for To in 〔399 FutureAlarmLabelDictionary〕 　➔ To　»

〔404〕 Get Dates from 〔403 To〕 　➔ ToDate　»

〔405〕 If All are true　〔400 Event’s Name〕 is 〔394 Alarm_Label_Dictionary.Event〕　〔402 FromDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔396 From_Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕　〔404 ToDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔398 To_Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕

〔406〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔407〕 End If

〔408〕 End Repeat[2] with Each　▵393

〔409〕 End If　▵392

〔410〕 Add Alarm for 〔389 Dates〕 called 〔387 Dictionary.Event〕

〔411〕 End If　▵390

〔412〕 End If　▵388

〔413〕 End Repeat with Each　▵386

〔414〕 End If　▵384

〔415〕 End If　▵92

〔416〕 If 〔Shortcut Input as Number〕 is 2

〔417〕 Comment
1-Hour Event Processor
*Real-time event handler for immediate notifications:

Processes events within next 60 minutes

Provides most accurate travel estimates

Recommended for hourly automation*

〔418〕 Get File at Path Smart Calendar Reminder/aboutme.txt from Folder　»
• FileErrorIfNotFound: false

〔419〕 Get Dictionary from 〔418 File〕　» 420 423 424

〔420〕 Get Dictionary from 〔419 Dictionary.HomeAddress〕　»

〔421〕 Text　»
〔420 Dictionary.street〕 〔420 Dictionary.city〕 〔420 Dictionary.state〕 〔420 Dictionary.postcode〕 〔420 Dictionary.country〕

〔422〕 Set Variable Home_Address to 〔421 Text〕

〔423〕 Set Variable Travel_Method to 〔419 Dictionary.TravelMethod〕

〔424〕 Get Dictionary Value for ExtraTime in 〔419 Dictionary〕　»

〔425〕 Get Numbers from 〔424 Dictionary Value〕　»

〔426〕 Set Variable Extra_Time to 〔425 Numbers〕

〔427〕 Find Calendar Events All Calendar Events where　» 428 429 430 642
• ContentItemSortProperty: Start Date
• ContentItemSortOrder: Oldest First
• ContentItemFilter: • All the following are true
Start Date is in the next 1 hours
Is All Day
Canceled is {"Bool":{"Value":false,"WFSerializationType":"WFBooleanSubstitutableState"}}

〔428〕 If 〔427 Calendar Events〕 has any value

〔429〕 Count Items in 〔427 Calendar Events〕　» 646 654

〔430〕 Repeat with Each in 〔427 Calendar Events〕

〔431〕 If 〔Repeat Item’s Location〕 has any value

〔432〕 Get Current Location　» 443 449 513
• Accuracy: Best

〔433〕 If All are true　〔Repeat Item’s Notes〕 has any value　〔Repeat Item’s Notes〕 begins with {　〔Repeat Item’s Notes〕 ends with }

〔434〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY

〔435〕 Get Dictionary from 〔Repeat Item’s Notes〕 　➔ NotesAddressDictionary　» 436 437 438 439 440

〔436〕 Set Variable CalendarNotesStreet to 〔435 NotesAddressDictionary.Street〕

〔437〕 Set Variable CalendarNotesCity to 〔435 NotesAddressDictionary.City〕

〔438〕 Set Variable CalendarNotesState to 〔435 NotesAddressDictionary.State〕

〔439〕 Set Variable CalendarNotesRegion to 〔435 NotesAddressDictionary.Country〕

〔440〕 Set Variable CalendarNotesZIPCode to 〔435 NotesAddressDictionary.Postcode〕

〔441〕 Text　»
〔CalendarNotesStreet〕 〔CalendarNotesCity〕 〔CalendarNotesState〕 〔CalendarNotesZIPCode〕 〔CalendarNotesRegion〕

〔442〕 Set Variable NotesAddressString to 〔441 Text〕

〔443〕 If All are true　〔432 Current Location’s Street〕 is 〔CalendarNotesStreet〕　〔432 Current Location’s City〕 is 〔CalendarNotesCity〕　〔432 Current Location’s State〕 is 〔CalendarNotesState〕　〔432 Current Location’s Country〕 is 〔CalendarNotesRegion〕　〔432 Current Location’s ZIP Code〕 is 〔CalendarNotesZIPCode〕

〔444〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY -> CALENDAR EVENT ADDRESS IS THE SAME WITH CURRENT LOCATION

〔445〕 Number 0　»

〔446〕 Set Variable CurrentToDeparture to 〔445 Number〕

〔447〕 Otherwise

〔448〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY -> CALENDAR EVENT ADDRESS IS NOT THE SAME WITH CURRENT LOCATION

〔449〕 Get 〔TravelMethod〕 Time　»
• GetDirectionsCustomLocation: 〔432 Current Location〕
• Destination: 〔NotesAddressString〕

〔450〕 Set Variable TravelTimeString to 〔449 Travel Time〕

〔451〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　» 452 454 456 461 468
• MatchTextCaseSensitive: false

〔452〕 Count Items in 〔451 C2DMatches〕　»

〔453〕 If 〔452 Count〕 > 1

〔454〕 Get First Item from List 〔451 C2DMatches〕　»

〔455〕 Set Variable C2DHours to 〔454 Item from List〕

〔456〕 Get Last Item from List 〔451 C2DMatches〕　»

〔457〕 Set Variable C2DMinutes to 〔456 Item from List〕

〔458〕 Otherwise

〔459〕 Match Text hour(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔460〕 If 〔459 C2DMatches’s text〕 has any value

〔461〕 Get First Item from List 〔451 C2DMatches〕　»

〔462〕 Set Variable C2DHours to 〔461 Item from List〕

〔463〕 Number 0　»

〔464〕 Set Variable C2DMinutes to 〔463 Number〕

〔465〕 Otherwise

〔466〕 Number 0　»

〔467〕 Set Variable C2DHours to 〔466 Number〕

〔468〕 Get First Item from List 〔451 C2DMatches〕　»

〔469〕 Set Variable C2DMinutes to 〔468 Item from List〕

〔470〕 End If

〔471〕 End If　▵458

〔472〕 Calculate 〔C2DHours〕 × 60　»

〔473〕 Calculate 〔472 Calculation Result〕 + 〔C2DMinutes〕　»

〔474〕 Set Variable CurrentToDeparture to 〔473 Calculation Result〕

〔475〕 End If　▵447

〔476〕 Get 〔TravelMethod〕 Time 　➔ DepartureToDestination　»
• GetDirectionsCustomLocation: 〔NotesAddressString〕
• Destination: 〔Repeat Item’s Location〕

〔477〕 Set Variable TravelTimeString to 〔476 DepartureToDestination〕

〔478〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　» 479 481 483 488 495
• MatchTextCaseSensitive: false

〔479〕 Count Items in 〔478 C2DMatches〕　»

〔480〕 If 〔479 Count〕 > 1

〔481〕 Get First Item from List 〔478 C2DMatches〕　»

〔482〕 Set Variable C2DHours to 〔481 Item from List〕

〔483〕 Get Last Item from List 〔478 C2DMatches〕　»

〔484〕 Set Variable C2DMinutes to 〔483 Item from List〕

〔485〕 Otherwise

〔486〕 Match Text hour(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔487〕 If 〔486 C2DMatches’s text〕 has any value

〔488〕 Get First Item from List 〔478 C2DMatches〕　»

〔489〕 Set Variable C2DHours to 〔488 Item from List〕

〔490〕 Number 0　»

〔491〕 Set Variable C2DMinutes to 〔490 Number〕

〔492〕 Otherwise

〔493〕 Number 0　»

〔494〕 Set Variable C2DHours to 〔493 Number〕

〔495〕 Get First Item from List 〔478 C2DMatches〕　»

〔496〕 Set Variable C2DMinutes to 〔495 Item from List〕

〔497〕 End If

〔498〕 End If　▵485

〔499〕 Calculate 〔C2DHours〕 × 60　»

〔500〕 Calculate 〔499 Calculation Result〕 + 〔C2DMinutes〕　»

〔501〕 Calculate 〔500 Calculation Result〕 + 〔CurrentToDeparture〕　»

〔502〕 Set Variable TravelTime to 〔501 Calculation Result〕

〔503〕 Otherwise　▵433

〔504〕 Comment
CALENDER EVENT NOTES IS BLANK

〔505〕 Get Dictionary from 〔HomeAddress〕 　➔ home_address_dictionary　» 506 507 508 509 510

〔506〕 Get Dictionary Value for street in 〔505 home_address_dictionary〕 　➔ HomeStreet　» 511 513

〔507〕 Get Dictionary Value for city in 〔505 home_address_dictionary〕 　➔ HomeCity　» 511 513

〔508〕 Get Dictionary Value for state in 〔505 home_address_dictionary〕 　➔ HomeState　» 511 513

〔509〕 Get Dictionary Value for country in 〔505 home_address_dictionary〕 　➔ HomeCountry　» 511 513

〔510〕 Get Dictionary Value for postcode in 〔505 home_address_dictionary〕 　➔ HomePostcode　» 511 513

〔511〕 If All are true　〔506 HomeStreet〕 has any value　〔507 HomeCity〕 has any value　〔508 HomeState〕 has any value　〔509 HomeCountry〕 has any value　〔510 HomePostcode〕 has any value

〔512〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED

〔513〕 If All are true　〔432 Current Location’s Street〕 is 〔506 HomeStreet〕　〔432 Current Location’s City〕 is 〔507 HomeCity〕　〔432 Current Location’s State〕 is 〔508 HomeState〕　〔432 Current Location’s Country〕 is 〔509 HomeCountry〕　〔432 Current Location’s ZIP Code〕 is 〔510 HomePostcode〕

〔514〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED -> HOME ADDRESS IS THE SAME WITH CURRENT LOCATION

〔515〕 Number 0　»

〔516〕 Set Variable CurrentToDeparture to 〔515 Number〕

〔517〕 Otherwise

〔518〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED -> HOME ADDRESS IS NOT THE SAME WITH CURRENT LOCATION

〔519〕 Get 〔TravelMethod〕 Time　»
• Destination: 〔HomeAddress〕

〔520〕 Set Variable TravelTimeString to 〔519 Travel Time〕

〔521〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　» 522 524 526 531 538
• MatchTextCaseSensitive: false

〔522〕 Count Items in 〔521 C2DMatches〕　»

〔523〕 If 〔522 Count〕 > 1

〔524〕 Get First Item from List 〔521 C2DMatches〕　»

〔525〕 Set Variable C2DHours to 〔524 Item from List〕

〔526〕 Get Last Item from List 〔521 C2DMatches〕　»

〔527〕 Set Variable C2DMinutes to 〔526 Item from List〕

〔528〕 Otherwise

〔529〕 Match Text hour(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔530〕 If 〔529 C2DMatches’s text〕 has any value

〔531〕 Get First Item from List 〔521 C2DMatches〕　»

〔532〕 Set Variable C2DHours to 〔531 Item from List〕

〔533〕 Number 0　»

〔534〕 Set Variable C2DMinutes to 〔533 Number〕

〔535〕 Otherwise

〔536〕 Number 0　»

〔537〕 Set Variable C2DHours to 〔536 Number〕

〔538〕 Get First Item from List 〔521 C2DMatches〕　»

〔539〕 Set Variable C2DMinutes to 〔538 Item from List〕

〔540〕 End If

〔541〕 End If　▵528

〔542〕 Calculate 〔C2DHours〕 × 60　»

〔543〕 Calculate 〔542 Calculation Result〕 + 〔C2DMinutes〕　»

〔544〕 Set Variable CurrentToDeparture to 〔543 Calculation Result〕

〔545〕 End If　▵517

〔546〕 Get 〔TravelMethod〕 Time 　➔ DepartureToDestination　»
• GetDirectionsCustomLocation: 〔HomeAddress〕
• Destination: 〔Repeat Item’s Location〕

〔547〕 Set Variable TravelTimeString to 〔546 DepartureToDestination〕

〔548〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　» 549 551 553 558 565
• MatchTextCaseSensitive: false

〔549〕 Count Items in 〔548 C2DMatches〕　»

〔550〕 If 〔549 Count〕 > 1

〔551〕 Get First Item from List 〔548 C2DMatches〕　»

〔552〕 Set Variable C2DHours to 〔551 Item from List〕

〔553〕 Get Last Item from List 〔548 C2DMatches〕　»

〔554〕 Set Variable C2DMinutes to 〔553 Item from List〕

〔555〕 Otherwise

〔556〕 Match Text hour(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔557〕 If 〔556 C2DMatches’s text〕 has any value

〔558〕 Get First Item from List 〔548 C2DMatches〕　»

〔559〕 Set Variable C2DHours to 〔558 Item from List〕

〔560〕 Number 0　»

〔561〕 Set Variable C2DMinutes to 〔560 Number〕

〔562〕 Otherwise

〔563〕 Number 0　»

〔564〕 Set Variable C2DHours to 〔563 Number〕

〔565〕 Get First Item from List 〔548 C2DMatches〕　»

〔566〕 Set Variable C2DMinutes to 〔565 Item from List〕

〔567〕 End If

〔568〕 End If　▵555

〔569〕 Calculate 〔C2DHours〕 × 60　»

〔570〕 Calculate 〔569 Calculation Result〕 + 〔C2DMinutes〕　»

〔571〕 Calculate 〔570 Calculation Result〕 + 〔CurrentToDeparture〕　»

〔572〕 Set Variable TravelTime to 〔571 Calculation Result〕

〔573〕 Otherwise　▵511

〔574〕 Text
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS NOT MAINTAINED

〔575〕 Get 〔TravelMethod〕 Time　»
• Destination: 〔Repeat Item’s Location〕

〔576〕 Set Variable TravelTimeString to 〔575 Travel Time〕

〔577〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　» 578 580 582 587 594
• MatchTextCaseSensitive: false

〔578〕 Count Items in 〔577 C2DMatches〕　»

〔579〕 If 〔578 Count〕 > 1

〔580〕 Get First Item from List 〔577 C2DMatches〕　»

〔581〕 Set Variable C2DHours to 〔580 Item from List〕

〔582〕 Get Last Item from List 〔577 C2DMatches〕　»

〔583〕 Set Variable C2DMinutes to 〔582 Item from List〕

〔584〕 Otherwise

〔585〕 Match Text hour(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔586〕 If 〔585 C2DMatches’s text〕 has any value

〔587〕 Get First Item from List 〔577 C2DMatches〕　»

〔588〕 Set Variable C2DHours to 〔587 Item from List〕

〔589〕 Number 0　»

〔590〕 Set Variable C2DMinutes to 〔589 Number〕

〔591〕 Otherwise

〔592〕 Number 0　»

〔593〕 Set Variable C2DHours to 〔592 Number〕

〔594〕 Get First Item from List 〔577 C2DMatches〕　»

〔595〕 Set Variable C2DMinutes to 〔594 Item from List〕

〔596〕 End If

〔597〕 End If　▵584

〔598〕 Calculate 〔C2DHours〕 × 60　»

〔599〕 Calculate 〔598 Calculation Result〕 + 〔C2DMinutes〕　»

〔600〕 Set Variable TravelTime to 〔599 Calculation Result〕

〔601〕 End If　▵573

〔602〕 End If　▵503

〔603〕 Otherwise　▵431

〔604〕 Number 0　»

〔605〕 Set Variable TravelTime to 〔604 Number〕

〔606〕 End If

〔607〕 Find Alarm All Alarm　» 608 609
• ContentItemFilter: {  "Value": {
      "WFActionParameterFilterPrefix": 1,
      "WFContentPredicateBoundedDate": false,
      "WFActionParameterFilterTemplates": []
   },
   "WFSerializationType": "WFContentPredicateTableTemplate"
}

〔608〕 If 〔607 Alarms〕 has any value

〔609〕 Repeat[2] with Each in 〔607 Alarms〕

〔610〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ AlarmLabelDictionary　» 611 612 614

〔611〕 Get Dictionary Value for Event in 〔610 AlarmLabelDictionary〕 　➔ Event　» 616

〔612〕 Get Dictionary Value for From in 〔610 AlarmLabelDictionary〕 　➔ From　»

〔613〕 Get Dates from 〔612 From〕 　➔ FromDate　» 616

〔614〕 Get Dictionary Value for To in 〔610 AlarmLabelDictionary〕 　➔ To　»

〔615〕 Get Dates from 〔614 To〕 　➔ ToDate　»

〔616〕 If All are true　〔611 Event’s Name〕 is 〔Repeat Item〕　〔613 FromDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔Repeat Item’s Start Date{"Date Style":"Custom","WFDateFormat":"HH:mm","WFISO8601IncludeTime":false}〕　〔615 ToDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔Repeat Item’s End Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕

〔617〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔618〕 End If

〔619〕 End Repeat[2] with Each　▵609

〔620〕 End If　▵608

〔621〕 Calculate 〔TravelTime〕 + 〔Extra_Time〕　»

〔622〕 Adjust Subtract Date 〔Repeat Item’s Start Date〕 　➔ Supposed_Alarm_Time　» 624 626 629 636 637
• Duration: 〔621 Calculation Result〕 min

〔623〕 Date Current Date　»

〔624〕 If Any are true　〔622 Supposed_Alarm_Time〕 < 〔623 Date〕　〔622 Supposed_Alarm_Time〕 is 〔623 Date〕

〔625〕 If 〔Repeat Item’s Location〕 has any value

〔626〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 at 〔Repeat Item’s Location〕  which  was supposed to get ready at 〔622 Supposed_Alarm_Time〕. Please check.

〔627〕 Set Variable Text to 〔626 Text〕

〔628〕 Otherwise

〔629〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 which  was supposed to get ready at 〔622 Supposed_Alarm_Time〕. Please check.

〔630〕 Set Variable Text to 〔629 Text〕

〔631〕 End If

〔632〕 Show Alert 〔Text〕

〔633〕 Show Notification 〔Text〕

〔634〕 Speak Text
• Text: 〔Text〕

〔635〕 Otherwise　▵624

〔636〕 Dictionary　»
{  "Event": "〔Repeat Item〕",
   "From": "〔Repeat Item’s Start Date〕",
   "To": "〔Repeat Item’s End Date〕",
   "Location": "〔Repeat Item’s Location〕",
   "AlarmTime": "〔622 Supposed_Alarm_Time〕"
}

〔637〕 Add Alarm for 〔622 Supposed_Alarm_Time〕 called 〔636 Dictionary〕

〔638〕 End If

〔639〕 End Repeat with Each　▵430

〔640〕 Number 3　»

〔641〕 Repeat 〔640 Number〕 Times

〔642〕 Repeat[2] with Each in 〔427 Calendar Events〕

〔643〕 Format Date 〔Repeat Item 2’s Start Date〕　» 647 650 655 658
• DateFormatStyle: None

〔644〕 Format Date 〔Repeat Item 2’s End Date〕　» 647 650 655 658
• DateFormatStyle: None

〔645〕 If 〔Repeat Item 2’s Location〕 has any value

〔646〕 If 〔429 Count〕 > 1

〔647〕 Text　»
Event 〔Repeat Index 2〕 〔Repeat Item 2〕 from 〔643 Formatted Date〕 to 〔644 Formatted Date〕 at 〔Repeat Item 2’s Location〕

〔648〕 Set Variable Text to 〔647 Text〕

〔649〕 Otherwise

〔650〕 Text　»
Event  〔Repeat Item 2〕 from 〔643 Formatted Date〕 to 〔644 Formatted Date〕 at 〔Repeat Item 2’s Location〕

〔651〕 Set Variable Text to 〔650 Text〕

〔652〕 End If

〔653〕 Otherwise　▵645

〔654〕 If 〔429 Count〕 > 1

〔655〕 Text　»
Event 〔Repeat Index 2〕 〔Repeat Item 2〕 from 〔643 Formatted Date〕 to 〔644 Formatted Date〕

〔656〕 Set Variable Text to 〔655 Text〕

〔657〕 Otherwise

〔658〕 Text　»
Event  〔Repeat Item 2〕 from 〔643 Formatted Date〕 to 〔644 Formatted Date〕

〔659〕 Set Variable Text to 〔658 Text〕

〔660〕 End If

〔661〕 End If　▵653

〔662〕 Speak Text
• Text: 〔Text〕

〔663〕 Wait 1 seconds

〔664〕 End Repeat[2] with Each　▵642

〔665〕 End Repeat Times　▵641

〔666〕 End If　▵428

〔667〕 End If　▵416

〔668〕 If 〔Shortcut Input as Number〕 is 3

〔669〕 Comment
Alarm Activation Handler
Triggered by alarm events - manages notification flow

〔670〕 Dictionary　»
{  "stop": "no" }

〔671〕 Text　»
〔670 Dictionary〕

〔672〕 Save File 〔671 Text〕
• AskWhereToSave: false
• SaveFileOverwrite: true
• FileDestinationPath: Smart Calendar Reminder/stopflag.txt

〔673〕 Date Current Date　» 692

〔674〕 Find Alarm All Alarm　» 675 684
• ContentItemFilter: {  "Value": {
      "WFActionParameterFilterPrefix": 1,
      "WFContentPredicateBoundedDate": false,
      "WFActionParameterFilterTemplates": []
   },
   "WFSerializationType": "WFContentPredicateTableTemplate"
}

〔675〕 If 〔674 Alarms〕 has any value

〔676〕 Number 10000　» 677 678

〔677〕 Repeat 〔676 Number〕 Times

〔678〕 Get File at Path Smart Calendar Reminder/stopflag.txt from Folder　»
• FileErrorIfNotFound: false
• File: 〔676 Number〕

〔679〕 Get Dictionary from 〔678 File〕　»

〔680〕 Get Dictionary Value for stop in 〔679 Dictionary〕　»

〔681〕 If 〔680 Dictionary Value’s Name〕 is yes

〔682〕 Stop This Shortcut

〔683〕 End If

〔684〕 Repeat[2] with Each in 〔674 Alarms〕

〔685〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ alarm_label_dictionary　» 686 688 690 695 699 702

〔686〕 Get Dictionary Value for From in 〔685 alarm_label_dictionary〕　»

〔687〕 Get Dates from 〔686 Dictionary Value〕 　➔ From　» 693

〔688〕 Get Dictionary Value for To in 〔685 alarm_label_dictionary〕　»

〔689〕 Get Dates from 〔688 Dictionary Value〕 　➔ To　» 694

〔690〕 Get Dictionary Value for AlarmTime in 〔685 alarm_label_dictionary〕　»

〔691〕 Get Dates from 〔690 Dictionary Value〕 　➔ AlarmTime　»

〔692〕 If All are true　〔691 AlarmTime{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH"}〕 is 〔673 Date{"Date Style":"Custom","WFDateFormat":"HH","WFISO8601IncludeTime":false}〕　〔691 AlarmTime{"Date Style":"Custom","WFDateFormat":"mm","WFISO8601IncludeTime":false}〕 is 〔673 Date{"Date Style":"Custom","WFDateFormat":"mm","WFISO8601IncludeTime":false}〕

〔693〕 Format Date 〔687 From’s Time〕　» 699 702

〔694〕 Format Date 〔689 To’s Time〕　» 699 702

〔695〕 Get Dictionary Value for Location in 〔685 alarm_label_dictionary〕　»

〔696〕 Text　»
〔695 Dictionary Value〕

〔697〕 Count Characters in 〔696 Text〕　»

〔698〕 If 〔697 Count〕 > • ConditionalActionString
""• NumberValue
0

〔699〕 Text　»
Prepare for 〔685 alarm_label_dictionary.Event〕 from 〔693 Formatted Date〕 to 〔694 Formatted Date〕 at 〔685 alarm_label_dictionary.Location〕

〔700〕 Set Variable Text to 〔699 Text〕

〔701〕 Otherwise

〔702〕 Text　»
Prepare for 〔685 alarm_label_dictionary.Event〕 from 〔693 Formatted Date〕 to 〔694 Formatted Date〕

〔703〕 Set Variable Text to 〔702 Text〕

〔704〕 End If

〔705〕 Speak Text
• Text: 〔Text〕

〔706〕 End If　▵692

〔707〕 End Repeat[2] with Each　▵684

〔708〕 End Repeat Times　▵677

〔709〕 End If　▵675

〔710〕 End If　▵668

〔711〕 If 〔Shortcut Input as Number〕 is 4

〔712〕 Comment
input case 4:
Notification Interrupt System
Stop protocol for voice announcements when any alarm is stopped.

〔713〕 Dictionary　»
{  "stop": "yes" }

〔714〕 Text　»
〔713 Dictionary〕

〔715〕 Save File 〔714 Text〕
• AskWhereToSave: false
• SaveFileOverwrite: true
• FileDestinationPath: Smart Calendar Reminder/stopflag.txt

〔716〕 End If

〔717〕 If 〔Shortcut Input as Number〕 is 5

〔718〕 Comment
*Revolutionizing event management by integrating calendar data with intelligent automation:

Voice announcements for upcoming events

Dynamic alarm calculation (travel + prep time)

Calendar-driven scheduling system
Eliminates manual reminders and ensures perfect timing synchronization*

〔719〕 Get File at Path Smart Calendar Reminder/aboutme.txt from Folder　»
• FileErrorIfNotFound: false

〔720〕 Get Dictionary from 〔719 File〕　» 721 724 725

〔721〕 Get Dictionary from 〔720 Dictionary.HomeAddress〕　»

〔722〕 Text　»
〔721 Dictionary.street〕 〔721 Dictionary.city〕 〔721 Dictionary.state〕 〔721 Dictionary.postcode〕 〔721 Dictionary.country〕\u{space}

〔723〕 Set Variable HomeAddress to 〔722 Text〕

〔724〕 Set Variable TravelMethod to 〔720 Dictionary.TravelMethod〕

〔725〕 Get Dictionary Value for ExtraTime in 〔720 Dictionary〕　»

〔726〕 Get Numbers from 〔725 Dictionary Value〕　»

〔727〕 Set Variable ExtraTime to 〔726 Numbers〕

〔728〕 Find Calendar Events All Calendar Events where　» 729 730
• ContentItemSortProperty: Start Date
• ContentItemSortOrder: Oldest First
• ContentItemFilter: • All the following are true
Start Date is in the next 1 months
Is All Day
Canceled is {"Bool":{"Value":false,"WFSerializationType":"WFBooleanSubstitutableState"}}

〔729〕 If 〔728 Calendar Events〕 has any value

〔730〕 Repeat with Each in 〔728 Calendar Events〕

〔731〕 If 〔Repeat Item’s Location〕 has any value

〔732〕 Get Current Location　» 744 750 814
• Accuracy: Best

〔733〕 Comment
*To specify event-specific departure locations:

1. Create calendar event notes with JSON structure:
{
“Street”: “your departure street”,
“City”: “your departure city”,
“State”: “your departure state”,
“Country”: “your departure country”,
“Postcode”: “your departure postcode”
}
2. System prioritizes these over default locations*

〔734〕 If All are true　〔Repeat Item’s Notes〕 has any value　〔Repeat Item’s Notes〕 begins with {　〔Repeat Item’s Notes〕 ends with }

〔735〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY

〔736〕 Get Dictionary from 〔Repeat Item’s Notes〕 　➔ Notes Address Dictionary　» 737 738 739 740 741

〔737〕 Set Variable Calendar_Notes_Street to 〔736 Notes Address Dictionary.Street〕

〔738〕 Set Variable Calendar_Notes_City to 〔736 Notes Address Dictionary.City〕

〔739〕 Set Variable Calendar_Notes_State to 〔736 Notes Address Dictionary.State〕

〔740〕 Set Variable Calendar_Notes_Region to 〔736 Notes Address Dictionary.Country〕

〔741〕 Set Variable Calendar_Notes_ZIP_Code to 〔736 Notes Address Dictionary.Postcode〕

〔742〕 Text　»
〔Calendar_Notes_Street〕 〔Calendar_Notes_City〕 〔Calendar_Notes_State〕 〔Calendar_Notes_ZIP_Code〕 〔Calendar_Notes_Region〕

〔743〕 Set Variable NotesAddressString to 〔742 Text〕

〔744〕 If All are true　〔732 Current Location’s Street〕 is 〔Calendar_Notes_Street〕　〔732 Current Location’s City〕 is 〔Calendar_Notes_City〕　〔732 Current Location’s State〕 is 〔Calendar_Notes_State〕　〔732 Current Location’s Country〕 is 〔Calendar_Notes_Region〕　〔732 Current Location’s ZIP Code〕 is 〔Calendar_Notes_ZIP_Code〕

〔745〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY -> CALENDAR EVENT ADDRESS IS THE SAME WITH CURRENT LOCATION

〔746〕 Number 0　»

〔747〕 Set Variable CurrentToDeparture to 〔746 Number〕

〔748〕 Otherwise

〔749〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY -> CALENDAR EVENT ADDRESS IS NOT THE SAME WITH CURRENT LOCATION

〔750〕 Get 〔TravelMethod〕 Time　»
• GetDirectionsCustomLocation: 〔732 Current Location〕
• Destination: 〔NotesAddressString〕

〔751〕 Set Variable TravelTimeString to 〔750 Travel Time〕

〔752〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　» 753 755 757 762 769
• MatchTextCaseSensitive: false

〔753〕 Count Items in 〔752 C2DMatches〕　»

〔754〕 If 〔753 Count〕 > 1

〔755〕 Get First Item from List 〔752 C2DMatches〕　»

〔756〕 Set Variable C2DHours to 〔755 Item from List〕

〔757〕 Get Last Item from List 〔752 C2DMatches〕　»

〔758〕 Set Variable C2DMinutes to 〔757 Item from List〕

〔759〕 Otherwise

〔760〕 Match Text hour(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔761〕 If 〔760 C2DMatches’s text〕 has any value

〔762〕 Get First Item from List 〔752 C2DMatches〕　»

〔763〕 Set Variable C2DHours to 〔762 Item from List〕

〔764〕 Number 0　»

〔765〕 Set Variable C2DMinutes to 〔764 Number〕

〔766〕 Otherwise

〔767〕 Number 0　»

〔768〕 Set Variable C2DHours to 〔767 Number〕

〔769〕 Get First Item from List 〔752 C2DMatches〕　»

〔770〕 Set Variable C2DMinutes to 〔769 Item from List〕

〔771〕 End If

〔772〕 End If　▵759

〔773〕 Calculate 〔C2DHours〕 × 60　»

〔774〕 Calculate 〔773 Calculation Result〕 + 〔C2DMinutes〕　»

〔775〕 Set Variable CurrentToDeparture to 〔774 Calculation Result〕

〔776〕 End If　▵748

〔777〕 Get 〔TravelMethod〕 Time 　➔ DepartureToDestination　»
• GetDirectionsCustomLocation: 〔NotesAddressString〕
• Destination: 〔Repeat Item’s Location〕

〔778〕 Set Variable TravelTimeString to 〔777 DepartureToDestination〕

〔779〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　» 780 782 784 789 796
• MatchTextCaseSensitive: false

〔780〕 Count Items in 〔779 C2DMatches〕　»

〔781〕 If 〔780 Count〕 > 1

〔782〕 Get First Item from List 〔779 C2DMatches〕　»

〔783〕 Set Variable C2DHours to 〔782 Item from List〕

〔784〕 Get Last Item from List 〔779 C2DMatches〕　»

〔785〕 Set Variable C2DMinutes to 〔784 Item from List〕

〔786〕 Otherwise

〔787〕 Match Text hour(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔788〕 If 〔787 C2DMatches’s text〕 has any value

〔789〕 Get First Item from List 〔779 C2DMatches〕　»

〔790〕 Set Variable C2DHours to 〔789 Item from List〕

〔791〕 Number 0　»

〔792〕 Set Variable C2DMinutes to 〔791 Number〕

〔793〕 Otherwise

〔794〕 Number 0　»

〔795〕 Set Variable C2DHours to 〔794 Number〕

〔796〕 Get First Item from List 〔779 C2DMatches〕　»

〔797〕 Set Variable C2DMinutes to 〔796 Item from List〕

〔798〕 End If

〔799〕 End If　▵786

〔800〕 Calculate 〔C2DHours〕 × 60　»

〔801〕 Calculate 〔800 Calculation Result〕 + 〔C2DMinutes〕　»

〔802〕 Calculate 〔801 Calculation Result〕 + 〔CurrentToDeparture〕　»

〔803〕 Set Variable TravelTime to 〔802 Calculation Result〕

〔804〕 Otherwise　▵734

〔805〕 Comment
CALENDER EVENT NOTES IS BLANK

〔806〕 Get Dictionary from 〔HomeAddress〕 　➔ Home Address Dictionary　» 807 808 809 810 811

〔807〕 Get Dictionary Value for street in 〔806 Home Address Dictionary〕 　➔ home_Street　» 812 814

〔808〕 Get Dictionary Value for city in 〔806 Home Address Dictionary〕 　➔ home_City　» 812 814

〔809〕 Get Dictionary Value for state in 〔806 Home Address Dictionary〕 　➔ home_State　» 812 814

〔810〕 Get Dictionary Value for country in 〔806 Home Address Dictionary〕 　➔ home_Country　» 812 814

〔811〕 Get Dictionary Value for postcode in 〔806 Home Address Dictionary〕 　➔ home_Postcode　» 812 814

〔812〕 If All are true　〔807 home_Street〕 has any value　〔808 home_City〕 has any value　〔809 home_State〕 has any value　〔810 home_Country〕 has any value　〔811 home_Postcode〕 has any value

〔813〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED

〔814〕 If All are true　〔732 Current Location’s Street〕 is 〔807 home_Street〕　〔732 Current Location’s City〕 is 〔808 home_City〕　〔732 Current Location’s State〕 is 〔809 home_State〕　〔732 Current Location’s Country〕 is 〔810 home_Country〕　〔732 Current Location’s ZIP Code〕 is 〔811 home_Postcode〕

〔815〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED -> HOME ADDRESS IS THE SAME WITH CURRENT LOCATION

〔816〕 Number 0　»

〔817〕 Set Variable CurrentToDeparture to 〔816 Number〕

〔818〕 Otherwise

〔819〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED -> HOME ADDRESS IS NOT THE SAME WITH CURRENT LOCATION

〔820〕 Get 〔TravelMethod〕 Time　»
• Destination: 〔HomeAddress〕

〔821〕 Set Variable TravelTimeString to 〔820 Travel Time〕

〔822〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　» 823 825 827 832 839
• MatchTextCaseSensitive: false

〔823〕 Count Items in 〔822 C2DMatches〕　»

〔824〕 If 〔823 Count〕 > 1

〔825〕 Get First Item from List 〔822 C2DMatches〕　»

〔826〕 Set Variable C2DHours to 〔825 Item from List〕

〔827〕 Get Last Item from List 〔822 C2DMatches〕　»

〔828〕 Set Variable C2DMinutes to 〔827 Item from List〕

〔829〕 Otherwise

〔830〕 Match Text hour(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔831〕 If 〔830 C2DMatches’s text〕 has any value

〔832〕 Get First Item from List 〔822 C2DMatches〕　»

〔833〕 Set Variable C2DHours to 〔832 Item from List〕

〔834〕 Number 0　»

〔835〕 Set Variable C2DMinutes to 〔834 Number〕

〔836〕 Otherwise

〔837〕 Number 0　»

〔838〕 Set Variable C2DHours to 〔837 Number〕

〔839〕 Get First Item from List 〔822 C2DMatches〕　»

〔840〕 Set Variable C2DMinutes to 〔839 Item from List〕

〔841〕 End If

〔842〕 End If　▵829

〔843〕 Calculate 〔C2DHours〕 × 60　»

〔844〕 Calculate 〔843 Calculation Result〕 + 〔C2DMinutes〕　»

〔845〕 Set Variable CurrentToDeparture to 〔844 Calculation Result〕

〔846〕 End If　▵818

〔847〕 Get 〔TravelMethod〕 Time 　➔ DepartureToDestination　»
• GetDirectionsCustomLocation: 〔HomeAddress〕
• Destination: 〔Repeat Item’s Location〕

〔848〕 Set Variable TravelTimeString to 〔847 DepartureToDestination〕

〔849〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　» 850 852 854 859 866
• MatchTextCaseSensitive: false

〔850〕 Count Items in 〔849 C2DMatches〕　»

〔851〕 If 〔850 Count〕 > 1

〔852〕 Get First Item from List 〔849 C2DMatches〕　»

〔853〕 Set Variable C2DHours to 〔852 Item from List〕

〔854〕 Get Last Item from List 〔849 C2DMatches〕　»

〔855〕 Set Variable C2DMinutes to 〔854 Item from List〕

〔856〕 Otherwise

〔857〕 Match Text hour(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔858〕 If 〔857 C2DMatches’s text〕 has any value

〔859〕 Get First Item from List 〔849 C2DMatches〕　»

〔860〕 Set Variable C2DHours to 〔859 Item from List〕

〔861〕 Number 0　»

〔862〕 Set Variable C2DMinutes to 〔861 Number〕

〔863〕 Otherwise

〔864〕 Number 0　»

〔865〕 Set Variable C2DHours to 〔864 Number〕

〔866〕 Get First Item from List 〔849 C2DMatches〕　»

〔867〕 Set Variable C2DMinutes to 〔866 Item from List〕

〔868〕 End If

〔869〕 End If　▵856

〔870〕 Calculate 〔C2DHours〕 × 60　»

〔871〕 Calculate 〔870 Calculation Result〕 + 〔C2DMinutes〕　»

〔872〕 Calculate 〔871 Calculation Result〕 + 〔CurrentToDeparture〕　»

〔873〕 Set Variable TravelTime to 〔872 Calculation Result〕

〔874〕 Otherwise　▵812

〔875〕 Text
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS NOT MAINTAINED

〔876〕 Get 〔TravelMethod〕 Time　»
• Destination: 〔Repeat Item’s Location〕

〔877〕 Set Variable TravelTimeString to 〔876 Travel Time〕

〔878〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　» 879 881 883 888 895
• MatchTextCaseSensitive: false

〔879〕 Count Items in 〔878 C2DMatches〕　»

〔880〕 If 〔879 Count〕 > 1

〔881〕 Get First Item from List 〔878 C2DMatches〕　»

〔882〕 Set Variable C2DHours to 〔881 Item from List〕

〔883〕 Get Last Item from List 〔878 C2DMatches〕　»

〔884〕 Set Variable C2DMinutes to 〔883 Item from List〕

〔885〕 Otherwise

〔886〕 Match Text hour(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔887〕 If 〔886 C2DMatches’s text〕 has any value

〔888〕 Get First Item from List 〔878 C2DMatches〕　»

〔889〕 Set Variable C2DHours to 〔888 Item from List〕

〔890〕 Number 0　»

〔891〕 Set Variable C2DMinutes to 〔890 Number〕

〔892〕 Otherwise

〔893〕 Number 0　»

〔894〕 Set Variable C2DHours to 〔893 Number〕

〔895〕 Get First Item from List 〔878 C2DMatches〕　»

〔896〕 Set Variable C2DMinutes to 〔895 Item from List〕

〔897〕 End If

〔898〕 End If　▵885

〔899〕 Calculate 〔C2DHours〕 × 60　»

〔900〕 Calculate 〔899 Calculation Result〕 + 〔C2DMinutes〕　»

〔901〕 Set Variable TravelTime to 〔900 Calculation Result〕

〔902〕 End If　▵874

〔903〕 End If　▵804

〔904〕 Otherwise　▵731

〔905〕 Number 0　»

〔906〕 Set Variable TravelTime to 〔905 Number〕

〔907〕 End If

〔908〕 Calculate 〔TravelTime〕 + 〔ExtraTime〕　»

〔909〕 Adjust Subtract Date 〔Repeat Item’s Start Date〕 　➔ Supposed Alarm Time　» 910 913 916 919 926 942 944 945 963 968 971
• Duration: 〔908 Calculation Result〕 min

〔910〕 Dictionary 　➔ Alarm Label Dictionary　» 942 947 963
{  "Event": "〔Repeat Item〕",
   "From": "〔Repeat Item’s Start Date〕",
   "To": "〔Repeat Item’s End Date〕",
   "Location": "〔Repeat Item’s Location〕",
   "AlarmTime": "〔909 Supposed Alarm Time〕"
}

〔911〕 Date Current Date 　➔ Current Date　» 912 913 944

〔912〕 Adjust Add Date 〔911 Current Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"dd MMM yyyy"}〕 　➔ 1 day after　» 926 927 945 949
• Duration: "1" days

〔913〕 If 〔909 Supposed Alarm Time〕 is 〔911 Current Date〕

〔914〕 Comment
supposed alarm time is exactly 12:00am

〔915〕 If 〔Repeat Item’s Location〕 has any value

〔916〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 at 〔Repeat Item’s Location〕 which  was supposed to get ready at 〔909 Supposed Alarm Time〕. Please check.

〔917〕 Set Variable Text to 〔916 Text〕

〔918〕 Otherwise

〔919〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 which  was supposed to get ready at 〔909 Supposed Alarm Time〕. Please check.

〔920〕 Set Variable Text to 〔919 Text〕

〔921〕 End If

〔922〕 Show Alert 〔Text〕

〔923〕 Show Notification 〔Text〕

〔924〕 Speak Text
• Text: 〔Text〕

〔925〕 Otherwise　▵913

〔926〕 If 〔909 Supposed Alarm Time〕 is 〔912 1 day after〕

〔927〕 Find Alarm 〔912 1 day after〕　» 928 929

〔928〕 If 〔927 Alarms〕 has any value

〔929〕 Repeat[2] with Each in 〔927 Alarms〕

〔930〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ AlarmLabelDictionary　» 931 932 934

〔931〕 Get Dictionary Value for Event in 〔930 AlarmLabelDictionary〕 　➔ Event　» 936

〔932〕 Get Dictionary Value for From in 〔930 AlarmLabelDictionary〕 　➔ From　»

〔933〕 Get Dates from 〔932 From〕 　➔ FromDate　» 936

〔934〕 Get Dictionary Value for To in 〔930 AlarmLabelDictionary〕 　➔ To　»

〔935〕 Get Dates from 〔934 To〕 　➔ ToDate　»

〔936〕 If All are true　〔931 Event’s Name〕 is 〔Repeat Item〕　〔933 FromDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔Repeat Item’s Start Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕　〔935 ToDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is • ConditionalActionString
〔Repeat Item’s End Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕• Date
〔Repeat Item’s End Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕

〔937〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔938〕 End If

〔939〕 End Repeat[2] with Each　▵929

〔940〕 End If　▵928

〔941〕 Comment
since this will be triggered at 12:00 am each day, when the supposed alarm time is 12:00 am in the next day, you can set alarm now

〔942〕 Add Alarm for 〔909 Supposed Alarm Time〕 called 〔910 Alarm Label Dictionary〕

〔943〕 Otherwise　▵926

〔944〕 If 〔909 Supposed Alarm Time〕 > 〔911 Current Date〕

〔945〕 If 〔909 Supposed Alarm Time〕 > 〔912 1 day after〕

〔946〕 Comment
when the time is other than 12:00 am of then next day, you cannot set alarm yet. If set, it will be today. For example, triggering time 2025-4-8 12:00 am, the supposed alarm time is 2025-4-9 08:00 am, if you set an alarm at 08:00 at 2025-4-8 12:00 am, it will alarm at 2025-4-8 08:00 am instead. So we need to record the supposed alarm time and trigger next day.

〔947〕 Set Variable Event to 〔910 Alarm Label Dictionary〕

〔948〕 Otherwise

〔949〕 Find Alarm 〔912 1 day after〕　» 950 951
• ContentItemFilter: {  "Value": {
      "WFActionParameterFilterPrefix": 1,
      "WFActionParameterFilterTemplates": [],
      "WFContentPredicateBoundedDate": false
   },
   "WFSerializationType": "WFContentPredicateTableTemplate"
}

〔950〕 If 〔949 Alarms〕 has any value

〔951〕 Repeat[2] with Each in 〔949 Alarms〕

〔952〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ AlarmLabelDictionary　» 953 954 956

〔953〕 Get Dictionary Value for Event in 〔952 AlarmLabelDictionary〕 　➔ Event　» 958

〔954〕 Get Dictionary Value for From in 〔952 AlarmLabelDictionary〕 　➔ From　»

〔955〕 Get Dates from 〔954 From〕 　➔ FromDate　» 958

〔956〕 Get Dictionary Value for To in 〔952 AlarmLabelDictionary〕 　➔ To　»

〔957〕 Get Dates from 〔956 To〕 　➔ ToDate　»

〔958〕 If All are true　〔953 Event’s Name〕 is 〔Repeat Item〕　〔955 FromDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔Repeat Item’s Start Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕　〔957 ToDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔Repeat Item’s End Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕

〔959〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔960〕 End If

〔961〕 End Repeat[2] with Each　▵951

〔962〕 End If　▵950

〔963〕 Add Alarm for 〔909 Supposed Alarm Time〕 called 〔910 Alarm Label Dictionary〕

〔964〕 End If　▵948

〔965〕 Otherwise　▵944

〔966〕 Comment
the supposed alarm time passed

〔967〕 If 〔Repeat Item’s Location〕 has any value

〔968〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 at 〔Repeat Item’s Location〕 which  was supposed to get ready at 〔909 Supposed Alarm Time〕. Please check.

〔969〕 Set Variable Text to 〔968 Text〕

〔970〕 Otherwise

〔971〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 which  was supposed to get ready at 〔909 Supposed Alarm Time〕. Please check.

〔972〕 Set Variable Text to 〔971 Text〕

〔973〕 End If

〔974〕 Show Alert 〔Text〕

〔975〕 Show Notification 〔Text〕

〔976〕 Speak Text
• Text: 〔Text〕

〔977〕 End If　▵965

〔978〕 End If　▵943

〔979〕 End If　▵925

〔980〕 Text
〔Event〕

〔981〕 If 〔Event〕 has any value

〔982〕 Get Dictionary from 〔Event〕　» 995

〔983〕 Text　»

〔984〕 Set Variable TextList to 〔983 Text〕

〔985〕 Add 〔Event〕 to Variable TextList

〔986〕 Get File at Path Smart Calendar Reminder/Future Alarms.txt from Folder　» 987 988
• FileErrorIfNotFound: false

〔987〕 If 〔986 File’s File Size〕 has any value

〔988〕 Split Text 〔986 File〕 by New Lines　»

〔989〕 Repeat[2] with Each in 〔988 Split Text〕

〔990〕 Get Dictionary from 〔Repeat Item 2〕　» 991 992 993 994

〔991〕 Get Dictionary Value for Event in 〔990 Dictionary〕 　➔ Event　» 995

〔992〕 Get Dictionary Value for From in 〔990 Dictionary〕 　➔ From　» 995

〔993〕 Get Dictionary Value for To in 〔990 Dictionary〕 　➔ To　» 995

〔994〕 Get Dictionary Value for Location in 〔990 Dictionary〕 　➔ Location　»

〔995〕 If Any are true　〔991 Event’s Name〕 is not 〔982 Dictionary.Event〕　〔992 From’s Name〕 is not 〔982 Dictionary.From〕　〔993 To’s Name〕 is not 〔982 Dictionary.To〕　〔994 Location’s Name〕 is not 〔982 Dictionary.Location〕

〔996〕 Add 〔Repeat Item 2〕 to Variable TextList

〔997〕 End If

〔998〕 End Repeat[2] with Each　▵989

〔999〕 Combine Text 〔TextList〕 with New Lines　»

〔1000〕 Save File 〔999 Combined Text〕
• AskWhereToSave: false
• SaveFileOverwrite: true
• FileDestinationPath: Smart Calendar Reminder/Future Alarms.txt

〔1001〕 Otherwise　▵987

〔1002〕 Text　»

〔Event〕

〔1003〕 Save File 〔1002 Text〕
• AskWhereToSave: false
• FileDestinationPath: Smart Calendar Reminder/Future Alarms.txt

〔1004〕 End If

〔1005〕 End If　▵981

〔1006〕 End Repeat with Each　▵730

〔1007〕 End If　▵729

〔1008〕 Get File at Path Smart Calendar Reminder/Future Alarms.txt from Folder　» 1009 1010
• FileErrorIfNotFound: false

〔1009〕 If 〔1008 File’s File Size〕 has any value

〔1010〕 Split Text 〔1008 File〕 by New Lines　»

〔1011〕 Repeat with Each in 〔1010 Split Text〕

〔1012〕 Get Dictionary from 〔Repeat Item〕　» 1013 1014 1024 1035

〔1013〕 If 〔1012 Dictionary〕 has any value

〔1014〕 Get Dates from 〔1012 Dictionary.AlarmTime〕　» 1015 1016 1035

〔1015〕 If 〔1014 Dates〕 is today

〔1016〕 Find Alarm 〔1014 Dates〕　» 1017 1018
• ContentItemFilter: {  "Value": {
      "WFActionParameterFilterPrefix": 1,
      "WFActionParameterFilterTemplates": [],
      "WFContentPredicateBoundedDate": false
   },
   "WFSerializationType": "WFContentPredicateTableTemplate"
}

〔1017〕 If 〔1016 Alarms〕 has any value

〔1018〕 Repeat[2] with Each in 〔1016 Alarms〕

〔1019〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ Alarm_Label_Dictionary　» 1020 1022 1030

〔1020〕 Get Dictionary Value for From in 〔1019 Alarm_Label_Dictionary〕　»

〔1021〕 Get Dates from 〔1020 Dictionary Value〕 　➔ From_Date　» 1030

〔1022〕 Get Dictionary Value for To in 〔1019 Alarm_Label_Dictionary〕　»

〔1023〕 Get Dates from 〔1022 Dictionary Value〕 　➔ To_Date　» 1030

〔1024〕 Get Dictionary from 〔1012 Dictionary.Event〕 　➔ FutureAlarmLabelDictionary　» 1025 1026 1028

〔1025〕 Get Dictionary Value for Event in 〔1024 FutureAlarmLabelDictionary〕 　➔ Event　» 1030

〔1026〕 Get Dictionary Value for From in 〔1024 FutureAlarmLabelDictionary〕 　➔ From　»

〔1027〕 Get Dates from 〔1026 From〕 　➔ FromDate　» 1030

〔1028〕 Get Dictionary Value for To in 〔1024 FutureAlarmLabelDictionary〕 　➔ To　»

〔1029〕 Get Dates from 〔1028 To〕 　➔ ToDate　»

〔1030〕 If All are true　〔1025 Event’s Name〕 is 〔1019 Alarm_Label_Dictionary.Event〕　〔1027 FromDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔1021 From_Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕　〔1029 ToDate{"Date Style":"Custom","WFDateFormat":"HH:mm","WFISO8601IncludeTime":false}〕 is 〔1023 To_Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕

〔1031〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔1032〕 End If

〔1033〕 End Repeat[2] with Each　▵1018

〔1034〕 End If　▵1017

〔1035〕 Add Alarm for 〔1014 Dates〕 called 〔1012 Dictionary.Event〕

〔1036〕 End If　▵1015

〔1037〕 End If　▵1013

〔1038〕 End Repeat with Each　▵1011

〔1039〕 End If　▵1009

〔1040〕 End If　▵717

〔1041〕 If 〔Shortcut Input as Number〕 is 6

〔1042〕 Comment
*Revolutionizing event management by integrating calendar data with intelligent automation:

Voice announcements for upcoming events

Dynamic alarm calculation (travel + prep time)

Calendar-driven scheduling system
Eliminates manual reminders and ensures perfect timing synchronization*

〔1043〕 Get File at Path Smart Calendar Reminder/aboutme.txt from Folder　»
• FileErrorIfNotFound: false

〔1044〕 Get Dictionary from 〔1043 File〕　» 1045 1048 1049

〔1045〕 Get Dictionary from 〔1044 Dictionary.HomeAddress〕　»

〔1046〕 Text　»
〔1045 Dictionary.street〕 〔1045 Dictionary.city〕 〔1045 Dictionary.state〕 〔1045 Dictionary.postcode〕 〔1045 Dictionary.country〕\u{space}

〔1047〕 Set Variable HomeAddress to 〔1046 Text〕

〔1048〕 Set Variable TravelMethod to 〔1044 Dictionary.TravelMethod〕

〔1049〕 Get Dictionary Value for ExtraTime in 〔1044 Dictionary〕　»

〔1050〕 Get Numbers from 〔1049 Dictionary Value〕　»

〔1051〕 Set Variable ExtraTime to 〔1050 Numbers〕

〔1052〕 Find Calendar Events All Calendar Events where　» 1053 1054
• ContentItemSortProperty: Start Date
• ContentItemSortOrder: Oldest First
• ContentItemFilter: • All the following are true
Start Date is in the next 1 weeks
Is All Day
Canceled is {"Bool":{"Value":false,"WFSerializationType":"WFBooleanSubstitutableState"}}

〔1053〕 If 〔1052 Calendar Events〕 has any value

〔1054〕 Repeat with Each in 〔1052 Calendar Events〕

〔1055〕 If 〔Repeat Item’s Location〕 has any value

〔1056〕 Get Current Location　» 1068 1074 1138
• Accuracy: Best

〔1057〕 Comment
*To specify event-specific departure locations:

1. Create calendar event notes with JSON structure:
{
“Street”: “your departure street”,
“City”: “your departure city”,
“State”: “your departure state”,
“Country”: “your departure country”,
“Postcode”: “your departure postcode”
}
2. System prioritizes these over default locations*

〔1058〕 If All are true　〔Repeat Item’s Notes〕 has any value　〔Repeat Item’s Notes〕 begins with {　〔Repeat Item’s Notes〕 ends with }

〔1059〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY

〔1060〕 Get Dictionary from 〔Repeat Item’s Notes〕 　➔ Notes Address Dictionary　» 1061 1062 1063 1064 1065

〔1061〕 Set Variable Calendar_Notes_Street to 〔1060 Notes Address Dictionary.Street〕

〔1062〕 Set Variable Calendar_Notes_City to 〔1060 Notes Address Dictionary.City〕

〔1063〕 Set Variable Calendar_Notes_State to 〔1060 Notes Address Dictionary.State〕

〔1064〕 Set Variable Calendar_Notes_Region to 〔1060 Notes Address Dictionary.Country〕

〔1065〕 Set Variable Calendar_Notes_ZIP_Code to 〔1060 Notes Address Dictionary.Postcode〕

〔1066〕 Text　»
〔Calendar_Notes_Street〕 〔Calendar_Notes_City〕 〔Calendar_Notes_State〕 〔Calendar_Notes_ZIP_Code〕 〔Calendar_Notes_Region〕

〔1067〕 Set Variable NotesAddressString to 〔1066 Text〕

〔1068〕 If All are true　〔1056 Current Location’s Street〕 is 〔Calendar_Notes_Street〕　〔1056 Current Location’s City〕 is 〔Calendar_Notes_City〕　〔1056 Current Location’s State〕 is 〔Calendar_Notes_State〕　〔1056 Current Location’s Country〕 is 〔Calendar_Notes_Region〕　〔1056 Current Location’s ZIP Code〕 is 〔Calendar_Notes_ZIP_Code〕

〔1069〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY -> CALENDAR EVENT ADDRESS IS THE SAME WITH CURRENT LOCATION

〔1070〕 Number 0　»

〔1071〕 Set Variable CurrentToDeparture to 〔1070 Number〕

〔1072〕 Otherwise

〔1073〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY -> CALENDAR EVENT ADDRESS IS NOT THE SAME WITH CURRENT LOCATION

〔1074〕 Get 〔TravelMethod〕 Time　»
• GetDirectionsCustomLocation: 〔1056 Current Location〕
• Destination: 〔NotesAddressString〕

〔1075〕 Set Variable TravelTimeString to 〔1074 Travel Time〕

〔1076〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　» 1077 1079 1081 1086 1093
• MatchTextCaseSensitive: false

〔1077〕 Count Items in 〔1076 C2DMatches〕　»

〔1078〕 If 〔1077 Count〕 > 1

〔1079〕 Get First Item from List 〔1076 C2DMatches〕　»

〔1080〕 Set Variable C2DHours to 〔1079 Item from List〕

〔1081〕 Get Last Item from List 〔1076 C2DMatches〕　»

〔1082〕 Set Variable C2DMinutes to 〔1081 Item from List〕

〔1083〕 Otherwise

〔1084〕 Match Text hour(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔1085〕 If 〔1084 C2DMatches’s text〕 has any value

〔1086〕 Get First Item from List 〔1076 C2DMatches〕　»

〔1087〕 Set Variable C2DHours to 〔1086 Item from List〕

〔1088〕 Number 0　»

〔1089〕 Set Variable C2DMinutes to 〔1088 Number〕

〔1090〕 Otherwise

〔1091〕 Number 0　»

〔1092〕 Set Variable C2DHours to 〔1091 Number〕

〔1093〕 Get First Item from List 〔1076 C2DMatches〕　»

〔1094〕 Set Variable C2DMinutes to 〔1093 Item from List〕

〔1095〕 End If

〔1096〕 End If　▵1083

〔1097〕 Calculate 〔C2DHours〕 × 60　»

〔1098〕 Calculate 〔1097 Calculation Result〕 + 〔C2DMinutes〕　»

〔1099〕 Set Variable CurrentToDeparture to 〔1098 Calculation Result〕

〔1100〕 End If　▵1072

〔1101〕 Get 〔TravelMethod〕 Time 　➔ DepartureToDestination　»
• GetDirectionsCustomLocation: 〔NotesAddressString〕
• Destination: 〔Repeat Item’s Location〕

〔1102〕 Set Variable TravelTimeString to 〔1101 DepartureToDestination〕

〔1103〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　» 1104 1106 1108 1113 1120
• MatchTextCaseSensitive: false

〔1104〕 Count Items in 〔1103 C2DMatches〕　»

〔1105〕 If 〔1104 Count〕 > 1

〔1106〕 Get First Item from List 〔1103 C2DMatches〕　»

〔1107〕 Set Variable C2DHours to 〔1106 Item from List〕

〔1108〕 Get Last Item from List 〔1103 C2DMatches〕　»

〔1109〕 Set Variable C2DMinutes to 〔1108 Item from List〕

〔1110〕 Otherwise

〔1111〕 Match Text hour(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔1112〕 If 〔1111 C2DMatches’s text〕 has any value

〔1113〕 Get First Item from List 〔1103 C2DMatches〕　»

〔1114〕 Set Variable C2DHours to 〔1113 Item from List〕

〔1115〕 Number 0　»

〔1116〕 Set Variable C2DMinutes to 〔1115 Number〕

〔1117〕 Otherwise

〔1118〕 Number 0　»

〔1119〕 Set Variable C2DHours to 〔1118 Number〕

〔1120〕 Get First Item from List 〔1103 C2DMatches〕　»

〔1121〕 Set Variable C2DMinutes to 〔1120 Item from List〕

〔1122〕 End If

〔1123〕 End If　▵1110

〔1124〕 Calculate 〔C2DHours〕 × 60　»

〔1125〕 Calculate 〔1124 Calculation Result〕 + 〔C2DMinutes〕　»

〔1126〕 Calculate 〔1125 Calculation Result〕 + 〔CurrentToDeparture〕　»

〔1127〕 Set Variable TravelTime to 〔1126 Calculation Result〕

〔1128〕 Otherwise　▵1058

〔1129〕 Comment
CALENDER EVENT NOTES IS BLANK

〔1130〕 Get Dictionary from 〔HomeAddress〕 　➔ Home Address Dictionary　» 1131 1132 1133 1134 1135

〔1131〕 Get Dictionary Value for street in 〔1130 Home Address Dictionary〕 　➔ home_Street　» 1136 1138

〔1132〕 Get Dictionary Value for city in 〔1130 Home Address Dictionary〕 　➔ home_City　» 1136 1138

〔1133〕 Get Dictionary Value for state in 〔1130 Home Address Dictionary〕 　➔ home_State　» 1136 1138

〔1134〕 Get Dictionary Value for country in 〔1130 Home Address Dictionary〕 　➔ home_Country　» 1136 1138

〔1135〕 Get Dictionary Value for postcode in 〔1130 Home Address Dictionary〕 　➔ home_Postcode　» 1136 1138

〔1136〕 If All are true　〔1131 home_Street〕 has any value　〔1132 home_City〕 has any value　〔1133 home_State〕 has any value　〔1134 home_Country〕 has any value　〔1135 home_Postcode〕 has any value

〔1137〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED

〔1138〕 If All are true　〔1056 Current Location’s Street〕 is 〔1131 home_Street〕　〔1056 Current Location’s City〕 is 〔1132 home_City〕　〔1056 Current Location’s State〕 is 〔1133 home_State〕　〔1056 Current Location’s Country〕 is 〔1134 home_Country〕　〔1056 Current Location’s ZIP Code〕 is 〔1135 home_Postcode〕

〔1139〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED -> HOME ADDRESS IS THE SAME WITH CURRENT LOCATION

〔1140〕 Number 0　»

〔1141〕 Set Variable CurrentToDeparture to 〔1140 Number〕

〔1142〕 Otherwise

〔1143〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED -> HOME ADDRESS IS NOT THE SAME WITH CURRENT LOCATION

〔1144〕 Get 〔TravelMethod〕 Time　»
• Destination: 〔HomeAddress〕

〔1145〕 Set Variable TravelTimeString to 〔1144 Travel Time〕

〔1146〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　» 1147 1149 1151 1156 1163
• MatchTextCaseSensitive: false

〔1147〕 Count Items in 〔1146 C2DMatches〕　»

〔1148〕 If 〔1147 Count〕 > 1

〔1149〕 Get First Item from List 〔1146 C2DMatches〕　»

〔1150〕 Set Variable C2DHours to 〔1149 Item from List〕

〔1151〕 Get Last Item from List 〔1146 C2DMatches〕　»

〔1152〕 Set Variable C2DMinutes to 〔1151 Item from List〕

〔1153〕 Otherwise

〔1154〕 Match Text hour(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔1155〕 If 〔1154 C2DMatches’s text〕 has any value

〔1156〕 Get First Item from List 〔1146 C2DMatches〕　»

〔1157〕 Set Variable C2DHours to 〔1156 Item from List〕

〔1158〕 Number 0　»

〔1159〕 Set Variable C2DMinutes to 〔1158 Number〕

〔1160〕 Otherwise

〔1161〕 Number 0　»

〔1162〕 Set Variable C2DHours to 〔1161 Number〕

〔1163〕 Get First Item from List 〔1146 C2DMatches〕　»

〔1164〕 Set Variable C2DMinutes to 〔1163 Item from List〕

〔1165〕 End If

〔1166〕 End If　▵1153

〔1167〕 Calculate 〔C2DHours〕 × 60　»

〔1168〕 Calculate 〔1167 Calculation Result〕 + 〔C2DMinutes〕　»

〔1169〕 Set Variable CurrentToDeparture to 〔1168 Calculation Result〕

〔1170〕 End If　▵1142

〔1171〕 Get 〔TravelMethod〕 Time 　➔ DepartureToDestination　»
• GetDirectionsCustomLocation: 〔HomeAddress〕
• Destination: 〔Repeat Item’s Location〕

〔1172〕 Set Variable TravelTimeString to 〔1171 DepartureToDestination〕

〔1173〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　» 1174 1176 1178 1183 1190
• MatchTextCaseSensitive: false

〔1174〕 Count Items in 〔1173 C2DMatches〕　»

〔1175〕 If 〔1174 Count〕 > 1

〔1176〕 Get First Item from List 〔1173 C2DMatches〕　»

〔1177〕 Set Variable C2DHours to 〔1176 Item from List〕

〔1178〕 Get Last Item from List 〔1173 C2DMatches〕　»

〔1179〕 Set Variable C2DMinutes to 〔1178 Item from List〕

〔1180〕 Otherwise

〔1181〕 Match Text hour(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔1182〕 If 〔1181 C2DMatches’s text〕 has any value

〔1183〕 Get First Item from List 〔1173 C2DMatches〕　»

〔1184〕 Set Variable C2DHours to 〔1183 Item from List〕

〔1185〕 Number 0　»

〔1186〕 Set Variable C2DMinutes to 〔1185 Number〕

〔1187〕 Otherwise

〔1188〕 Number 0　»

〔1189〕 Set Variable C2DHours to 〔1188 Number〕

〔1190〕 Get First Item from List 〔1173 C2DMatches〕　»

〔1191〕 Set Variable C2DMinutes to 〔1190 Item from List〕

〔1192〕 End If

〔1193〕 End If　▵1180

〔1194〕 Calculate 〔C2DHours〕 × 60　»

〔1195〕 Calculate 〔1194 Calculation Result〕 + 〔C2DMinutes〕　»

〔1196〕 Calculate 〔1195 Calculation Result〕 + 〔CurrentToDeparture〕　»

〔1197〕 Set Variable TravelTime to 〔1196 Calculation Result〕

〔1198〕 Otherwise　▵1136

〔1199〕 Text
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS NOT MAINTAINED

〔1200〕 Get 〔TravelMethod〕 Time　»
• Destination: 〔Repeat Item’s Location〕

〔1201〕 Set Variable TravelTimeString to 〔1200 Travel Time〕

〔1202〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　» 1203 1205 1207 1212 1219
• MatchTextCaseSensitive: false

〔1203〕 Count Items in 〔1202 C2DMatches〕　»

〔1204〕 If 〔1203 Count〕 > 1

〔1205〕 Get First Item from List 〔1202 C2DMatches〕　»

〔1206〕 Set Variable C2DHours to 〔1205 Item from List〕

〔1207〕 Get Last Item from List 〔1202 C2DMatches〕　»

〔1208〕 Set Variable C2DMinutes to 〔1207 Item from List〕

〔1209〕 Otherwise

〔1210〕 Match Text hour(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔1211〕 If 〔1210 C2DMatches’s text〕 has any value

〔1212〕 Get First Item from List 〔1202 C2DMatches〕　»

〔1213〕 Set Variable C2DHours to 〔1212 Item from List〕

〔1214〕 Number 0　»

〔1215〕 Set Variable C2DMinutes to 〔1214 Number〕

〔1216〕 Otherwise

〔1217〕 Number 0　»

〔1218〕 Set Variable C2DHours to 〔1217 Number〕

〔1219〕 Get First Item from List 〔1202 C2DMatches〕　»

〔1220〕 Set Variable C2DMinutes to 〔1219 Item from List〕

〔1221〕 End If

〔1222〕 End If　▵1209

〔1223〕 Calculate 〔C2DHours〕 × 60　»

〔1224〕 Calculate 〔1223 Calculation Result〕 + 〔C2DMinutes〕　»

〔1225〕 Set Variable TravelTime to 〔1224 Calculation Result〕

〔1226〕 End If　▵1198

〔1227〕 End If　▵1128

〔1228〕 Otherwise　▵1055

〔1229〕 Number 0　»

〔1230〕 Set Variable TravelTime to 〔1229 Number〕

〔1231〕 End If

〔1232〕 Calculate 〔TravelTime〕 + 〔ExtraTime〕　»

〔1233〕 Adjust Subtract Date 〔Repeat Item’s Start Date〕 　➔ Supposed Alarm Time　» 1234 1237 1240 1243 1250 1266 1268 1269 1287 1292 1295
• Duration: 〔1232 Calculation Result〕 min

〔1234〕 Dictionary 　➔ Alarm Label Dictionary　» 1266 1271 1287
{  "Event": "〔Repeat Item〕",
   "From": "〔Repeat Item’s Start Date〕",
   "To": "〔Repeat Item’s End Date〕",
   "Location": "〔Repeat Item’s Location〕",
   "AlarmTime": "〔1233 Supposed Alarm Time〕"
}

〔1235〕 Date Current Date 　➔ Current Date　» 1236 1237 1268

〔1236〕 Adjust Add Date 〔1235 Current Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"dd MMM yyyy"}〕 　➔ 1 day after　» 1250 1251 1269 1273
• Duration: "1" days

〔1237〕 If 〔1233 Supposed Alarm Time〕 is 〔1235 Current Date〕

〔1238〕 Comment
supposed alarm time is exactly 12:00am

〔1239〕 If 〔Repeat Item’s Location〕 has any value

〔1240〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 at 〔Repeat Item’s Location〕 which  was supposed to get ready at 〔1233 Supposed Alarm Time〕. Please check.

〔1241〕 Set Variable Text to 〔1240 Text〕

〔1242〕 Otherwise

〔1243〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 which  was supposed to get ready at 〔1233 Supposed Alarm Time〕. Please check.

〔1244〕 Set Variable Text to 〔1243 Text〕

〔1245〕 End If

〔1246〕 Show Alert 〔Text〕

〔1247〕 Show Notification 〔Text〕

〔1248〕 Speak Text
• Text: 〔Text〕

〔1249〕 Otherwise　▵1237

〔1250〕 If 〔1233 Supposed Alarm Time〕 is 〔1236 1 day after〕

〔1251〕 Find Alarm 〔1236 1 day after〕　» 1252 1253

〔1252〕 If 〔1251 Alarms〕 has any value

〔1253〕 Repeat[2] with Each in 〔1251 Alarms〕

〔1254〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ AlarmLabelDictionary　» 1255 1256 1258

〔1255〕 Get Dictionary Value for Event in 〔1254 AlarmLabelDictionary〕 　➔ Event　» 1260

〔1256〕 Get Dictionary Value for From in 〔1254 AlarmLabelDictionary〕 　➔ From　»

〔1257〕 Get Dates from 〔1256 From〕 　➔ FromDate　» 1260

〔1258〕 Get Dictionary Value for To in 〔1254 AlarmLabelDictionary〕 　➔ To　»

〔1259〕 Get Dates from 〔1258 To〕 　➔ ToDate　»

〔1260〕 If All are true　〔1255 Event’s Name〕 is 〔Repeat Item〕　〔1257 FromDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔Repeat Item’s Start Date{"Date Style":"Custom","WFDateFormat":"HH:mm","WFISO8601IncludeTime":false}〕　〔1259 ToDate{"Date Style":"Custom","WFDateFormat":"HH:mm","WFISO8601IncludeTime":false}〕 is • ConditionalActionString
〔Repeat Item’s End Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕• Date
〔Repeat Item’s End Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕

〔1261〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔1262〕 End If

〔1263〕 End Repeat[2] with Each　▵1253

〔1264〕 End If　▵1252

〔1265〕 Comment
since this will be triggered at 12:00 am each day, when the supposed alarm time is 12:00 am in the next day, you can set alarm now

〔1266〕 Add Alarm for 〔1233 Supposed Alarm Time〕 called 〔1234 Alarm Label Dictionary〕

〔1267〕 Otherwise　▵1250

〔1268〕 If 〔1233 Supposed Alarm Time〕 > 〔1235 Current Date〕

〔1269〕 If 〔1233 Supposed Alarm Time〕 > 〔1236 1 day after〕

〔1270〕 Comment
when the time is other than 12:00 am of then next day, you cannot set alarm yet. If set, it will be today. For example, triggering time 2025-4-8 12:00 am, the supposed alarm time is 2025-4-9 08:00 am, if you set an alarm at 08:00 at 2025-4-8 12:00 am, it will alarm at 2025-4-8 08:00 am instead. So we need to record the supposed alarm time and trigger next day.

〔1271〕 Set Variable Event to 〔1234 Alarm Label Dictionary〕

〔1272〕 Otherwise

〔1273〕 Find Alarm 〔1236 1 day after〕　» 1274 1275
• ContentItemFilter: {  "Value": {
      "WFActionParameterFilterPrefix": 1,
      "WFActionParameterFilterTemplates": [],
      "WFContentPredicateBoundedDate": false
   },
   "WFSerializationType": "WFContentPredicateTableTemplate"
}

〔1274〕 If 〔1273 Alarms〕 has any value

〔1275〕 Repeat[2] with Each in 〔1273 Alarms〕

〔1276〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ AlarmLabelDictionary　» 1277 1278 1280

〔1277〕 Get Dictionary Value for Event in 〔1276 AlarmLabelDictionary〕 　➔ Event　» 1282

〔1278〕 Get Dictionary Value for From in 〔1276 AlarmLabelDictionary〕 　➔ From　»

〔1279〕 Get Dates from 〔1278 From〕 　➔ FromDate　» 1282

〔1280〕 Get Dictionary Value for To in 〔1276 AlarmLabelDictionary〕 　➔ To　»

〔1281〕 Get Dates from 〔1280 To〕 　➔ ToDate　»

〔1282〕 If All are true　〔1277 Event’s Name〕 is 〔Repeat Item〕　〔1279 FromDate{"Date Style":"Custom","WFDateFormat":"HH:mm","WFISO8601IncludeTime":false}〕 is 〔Repeat Item’s Start Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕　〔1281 ToDate{"Date Style":"Custom","WFDateFormat":"HH:mm","WFISO8601IncludeTime":false}〕 is 〔Repeat Item’s End Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕

〔1283〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔1284〕 End If

〔1285〕 End Repeat[2] with Each　▵1275

〔1286〕 End If　▵1274

〔1287〕 Add Alarm for 〔1233 Supposed Alarm Time〕 called 〔1234 Alarm Label Dictionary〕

〔1288〕 End If　▵1272

〔1289〕 Otherwise　▵1268

〔1290〕 Comment
the supposed alarm time passed

〔1291〕 If 〔Repeat Item’s Location〕 has any value

〔1292〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 at 〔Repeat Item’s Location〕 which  was supposed to get ready at 〔1233 Supposed Alarm Time〕. Please check.

〔1293〕 Set Variable Text to 〔1292 Text〕

〔1294〕 Otherwise

〔1295〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 which  was supposed to get ready at 〔1233 Supposed Alarm Time〕. Please check.

〔1296〕 Set Variable Text to 〔1295 Text〕

〔1297〕 End If

〔1298〕 Show Alert 〔Text〕

〔1299〕 Show Notification 〔Text〕

〔1300〕 Speak Text
• Text: 〔Text〕

〔1301〕 End If　▵1289

〔1302〕 End If　▵1267

〔1303〕 End If　▵1249

〔1304〕 Text
〔Event〕

〔1305〕 If 〔Event〕 has any value

〔1306〕 Get Dictionary from 〔Event〕　» 1319

〔1307〕 Text　»

〔1308〕 Set Variable TextList to 〔1307 Text〕

〔1309〕 Add 〔Event〕 to Variable TextList

〔1310〕 Get File at Path Smart Calendar Reminder/Future Alarms.txt from Folder　» 1311 1312
• FileErrorIfNotFound: false

〔1311〕 If 〔1310 File’s File Size〕 has any value

〔1312〕 Split Text 〔1310 File〕 by New Lines　»

〔1313〕 Repeat[2] with Each in 〔1312 Split Text〕

〔1314〕 Get Dictionary from 〔Repeat Item 2〕　» 1315 1316 1317 1318

〔1315〕 Get Dictionary Value for Event in 〔1314 Dictionary〕 　➔ Event　» 1319

〔1316〕 Get Dictionary Value for From in 〔1314 Dictionary〕 　➔ From　» 1319

〔1317〕 Get Dictionary Value for To in 〔1314 Dictionary〕 　➔ To　» 1319

〔1318〕 Get Dictionary Value for Location in 〔1314 Dictionary〕 　➔ Location　»

〔1319〕 If Any are true　〔1315 Event’s Name〕 is not 〔1306 Dictionary.Event〕　〔1316 From’s Name〕 is not 〔1306 Dictionary.From〕　〔1317 To’s Name〕 is not 〔1306 Dictionary.To〕　〔1318 Location’s Name〕 is not 〔1306 Dictionary.Location〕

〔1320〕 Add 〔Repeat Item 2〕 to Variable TextList

〔1321〕 End If

〔1322〕 End Repeat[2] with Each　▵1313

〔1323〕 Combine Text 〔TextList〕 with New Lines　»

〔1324〕 Save File 〔1323 Combined Text〕
• AskWhereToSave: false
• SaveFileOverwrite: true
• FileDestinationPath: Smart Calendar Reminder/Future Alarms.txt

〔1325〕 Otherwise　▵1311

〔1326〕 Text　»

〔Event〕

〔1327〕 Save File 〔1326 Text〕
• AskWhereToSave: false
• FileDestinationPath: Smart Calendar Reminder/Future Alarms.txt

〔1328〕 End If

〔1329〕 End If　▵1305

〔1330〕 End Repeat with Each　▵1054

〔1331〕 End If　▵1053

〔1332〕 Get File at Path Smart Calendar Reminder/Future Alarms.txt from Folder　» 1333 1334
• FileErrorIfNotFound: false

〔1333〕 If 〔1332 File’s File Size〕 has any value

〔1334〕 Split Text 〔1332 File〕 by New Lines　»

〔1335〕 Repeat with Each in 〔1334 Split Text〕

〔1336〕 Get Dictionary from 〔Repeat Item〕　» 1337 1338 1348 1359

〔1337〕 If 〔1336 Dictionary〕 has any value

〔1338〕 Get Dates from 〔1336 Dictionary.AlarmTime〕　» 1339 1340 1359

〔1339〕 If 〔1338 Dates〕 is today

〔1340〕 Find Alarm 〔1338 Dates〕　» 1341 1342
• ContentItemFilter: {  "Value": {
      "WFActionParameterFilterPrefix": 1,
      "WFContentPredicateBoundedDate": false,
      "WFActionParameterFilterTemplates": []
   },
   "WFSerializationType": "WFContentPredicateTableTemplate"
}

〔1341〕 If 〔1340 Alarms〕 has any value

〔1342〕 Repeat[2] with Each in 〔1340 Alarms〕

〔1343〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ Alarm_Label_Dictionary　» 1344 1346 1354

〔1344〕 Get Dictionary Value for From in 〔1343 Alarm_Label_Dictionary〕　»

〔1345〕 Get Dates from 〔1344 Dictionary Value〕 　➔ From_Date　» 1354

〔1346〕 Get Dictionary Value for To in 〔1343 Alarm_Label_Dictionary〕　»

〔1347〕 Get Dates from 〔1346 Dictionary Value〕 　➔ To_Date　» 1354

〔1348〕 Get Dictionary from 〔1336 Dictionary.Event〕 　➔ FutureAlarmLabelDictionary　» 1349 1350 1352

〔1349〕 Get Dictionary Value for Event in 〔1348 FutureAlarmLabelDictionary〕 　➔ Event　» 1354

〔1350〕 Get Dictionary Value for From in 〔1348 FutureAlarmLabelDictionary〕 　➔ From　»

〔1351〕 Get Dates from 〔1350 From〕 　➔ FromDate　» 1354

〔1352〕 Get Dictionary Value for To in 〔1348 FutureAlarmLabelDictionary〕 　➔ To　»

〔1353〕 Get Dates from 〔1352 To〕 　➔ ToDate　»

〔1354〕 If All are true　〔1349 Event’s Name〕 is 〔1343 Alarm_Label_Dictionary.Event〕　〔1351 FromDate{"Date Style":"Custom","WFDateFormat":"HH:mm","WFISO8601IncludeTime":false}〕 is 〔1345 From_Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕　〔1353 ToDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔1347 To_Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕

〔1355〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔1356〕 End If

〔1357〕 End Repeat[2] with Each　▵1342

〔1358〕 End If　▵1341

〔1359〕 Add Alarm for 〔1338 Dates〕 called 〔1336 Dictionary.Event〕

〔1360〕 End If　▵1339

〔1361〕 End If　▵1337

〔1362〕 End Repeat with Each　▵1335

〔1363〕 End If　▵1333

〔1364〕 End If　▵1041

〔1365〕 If 〔Shortcut Input as Number〕 is 7

〔1366〕 Comment
1-Hour Event Processor
*Real-time event handler for immediate notifications:

Processes events within next 60 minutes

Provides most accurate travel estimates

Recommended for hourly automation*

〔1367〕 Get File at Path Smart Calendar Reminder/aboutme.txt from Folder　»
• FileErrorIfNotFound: false

〔1368〕 Get Dictionary from 〔1367 File〕　» 1369 1372 1373

〔1369〕 Get Dictionary from 〔1368 Dictionary.HomeAddress〕　»

〔1370〕 Text　»
〔1369 Dictionary.street〕 〔1369 Dictionary.city〕 〔1369 Dictionary.state〕 〔1369 Dictionary.postcode〕 〔1369 Dictionary.country〕

〔1371〕 Set Variable Home_Address to 〔1370 Text〕

〔1372〕 Set Variable Travel_Method to 〔1368 Dictionary.TravelMethod〕

〔1373〕 Get Dictionary Value for ExtraTime in 〔1368 Dictionary〕　»

〔1374〕 Get Numbers from 〔1373 Dictionary Value〕　»

〔1375〕 Set Variable Extra_Time to 〔1374 Numbers〕

〔1376〕 Find Calendar Events All Calendar Events where　» 1377 1378 1379 1591
• ContentItemSortProperty: Start Date
• ContentItemSortOrder: Oldest First
• ContentItemFilter: • All the following are true
Start Date is in the next 30 minutes
Is All Day
Canceled is {"Bool":{"Value":false,"WFSerializationType":"WFBooleanSubstitutableState"}}

〔1377〕 If 〔1376 Calendar Events〕 has any value

〔1378〕 Count Items in 〔1376 Calendar Events〕　» 1595 1603

〔1379〕 Repeat with Each in 〔1376 Calendar Events〕

〔1380〕 If 〔Repeat Item’s Location〕 has any value

〔1381〕 Get Current Location　» 1392 1398 1462
• Accuracy: Best

〔1382〕 If All are true　〔Repeat Item’s Notes〕 has any value　〔Repeat Item’s Notes〕 begins with {　〔Repeat Item’s Notes〕 ends with }

〔1383〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY

〔1384〕 Get Dictionary from 〔Repeat Item’s Notes〕 　➔ NotesAddressDictionary　» 1385 1386 1387 1388 1389

〔1385〕 Set Variable CalendarNotesStreet to 〔1384 NotesAddressDictionary.Street〕

〔1386〕 Set Variable CalendarNotesCity to 〔1384 NotesAddressDictionary.City〕

〔1387〕 Set Variable CalendarNotesState to 〔1384 NotesAddressDictionary.State〕

〔1388〕 Set Variable CalendarNotesRegion to 〔1384 NotesAddressDictionary.Country〕

〔1389〕 Set Variable CalendarNotesZIPCode to 〔1384 NotesAddressDictionary.Postcode〕

〔1390〕 Text　»
〔CalendarNotesStreet〕 〔CalendarNotesCity〕 〔CalendarNotesState〕 〔CalendarNotesZIPCode〕 〔CalendarNotesRegion〕

〔1391〕 Set Variable NotesAddressString to 〔1390 Text〕

〔1392〕 If All are true　〔1381 Current Location’s Street〕 is 〔CalendarNotesStreet〕　〔1381 Current Location’s City〕 is 〔CalendarNotesCity〕　〔1381 Current Location’s State〕 is 〔CalendarNotesState〕　〔1381 Current Location’s Country〕 is 〔CalendarNotesRegion〕　〔1381 Current Location’s ZIP Code〕 is 〔CalendarNotesZIPCode〕

〔1393〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY -> CALENDAR EVENT ADDRESS IS THE SAME WITH CURRENT LOCATION

〔1394〕 Number 0　»

〔1395〕 Set Variable CurrentToDeparture to 〔1394 Number〕

〔1396〕 Otherwise

〔1397〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY -> CALENDAR EVENT ADDRESS IS NOT THE SAME WITH CURRENT LOCATION

〔1398〕 Get 〔TravelMethod〕 Time　»
• GetDirectionsCustomLocation: 〔1381 Current Location〕
• Destination: 〔NotesAddressString〕

〔1399〕 Set Variable TravelTimeString to 〔1398 Travel Time〕

〔1400〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　» 1401 1403 1405 1410 1417
• MatchTextCaseSensitive: false

〔1401〕 Count Items in 〔1400 C2DMatches〕　»

〔1402〕 If 〔1401 Count〕 > 1

〔1403〕 Get First Item from List 〔1400 C2DMatches〕　»

〔1404〕 Set Variable C2DHours to 〔1403 Item from List〕

〔1405〕 Get Last Item from List 〔1400 C2DMatches〕　»

〔1406〕 Set Variable C2DMinutes to 〔1405 Item from List〕

〔1407〕 Otherwise

〔1408〕 Match Text hour(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔1409〕 If 〔1408 C2DMatches’s text〕 has any value

〔1410〕 Get First Item from List 〔1400 C2DMatches〕　»

〔1411〕 Set Variable C2DHours to 〔1410 Item from List〕

〔1412〕 Number 0　»

〔1413〕 Set Variable C2DMinutes to 〔1412 Number〕

〔1414〕 Otherwise

〔1415〕 Number 0　»

〔1416〕 Set Variable C2DHours to 〔1415 Number〕

〔1417〕 Get First Item from List 〔1400 C2DMatches〕　»

〔1418〕 Set Variable C2DMinutes to 〔1417 Item from List〕

〔1419〕 End If

〔1420〕 End If　▵1407

〔1421〕 Calculate 〔C2DHours〕 × 60　»

〔1422〕 Calculate 〔1421 Calculation Result〕 + 〔C2DMinutes〕　»

〔1423〕 Set Variable CurrentToDeparture to 〔1422 Calculation Result〕

〔1424〕 End If　▵1396

〔1425〕 Get 〔TravelMethod〕 Time 　➔ DepartureToDestination　»
• GetDirectionsCustomLocation: 〔NotesAddressString〕
• Destination: 〔Repeat Item’s Location〕

〔1426〕 Set Variable TravelTimeString to 〔1425 DepartureToDestination〕

〔1427〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　» 1428 1430 1432 1437 1444
• MatchTextCaseSensitive: false

〔1428〕 Count Items in 〔1427 C2DMatches〕　»

〔1429〕 If 〔1428 Count〕 > 1

〔1430〕 Get First Item from List 〔1427 C2DMatches〕　»

〔1431〕 Set Variable C2DHours to 〔1430 Item from List〕

〔1432〕 Get Last Item from List 〔1427 C2DMatches〕　»

〔1433〕 Set Variable C2DMinutes to 〔1432 Item from List〕

〔1434〕 Otherwise

〔1435〕 Match Text hour(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔1436〕 If 〔1435 C2DMatches’s text〕 has any value

〔1437〕 Get First Item from List 〔1427 C2DMatches〕　»

〔1438〕 Set Variable C2DHours to 〔1437 Item from List〕

〔1439〕 Number 0　»

〔1440〕 Set Variable C2DMinutes to 〔1439 Number〕

〔1441〕 Otherwise

〔1442〕 Number 0　»

〔1443〕 Set Variable C2DHours to 〔1442 Number〕

〔1444〕 Get First Item from List 〔1427 C2DMatches〕　»

〔1445〕 Set Variable C2DMinutes to 〔1444 Item from List〕

〔1446〕 End If

〔1447〕 End If　▵1434

〔1448〕 Calculate 〔C2DHours〕 × 60　»

〔1449〕 Calculate 〔1448 Calculation Result〕 + 〔C2DMinutes〕　»

〔1450〕 Calculate 〔1449 Calculation Result〕 + 〔CurrentToDeparture〕　»

〔1451〕 Set Variable TravelTime to 〔1450 Calculation Result〕

〔1452〕 Otherwise　▵1382

〔1453〕 Comment
CALENDER EVENT NOTES IS BLANK

〔1454〕 Get Dictionary from 〔HomeAddress〕 　➔ home_address_dictionary　» 1455 1456 1457 1458 1459

〔1455〕 Get Dictionary Value for street in 〔1454 home_address_dictionary〕 　➔ HomeStreet　» 1460 1462

〔1456〕 Get Dictionary Value for city in 〔1454 home_address_dictionary〕 　➔ HomeCity　» 1460 1462

〔1457〕 Get Dictionary Value for state in 〔1454 home_address_dictionary〕 　➔ HomeState　» 1460 1462

〔1458〕 Get Dictionary Value for country in 〔1454 home_address_dictionary〕 　➔ HomeCountry　» 1460 1462

〔1459〕 Get Dictionary Value for postcode in 〔1454 home_address_dictionary〕 　➔ HomePostcode　» 1460 1462

〔1460〕 If All are true　〔1455 HomeStreet〕 has any value　〔1456 HomeCity〕 has any value　〔1457 HomeState〕 has any value　〔1458 HomeCountry〕 has any value　〔1459 HomePostcode〕 has any value

〔1461〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED

〔1462〕 If All are true　〔1381 Current Location’s Street〕 is 〔1455 HomeStreet〕　〔1381 Current Location’s City〕 is 〔1456 HomeCity〕　〔1381 Current Location’s State〕 is 〔1457 HomeState〕　〔1381 Current Location’s Country〕 is 〔1458 HomeCountry〕　〔1381 Current Location’s ZIP Code〕 is 〔1459 HomePostcode〕

〔1463〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED -> HOME ADDRESS IS THE SAME WITH CURRENT LOCATION

〔1464〕 Number 0　»

〔1465〕 Set Variable CurrentToDeparture to 〔1464 Number〕

〔1466〕 Otherwise

〔1467〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED -> HOME ADDRESS IS NOT THE SAME WITH CURRENT LOCATION

〔1468〕 Get 〔TravelMethod〕 Time　»
• Destination: 〔HomeAddress〕

〔1469〕 Set Variable TravelTimeString to 〔1468 Travel Time〕

〔1470〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　» 1471 1473 1475 1480 1487
• MatchTextCaseSensitive: false

〔1471〕 Count Items in 〔1470 C2DMatches〕　»

〔1472〕 If 〔1471 Count〕 > 1

〔1473〕 Get First Item from List 〔1470 C2DMatches〕　»

〔1474〕 Set Variable C2DHours to 〔1473 Item from List〕

〔1475〕 Get Last Item from List 〔1470 C2DMatches〕　»

〔1476〕 Set Variable C2DMinutes to 〔1475 Item from List〕

〔1477〕 Otherwise

〔1478〕 Match Text hour(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔1479〕 If 〔1478 C2DMatches’s text〕 has any value

〔1480〕 Get First Item from List 〔1470 C2DMatches〕　»

〔1481〕 Set Variable C2DHours to 〔1480 Item from List〕

〔1482〕 Number 0　»

〔1483〕 Set Variable C2DMinutes to 〔1482 Number〕

〔1484〕 Otherwise

〔1485〕 Number 0　»

〔1486〕 Set Variable C2DHours to 〔1485 Number〕

〔1487〕 Get First Item from List 〔1470 C2DMatches〕　»

〔1488〕 Set Variable C2DMinutes to 〔1487 Item from List〕

〔1489〕 End If

〔1490〕 End If　▵1477

〔1491〕 Calculate 〔C2DHours〕 × 60　»

〔1492〕 Calculate 〔1491 Calculation Result〕 + 〔C2DMinutes〕　»

〔1493〕 Set Variable CurrentToDeparture to 〔1492 Calculation Result〕

〔1494〕 End If　▵1466

〔1495〕 Get 〔TravelMethod〕 Time 　➔ DepartureToDestination　» 1496 1497
• GetDirectionsCustomLocation: 〔HomeAddress〕
• Destination: 〔Repeat Item’s Location〕

〔1496〕 Set Variable TravelTimeString to 〔1495 DepartureToDestination〕

〔1497〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔1495 DepartureToDestination〕 　➔ C2DMatches　» 1498 1500 1502 1507 1514
• MatchTextCaseSensitive: false

〔1498〕 Count Items in 〔1497 C2DMatches〕　»

〔1499〕 If 〔1498 Count〕 > 1

〔1500〕 Get First Item from List 〔1497 C2DMatches〕　»

〔1501〕 Set Variable C2DHours to 〔1500 Item from List〕

〔1502〕 Get Last Item from List 〔1497 C2DMatches〕　»

〔1503〕 Set Variable C2DMinutes to 〔1502 Item from List〕

〔1504〕 Otherwise

〔1505〕 Match Text hour(?:s)? in 〔152 DepartureToDestination〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔1506〕 If 〔1505 C2DMatches’s text〕 has any value

〔1507〕 Get First Item from List 〔1497 C2DMatches〕　»

〔1508〕 Set Variable C2DHours to 〔1507 Item from List〕

〔1509〕 Number 0　»

〔1510〕 Set Variable C2DMinutes to 〔1509 Number〕

〔1511〕 Otherwise

〔1512〕 Number 0　»

〔1513〕 Set Variable C2DHours to 〔1512 Number〕

〔1514〕 Get First Item from List 〔1497 C2DMatches〕　»

〔1515〕 Set Variable C2DMinutes to 〔1514 Item from List〕

〔1516〕 End If

〔1517〕 End If　▵1504

〔1518〕 Calculate 〔C2DHours〕 × 60　»

〔1519〕 Calculate 〔1518 Calculation Result〕 + 〔C2DMinutes〕　»

〔1520〕 Calculate 〔1519 Calculation Result〕 + 〔CurrentToDeparture〕　»

〔1521〕 Set Variable TravelTime to 〔1520 Calculation Result〕

〔1522〕 Otherwise　▵1460

〔1523〕 Text
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS NOT MAINTAINED

〔1524〕 Get 〔TravelMethod〕 Time　»
• Destination: 〔Repeat Item’s Location〕

〔1525〕 Set Variable TravelTimeString to 〔1524 Travel Time〕

〔1526〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　» 1527 1529 1531 1536 1543
• MatchTextCaseSensitive: false

〔1527〕 Count Items in 〔1526 C2DMatches〕　»

〔1528〕 If 〔1527 Count〕 > 1

〔1529〕 Get First Item from List 〔1526 C2DMatches〕　»

〔1530〕 Set Variable C2DHours to 〔1529 Item from List〕

〔1531〕 Get Last Item from List 〔1526 C2DMatches〕　»

〔1532〕 Set Variable C2DMinutes to 〔1531 Item from List〕

〔1533〕 Otherwise

〔1534〕 Match Text hour(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔1535〕 If 〔1534 C2DMatches’s text〕 has any value

〔1536〕 Get First Item from List 〔1526 C2DMatches〕　»

〔1537〕 Set Variable C2DHours to 〔1536 Item from List〕

〔1538〕 Number 0　»

〔1539〕 Set Variable C2DMinutes to 〔1538 Number〕

〔1540〕 Otherwise

〔1541〕 Number 0　»

〔1542〕 Set Variable C2DHours to 〔1541 Number〕

〔1543〕 Get First Item from List 〔1526 C2DMatches〕　»

〔1544〕 Set Variable C2DMinutes to 〔1543 Item from List〕

〔1545〕 End If

〔1546〕 End If　▵1533

〔1547〕 Calculate 〔C2DHours〕 × 60　»

〔1548〕 Calculate 〔1547 Calculation Result〕 + 〔C2DMinutes〕　»

〔1549〕 Set Variable TravelTime to 〔1548 Calculation Result〕

〔1550〕 End If　▵1522

〔1551〕 End If　▵1452

〔1552〕 Otherwise　▵1380

〔1553〕 Number 0　»

〔1554〕 Set Variable TravelTime to 〔1553 Number〕

〔1555〕 End If

〔1556〕 Find Alarm All Alarm　» 1557 1558
• ContentItemFilter: {  "Value": {
      "WFActionParameterFilterPrefix": 1,
      "WFContentPredicateBoundedDate": false,
      "WFActionParameterFilterTemplates": []
   },
   "WFSerializationType": "WFContentPredicateTableTemplate"
}

〔1557〕 If 〔1556 Alarms〕 has any value

〔1558〕 Repeat[2] with Each in 〔1556 Alarms〕

〔1559〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ AlarmLabelDictionary　» 1560 1561 1563

〔1560〕 Get Dictionary Value for Event in 〔1559 AlarmLabelDictionary〕 　➔ Event　» 1565

〔1561〕 Get Dictionary Value for From in 〔1559 AlarmLabelDictionary〕 　➔ From　»

〔1562〕 Get Dates from 〔1561 From〕 　➔ FromDate　» 1565

〔1563〕 Get Dictionary Value for To in 〔1559 AlarmLabelDictionary〕 　➔ To　»

〔1564〕 Get Dates from 〔1563 To〕 　➔ ToDate　»

〔1565〕 If All are true　〔1560 Event’s Name〕 is 〔Repeat Item〕　〔1562 FromDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔Repeat Item’s Start Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕　〔1564 ToDate{"Date Style":"Custom","WFDateFormat":"HH:mm","WFISO8601IncludeTime":false}〕 is 〔Repeat Item’s End Date{"Date Style":"Custom","WFDateFormat":"HH:mm","WFISO8601IncludeTime":false}〕

〔1566〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔1567〕 End If

〔1568〕 End Repeat[2] with Each　▵1558

〔1569〕 End If　▵1557

〔1570〕 Calculate 〔TravelTime〕 + 〔Extra_Time〕　»

〔1571〕 Adjust Subtract Date 〔Repeat Item’s Start Date〕 　➔ Supposed_Alarm_Time　» 1573 1575 1578 1585 1586
• Duration: 〔1570 Calculation Result〕 min

〔1572〕 Date Current Date　»

〔1573〕 If Any are true　〔1571 Supposed_Alarm_Time〕 < 〔1572 Date〕　〔1571 Supposed_Alarm_Time〕 is 〔1572 Date〕

〔1574〕 If 〔Repeat Item’s Location〕 has any value

〔1575〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 at 〔Repeat Item’s Location〕  which  was supposed to get ready at 〔1571 Supposed_Alarm_Time〕. Please check.

〔1576〕 Set Variable Text to 〔1575 Text〕

〔1577〕 Otherwise

〔1578〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 which  was supposed to get ready at 〔1571 Supposed_Alarm_Time〕. Please check.

〔1579〕 Set Variable Text to 〔1578 Text〕

〔1580〕 End If

〔1581〕 Show Alert 〔Text〕

〔1582〕 Show Notification 〔Text〕

〔1583〕 Speak Text
• Text: 〔Text〕

〔1584〕 Otherwise　▵1573

〔1585〕 Dictionary　»
{  "Event": "〔Repeat Item〕",
   "From": "〔Repeat Item’s Start Date〕",
   "To": "〔Repeat Item’s End Date〕",
   "Location": "〔Repeat Item’s Location〕",
   "AlarmTime": "〔1571 Supposed_Alarm_Time〕"
}

〔1586〕 Add Alarm for 〔1571 Supposed_Alarm_Time〕 called 〔1585 Dictionary〕

〔1587〕 End If

〔1588〕 End Repeat with Each　▵1379

〔1589〕 Number 3　»

〔1590〕 Repeat 〔1589 Number〕 Times

〔1591〕 Repeat[2] with Each in 〔1376 Calendar Events〕

〔1592〕 Format Date 〔Repeat Item 2’s Start Date〕　» 1596 1599 1604 1607
• DateFormatStyle: None

〔1593〕 Format Date 〔Repeat Item 2’s End Date〕　» 1596 1599 1604 1607
• DateFormatStyle: None

〔1594〕 If 〔Repeat Item 2’s Location〕 has any value

〔1595〕 If 〔1378 Count〕 > 1

〔1596〕 Text　»
Event 〔Repeat Index 2〕 〔Repeat Item 2〕 from 〔1592 Formatted Date〕 to 〔1593 Formatted Date〕 at 〔Repeat Item 2’s Location〕

〔1597〕 Set Variable Text to 〔1596 Text〕

〔1598〕 Otherwise

〔1599〕 Text　»
Event  〔Repeat Item 2〕 from 〔1592 Formatted Date〕 to 〔1593 Formatted Date〕 at 〔Repeat Item 2’s Location〕

〔1600〕 Set Variable Text to 〔1599 Text〕

〔1601〕 End If

〔1602〕 Otherwise　▵1594

〔1603〕 If 〔1378 Count〕 > 1

〔1604〕 Text　»
Event 〔Repeat Index 2〕 〔Repeat Item 2〕 from 〔1592 Formatted Date〕 to 〔1593 Formatted Date〕

〔1605〕 Set Variable Text to 〔1604 Text〕

〔1606〕 Otherwise

〔1607〕 Text　»
Event  〔Repeat Item 2〕 from 〔1592 Formatted Date〕 to 〔1593 Formatted Date〕

〔1608〕 Set Variable Text to 〔1607 Text〕

〔1609〕 End If

〔1610〕 End If　▵1602

〔1611〕 Speak Text
• Text: 〔Text〕

〔1612〕 Wait 1 seconds

〔1613〕 End Repeat[2] with Each　▵1591

〔1614〕 End Repeat Times　▵1590

〔1615〕 End If　▵1377

〔1616〕 End If　▵1365

〔1617〕 End If　▵91