Smart Calendar Reminder V3 (1902 actions, 543 KB)
"WFQuickActionSurfaces": [],
"WFWorkflowClientVersion": "3303.0.5",
"WFWorkflowHasOutputFallback": false,
"WFWorkflowHasShortcutInputVariables": true,
"WFWorkflowIcon": {
   "WFWorkflowIconStartColor": 431817727,
   "WFWorkflowIconGlyphNumber": 61701
},
"WFWorkflowImportQuestions": [],
"WFWorkflowInputContentItemClasses": [],
"WFWorkflowMinimumClientVersion": 3010,
"WFWorkflowMinimumClientVersionString": "3010",
"WFWorkflowOutputContentItemClasses": [],
"WFWorkflowTypes": []


〔0〕 If 〔Shortcut Input〕 does not have any value

〔1〕 Comment
Initial setup and version update check when no input is provided

〔2〕 Comment
Inspired by [Schedule Shortcut or Alarm] but designed to work smarter for my needs! Instead of manually inputting each trigger or alarm, this shortcut leverages my Calendar as the ultimate data source. It automatically scans for upcoming events, then:

• Speaks out the event details
• Sets a tailored alarm—accounting for travel and prep time—right when you need it

No more early, forgettable reminders. It keeps your schedule perfectly in sync. Give it a try and let your Calendar do the heavy lifting!

〔3〕 Dictionary 　➔ Version Dictionary 　» 4 5 7 9 10 11 12 20 21 25 31 46 72
{  "Name": "Smart Calendar Reminder",
   "Version": "3.2",
   "RH ID": "21959",
   "Icons": {
      "Update": "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",
      "Skip": "iVBORw0KGgoAAAANSUhEUgAAAHsAAAB7CAYAAABUx/9/AAAAAXNSR0IArs4c6QAAB+FJREFUeF7tnb2S3DYMx3efJpnxjF/BcZnKldMklR8iV3qvvDxEqqSJq1Qpc/cKnvGM/TTKQRF1Wi0pgCQAghJ2xmN7l6JI/Aj8QeqD59OOPsMw/LDoDvz7zap7y9/DT4+rMk/T/x/P5/P6t66tde659RPcj1MfYiC5ugfQx0FwPp8vXJVq19MVbEW4GIcu4ZuHvQAs6bkYXOz3+9PpZD7sm4U9DAOES9Bcy5Bjg+Deaqg3BbsTL8a8PPxuDroJ2DuDvB4MEOJNJHZNYe8c8g301uG9GexJk8O0iRoa91CuWXhXh30wb94anOrQVWEPw/Bvh9m1ZDRRBa4Ce/JmAO2fuAVUoIvDPrA25w5sceBisF2bc1mP5WEV7m3RkYSDRGB72CZYfrvIW4krbuywHXQ16FABO3BW2K7PbKBFllzZYDtodtDswFlgO2gx0KzAq2E7aHHQbMCrYHsypgaaJWkrhu2g1UFXA6+BPTTrrp+4aFpWBNsvaDQfbUUrbdmwPSFrDro4YcuC7aDNgC7S71zYrtPGeJ+f73WiNolcUMqrP3/5dvrz099ze1+/+u708/t31PZ7uYwrZSTYkqDvLg83wF6/+v70cPnVQdItQMrOqbBFwvfd5bfT5y9fk116uNydwNP9g1qAlJ2jsKW8Gpr/4/sPaC9++emdh3XUSmMB9E4XCmwRrwatjoXwWL96BA5RCz4QuUCWlHKRzXC+CVvSq3Ngg9F60nFIOP/46yXpDANYQZY2w3kStiTo/0c83bOX3q5gMFrQTJTC+vXPp9+r6iccnPTu7mBDZy2H9ZRXB0gKsJPevQVbRKtDpzEPwEawVeAYbKXIFPXuKGzpEF4TxpeDwKKOG4Ed9e4UbFGv5oKtmPhggWb+3QhseET4hu3NFxpezQ3bko5bgR2bd8dgi3s1BTZoMnxiU5iUm1nQcUOwb0L5FWzNW42wBC2Aw4y3Bt9ax7H2KiVowSxXidoaNry0RuUBeSpsShSIebqyUc1p9tSgK+9ew1YJ4RSAsZCMXThZQ28R1o159lWiNsPWSsyo8+wUKMyYrYFj7WsQceZQ3h1sgIkZtKWOY21rAHsO5UvYqq/AyNHsmCZjx7fS8V5gq+l1qWbHAFrTcYOwZ90ePVtbrzlhl4R1ycTNIuznNyqPur0L2CXApebjRmGPuh1gq+o1t2dTM3wNHe8BtqpeS8EOMFvquFHYo24Hz94V7JKwzqXjVmGPuq25Hr4Mo9jUicP4mOEl5uPYORvMs1/WyVtk4tJhPGdQceu4w45YVMOzl6fV0nHDsO8hjKtn4pqevQSOgeBYV8fO0TCMPx4Kdkniljsfd9gGwriWjjtsY7Al5+PWYavPsVtpdizzxuCsj8E0F6sPOz7WRq7vQLMPDTtXxzENd9hGw3hJpu6wC+KM9jx7q4mYNy6PxVb2sLo8jEdIYEYtGF/RQzA464OwB/Ow+lrDPsyiyhqcxKqaYdjHW1ShzARq1ssdtqEEDYOxbiqWkK3LY/U3DOPH8mwMxBHWxtUe+clZsuRO0CT0uWSRpqFnj1e9YDNy9d30tKZe2Hlq9NlhE+dEGAQOz84N27n63Bns/d6WlAuaY3BRll5bhfHd3nCopc89efYStvrCikQYx+rk1ueOYO/rIYHcsM2hzx3BHt9rGu4bV8/IMS/M0dBc0Dl1E/PNuRjWlkaa/QIbWqp9XZsLdkt97sWzw8Mg/nx2rusi5Q16dt8P42MGrV3fruGPta1BGJ/fQ770bFXdLg3jmDE51rd3D1tbt0tgW9PnHjR7+VrL9aux1ObbObCxshrzZ6q3Y5FHOYxfbSXhbzikUiSWMwY7/YbDKZSreDfmrf7uUuLo2ii2fjOxv5W43qZXNRjy7JvdgPx94zuFTXrfuFYox8I4hYHU+jbl3KkyRjw7usdXyrPF59y1sCXXt3uHndqMdWtDGNFErQa2VdAwSLB+YQ8Z1Ay06djkzn1bsEW9GzNKqtPK89Rs22P9MglbWrsxo7Rc384mvDogpdsKEWlzP05se0Yx786BrWCkWr43xy+BQyIJe4JL7xiMbZxO2XhV7L7yI+yyC4NaGjKm1WEkorAlwzl2YcO6PrOHg4oKMa+GqqmwRcJ5KpRbnD9XcNA4FN07mwxb0rsBOOhb2GdaQ9s0rK94DhLoLNgT8CbvX1E0XHenooTvLM0OhVs9F9YdAb0Gk70627Mn7xbLzvVstIszZYEugi2p37tAoNOJ5IboW6cnZePrCjyc6xBNnSVHp5d1FMGevFtkOtbWjF2cPbrrPaXlxbAdOMW87GWKQRdr9rILrXYiYDej/QqzE7J1l6o8ezEl8wxddrBUg2bxbAcuS/l5SZsFNCtsn4OLQGcDzQ7bkzZW4FXJWKwlLJrt83BWyFAZO2gRz15l6qI3LbKbuH2Fj5NGw9/sHxHP9qlZESdWfVYL45Gw7lOzbf4iYVtknk0dx74Ac2OpogsaVHs3he3Ts9n8otqcGgzimp068YG9XFybzcEODToQ9CbevATfzLMjGTt89bFUjwwf1xxysI0J2DudqpmBbBZ25+EdAD/Be0ItRhpznh2Zo8MdMfDHcog358XNFlW4RvmUzEF1b6YBwFV1bj1hORMya5GlzdwGUcqb9+ytTijC7xJu80UVygisKTPd+QphP0SAZXXh++V3a898eo4a83c9eS5mt/8AxNtwDe1h760AAAAASUVORK5CYII=",
      "Not Now": "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"
   }
}

〔4〕 Get Contents of URL https://routinehub.co/api/v1/shortcuts/〔3 Version Dictionary .RH ID〕/versions/latest 　➔ RH Server　» 6 8 11 16 20

〔5〕 Get File at Path 〔3 Version Dictionary .Name〕/Skip.txt from Folder　»
• File: {  "fileLocation": {
      "crossDeviceItemID": "docs.icloud.com:com.apple.CloudDocs/documents/95d6214c39557e3de40d802073a860c04f3aed5b",
      "fileProviderDomainID": "com.apple.CloudDocs.iCloudDriveFileProvider/38059A1C-DC76-4B89-B62F-250A61DBFC73",
      "appContainerBundleIdentifier": "com.apple.shortcuts",
      "relativeSubpath": "",
      "WFFileLocationType": "Shortcuts"
   },
   "filename": "Documents",
   "displayName": "Shortcuts"
}
• FileErrorIfNotFound: false
• ShowFilePicker: false
• GetFolderContents: true

〔6〕 If 〔5 File as Text〕 is not 〔4 RH Server as Dictionary.Version〕

〔7〕 Get Dictionary Value for Version in 〔3 Version Dictionary 〕　»

〔8〕 If 〔7 Dictionary Value as Text〕 is not 〔4 RH Server as Dictionary.Version〕

〔9〕 Base64 Decode 〔3 Version Dictionary .Icons.Update〕

〔10〕 Show Alert A new version of 〔3 Version Dictionary .Name〕 is available to download!

〔11〕 Text　» 14
⬆️ Update ⬆️

A new version of 〔3 Version Dictionary .Name〕 is available to download!

〔3 Version Dictionary .Version〕 ↗ 〔4 RH Server as Dictionary.Version〕   —   〔4 RH Server as Dictionary.Release〕

〔4 RH Server as Dictionary.Notes〕

〔12〕 Text　»
BEGIN:VCARD
VERSION:3.0
N;CHARSET=utf-8:Update;;;;
PHOTO;ENCODING=b:〔3 Version Dictionary .Icons.Update〕
END:VCARD

BEGIN:VCARD
VERSION:3.0
N;CHARSET=utf-8:Skip;;;;
PHOTO;ENCODING=b:〔3 Version Dictionary .Icons.Skip〕
END:VCARD

BEGIN:VCARD
VERSION:3.0
N;CHARSET=utf-8:Not Now;;;;
PHOTO;ENCODING=b:〔3 Version Dictionary .Icons.Not Now〕
END:VCARD

〔13〕 Set Name of 〔12 Text〕 to updateprompt.vcf　»

〔14〕 Choose from List 〔13 Renamed Item as Contact〕　» 15 19
• ChooseFromListActionPrompt: 〔11 Text〕

〔15〕 If 〔14 Chosen Item as Text〕 is Update

〔16〕 Open URL 〔4 RH Server as Dictionary.URL〕
• Show-WFInput: true

〔17〕 Stop This Shortcut

〔18〕 End If

〔19〕 If 〔14 Chosen Item as Text〕 is Skip

〔20〕 Save File 〔4 RH Server as Dictionary.Version〕
• AskWhereToSave: false
• SaveFileOverwrite: true
• FileDestinationPath: 〔3 Version Dictionary .Name〕/Skip.txt

〔21〕 Show Alert This version of 〔3 Version Dictionary .Name〕 has been skipped!
• AlertActionTitle: ✅ Done ✅
• AlertActionCancelButtonShown: false

〔22〕 End If

〔23〕 End If　▵8

〔24〕 End If　▵6

〔25〕 Get File at Path 〔3 Version Dictionary .Name〕/Welcome.pdf from Folder　»
• FileErrorIfNotFound: false

〔26〕 If 〔25 File’s File Size〕 does not have any value

〔27〕 Text　»
<html><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Smart Calendar Reminder: Your Intelligent Schedule Assistant</title><style>
    /* cspell:disable-file */
    /* webkit printing magic: print all background colors */
    html {
        -webkit-print-color-adjust: exact;
    }
    * {
        box-sizing: border-box;
        -webkit-print-color-adjust: exact;
    }
\u{space}\u{space}\u{space}\u{space}
    html,
    body {
        margin: 0;
        padding: 0;
    }
    @media only screen {
        body {
            margin: 2em auto;
            max-width: 900px;
            color: rgb(55, 53, 47);
        }
    }
\u{space}\u{space}\u{space}\u{space}
    body {
        line-height: 1.5;
        white-space: pre-wrap;
    }
\u{space}\u{space}\u{space}\u{space}
    a,
    a.visited {
        color: inherit;
        text-decoration: underline;
    }
\u{space}\u{space}\u{space}\u{space}
    .pdf-relative-link-path {
        font-size: 80%;
        color: #444;
    }
\u{space}\u{space}\u{space}\u{space}
    h1,
    h2,
    h3 {
        letter-spacing: -0.01em;
        line-height: 1.2;
        font-weight: 600;
        margin-bottom: 0;
    }
\u{space}\u{space}\u{space}\u{space}
    .page-title {
        font-size: 2.5rem;
        font-weight: 700;
        margin-top: 0;
        margin-bottom: 0.75em;
    }
\u{space}\u{space}\u{space}\u{space}
    h1 {
        font-size: 1.875rem;
        margin-top: 1.875rem;
    }
\u{space}\u{space}\u{space}\u{space}
    h2 {
        font-size: 1.5rem;
        margin-top: 1.5rem;
    }
\u{space}\u{space}\u{space}\u{space}
    h3 {
        font-size: 1.25rem;
        margin-top: 1.25rem;
    }
\u{space}\u{space}\u{space}\u{space}
    .source {
        border: 1px solid #ddd;
        border-radius: 3px;
        padding: 1.5em;
        word-break: break-all;
    }
\u{space}\u{space}\u{space}\u{space}
    .callout {
        border-radius: 3px;
        padding: 1rem;
    }
\u{space}\u{space}\u{space}\u{space}
    figure {
        margin: 1.25em 0;
        page-break-inside: avoid;
    }
\u{space}\u{space}\u{space}\u{space}
    figcaption {
        opacity: 0.5;
        font-size: 85%;
        margin-top: 0.5em;
    }
\u{space}\u{space}\u{space}\u{space}
    mark {
        background-color: transparent;
    }
\u{space}\u{space}\u{space}\u{space}
    .indented {
        padding-left: 1.5em;
    }
\u{space}\u{space}\u{space}\u{space}
    hr {
        background: transparent;
        display: block;
        width: 100%;
        height: 1px;
        visibility: visible;
        border: none;
        border-bottom: 1px solid rgba(55, 53, 47, 0.09);
    }
\u{space}\u{space}\u{space}\u{space}
    img {
        max-width: 100%;
    }
\u{space}\u{space}\u{space}\u{space}
    @media only print {
        img {
            max-height: 100vh;
            object-fit: contain;
        }
    }
\u{space}\u{space}\u{space}\u{space}
    @page {
        margin: 1in;
    }
\u{space}\u{space}\u{space}\u{space}
    .collection-content {
        font-size: 0.875rem;
    }
\u{space}\u{space}\u{space}\u{space}
    .column-list {
        display: flex;
        justify-content: space-between;
    }
\u{space}\u{space}\u{space}\u{space}
    .column {
        padding: 0 1em;
    }
\u{space}\u{space}\u{space}\u{space}
    .column:first-child {
        padding-left: 0;
    }
\u{space}\u{space}\u{space}\u{space}
    .column:last-child {
        padding-right: 0;
    }
\u{space}\u{space}\u{space}\u{space}
    .table_of_contents-item {
        display: block;
        font-size: 0.875rem;
        line-height: 1.3;
        padding: 0.125rem;
    }
\u{space}\u{space}\u{space}\u{space}
    .table_of_contents-indent-1 {
        margin-left: 1.5rem;
    }
\u{space}\u{space}\u{space}\u{space}
    .table_of_contents-indent-2 {
        margin-left: 3rem;
    }
\u{space}\u{space}\u{space}\u{space}
    .table_of_contents-indent-3 {
        margin-left: 4.5rem;
    }
\u{space}\u{space}\u{space}\u{space}
    .table_of_contents-link {
        text-decoration: none;
        opacity: 0.7;
        border-bottom: 1px solid rgba(55, 53, 47, 0.18);
    }
\u{space}\u{space}\u{space}\u{space}
    table,
    th,
    td {
        border: 1px solid rgba(55, 53, 47, 0.09);
        border-collapse: collapse;
    }
\u{space}\u{space}\u{space}\u{space}
    table {
        border-left: none;
        border-right: none;
    }
\u{space}\u{space}\u{space}\u{space}
    th,
    td {
        font-weight: normal;
        padding: 0.25em 0.5em;
        line-height: 1.5;
        min-height: 1.5em;
        text-align: left;
    }
\u{space}\u{space}\u{space}\u{space}
    th {
        color: rgba(55, 53, 47, 0.6);
    }
\u{space}\u{space}\u{space}\u{space}
    ol,
    ul {
        margin: 0;
        margin-block-start: 0.6em;
        margin-block-end: 0.6em;
    }
\u{space}\u{space}\u{space}\u{space}
    li > ol:first-child,
    li > ul:first-child {
        margin-block-start: 0.6em;
    }
\u{space}\u{space}\u{space}\u{space}
    ul > li {
        list-style: disc;
    }
\u{space}\u{space}\u{space}\u{space}
    ul.to-do-list {
        padding-inline-start: 0;
    }
\u{space}\u{space}\u{space}\u{space}
    ul.to-do-list > li {
        list-style: none;
    }
\u{space}\u{space}\u{space}\u{space}
    .to-do-children-checked {
        text-decoration: line-through;
        opacity: 0.375;
    }
\u{space}\u{space}\u{space}\u{space}
    ul.toggle > li {
        list-style: none;
    }
\u{space}\u{space}\u{space}\u{space}
    ul {
        padding-inline-start: 1.7em;
    }
\u{space}\u{space}\u{space}\u{space}
    ul > li {
        padding-left: 0.1em;
    }
\u{space}\u{space}\u{space}\u{space}
    ol {
        padding-inline-start: 1.6em;
    }
\u{space}\u{space}\u{space}\u{space}
    ol > li {
        padding-left: 0.2em;
    }
\u{space}\u{space}\u{space}\u{space}
    .mono ol {
        padding-inline-start: 2em;
    }
\u{space}\u{space}\u{space}\u{space}
    .mono ol > li {
        text-indent: -0.4em;
    }
\u{space}\u{space}\u{space}\u{space}
    .toggle {
        padding-inline-start: 0em;
        list-style-type: none;
    }
\u{space}\u{space}\u{space}\u{space}
    /* Indent toggle children */
    .toggle > li > details {
        padding-left: 1.7em;
    }
\u{space}\u{space}\u{space}\u{space}
    .toggle > li > details > summary {
        margin-left: -1.1em;
    }
\u{space}\u{space}\u{space}\u{space}
    .selected-value {
        display: inline-block;
        padding: 0 0.5em;
        background: rgba(206, 205, 202, 0.5);
        border-radius: 3px;
        margin-right: 0.5em;
        margin-top: 0.3em;
        margin-bottom: 0.3em;
        white-space: nowrap;
    }
\u{space}\u{space}\u{space}\u{space}
    .collection-title {
        display: inline-block;
        margin-right: 1em;
    }
\u{space}\u{space}\u{space}\u{space}
    .page-description {
        margin-bottom: 2em;
    }
\u{space}\u{space}\u{space}\u{space}
    .simple-table {
        margin-top: 1em;
        font-size: 0.875rem;
        empty-cells: show;
    }
    .simple-table td {
        height: 29px;
        min-width: 120px;
    }
\u{space}\u{space}\u{space}\u{space}
    .simple-table th {
        height: 29px;
        min-width: 120px;
    }
\u{space}\u{space}\u{space}\u{space}
    .simple-table-header-color {
        background: rgb(247, 246, 243);
        color: black;
    }
    .simple-table-header {
        font-weight: 500;
    }
\u{space}\u{space}\u{space}\u{space}
    time {
        opacity: 0.5;
    }
\u{space}\u{space}\u{space}\u{space}
    .icon {
        display: inline-block;
        max-width: 1.2em;
        max-height: 1.2em;
        text-decoration: none;
        vertical-align: text-bottom;
        margin-right: 0.5em;
    }
\u{space}\u{space}\u{space}\u{space}
    img.icon {
        border-radius: 3px;
    }
\u{space}\u{space}\u{space}\u{space}
    .user-icon {
        width: 1.5em;
        height: 1.5em;
        border-radius: 100%;
        margin-right: 0.5rem;
    }
\u{space}\u{space}\u{space}\u{space}
    .user-icon-inner {
        font-size: 0.8em;
    }
\u{space}\u{space}\u{space}\u{space}
    .text-icon {
        border: 1px solid #000;
        text-align: center;
    }
\u{space}\u{space}\u{space}\u{space}
    .page-cover-image {
        display: block;
        object-fit: cover;
        width: 100%;
        max-height: 30vh;
    }
\u{space}\u{space}\u{space}\u{space}
    .page-header-icon {
        font-size: 3rem;
        margin-bottom: 1rem;
    }
\u{space}\u{space}\u{space}\u{space}
    .page-header-icon-with-cover {
        margin-top: -0.72em;
        margin-left: 0.07em;
    }
\u{space}\u{space}\u{space}\u{space}
    .page-header-icon img {
        border-radius: 3px;
    }
\u{space}\u{space}\u{space}\u{space}
    .link-to-page {
        margin: 1em 0;
        padding: 0;
        border: none;
        font-weight: 500;
    }
\u{space}\u{space}\u{space}\u{space}
    p > .user {
        opacity: 0.5;
    }
\u{space}\u{space}\u{space}\u{space}
    td > .user,
    td > time {
        white-space: nowrap;
    }
\u{space}\u{space}\u{space}\u{space}
    input[type="checkbox"] {
        transform: scale(1.5);
        margin-right: 0.6em;
        vertical-align: middle;
    }
\u{space}\u{space}\u{space}\u{space}
    p {
        margin-top: 0.5em;
        margin-bottom: 0.5em;
    }
\u{space}\u{space}\u{space}\u{space}
    .image {
        border: none;
        margin: 1.5em 0;
        padding: 0;
        border-radius: 0;
        text-align: center;
    }
\u{space}\u{space}\u{space}\u{space}
    .code,
    code {
        background: rgba(135, 131, 120, 0.15);
        border-radius: 3px;
        padding: 0.2em 0.4em;
        border-radius: 3px;
        font-size: 85%;
        tab-size: 2;
    }
\u{space}\u{space}\u{space}\u{space}
    code {
        color: #eb5757;
    }
\u{space}\u{space}\u{space}\u{space}
    .code {
        padding: 1.5em 1em;
    }
\u{space}\u{space}\u{space}\u{space}
    .code-wrap {
        white-space: pre-wrap;
        word-break: break-all;
    }
\u{space}\u{space}\u{space}\u{space}
    .code > code {
        background: none;
        padding: 0;
        font-size: 100%;
        color: inherit;
    }
\u{space}\u{space}\u{space}\u{space}
    blockquote {
        font-size: 1.25em;
        margin: 1em 0;
        padding-left: 1em;
        border-left: 3px solid rgb(55, 53, 47);
    }
\u{space}\u{space}\u{space}\u{space}
    .bookmark {
        text-decoration: none;
        max-height: 8em;
        padding: 0;
        display: flex;
        width: 100%;
        align-items: stretch;
    }
\u{space}\u{space}\u{space}\u{space}
    .bookmark-title {
        font-size: 0.85em;
        overflow: hidden;
        text-overflow: ellipsis;
        height: 1.75em;
        white-space: nowrap;
    }
\u{space}\u{space}\u{space}\u{space}
    .bookmark-text {
        display: flex;
        flex-direction: column;
    }
\u{space}\u{space}\u{space}\u{space}
    .bookmark-info {
        flex: 4 1 180px;
        padding: 12px 14px 14px;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
    }
\u{space}\u{space}\u{space}\u{space}
    .bookmark-image {
        width: 33%;
        flex: 1 1 180px;
        display: block;
        position: relative;
        object-fit: cover;
        border-radius: 1px;
    }
\u{space}\u{space}\u{space}\u{space}
    .bookmark-description {
        color: rgba(55, 53, 47, 0.6);
        font-size: 0.75em;
        overflow: hidden;
        max-height: 4.5em;
        word-break: break-word;
    }
\u{space}\u{space}\u{space}\u{space}
    .bookmark-href {
        font-size: 0.75em;
        margin-top: 0.25em;
    }
\u{space}\u{space}\u{space}\u{space}
    .sans { font-family: ui-sans-serif, -apple-system, BlinkMacSystemFont, "Segoe UI Variable Display", "Segoe UI", Helvetica, "Apple Color Emoji", Arial, sans-serif, "Segoe UI Emoji", "Segoe UI Symbol"; }
    .code { font-family: "SFMono-Regular", Menlo, Consolas, "PT Mono", "Liberation Mono", Courier, monospace; }
    .serif { font-family: Lyon-Text, Georgia, ui-serif, serif; }
    .mono { font-family: iawriter-mono, Nitti, Menlo, Courier, monospace; }
    .pdf .sans { font-family: Inter, ui-sans-serif, -apple-system, BlinkMacSystemFont, "Segoe UI Variable Display", "Segoe UI", Helvetica, "Apple Color Emoji", Arial, sans-serif, "Segoe UI Emoji", "Segoe UI Symbol", 'Twemoji', 'Noto Color Emoji', 'Noto Sans CJK JP'; }
    .pdf:lang(zh-CN) .sans { font-family: Inter, ui-sans-serif, -apple-system, BlinkMacSystemFont, "Segoe UI Variable Display", "Segoe UI", Helvetica, "Apple Color Emoji", Arial, sans-serif, "Segoe UI Emoji", "Segoe UI Symbol", 'Twemoji', 'Noto Color Emoji', 'Noto Sans CJK SC'; }
    .pdf:lang(zh-TW) .sans { font-family: Inter, ui-sans-serif, -apple-system, BlinkMacSystemFont, "Segoe UI Variable Display", "Segoe UI", Helvetica, "Apple Color Emoji", Arial, sans-serif, "Segoe UI Emoji", "Segoe UI Symbol", 'Twemoji', 'Noto Color Emoji', 'Noto Sans CJK TC'; }
    .pdf:lang(ko-KR) .sans { font-family: Inter, ui-sans-serif, -apple-system, BlinkMacSystemFont, "Segoe UI Variable Display", "Segoe UI", Helvetica, "Apple Color Emoji", Arial, sans-serif, "Segoe UI Emoji", "Segoe UI Symbol", 'Twemoji', 'Noto Color Emoji', 'Noto Sans CJK KR'; }
    .pdf .code { font-family: Source Code Pro, "SFMono-Regular", Menlo, Consolas, "PT Mono", "Liberation Mono", Courier, monospace, 'Twemoji', 'Noto Color Emoji', 'Noto Sans Mono CJK JP'; }
    .pdf:lang(zh-CN) .code { font-family: Source Code Pro, "SFMono-Regular", Menlo, Consolas, "PT Mono", "Liberation Mono", Courier, monospace, 'Twemoji', 'Noto Color Emoji', 'Noto Sans Mono CJK SC'; }
    .pdf:lang(zh-TW) .code { font-family: Source Code Pro, "SFMono-Regular", Menlo, Consolas, "PT Mono", "Liberation Mono", Courier, monospace, 'Twemoji', 'Noto Color Emoji', 'Noto Sans Mono CJK TC'; }
    .pdf:lang(ko-KR) .code { font-family: Source Code Pro, "SFMono-Regular", Menlo, Consolas, "PT Mono", "Liberation Mono", Courier, monospace, 'Twemoji', 'Noto Color Emoji', 'Noto Sans Mono CJK KR'; }
    .pdf .serif { font-family: PT Serif, Lyon-Text, Georgia, ui-serif, serif, 'Twemoji', 'Noto Color Emoji', 'Noto Serif CJK JP'; }
    .pdf:lang(zh-CN) .serif { font-family: PT Serif, Lyon-Text, Georgia, ui-serif, serif, 'Twemoji', 'Noto Color Emoji', 'Noto Serif CJK SC'; }
    .pdf:lang(zh-TW) .serif { font-family: PT Serif, Lyon-Text, Georgia, ui-serif, serif, 'Twemoji', 'Noto Color Emoji', 'Noto Serif CJK TC'; }
    .pdf:lang(ko-KR) .serif { font-family: PT Serif, Lyon-Text, Georgia, ui-serif, serif, 'Twemoji', 'Noto Color Emoji', 'Noto Serif CJK KR'; }
    .pdf .mono { font-family: PT Mono, iawriter-mono, Nitti, Menlo, Courier, monospace, 'Twemoji', 'Noto Color Emoji', 'Noto Sans Mono CJK JP'; }
    .pdf:lang(zh-CN) .mono { font-family: PT Mono, iawriter-mono, Nitti, Menlo, Courier, monospace, 'Twemoji', 'Noto Color Emoji', 'Noto Sans Mono CJK SC'; }
    .pdf:lang(zh-TW) .mono { font-family: PT Mono, iawriter-mono, Nitti, Menlo, Courier, monospace, 'Twemoji', 'Noto Color Emoji', 'Noto Sans Mono CJK TC'; }
    .pdf:lang(ko-KR) .mono { font-family: PT Mono, iawriter-mono, Nitti, Menlo, Courier, monospace, 'Twemoji', 'Noto Color Emoji', 'Noto Sans Mono CJK KR'; }
    .highlight-default {
        color: rgba(55, 53, 47, 1);
    }
    .highlight-gray {
        color: rgba(120, 119, 116, 1);
        fill: rgba(120, 119, 116, 1);
    }
    .highlight-brown {
        color: rgba(159, 107, 83, 1);
        fill: rgba(159, 107, 83, 1);
    }
    .highlight-orange {
        color: rgba(217, 115, 13, 1);
        fill: rgba(217, 115, 13, 1);
    }
    .highlight-yellow {
        color: rgba(203, 145, 47, 1);
        fill: rgba(203, 145, 47, 1);
    }
    .highlight-teal {
        color: rgba(68, 131, 97, 1);
        fill: rgba(68, 131, 97, 1);
    }
    .highlight-blue {
        color: rgba(51, 126, 169, 1);
        fill: rgba(51, 126, 169, 1);
    }
    .highlight-purple {
        color: rgba(144, 101, 176, 1);
        fill: rgba(144, 101, 176, 1);
    }
    .highlight-pink {
        color: rgba(193, 76, 138, 1);
        fill: rgba(193, 76, 138, 1);
    }
    .highlight-red {
        color: rgba(212, 76, 71, 1);
        fill: rgba(212, 76, 71, 1);
    }
    .highlight-default_background {
        color: rgba(55, 53, 47, 1);
    }
    .highlight-gray_background {
        background: rgba(248, 248, 247, 1);
    }
    .highlight-brown_background {
        background: rgba(244, 238, 238, 1);
    }
    .highlight-orange_background {
        background: rgba(251, 236, 221, 1);
    }
    .highlight-yellow_background {
        background: rgba(251, 243, 219, 1);
    }
    .highlight-teal_background {
        background: rgba(237, 243, 236, 1);
    }
    .highlight-blue_background {
        background: rgba(231, 243, 248, 1);
    }
    .highlight-purple_background {
        background: rgba(248, 243, 252, 1);
    }
    .highlight-pink_background {
        background: rgba(252, 241, 246, 1);
    }
    .highlight-red_background {
        background: rgba(253, 235, 236, 1);
    }
    .block-color-default {
        color: inherit;
        fill: inherit;
    }
    .block-color-gray {
        color: rgba(120, 119, 116, 1);
        fill: rgba(120, 119, 116, 1);
    }
    .block-color-brown {
        color: rgba(159, 107, 83, 1);
        fill: rgba(159, 107, 83, 1);
    }
    .block-color-orange {
        color: rgba(217, 115, 13, 1);
        fill: rgba(217, 115, 13, 1);
    }
    .block-color-yellow {
        color: rgba(203, 145, 47, 1);
        fill: rgba(203, 145, 47, 1);
    }
    .block-color-teal {
        color: rgba(68, 131, 97, 1);
        fill: rgba(68, 131, 97, 1);
    }
    .block-color-blue {
        color: rgba(51, 126, 169, 1);
        fill: rgba(51, 126, 169, 1);
    }
    .block-color-purple {
        color: rgba(144, 101, 176, 1);
        fill: rgba(144, 101, 176, 1);
    }
    .block-color-pink {
        color: rgba(193, 76, 138, 1);
        fill: rgba(193, 76, 138, 1);
    }
    .block-color-red {
        color: rgba(212, 76, 71, 1);
        fill: rgba(212, 76, 71, 1);
    }
    .block-color-default_background {
        color: inherit;
        fill: inherit;
    }
    .block-color-gray_background {
        background: rgba(248, 248, 247, 1);
    }
    .block-color-brown_background {
        background: rgba(244, 238, 238, 1);
    }
    .block-color-orange_background {
        background: rgba(251, 236, 221, 1);
    }
    .block-color-yellow_background {
        background: rgba(251, 243, 219, 1);
    }
    .block-color-teal_background {
        background: rgba(237, 243, 236, 1);
    }
    .block-color-blue_background {
        background: rgba(231, 243, 248, 1);
    }
    .block-color-purple_background {
        background: rgba(248, 243, 252, 1);
    }
    .block-color-pink_background {
        background: rgba(252, 241, 246, 1);
    }
    .block-color-red_background {
        background: rgba(253, 235, 236, 1);
    }
    .select-value-color-uiBlue { background-color: undefined; }
    .select-value-color-pink { background-color: rgba(225, 136, 179, 0.27); }
    .select-value-color-purple { background-color: rgba(168, 129, 197, 0.27); }
    .select-value-color-green { background-color: rgba(123, 183, 129, 0.27); }
    .select-value-color-gray { background-color: rgba(84, 72, 49, 0.15); }
    .select-value-color-transparentGray { background-color: undefined; }
    .select-value-color-translucentGray { background-color: undefined; }
    .select-value-color-orange { background-color: rgba(224, 124, 57, 0.27); }
    .select-value-color-brown { background-color: rgba(210, 162, 141, 0.35); }
    .select-value-color-red { background-color: rgba(244, 171, 159, 0.4); }
    .select-value-color-yellow { background-color: rgba(236, 191, 66, 0.39); }
    .select-value-color-blue { background-color: rgba(93, 165, 206, 0.27); }
    .select-value-color-pageGlass { background-color: undefined; }
    .select-value-color-washGlass { background-color: undefined; }
\u{space}\u{space}\u{space}\u{space}
    .checkbox {
        display: inline-flex;
        vertical-align: text-bottom;
        width: 16;
        height: 16;
        background-size: 16px;
        margin-left: 2px;
        margin-right: 5px;
    }
\u{space}\u{space}\u{space}\u{space}
    .checkbox-on {
        background-image: url("data:image/svg+xml;charset=UTF-8,%3Csvg%20width%3D%2216%22%20height%3D%2216%22%20viewBox%3D%220%200%2016%2016%22%20fill%3D%22none%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%0A%3Crect%20width%3D%2216%22%20height%3D%2216%22%20fill%3D%22%2358A9D7%22%2F%3E%0A%3Cpath%20d%3D%22M6.71429%2012.2852L14%204.9995L12.7143%203.71436L6.71429%209.71378L3.28571%206.2831L2%207.57092L6.71429%2012.2852Z%22%20fill%3D%22white%22%2F%3E%0A%3C%2Fsvg%3E");
    }
\u{space}\u{space}\u{space}\u{space}
    .checkbox-off {
        background-image: url("data:image/svg+xml;charset=UTF-8,%3Csvg%20width%3D%2216%22%20height%3D%2216%22%20viewBox%3D%220%200%2016%2016%22%20fill%3D%22none%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%0A%3Crect%20x%3D%220.75%22%20y%3D%220.75%22%20width%3D%2214.5%22%20height%3D%2214.5%22%20fill%3D%22white%22%20stroke%3D%22%2336352F%22%20stroke-width%3D%221.5%22%2F%3E%0A%3C%2Fsvg%3E");
    }
\u{space}\u{space}\u{space}\u{space}\u{space}\u{space}\u{space}\u{space}
    </style></head><body><article id="1d1604ef-9b4b-8020-9a43-e475a43661a0" class="page sans"><header><h1 class="page-title">Smart Calendar Reminder: Your Intelligent Schedule Assistant</h1><p class="page-description"></p></header><div class="page-body"><figure class="block-color-blue_background callout" style="white-space:pre-wrap;display:flex" id="1d1604ef-9b4b-80b2-927b-ddb2d55d6032"><div style="width:100%">👋 Welcome to Smart Calendar Reminder! This welcome message appears only during your first use.</div></figure><h1 id="1d1604ef-9b4b-80c5-a289-d2aedc69317d" class="block-color-yellow_background">Transform Your Calendar Experience</h1><p id="1d1604ef-9b4b-80f7-ac48-d98bc2a805e6" class="">While iOS Calendar is fantastic for basic scheduling, we all know those built-in reminders can be easy to miss. Adding manual alarms, calculating travel times, and customizing notifications with event details can become tedious and time-consuming. That&#x27;s where Smart Calendar Reminder comes in - your automated solution for intelligent schedule management!</p><h2 id="1d1604ef-9b4b-800f-9752-cb68ca87b1cf" class="">Powerful Features at Your Fingertips</h2><ul id="0ecdba52-af59-410f-9efb-321f8e2d4ba6" class="bulleted-list"><li style="list-style-type:disc">Seamless Calendar Integration - No manual input needed</li></ul><ul id="1d1604ef-9b4b-80b9-8d0d-fe7b3c28115b" class="bulleted-list"><li style="list-style-type:disc">Intelligent Travel Time Calculations powered by Apple Maps</li></ul><ul id="4f6b7aca-7c92-458d-9996-e8f891a3775d" class="bulleted-list"><li style="list-style-type:disc">Spoken Event Details - Hear your schedule clearly</li></ul><ul id="1d1604ef-9b4b-80f5-9fe9-ee50fd3e7795" class="bulleted-list"><li style="list-style-type:disc">Smart Preparation Time Management</li></ul><h2 id="fa2195d7-f08f-4058-a00a-18e2b562b5b2" class="">Smart Location Intelligence</h2><p id="1d1604ef-9b4b-80d3-9799-dd97b27a3773" class="">Our advanced travel time calculation system uses three methods to determine your departure location, in order of priority:</p><ol type="1" id="667c5bbb-f94c-480b-bccd-c84948a3c40f" class="numbered-list" start="1"><li>Custom Departure Address - Add this JSON format in your calendar event notes for specific departure points:<script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/prism.min.js" integrity="sha512-7Z9J3l1+EYfeaPKcGXu3MS/7T+w19WtKQY/n+xzmw4hZhJ9tyYmcUS+4QqAlzhicE5LAfMQSF3iFTK9bQdTxXg==" crossorigin="anonymous" referrerPolicy="no-referrer"></script><link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism.min.css" integrity="sha512-tN7Ec6zAFaVSG3TpNAKtk4DOHNpSwKHxxrsiw4GHKESGPs5njn/0sMCUMl2svV4wo4BK/rCP7juYz+zx+l6oeQ==" crossorigin="anonymous" referrerPolicy="no-referrer"/><pre id="1d1604ef-9b4b-80d1-9d4b-dfb42d06c7b8" class="code"><code class="language-JSON">{
        &quot;Street&quot;: &quot;your departure street&quot;,
        &quot;City&quot;: &quot;your departure city&quot;,
        &quot;State&quot;: &quot;your departure state&quot;,
        &quot;Country&quot;: &quot;your departure country&quot;,
        &quot;Postcode&quot;: &quot;your departure postcode&quot;
    }</code></pre></li></ol><ol type="1" id="1d1604ef-9b4b-80c6-b468-d002dd94b75d" class="numbered-list" start="2"><li>Home Address - Uses your pre-configured home address - perfect for regular schedules</li></ol><ol type="1" id="aba3d861-a84a-48f6-a163-ac441f18b1b3" class="numbered-list" start="3"><li>Current Location - Automatically uses your current position as a fallback</li></ol><figure class="block-color-yellow_background callout" style="white-space:pre-wrap;display:flex" id="1d1604ef-9b4b-80ed-a48d-f0cad158ed60"><div style="width:100%">Smart Travel Planning: The system automatically calculates additional travel time if you&#x27;re not at your departure location!</div></figure><h2 id="efb3fa4e-d05f-4bd3-bd94-b9b991e29ce4" class="">Voice Announcements</h2><ul id="1d1604ef-9b4b-8076-9c50-fcefa4c4903c" class="bulleted-list"><li style="list-style-type:disc">Hourly Schedule Updates: Hear upcoming events at the start of each hour</li></ul><ul id="a0eb2cf6-1637-4d13-94c8-356fd19cd78a" class="bulleted-list"><li style="list-style-type:disc">Smart Reminders: Get spoken alerts at perfectly timed intervals</li></ul><h2 id="1d1604ef-9b4b-80dd-9df1-d8fae003cae6" class="">Intelligent Automation System</h2><p id="15ce45ed-b4fa-4b81-bbd0-2fa585b5c7ce" class="">Our sophisticated automation system ensures you never miss an important event:</p><ul id="1d1604ef-9b4b-80c5-a181-f10518e7e73d" class="bulleted-list"><li style="list-style-type:disc">Daily Planning: 12:00 AM check of your next 24 hours</li></ul><ul id="f54bf941-4703-4cc3-9f61-408f1eed72ee" class="bulleted-list"><li style="list-style-type:disc">Real-time Updates: Hourly recalculation of travel times</li></ul><ul id="1d1604ef-9b4b-800d-b8f8-e85831f4b0ee" class="bulleted-list"><li style="list-style-type:disc">Dynamic Adjustments: Automatic alarm optimization</li></ul><figure class="block-color-gray_background callout" style="white-space:pre-wrap;display:flex" id="1d1604ef-9b4b-8075-9657-ed6135b16d17"><div style="width:100%">Example: For a 10:30 AM meeting with 3 hours total travel time, the system ensures your 7:30 AM alarm is set and continuously optimized based on real-time conditions.</div></figure><h1 id="1d1604ef-9b4b-803a-8fbf-c89822dbca0a" class="block-color-blue">Setup Guide</h1><p id="1d1604ef-9b4b-80a7-ae75-c35724896e17" class="">Let&#x27;s get your Smart Calendar Reminder configured with four essential automations:</p><h2 id="1d1604ef-9b4b-8072-ab56-d0757b2435ef" class="block-color-gray_background">Automation 1: Daily 12:00 AM Check</h2><p id="1d1604ef-9b4b-80c9-9b4a-ee2712524a0d" class="block-color-blue">Step 1. Open Shortcuts and tap [Automation], then tap [+] at the top right corner</p><figure id="1d1604ef-9b4b-8043-b390-ff859889379f" class="image"><a href="gZWfH4Kler-left.png"><img style="width:709.984375px" src="https://i.imgur.com/za6VDMA.jpeg"/></a></figure><p id="1d1604ef-9b4b-804a-9cb1-f487991237c6" class="">Step 2. Tap [Time of Day]</p><figure id="1d1604ef-9b4b-8085-99bb-e3d90115d5dd" class="image"><a href="NDyjdrLrYZ-left.png"><img style="width:709.984375px" src="https://i.imgur.com/z7aJ0OB.jpeg"/></a></figure><p id="1d1604ef-9b4b-806d-a7eb-f652a480cbc6" class="">Step 3. Follow the sequence shown in the image</p><figure id="1d1604ef-9b4b-80cd-9ca5-fc076df31898" class="image"><a href="6KJEFinDm6-left.png"><img style="width:709.984375px" src="https://i.imgur.com/u6C2AR9.jpeg"/></a></figure><p id="1d1604ef-9b4b-8050-b817-f0e2368f43ca" class="block-color-gray_background">Step 4. Tap [New Blank Automation]</p><figure id="1d1604ef-9b4b-8028-b872-eed1a3f6701a" class="image"><a href="XblW6TFHek-left.png"><img style="width:709.984375px" src="https://i.imgur.com/nrTr7Np.jpeg"/></a></figure><p id="b8f8c3cf-7fdc-4a99-b2ba-60e18fef34c7" class="">Step 5. Search for the [Number] action</p><figure id="1d1604ef-9b4b-80d0-ad58-f7a1dc1d1c48" class="image"><a href="4XgUTG3h3E-left.png"><img style="width:709.984375px" src="https://i.imgur.com/F6jogMJ.jpeg"/></a></figure><p id="1d1604ef-9b4b-804e-9fe3-c5b6fc8701fa" class="">Step 6. Input number 1</p><figure id="1d1604ef-9b4b-8056-be0b-c4cfaebae0f7" class="image"><a href="n0XhfXtA03-left.png"><img style="width:709.984375px" src="https://i.imgur.com/HUMvkry.jpeg"/></a></figure><p id="1d1604ef-9b4b-8004-b82f-c5b6250d69c0" class="">Step 7. Search for [Run Shortcut] action</p><figure id="1d1604ef-9b4b-801d-a2d0-e444c55bbdb1" class="image"><a href="BUB7V9ITn8-left.png"><img style="width:709.984375px" src="https://i.imgur.com/IbHA9Jf.jpeg"/></a></figure><p id="1d1604ef-9b4b-8031-a595-d6b268bb5bfc" class="">Step 8. Search and select [Smart Calendar Reminder] in [Run Shortcut] action’s shortcut field.</p><figure id="1d1604ef-9b4b-804c-8be0-d6060e3b5a73" class="image"><a href="b50xsbc2QT-left.png"><img style="width:709.984375px" src="https://i.imgur.com/41WbF2A.png"/></a></figure><p id="1d1604ef-9b4b-805d-96d8-c871e0493bdb" class="block-color-default_background">Step 9. Tap [Done] in the top right corner to complete setup</p><figure id="1d1604ef-9b4b-8024-864a-d9002a94e719" class="image"><a href="LjO11dxjS3-left.png"><img style="width:709.984375px" src="https://i.imgur.com/tmrW6r8.jpeg"/></a></figure><h2 id="1d1604ef-9b4b-8045-9247-e3afd799f547" class="">Automation 2: Hourly Check</h2><p id="1d1604ef-9b4b-809c-900e-e425d52b7a0a" class="">Follow the same steps as Automation 1, with these modifications:</p><ul id="1d1604ef-9b4b-80a8-9819-cfd9961eb078" class="bulleted-list"><li style="list-style-type:disc">In step 3, select all <em><strong><span style="border-bottom:0.05em solid">24 hourly times</span></strong></em></li></ul><ul id="1d1604ef-9b4b-80b3-b766-ed9c851957a5" class="bulleted-list"><li style="list-style-type:disc">In step 6, input number <strong>2</strong> instead of 1</li></ul><h2 id="1d1604ef-9b4b-80ad-a1ea-e247f84f2063" class="">Automation 3: Alarm Trigger</h2><p id="1d1604ef-9b4b-8044-9254-f9d3912d6d6c" class="">Follow the same steps as Automation 1, with these changes:</p><ul id="1d1604ef-9b4b-802e-98b3-c8202e4f8765" class="bulleted-list"><li style="list-style-type:disc">In step 2, tap [<strong>Alarm</strong>] instead of [Time of Day]</li></ul><ul id="1d1604ef-9b4b-80a5-9ccc-d6a2906a3429" class="bulleted-list"><li style="list-style-type:disc">Configure settings as shown:</li></ul><figure id="1d1604ef-9b4b-8014-b883-f88df7a348e1" class="image"><a href="fIF3p3ttC0-left.png"><img style="width:709.984375px" src="https://i.imgur.com/MTyZ3km.png"/></a></figure><ul id="1d1604ef-9b4b-80dc-a6f8-edc73fc17118" class="bulleted-list"><li style="list-style-type:disc">In step 6, input number <strong>3</strong> instead of 1</li></ul><h2 id="1d1604ef-9b4b-8025-9db9-e83367a64cdb" class="">Automation 4: Alarm Stop</h2><p id="1d1604ef-9b4b-805f-afe2-f2de398e695a" class="">Follow the same steps as Automation 1, with these changes:</p><ul id="10aa2fe6-80f0-4850-93c0-4fe14b146190" class="bulleted-list"><li style="list-style-type:disc">In step 2, tap [<strong>Alarm</strong>] instead of [Time of Day]</li></ul><ul id="1d1604ef-9b4b-80aa-baad-e6dd7acf4ad9" class="bulleted-list"><li style="list-style-type:disc">Configure settings as shown:</li></ul><figure id="1d1604ef-9b4b-8068-a490-e601bfafcfe7" class="image"><a href="E24uC2vV2j-left.png"><img style="width:709.984375px" src="https://i.imgur.com/2LbJK9D.png"/></a></figure><ul id="1d1604ef-9b4b-804f-bcba-f64ec9bd67f1" class="bulleted-list"><li style="list-style-type:disc">In step 6, input number <strong>4</strong> instead of 1</li></ul><figure class="block-color-teal_background callout" style="white-space:pre-wrap;display:flex" id="1d1604ef-9b4b-8031-8b44-ddb00fab6dee"><div style="width:100%">🎉 Congratulations! Once you&#x27;ve completed these automations, your Smart Calendar Reminder is ready to revolutionize your schedule management!</div></figure></div></article><span class="sans" style="font-size:14px;padding-top:2em"></span></body></html>

〔28〕 Set Name of 〔27 Text〕 to Welcome.html　» 29 30

〔29〕 Show Web View at 〔28 Renamed Item〕

〔30〕 Make PDF from 〔28 Renamed Item〕　»

〔31〕 Save File 〔30 PDF〕
• AskWhereToSave: false
• SaveFileOverwrite: true
• FileDestinationPath: 〔3 Version Dictionary .Name〕/Welcome.pdf

〔32〕 End If　▵26

〔33〕 Dictionary 　➔ menus　»
{  "mainMenu": {
      "Setup": {
         "title": "Setup",
         "sub": "Set Personal Preferences",
         "icon": "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"
      },
      "Change": {
         "title": "Change",
         "sub": "Change Personal Preferences",
         "icon": "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"
      },
      "View": {
         "title": "View",
         "sub": "View Personal Preferences or Automations Setup Inctructions",
         "icon": "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"
      }
   }
}

〔34〕 Get Dictionary from 〔33 menus.mainMenu〕　»

〔35〕 Repeat with Each in 〔34 Dictionary〕

〔36〕 Get Dictionary All Values in 〔Repeat Item as Dictionary〕 　➔ Options　»
• DictionaryKey: 〔Repeat Item as Dictionary’s Keys〕.title

〔37〕 Repeat[2] with Each in 〔36 Options as Dictionary〕

〔38〕 Text
BEGIN:VCARD
VERSION:3.0
N;CHARSET=utf-8:〔Repeat Item 2 as Dictionary.title〕;
ORG:〔Repeat Item 2 as Dictionary.sub〕;
PHOTO;ENCODING=b:〔Repeat Item 2 as Dictionary.icon〕;
END:VCARD

〔39〕 End Repeat[2] with Each

〔40〕 End Repeat with Each　»

〔41〕 Text　»
〔40 Repeat Results〕

〔42〕 Set Name of 〔41 Text〕 to mainMenu.vcf　»

〔43〕 Get Contacts from 〔42 Renamed Item〕　»

〔44〕 Choose from List 〔43 Contacts〕　» 45 78 83
• ChooseFromListActionPrompt: ☀️Welcome to Smart Calendar Reminder☀️

〔45〕 If 〔44 Selected Item’s Name〕 is Setup

〔46〕 Get File at Path 〔3 Version Dictionary .Name〕/aboutme.txt from Folder　»
• FileErrorIfNotFound: false

〔47〕 If 〔46 File’s File Size〕 does not have any value

〔48〕 Comment
All the information is stored in iCloud. The shortcut isn’t collecting anything.

〔49〕 Text　»
Choose Travel Time Calculation Method

1️⃣ Notes 🗓️ / Current 📍\u000D
Uses the address in the Calendar event Notes if available (routing via Notes if you're not already there), otherwise calculates directly from your current location to the event.\u000D
\u000D
2️⃣ Notes 🗓️ / Home 🏡\u000D
Uses the Notes address if available (same as 1️⃣), but if Notes are empty, routes via your home address if you're not already there, or directly from home if you are.\u000D
\u000D

〔50〕 Choose from Menu
• MenuPrompt: 〔49 Text〕
• MenuItems: [1️⃣ Notes 🗓️ / Current 📍,
2️⃣ Notes 🗓️ / Home 🏡]

〔51〕 Menu Item 1️⃣ Notes 🗓️ / Current 📍

〔52〕 Dictionary　»
{  "state": "\"\"",
   "street": "\"\"",
   "city": "\"\"",
   "country": "\"\"",
   "postcode": "\"\""
}

〔53〕 Set Variable HomeAddress to 〔52 Dictionary〕

〔54〕 Menu Item 2️⃣ Notes 🗓️ / Home 🏡

〔55〕 Text　»
Please provide your home address for accurate travel time calculations via Apple Maps.

〔56〕 Text　»
<!DOCTYPE html>
<html>
<head>
    <title>Address Collector</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        /* Modern CSS styling */
        body {
            font-family: 'Segoe UI', sans-serif;
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            padding: 20px;
            min-height: 100vh;
        }

        .form-container {
            max-width: 500px;
            margin: 20px auto;
            background: white;
            padding: 25px;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        }

        h2 {
            color: #2c3e50;
            text-align: center;
            margin-bottom: 25px;
        }

        .form-group {
            margin-bottom: 20px;
        }

        label {
            display: block;
            margin-bottom: 8px;
            color: #34495e;
            font-weight: 500;
        }

        input {
            width: 100%;
            padding: 12px;
            margin: 0; /* Equal left/right margins */
            border: 2px solid #e0e0e0;
            border-radius: 8px;
            font-size: 16px;
            transition: border-color 0.3s ease;
            box-sizing: border-box; /* Ensures padding doesn't affect width */
        }

        input:focus {
            outline: none;
            border-color: #3498db;
            box-shadow: 0 0 8px rgba(52, 152, 219, 0.2);
        }

        button {
            background: #3498db;
            color: white;
            padding: 15px 30px;
            border: none;
            border-radius: 8px;
            font-size: 16px;
            cursor: pointer;
            width: 100%;
            transition: background 0.3s ease;
        }

        button:hover {
            background: #2980b9;
        }

        /* New success message styling */
        .success-message {
            display: none;
            background: #e8f5e9;
            color: #2e7d32;
            padding: 20px;
            border-radius: 8px;
            margin-top: 20px;
            text-align: center;
        }

        .success-message.show {
            display: block;
        }
    </style>
</head>
<body>
    <div class="form-container">
        <h2>〔55 Text〕</h2>
        <form id="addressForm">
            <div class="form-group">
                <label>Street Address</label>
                <input type="text" id="street" placeholder="" required>
            </div>

            <div class="form-group">
                <label>City</label>
                <input type="text" id="city" placeholder="" required>
            </div>

            <div class="form-group">
                <label>State/Province</label>
                <input type="text" id="state" placeholder="" required>
            </div>

            <div class="form-group">
                <label>Country/Region</label>
                <input type="text" id="country" placeholder="" required>
            </div>

            <div class="form-group">
                <label>Postal Code</label>
                <input type="text" id="postcode" placeholder="" required>
            </div>

            <button type="button" onclick="sendToShortcut()">Submit Address</button>
        </form>

        <!-- Success message container -->
        <div class="success-message" id="successMessage">
            <p>Data collected successfully!</p>
        </div>
    </div>

<script>
function sendToShortcut() {
  const addressData = {
    street: document.getElementById('street').value,
    city: document.getElementById('city').value,
    state: document.getElementById('state').value,
    country: document.getElementById('country').value,
    postcode: document.getElementById('postcode').value
  };
\u{space}\u{space}
  // Copy data to clipboard
  navigator.clipboard.writeText(JSON.stringify(addressData));
\u{space}\u{space}
  // Show success message and hide form
  document.getElementById('addressForm').style.display = 'none';
  document.getElementById('successMessage').classList.add('show');
}
</script>
</body>
</html>

〔57〕 Set Name of 〔56 Text〕 to Address.html　»

〔58〕 Show Web View at 〔57 Renamed Item〕

〔59〕 Get Clipboard　»

〔60〕 Get Dictionary from 〔59 Clipboard〕　»

〔61〕 Set Variable HomeAddress to 〔60 Dictionary〕

〔62〕 End Menu　▵54

〔63〕 List　» 65
[Driving,
Walking,
Transit,
Biking]

〔64〕 Text　»
Select Travel Method (It will apply to all the events)

〔65〕 Choose from List 〔63 List〕 　➔ Travel Method Selected　»
• ChooseFromListActionPrompt: 〔64 Text〕

〔66〕 Set Variable TravelMethod to 〔65 Travel Method Selected〕

〔67〕 Text　»
Besides travel time, how many Extra Minutes Needed (e.g., '15 mins buffer')

〔68〕 Ask for Number Input 　➔ Extra Time Needed　»
• AskActionPrompt: 〔67 Text〕
• AskActionAllowsNegativeNumbers: false
• AskActionAllowsDecimalNumbers: false

〔69〕 Set Variable ExtraTime to 〔68 Extra Time Needed〕

〔70〕 Dictionary　»
{  "HomeAddress": "〔HomeAddress as Dictionary〕",
   "TravelMethod": "〔TravelMethod〕",
   "ExtraTime": "〔ExtraTime〕"
}

〔71〕 Text　»
〔70 Dictionary〕

〔72〕 Save File 〔71 Text〕
• Folder: {  "fileLocation": {
      "crossDeviceItemID": "docs.icloud.com:iCloud.is.workflow.my.workflows/documents/e51c720424ec90d3260ccd6f241343baea15b7f3",
      "fileProviderDomainID": "com.apple.CloudDocs.iCloudDriveFileProvider/46CA22EA-49CD-4A1D-9512-F48B36AA64B5",
      "appContainerBundleIdentifier": "com.apple.shortcuts",
      "relativeSubpath": "",
      "WFFileLocationType": "Shortcuts"
   },
   "filename": "Documents",
   "displayName": "Shortcuts"
}
• AskWhereToSave: false
• SaveFileOverwrite: true
• FileDestinationPath: 〔3 Version Dictionary .Name〕/aboutme.txt

〔73〕 Otherwise　▵47

〔74〕 Show Alert You have set up. If you want to modify, please tap [Change] instead.
• AlertActionCancelButtonShown: false

〔75〕 Run Shortcut Smart Calendar Reminder
• Workflow: {  "workflowIdentifier": "5A2BC55E-C195-4C6C-93E9-725F782CDD1B",
   "isSelf": true,
   "workflowName": "Smart Calendar Reminder"
}

〔76〕 End If

〔77〕 End If　▵45

〔78〕 If 〔44 Selected Item’s Name〕 is Change

〔79〕 Delete Files {  "fileLocation": {
      "crossDeviceItemID": "docs.icloud.com:iCloud.is.workflow.my.workflows/9F38EF56-AD52-45E7-8B63-200CBFF0E713/a708662a11276f4b1fa48be3c50990fd13a4ccdf",
      "fileProviderDomainID": "com.apple.CloudDocs.iCloudDriveFileProvider/F1A50FD9-D64E-426C-8EB2-9C6216034396",
      "appContainerBundleIdentifier": "com.apple.systemactions",
      "relativeSubpath": "Smart Calendar Reminder/aboutme.txt",
      "WFFileLocationType": "Shortcuts"
   },
   "filename": "aboutme.txt",
   "displayName": "aboutme"
}
• DeleteImmediatelyDelete: true

〔80〕 Show Alert Your preferences are deleted. Please choose [Setup] from main menu to set up again.
• AlertActionCancelButtonShown: false

〔81〕 Run Shortcut Smart Calendar Reminder
• Workflow: {  "workflowIdentifier": "5A2BC55E-C195-4C6C-93E9-725F782CDD1B",
   "isSelf": true,
   "workflowName": "Smart Calendar Reminder"
}

〔82〕 End If

〔83〕 If 〔44 Selected Item’s Name〕 is View

〔84〕 Choose from Menu
• MenuItems: [Automations Setup Instructions,
Personal Preferences]

〔85〕 Menu Item Automations Setup Instructions

〔86〕 Open File {  "fileLocation": {
      "crossDeviceItemID": "docs.icloud.com:iCloud.is.workflow.my.workflows/E4DA358A-5903-4CC2-BBC8-FD498ED6EDB3/d459a12be98fb7e83aed794c6d0dcf774ef5d814",
      "fileProviderDomainID": "com.apple.CloudDocs.iCloudDriveFileProvider/F1A50FD9-D64E-426C-8EB2-9C6216034396",
      "appContainerBundleIdentifier": "com.apple.systemactions",
      "relativeSubpath": "Smart Calendar Reminder/Welcome.pdf",
      "WFFileLocationType": "Shortcuts"
   },
   "filename": "Welcome.pdf",
   "displayName": "Welcome"
}

〔87〕 Menu Item Personal Preferences

〔88〕 Open File {  "fileLocation": {
      "crossDeviceItemID": "docs.icloud.com:iCloud.is.workflow.my.workflows/81672621-501F-4225-8CDA-11AAF2112D81/06302c85b44ba41f3258ff7d1669b31859a28556",
      "fileProviderDomainID": "com.apple.CloudDocs.iCloudDriveFileProvider/F1A50FD9-D64E-426C-8EB2-9C6216034396",
      "appContainerBundleIdentifier": "com.apple.systemactions",
      "relativeSubpath": "Smart Calendar Reminder/aboutme.txt",
      "WFFileLocationType": "Shortcuts"
   },
   "filename": "aboutme.txt",
   "displayName": "aboutme"
}

〔89〕 End Menu

〔90〕 End If　▵83

〔91〕 Otherwise　▵0

〔92〕 If 〔Shortcut Input as Number〕 is 1

〔93〕 Comment
*Revolutionizing event management by integrating calendar data with intelligent automation:

Voice announcements for upcoming events

Dynamic alarm calculation (travel + prep time)

Calendar-driven scheduling system
Eliminates manual reminders and ensures perfect timing synchronization*

〔94〕 Get File at Path Smart Calendar Reminder/aboutme.txt from Folder　»
• FileErrorIfNotFound: false

〔95〕 Get Dictionary from 〔94 File〕　» 96 99 100

〔96〕 Get Dictionary from 〔95 Dictionary.HomeAddress〕　»

〔97〕 Text　»
〔96 Dictionary.street〕 〔96 Dictionary.city〕 〔96 Dictionary.state〕 〔96 Dictionary.postcode〕 〔96 Dictionary.country〕\u{space}

〔98〕 Set Variable HomeAddress to 〔97 Text〕

〔99〕 Set Variable TravelMethod to 〔95 Dictionary.TravelMethod〕

〔100〕 Get Dictionary Value for ExtraTime in 〔95 Dictionary〕　»

〔101〕 Get Numbers from 〔100 Dictionary Value〕　»

〔102〕 Set Variable ExtraTime to 〔101 Numbers〕

〔103〕 Find Calendar Events All Calendar Events where　» 104 105
• ContentItemSortProperty: Start Date
• ContentItemSortOrder: Oldest First
• ContentItemFilter: • All the following are true
Start Date is in the next 1 days
Is Not All Day
Canceled is {"Bool":false}

〔104〕 If 〔103 Calendar Events〕 has any value

〔105〕 Repeat with Each in 〔103 Calendar Events〕

〔106〕 If 〔Repeat Item’s Location〕 has any value

〔107〕 Get Current Location　» 119 125 211
• Accuracy: Best

〔108〕 Comment
*To specify event-specific departure locations:

1. Create calendar event notes with JSON structure:
{
“Street”: “your departure street”,
“City”: “your departure city”,
“State”: “your departure state”,
“Country”: “your departure country”,
“Postcode”: “your departure postcode”
}
2. System prioritizes these over default locations*

〔109〕 If All are true　〔Repeat Item’s Notes〕 has any value　〔Repeat Item’s Notes〕 begins with {　〔Repeat Item’s Notes〕 ends with }

〔110〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY

〔111〕 Get Dictionary from 〔Repeat Item’s Notes〕 　➔ Notes Address Dictionary　» 112 113 114 115 116

〔112〕 Set Variable Calendar_Notes_Street to 〔111 Notes Address Dictionary.Street〕

〔113〕 Set Variable Calendar_Notes_City to 〔111 Notes Address Dictionary.City〕

〔114〕 Set Variable Calendar_Notes_State to 〔111 Notes Address Dictionary.State〕

〔115〕 Set Variable Calendar_Notes_Region to 〔111 Notes Address Dictionary.Country〕

〔116〕 Set Variable Calendar_Notes_ZIP_Code to 〔111 Notes Address Dictionary.Postcode〕

〔117〕 Text　»
〔Calendar_Notes_Street〕 〔Calendar_Notes_City〕 〔Calendar_Notes_State〕 〔Calendar_Notes_ZIP_Code〕 〔Calendar_Notes_Region〕

〔118〕 Set Variable NotesAddressString to 〔117 Text〕

〔119〕 If All are true　〔107 Current Location’s Street〕 is 〔Calendar_Notes_Street〕　〔107 Current Location’s City〕 is 〔Calendar_Notes_City〕　〔107 Current Location’s State〕 is 〔Calendar_Notes_State〕　〔107 Current Location’s Country〕 is 〔Calendar_Notes_Region〕　〔107 Current Location’s ZIP Code〕 is 〔Calendar_Notes_ZIP_Code〕

〔120〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY -> CALENDAR EVENT ADDRESS IS THE SAME WITH CURRENT LOCATION

〔121〕 Number 0　»

〔122〕 Set Variable CurrentToDeparture to 〔121 Number〕

〔123〕 Otherwise

〔124〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY -> CALENDAR EVENT ADDRESS IS NOT THE SAME WITH CURRENT LOCATION

〔125〕 Get 〔TravelMethod〕 Time　»
• GetDirectionsCustomLocation: 〔107 Current Location〕
• Destination: 〔NotesAddressString〕

〔126〕 Set Variable TravelTimeString to 〔125 Travel Time〕

〔127〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔128〕 Set Variable MatchString to 〔127 Matches〕

〔129〕 Count Items in 〔MatchString〕　»

〔130〕 If 〔129 Count〕 is 1

〔131〕 Get First Item from List 〔MatchString〕　»

〔132〕 Set Variable TravelDays to 〔131 Item from List〕

〔133〕 Otherwise

〔134〕 Number 0　»

〔135〕 Set Variable TravelDays to 〔134 Number〕

〔136〕 End If

〔137〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔138〕 Set Variable MatchString to 〔137 Matches〕

〔139〕 Count Items in 〔MatchString〕　»

〔140〕 If 〔139 Count〕 is 1

〔141〕 Get First Item from List 〔MatchString〕　»

〔142〕 Set Variable TravelHours to 〔141 Item from List〕

〔143〕 Otherwise

〔144〕 Number 0　»

〔145〕 Set Variable TravelHours to 〔144 Number〕

〔146〕 End If

〔147〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔148〕 Set Variable MatchString to 〔147 Matches〕

〔149〕 Count Items in 〔MatchString〕　»

〔150〕 If 〔149 Count〕 is 1

〔151〕 Get First Item from List 〔MatchString〕　»

〔152〕 Set Variable TravelMinutes to 〔151 Item from List〕

〔153〕 Otherwise

〔154〕 Number 0　»

〔155〕 Set Variable TravelMinutes to 〔154 Number〕

〔156〕 End If

〔157〕 Calculate 〔TravelDays〕 × 1440　» 159

〔158〕 Calculate 〔TravelHours〕 × 60　»

〔159〕 Calculate 〔158 Calculation Result〕 + 〔157 Calculation Result〕　»

〔160〕 Calculate 〔159 Calculation Result〕 + 〔TravelMinutes〕　»

〔161〕 Set Variable CurrentToDeparture to 〔160 Calculation Result〕

〔162〕 End If　▵123

〔163〕 Get 〔TravelMethod〕 Time 　➔ DepartureToDestination　»
• GetDirectionsCustomLocation: 〔NotesAddressString〕
• Destination: 〔Repeat Item’s Location〕

〔164〕 Set Variable TravelTimeString to 〔163 DepartureToDestination〕

〔165〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔166〕 Set Variable MatchString to 〔165 Matches〕

〔167〕 Count Items in 〔MatchString〕　»

〔168〕 If 〔167 Count〕 is 1

〔169〕 Get First Item from List 〔MatchString〕　»

〔170〕 Set Variable TravelDays to 〔169 Item from List〕

〔171〕 Otherwise

〔172〕 Number 0　»

〔173〕 Set Variable TravelDays to 〔172 Number〕

〔174〕 End If

〔175〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔176〕 Set Variable MatchString to 〔175 Matches〕

〔177〕 Count Items in 〔MatchString〕　»

〔178〕 If 〔177 Count〕 is 1

〔179〕 Get First Item from List 〔MatchString〕　»

〔180〕 Set Variable TravelHours to 〔179 Item from List〕

〔181〕 Otherwise

〔182〕 Number 0　»

〔183〕 Set Variable TravelHours to 〔182 Number〕

〔184〕 End If

〔185〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔186〕 Set Variable MatchString to 〔185 Matches〕

〔187〕 Count Items in 〔MatchString〕　»

〔188〕 If 〔187 Count〕 is 1

〔189〕 Get First Item from List 〔MatchString〕　»

〔190〕 Set Variable TravelMinutes to 〔189 Item from List〕

〔191〕 Otherwise

〔192〕 Number 0　»

〔193〕 Set Variable TravelMinutes to 〔192 Number〕

〔194〕 End If

〔195〕 Calculate 〔TravelDays〕 × 1440　» 197

〔196〕 Calculate 〔TravelHours〕 × 60　»

〔197〕 Calculate 〔196 Calculation Result〕 + 〔195 Calculation Result〕　»

〔198〕 Calculate 〔197 Calculation Result〕 + 〔TravelMinutes〕　»

〔199〕 Calculate 〔198 Calculation Result〕 + 〔CurrentToDeparture〕　»

〔200〕 Set Variable TravelTime to 〔199 Calculation Result〕

〔201〕 Otherwise　▵109

〔202〕 Comment
CALENDER EVENT NOTES IS BLANK

〔203〕 Get Dictionary from 〔HomeAddress〕 　➔ Home Address Dictionary　» 204 205 206 207 208

〔204〕 Get Dictionary Value for street in 〔203 Home Address Dictionary〕 　➔ home_Street　» 209 211

〔205〕 Get Dictionary Value for city in 〔203 Home Address Dictionary〕 　➔ home_City　» 209 211

〔206〕 Get Dictionary Value for state in 〔203 Home Address Dictionary〕 　➔ home_State　» 209 211

〔207〕 Get Dictionary Value for country in 〔203 Home Address Dictionary〕 　➔ home_Country　» 209 211

〔208〕 Get Dictionary Value for postcode in 〔203 Home Address Dictionary〕 　➔ home_Postcode　» 209 211

〔209〕 If All are true　〔204 home_Street〕 has any value　〔205 home_City〕 has any value　〔206 home_State〕 has any value　〔207 home_Country〕 has any value　〔208 home_Postcode〕 has any value

〔210〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED

〔211〕 If All are true　〔107 Current Location’s Street〕 is 〔204 home_Street〕　〔107 Current Location’s City〕 is 〔205 home_City〕　〔107 Current Location’s State〕 is 〔206 home_State〕　〔107 Current Location’s Country〕 is 〔207 home_Country〕　〔107 Current Location’s ZIP Code〕 is 〔208 home_Postcode〕

〔212〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED -> HOME ADDRESS IS THE SAME WITH CURRENT LOCATION

〔213〕 Number 0　»

〔214〕 Set Variable CurrentToDeparture to 〔213 Number〕

〔215〕 Otherwise

〔216〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED -> HOME ADDRESS IS NOT THE SAME WITH CURRENT LOCATION

〔217〕 Get 〔TravelMethod〕 Time　»
• Destination: 〔HomeAddress〕

〔218〕 Set Variable TravelTimeString to 〔217 Travel Time〕

〔219〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔220〕 Set Variable MatchString to 〔219 Matches〕

〔221〕 Count Items in 〔MatchString〕　»

〔222〕 If 〔221 Count〕 is 1

〔223〕 Get First Item from List 〔MatchString〕　»

〔224〕 Set Variable TravelDays to 〔223 Item from List〕

〔225〕 Otherwise

〔226〕 Number 0　»

〔227〕 Set Variable TravelDays to 〔226 Number〕

〔228〕 End If

〔229〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔230〕 Set Variable MatchString to 〔229 Matches〕

〔231〕 Count Items in 〔MatchString〕　»

〔232〕 If 〔231 Count〕 is 1

〔233〕 Get First Item from List 〔MatchString〕　»

〔234〕 Set Variable TravelHours to 〔233 Item from List〕

〔235〕 Otherwise

〔236〕 Number 0　»

〔237〕 Set Variable TravelHours to 〔236 Number〕

〔238〕 End If

〔239〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔240〕 Set Variable MatchString to 〔239 Matches〕

〔241〕 Count Items in 〔MatchString〕　»

〔242〕 If 〔241 Count〕 is 1

〔243〕 Get First Item from List 〔MatchString〕　»

〔244〕 Set Variable TravelMinutes to 〔243 Item from List〕

〔245〕 Otherwise

〔246〕 Number 0　»

〔247〕 Set Variable TravelMinutes to 〔246 Number〕

〔248〕 End If

〔249〕 Calculate 〔TravelDays〕 × 1440　» 251

〔250〕 Calculate 〔TravelHours〕 × 60　»

〔251〕 Calculate 〔250 Calculation Result〕 + 〔249 Calculation Result〕　»

〔252〕 Calculate 〔251 Calculation Result〕 + 〔TravelMinutes〕　»

〔253〕 Set Variable CurrentToDeparture to 〔252 Calculation Result〕

〔254〕 End If　▵215

〔255〕 Get 〔TravelMethod〕 Time 　➔ DepartureToDestination　»
• GetDirectionsCustomLocation: 〔HomeAddress〕
• Destination: 〔Repeat Item’s Location〕

〔256〕 Set Variable TravelTimeString to 〔255 DepartureToDestination〕

〔257〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔258〕 Set Variable MatchString to 〔257 Matches〕

〔259〕 Count Items in 〔MatchString〕　»

〔260〕 If 〔259 Count〕 is 1

〔261〕 Get First Item from List 〔MatchString〕　»

〔262〕 Set Variable TravelDays to 〔261 Item from List〕

〔263〕 Otherwise

〔264〕 Number 0　»

〔265〕 Set Variable TravelDays to 〔264 Number〕

〔266〕 End If

〔267〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔268〕 Set Variable MatchString to 〔267 Matches〕

〔269〕 Count Items in 〔MatchString〕　»

〔270〕 If 〔269 Count〕 is 1

〔271〕 Get First Item from List 〔MatchString〕　»

〔272〕 Set Variable TravelHours to 〔271 Item from List〕

〔273〕 Otherwise

〔274〕 Number 0　»

〔275〕 Set Variable TravelHours to 〔274 Number〕

〔276〕 End If

〔277〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔278〕 Set Variable MatchString to 〔277 Matches〕

〔279〕 Count Items in 〔MatchString〕　»

〔280〕 If 〔279 Count〕 is 1

〔281〕 Get First Item from List 〔MatchString〕　»

〔282〕 Set Variable TravelMinutes to 〔281 Item from List〕

〔283〕 Otherwise

〔284〕 Number 0　»

〔285〕 Set Variable TravelMinutes to 〔284 Number〕

〔286〕 End If

〔287〕 Calculate 〔TravelDays〕 × 1440　» 289

〔288〕 Calculate 〔TravelHours〕 × 60　»

〔289〕 Calculate 〔288 Calculation Result〕 + 〔287 Calculation Result〕　»

〔290〕 Calculate 〔289 Calculation Result〕 + 〔TravelMinutes〕　»

〔291〕 Calculate 〔290 Calculation Result〕 + 〔CurrentToDeparture〕　»

〔292〕 Set Variable TravelTime to 〔291 Calculation Result〕

〔293〕 Otherwise　▵209

〔294〕 Text
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS NOT MAINTAINED

〔295〕 Get 〔TravelMethod〕 Time　»
• Destination: 〔Repeat Item’s Location〕

〔296〕 Set Variable TravelTimeString to 〔295 Travel Time〕

〔297〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔298〕 Set Variable MatchString to 〔297 Matches〕

〔299〕 Count Items in 〔MatchString〕　»

〔300〕 If 〔299 Count〕 is 1

〔301〕 Get First Item from List 〔MatchString〕　»

〔302〕 Set Variable TravelDays to 〔301 Item from List〕

〔303〕 Otherwise

〔304〕 Number 0　»

〔305〕 Set Variable TravelDays to 〔304 Number〕

〔306〕 End If

〔307〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔308〕 Set Variable MatchString to 〔307 Matches〕

〔309〕 Count Items in 〔MatchString〕　»

〔310〕 If 〔309 Count〕 is 1

〔311〕 Get First Item from List 〔MatchString〕　»

〔312〕 Set Variable TravelHours to 〔311 Item from List〕

〔313〕 Otherwise

〔314〕 Number 0　»

〔315〕 Set Variable TravelHours to 〔314 Number〕

〔316〕 End If

〔317〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔318〕 Set Variable MatchString to 〔317 Matches〕

〔319〕 Count Items in 〔MatchString〕　»

〔320〕 If 〔319 Count〕 is 1

〔321〕 Get First Item from List 〔MatchString〕　»

〔322〕 Set Variable TravelMinutes to 〔321 Item from List〕

〔323〕 Otherwise

〔324〕 Number 0　»

〔325〕 Set Variable TravelMinutes to 〔324 Number〕

〔326〕 End If

〔327〕 Calculate 〔TravelDays〕 × 1440　» 329

〔328〕 Calculate 〔TravelHours〕 × 60　»

〔329〕 Calculate 〔328 Calculation Result〕 + 〔327 Calculation Result〕　»

〔330〕 Calculate 〔329 Calculation Result〕 + 〔TravelMinutes〕　»

〔331〕 Set Variable TravelTime to 〔330 Calculation Result〕

〔332〕 End If　▵293

〔333〕 End If　▵201

〔334〕 Otherwise　▵106

〔335〕 Number 0　»

〔336〕 Set Variable TravelTime to 〔335 Number〕

〔337〕 End If

〔338〕 Calculate 〔TravelTime〕 + 〔ExtraTime〕　»

〔339〕 Adjust Subtract Date 〔Repeat Item’s Start Date〕 　➔ Supposed Alarm Time　» 340 343 346 349 356 372 374 375 393 398 401
• Duration: 〔338 Calculation Result〕 min

〔340〕 Dictionary 　➔ Alarm Label Dictionary　» 372 377 393
{  "Event": "〔Repeat Item〕",
   "From": "〔Repeat Item’s Start Date〕",
   "To": "〔Repeat Item’s End Date〕",
   "Location": "〔Repeat Item’s Location〕",
   "AlarmTime": "〔339 Supposed Alarm Time〕"
}

〔341〕 Date Current Date 　➔ Current Date　» 342 343 374

〔342〕 Adjust Add Date 〔341 Current Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"dd MMM yyyy"}〕 　➔ 1 day after　» 356 375
• Duration: "1" days

〔343〕 If 〔339 Supposed Alarm Time〕 is 〔341 Current Date〕

〔344〕 Comment
supposed alarm time is exactly 12:00am

〔345〕 If 〔Repeat Item’s Location〕 has any value

〔346〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 at 〔Repeat Item’s Location〕 which  was supposed to get ready at 〔339 Supposed Alarm Time〕. Please check.

〔347〕 Set Variable Text to 〔346 Text〕

〔348〕 Otherwise

〔349〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 which  was supposed to get ready at 〔339 Supposed Alarm Time〕. Please check.

〔350〕 Set Variable Text to 〔349 Text〕

〔351〕 End If

〔352〕 Show Alert 〔Text〕

〔353〕 Show Notification 〔Text〕

〔354〕 Speak Text
• Text: 〔Text〕

〔355〕 Otherwise　▵343

〔356〕 If 〔339 Supposed Alarm Time〕 is 〔342 1 day after〕

〔357〕 Find Alarm All Alarm　» 358 359

〔358〕 If 〔357 Alarms〕 has any value

〔359〕 Repeat[2] with Each in 〔357 Alarms〕

〔360〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ AlarmLabelDictionary　» 361 362 364

〔361〕 Get Dictionary Value for Event in 〔360 AlarmLabelDictionary〕 　➔ Event　» 366

〔362〕 Get Dictionary Value for From in 〔360 AlarmLabelDictionary〕 　➔ From　»

〔363〕 Get Dates from 〔362 From〕 　➔ FromDate　» 366

〔364〕 Get Dictionary Value for To in 〔360 AlarmLabelDictionary〕 　➔ To　»

〔365〕 Get Dates from 〔364 To〕 　➔ ToDate　»

〔366〕 If All are true　〔361 Event’s Name〕 is 〔Repeat Item〕　〔363 FromDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔Repeat Item’s Start Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕　〔365 ToDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is • ConditionalActionString
〔Repeat Item’s End Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕• Date
〔Repeat Item’s End Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕

〔367〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔368〕 End If

〔369〕 End Repeat[2] with Each　▵359

〔370〕 End If　▵358

〔371〕 Comment
since this will be triggered at 12:00 am each day, when the supposed alarm time is 12:00 am in the next day, you can set alarm now

〔372〕 Add Alarm for 〔339 Supposed Alarm Time〕 called 〔340 Alarm Label Dictionary〕

〔373〕 Otherwise　▵356

〔374〕 If 〔339 Supposed Alarm Time〕 > 〔341 Current Date〕

〔375〕 If 〔339 Supposed Alarm Time〕 > 〔342 1 day after〕

〔376〕 Comment
when the time is other than 12:00 am of then next day, you cannot set alarm yet. If set, it will be today. For example, triggering time 2025-4-8 12:00 am, the supposed alarm time is 2025-4-9 08:00 am, if you set an alarm at 08:00 at 2025-4-8 12:00 am, it will alarm at 2025-4-8 08:00 am instead. So we need to record the supposed alarm time and trigger next day.

〔377〕 Set Variable Event to 〔340 Alarm Label Dictionary〕

〔378〕 Otherwise

〔379〕 Find Alarm All Alarm　» 380 381
• ContentItemFilter: {  "Value": {
      "WFActionParameterFilterPrefix": 1,
      "WFContentPredicateBoundedDate": false,
      "WFActionParameterFilterTemplates": []
   },
   "WFSerializationType": "WFContentPredicateTableTemplate"
}

〔380〕 If 〔379 Alarms〕 has any value

〔381〕 Repeat[2] with Each in 〔379 Alarms〕

〔382〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ AlarmLabelDictionary　» 383 384 386

〔383〕 Get Dictionary Value for Event in 〔382 AlarmLabelDictionary〕 　➔ Event　» 388

〔384〕 Get Dictionary Value for From in 〔382 AlarmLabelDictionary〕 　➔ From　»

〔385〕 Get Dates from 〔384 From〕 　➔ FromDate　» 388

〔386〕 Get Dictionary Value for To in 〔382 AlarmLabelDictionary〕 　➔ To　»

〔387〕 Get Dates from 〔386 To〕 　➔ ToDate　»

〔388〕 If All are true　〔383 Event’s Name〕 is 〔Repeat Item〕　〔385 FromDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔Repeat Item’s Start Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕　〔387 ToDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔Repeat Item’s End Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕

〔389〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔390〕 End If

〔391〕 End Repeat[2] with Each　▵381

〔392〕 End If　▵380

〔393〕 Add Alarm for 〔339 Supposed Alarm Time〕 called 〔340 Alarm Label Dictionary〕

〔394〕 End If　▵378

〔395〕 Otherwise　▵374

〔396〕 Comment
the supposed alarm time passed

〔397〕 If 〔Repeat Item’s Location〕 has any value

〔398〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 at 〔Repeat Item’s Location〕 which  was supposed to get ready at 〔339 Supposed Alarm Time〕. Please check.

〔399〕 Set Variable Text to 〔398 Text〕

〔400〕 Otherwise

〔401〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 which  was supposed to get ready at 〔339 Supposed Alarm Time〕. Please check.

〔402〕 Set Variable Text to 〔401 Text〕

〔403〕 End If

〔404〕 Show Alert 〔Text〕

〔405〕 Show Notification 〔Text〕

〔406〕 Speak Text
• Text: 〔Text〕

〔407〕 End If　▵395

〔408〕 End If　▵373

〔409〕 End If　▵355

〔410〕 If 〔Event as Dictionary〕 has any value

〔411〕 Get Dictionary from 〔Event〕　» 424

〔412〕 Text　»

〔413〕 Set Variable TextList to 〔412 Text〕

〔414〕 Add 〔Event〕 to Variable TextList

〔415〕 Get File at Path Smart Calendar Reminder/Future Alarms.txt from Folder　» 416 417
• FileErrorIfNotFound: false

〔416〕 If 〔415 File’s File Size〕 has any value

〔417〕 Split Text 〔415 File〕 by New Lines　»

〔418〕 Repeat[2] with Each in 〔417 Split Text〕

〔419〕 Get Dictionary from 〔Repeat Item 2〕　» 420 421 422 423

〔420〕 Get Dictionary Value for Event in 〔419 Dictionary〕 　➔ Event　» 424 #change to get text from input

〔421〕 Get Dictionary Value for From in 〔419 Dictionary〕 　➔ From　» 424 #change to get date from input

〔422〕 Get Dictionary Value for To in 〔419 Dictionary〕 　➔ To　» 424 #change to get date from input

〔423〕 Get Dictionary Value for Location in 〔419 Dictionary〕 　➔ Location　» #change to get text from input

〔424〕 If Any are true　〔420 Event’s Name〕 is not 〔411 Dictionary.Event〕　〔421 From’s Name〕 is not 〔411 Dictionary.From〕　〔422 To’s Name〕 is not 〔411 Dictionary.To〕　〔423 Location’s Name〕 is not 〔411 Dictionary.Location〕

〔425〕 Add 〔Repeat Item 2〕 to Variable TextList

〔426〕 End If

〔427〕 End Repeat[2] with Each　▵418

〔428〕 Combine Text 〔TextList〕 with New Lines　»

〔429〕 Save File 〔428 Combined Text〕
• AskWhereToSave: false
• SaveFileOverwrite: true
• FileDestinationPath: Smart Calendar Reminder/Future Alarms.txt

〔430〕 Otherwise　▵416

〔431〕 Text　»

〔Event〕

〔432〕 Save File 〔431 Text〕
• AskWhereToSave: false
• FileDestinationPath: Smart Calendar Reminder/Future Alarms.txt

〔433〕 End If

〔434〕 End If　▵410

〔435〕 End Repeat with Each　▵105

〔436〕 End If　▵104

〔437〕 Get File at Path Smart Calendar Reminder/Future Alarms.txt from Folder　» 438 439
• FileErrorIfNotFound: false

〔438〕 If 〔437 File’s File Size〕 has any value

〔439〕 Split Text 〔437 File〕 by New Lines　»

〔440〕 Repeat with Each in 〔439 Split Text〕

〔441〕 Get Dictionary from 〔Repeat Item〕　» 442 443 444 445 446 459 462

〔442〕 Get Text from 〔441 Dictionary.Event〕　» 454

〔443〕 Get Dates from 〔441 Dictionary.From〕　» 455

〔444〕 Get Dates from 〔441 Dictionary.To〕　» 455

〔445〕 If 〔441 Dictionary〕 has any value

〔446〕 Get Dates from 〔441 Dictionary.AlarmTime〕　» 447 459 462

〔447〕 If 〔446 Dates〕 is today

〔448〕 Find Alarm All Alarm　» 449 450
• ContentItemFilter: {  "Value": {
      "WFActionParameterFilterPrefix": 1,
      "WFContentPredicateBoundedDate": false,
      "WFActionParameterFilterTemplates": []
   },
   "WFSerializationType": "WFContentPredicateTableTemplate"
}

〔449〕 If 〔448 Alarms〕 has any value

〔450〕 Repeat[2] with Each in 〔448 Alarms〕

〔451〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ Alarm_Label_Dictionary　» 452 453 454

〔452〕 Get Dates from 〔451 Alarm_Label_Dictionary.From〕 　➔ From_Date　» 455

〔453〕 Get Dates from 〔451 Alarm_Label_Dictionary.To〕 　➔ To_Date　» 455

〔454〕 If 〔442 Text〕 is 〔451 Alarm_Label_Dictionary.Event〕

〔455〕 If Any are true　〔443 Dates〕 is 〔452 From_Date〕　〔444 Dates〕 is 〔453 To_Date〕

〔456〕 Nothing

〔457〕 Otherwise

〔458〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔459〕 Add Alarm for 〔446 Dates〕 called 〔441 Dictionary〕

〔460〕 End If

〔461〕 Otherwise　▵454

〔462〕 Add Alarm for 〔446 Dates〕 called 〔441 Dictionary〕

〔463〕 End If

〔464〕 End Repeat[2] with Each　▵450

〔465〕 End If　▵449

〔466〕 End If　▵447

〔467〕 End If　▵445

〔468〕 End Repeat with Each　▵440

〔469〕 End If　▵438

〔470〕 End If　▵92

〔471〕 If 〔Shortcut Input as Number〕 is 2

〔472〕 Comment
1-Hour Event Processor
*Real-time event handler for immediate notifications:

Processes events within next 60 minutes

Provides most accurate travel estimates

Recommended for hourly automation*

〔473〕 Get File at Path Smart Calendar Reminder/aboutme.txt from Folder　»
• FileErrorIfNotFound: false

〔474〕 Get Dictionary from 〔473 File〕　» 475 478 479

〔475〕 Get Dictionary from 〔474 Dictionary.HomeAddress〕　»

〔476〕 Text　»
〔475 Dictionary.street〕 〔475 Dictionary.city〕 〔475 Dictionary.state〕 〔475 Dictionary.postcode〕 〔475 Dictionary.country〕

〔477〕 Set Variable Home_Address to 〔476 Text〕

〔478〕 Set Variable Travel_Method to 〔474 Dictionary.TravelMethod〕

〔479〕 Get Dictionary Value for ExtraTime in 〔474 Dictionary〕　»

〔480〕 Get Numbers from 〔479 Dictionary Value〕　»

〔481〕 Set Variable Extra_Time to 〔480 Numbers〕

〔482〕 Find Calendar Events All Calendar Events where　» 483 484 485 752
• ContentItemSortProperty: Start Date
• ContentItemSortOrder: Oldest First
• ContentItemFilter: • All the following are true
Start Date is in the next 1 hours
Is Not All Day
Canceled is {"Bool":false}

〔483〕 If 〔482 Calendar Events〕 has any value

〔484〕 Count Items in 〔482 Calendar Events〕　» 756 764

〔485〕 Repeat with Each in 〔482 Calendar Events〕

〔486〕 If 〔Repeat Item’s Location〕 has any value

〔487〕 Get Current Location　» 498 504 590
• Accuracy: Best

〔488〕 If All are true　〔Repeat Item’s Notes〕 has any value　〔Repeat Item’s Notes〕 begins with {　〔Repeat Item’s Notes〕 ends with }

〔489〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY

〔490〕 Get Dictionary from 〔Repeat Item’s Notes〕 　➔ NotesAddressDictionary　» 491 492 493 494 495

〔491〕 Set Variable CalendarNotesStreet to 〔490 NotesAddressDictionary.Street〕

〔492〕 Set Variable CalendarNotesCity to 〔490 NotesAddressDictionary.City〕

〔493〕 Set Variable CalendarNotesState to 〔490 NotesAddressDictionary.State〕

〔494〕 Set Variable CalendarNotesRegion to 〔490 NotesAddressDictionary.Country〕

〔495〕 Set Variable CalendarNotesZIPCode to 〔490 NotesAddressDictionary.Postcode〕

〔496〕 Text　»
〔CalendarNotesStreet〕 〔CalendarNotesCity〕 〔CalendarNotesState〕 〔CalendarNotesZIPCode〕 〔CalendarNotesRegion〕

〔497〕 Set Variable NotesAddressString to 〔496 Text〕

〔498〕 If All are true　〔487 Current Location’s Street〕 is 〔CalendarNotesStreet〕　〔487 Current Location’s City〕 is 〔CalendarNotesCity〕　〔487 Current Location’s State〕 is 〔CalendarNotesState〕　〔487 Current Location’s Country〕 is 〔CalendarNotesRegion〕　〔487 Current Location’s ZIP Code〕 is 〔CalendarNotesZIPCode〕

〔499〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY -> CALENDAR EVENT ADDRESS IS THE SAME WITH CURRENT LOCATION

〔500〕 Number 0　»

〔501〕 Set Variable CurrentToDeparture to 〔500 Number〕

〔502〕 Otherwise

〔503〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY -> CALENDAR EVENT ADDRESS IS NOT THE SAME WITH CURRENT LOCATION

〔504〕 Get 〔TravelMethod〕 Time　»
• GetDirectionsCustomLocation: 〔487 Current Location〕
• Destination: 〔NotesAddressString〕

〔505〕 Set Variable TravelTimeString to 〔504 Travel Time〕

〔506〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔507〕 Set Variable MatchString to 〔506 Matches〕

〔508〕 Count Items in 〔MatchString〕　»

〔509〕 If 〔508 Count〕 is 1

〔510〕 Get First Item from List 〔MatchString〕　»

〔511〕 Set Variable TravelDays to 〔510 Item from List〕

〔512〕 Otherwise

〔513〕 Number 0　»

〔514〕 Set Variable TravelDays to 〔513 Number〕

〔515〕 End If

〔516〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔517〕 Set Variable MatchString to 〔516 Matches〕

〔518〕 Count Items in 〔MatchString〕　»

〔519〕 If 〔518 Count〕 is 1

〔520〕 Get First Item from List 〔MatchString〕　»

〔521〕 Set Variable TravelHours to 〔520 Item from List〕

〔522〕 Otherwise

〔523〕 Number 0　»

〔524〕 Set Variable TravelHours to 〔523 Number〕

〔525〕 End If

〔526〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔527〕 Set Variable MatchString to 〔526 Matches〕

〔528〕 Count Items in 〔MatchString〕　»

〔529〕 If 〔528 Count〕 is 1

〔530〕 Get First Item from List 〔MatchString〕　»

〔531〕 Set Variable TravelMinutes to 〔530 Item from List〕

〔532〕 Otherwise

〔533〕 Number 0　»

〔534〕 Set Variable TravelMinutes to 〔533 Number〕

〔535〕 End If

〔536〕 Calculate 〔TravelDays〕 × 1440　» 538

〔537〕 Calculate 〔TravelHours〕 × 60　»

〔538〕 Calculate 〔537 Calculation Result〕 + 〔536 Calculation Result〕　»

〔539〕 Calculate 〔538 Calculation Result〕 + 〔TravelMinutes〕　»

〔540〕 Set Variable CurrentToDeparture to 〔539 Calculation Result〕

〔541〕 End If　▵502

〔542〕 Get 〔TravelMethod〕 Time 　➔ DepartureToDestination　»
• GetDirectionsCustomLocation: 〔NotesAddressString〕
• Destination: 〔Repeat Item’s Location〕

〔543〕 Set Variable TravelTimeString to 〔542 DepartureToDestination〕

〔544〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔545〕 Set Variable MatchString to 〔544 Matches〕

〔546〕 Count Items in 〔MatchString〕　»

〔547〕 If 〔546 Count〕 is 1

〔548〕 Get First Item from List 〔MatchString〕　»

〔549〕 Set Variable TravelDays to 〔548 Item from List〕

〔550〕 Otherwise

〔551〕 Number 0　»

〔552〕 Set Variable TravelDays to 〔551 Number〕

〔553〕 End If

〔554〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔555〕 Set Variable MatchString to 〔554 Matches〕

〔556〕 Count Items in 〔MatchString〕　»

〔557〕 If 〔556 Count〕 is 1

〔558〕 Get First Item from List 〔MatchString〕　»

〔559〕 Set Variable TravelHours to 〔558 Item from List〕

〔560〕 Otherwise

〔561〕 Number 0　»

〔562〕 Set Variable TravelHours to 〔561 Number〕

〔563〕 End If

〔564〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔565〕 Set Variable MatchString to 〔564 Matches〕

〔566〕 Count Items in 〔MatchString〕　»

〔567〕 If 〔566 Count〕 is 1

〔568〕 Get First Item from List 〔MatchString〕　»

〔569〕 Set Variable TravelMinutes to 〔568 Item from List〕

〔570〕 Otherwise

〔571〕 Number 0　»

〔572〕 Set Variable TravelMinutes to 〔571 Number〕

〔573〕 End If

〔574〕 Calculate 〔TravelDays〕 × 1440　» 576

〔575〕 Calculate 〔TravelHours〕 × 60　»

〔576〕 Calculate 〔575 Calculation Result〕 + 〔574 Calculation Result〕　»

〔577〕 Calculate 〔576 Calculation Result〕 + 〔TravelMinutes〕　»

〔578〕 Calculate 〔577 Calculation Result〕 + 〔CurrentToDeparture〕　»

〔579〕 Set Variable TravelTime to 〔578 Calculation Result〕

〔580〕 Otherwise　▵488

〔581〕 Comment
CALENDER EVENT NOTES IS BLANK

〔582〕 Get Dictionary from 〔HomeAddress〕 　➔ home_address_dictionary　» 583 584 585 586 587

〔583〕 Get Dictionary Value for street in 〔582 home_address_dictionary〕 　➔ HomeStreet　» 588 590

〔584〕 Get Dictionary Value for city in 〔582 home_address_dictionary〕 　➔ HomeCity　» 588 590

〔585〕 Get Dictionary Value for state in 〔582 home_address_dictionary〕 　➔ HomeState　» 588 590

〔586〕 Get Dictionary Value for country in 〔582 home_address_dictionary〕 　➔ HomeCountry　» 588 590

〔587〕 Get Dictionary Value for postcode in 〔582 home_address_dictionary〕 　➔ HomePostcode　» 588 590

〔588〕 If All are true　〔583 HomeStreet〕 has any value　〔584 HomeCity〕 has any value　〔585 HomeState〕 has any value　〔586 HomeCountry〕 has any value　〔587 HomePostcode〕 has any value

〔589〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED

〔590〕 If All are true　〔487 Current Location’s Street〕 is 〔583 HomeStreet〕　〔487 Current Location’s City〕 is 〔584 HomeCity〕　〔487 Current Location’s State〕 is 〔585 HomeState〕　〔487 Current Location’s Country〕 is 〔586 HomeCountry〕　〔487 Current Location’s ZIP Code〕 is 〔587 HomePostcode〕

〔591〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED -> HOME ADDRESS IS THE SAME WITH CURRENT LOCATION

〔592〕 Number 0　»

〔593〕 Set Variable CurrentToDeparture to 〔592 Number〕

〔594〕 Otherwise

〔595〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED -> HOME ADDRESS IS NOT THE SAME WITH CURRENT LOCATION

〔596〕 Get 〔TravelMethod〕 Time　»
• Destination: 〔HomeAddress〕

〔597〕 Set Variable TravelTimeString to 〔596 Travel Time〕

〔598〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔599〕 Set Variable MatchString to 〔598 Matches〕

〔600〕 Count Items in 〔MatchString〕　»

〔601〕 If 〔600 Count〕 is 1

〔602〕 Get First Item from List 〔MatchString〕　»

〔603〕 Set Variable TravelDays to 〔602 Item from List〕

〔604〕 Otherwise

〔605〕 Number 0　»

〔606〕 Set Variable TravelDays to 〔605 Number〕

〔607〕 End If

〔608〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔609〕 Set Variable MatchString to 〔608 Matches〕

〔610〕 Count Items in 〔MatchString〕　»

〔611〕 If 〔610 Count〕 is 1

〔612〕 Get First Item from List 〔MatchString〕　»

〔613〕 Set Variable TravelHours to 〔612 Item from List〕

〔614〕 Otherwise

〔615〕 Number 0　»

〔616〕 Set Variable TravelHours to 〔615 Number〕

〔617〕 End If

〔618〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔619〕 Set Variable MatchString to 〔618 Matches〕

〔620〕 Count Items in 〔MatchString〕　»

〔621〕 If 〔620 Count〕 is 1

〔622〕 Get First Item from List 〔MatchString〕　»

〔623〕 Set Variable TravelMinutes to 〔622 Item from List〕

〔624〕 Otherwise

〔625〕 Number 0　»

〔626〕 Set Variable TravelMinutes to 〔625 Number〕

〔627〕 End If

〔628〕 Calculate 〔TravelDays〕 × 1440　» 630

〔629〕 Calculate 〔TravelHours〕 × 60　»

〔630〕 Calculate 〔629 Calculation Result〕 + 〔628 Calculation Result〕　»

〔631〕 Calculate 〔630 Calculation Result〕 + 〔TravelMinutes〕　»

〔632〕 Set Variable CurrentToDeparture to 〔631 Calculation Result〕

〔633〕 End If　▵594

〔634〕 Get 〔TravelMethod〕 Time 　➔ DepartureToDestination　»
• GetDirectionsCustomLocation: 〔HomeAddress〕
• Destination: 〔Repeat Item’s Location〕

〔635〕 Set Variable TravelTimeString to 〔634 DepartureToDestination〕

〔636〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔637〕 Set Variable MatchString to 〔636 Matches〕

〔638〕 Count Items in 〔MatchString〕　»

〔639〕 If 〔638 Count〕 is 1

〔640〕 Get First Item from List 〔MatchString〕　»

〔641〕 Set Variable TravelDays to 〔640 Item from List〕

〔642〕 Otherwise

〔643〕 Number 0　»

〔644〕 Set Variable TravelDays to 〔643 Number〕

〔645〕 End If

〔646〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔647〕 Set Variable MatchString to 〔646 Matches〕

〔648〕 Count Items in 〔MatchString〕　»

〔649〕 If 〔648 Count〕 is 1

〔650〕 Get First Item from List 〔MatchString〕　»

〔651〕 Set Variable TravelHours to 〔650 Item from List〕

〔652〕 Otherwise

〔653〕 Number 0　»

〔654〕 Set Variable TravelHours to 〔653 Number〕

〔655〕 End If

〔656〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔657〕 Set Variable MatchString to 〔656 Matches〕

〔658〕 Count Items in 〔MatchString〕　»

〔659〕 If 〔658 Count〕 is 1

〔660〕 Get First Item from List 〔MatchString〕　»

〔661〕 Set Variable TravelMinutes to 〔660 Item from List〕

〔662〕 Otherwise

〔663〕 Number 0　»

〔664〕 Set Variable TravelMinutes to 〔663 Number〕

〔665〕 End If

〔666〕 Calculate 〔TravelDays〕 × 1440　» 668

〔667〕 Calculate 〔TravelHours〕 × 60　»

〔668〕 Calculate 〔667 Calculation Result〕 + 〔666 Calculation Result〕　»

〔669〕 Calculate 〔668 Calculation Result〕 + 〔TravelMinutes〕　»

〔670〕 Calculate 〔669 Calculation Result〕 + 〔CurrentToDeparture〕　»

〔671〕 Set Variable TravelTime to 〔670 Calculation Result〕

〔672〕 Otherwise　▵588

〔673〕 Text
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS NOT MAINTAINED

〔674〕 Get 〔TravelMethod〕 Time　»
• Destination: 〔Repeat Item’s Location〕

〔675〕 Set Variable TravelTimeString to 〔674 Travel Time〕

〔676〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔677〕 Set Variable MatchString to 〔676 Matches〕

〔678〕 Count Items in 〔MatchString〕　»

〔679〕 If 〔678 Count〕 is 1

〔680〕 Get First Item from List 〔MatchString〕　»

〔681〕 Set Variable TravelDays to 〔680 Item from List〕

〔682〕 Otherwise

〔683〕 Number 0　»

〔684〕 Set Variable TravelDays to 〔683 Number〕

〔685〕 End If

〔686〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔687〕 Set Variable MatchString to 〔686 Matches〕

〔688〕 Count Items in 〔MatchString〕　»

〔689〕 If 〔688 Count〕 is 1

〔690〕 Get First Item from List 〔MatchString〕　»

〔691〕 Set Variable TravelHours to 〔690 Item from List〕

〔692〕 Otherwise

〔693〕 Number 0　»

〔694〕 Set Variable TravelHours to 〔693 Number〕

〔695〕 End If

〔696〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔697〕 Set Variable MatchString to 〔696 Matches〕

〔698〕 Count Items in 〔MatchString〕　»

〔699〕 If 〔698 Count〕 is 1

〔700〕 Get First Item from List 〔MatchString〕　»

〔701〕 Set Variable TravelMinutes to 〔700 Item from List〕

〔702〕 Otherwise

〔703〕 Number 0　»

〔704〕 Set Variable TravelMinutes to 〔703 Number〕

〔705〕 End If

〔706〕 Calculate 〔TravelDays〕 × 1440　» 708

〔707〕 Calculate 〔TravelHours〕 × 60　»

〔708〕 Calculate 〔707 Calculation Result〕 + 〔706 Calculation Result〕　»

〔709〕 Calculate 〔708 Calculation Result〕 + 〔TravelMinutes〕　»

〔710〕 Set Variable TravelTime to 〔709 Calculation Result〕

〔711〕 End If　▵672

〔712〕 End If　▵580

〔713〕 Otherwise　▵486

〔714〕 Number 0　»

〔715〕 Set Variable TravelTime to 〔714 Number〕

〔716〕 End If

〔717〕 Find Alarm All Alarm　» 718 719
• ContentItemFilter: {  "Value": {
      "WFActionParameterFilterPrefix": 1,
      "WFActionParameterFilterTemplates": [],
      "WFContentPredicateBoundedDate": false
   },
   "WFSerializationType": "WFContentPredicateTableTemplate"
}

〔718〕 If 〔717 Alarms〕 has any value

〔719〕 Repeat[2] with Each in 〔717 Alarms〕

〔720〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ AlarmLabelDictionary　» 721 722 724

〔721〕 Get Dictionary Value for Event in 〔720 AlarmLabelDictionary〕 　➔ Event　» 726

〔722〕 Get Dictionary Value for From in 〔720 AlarmLabelDictionary〕 　➔ From　»

〔723〕 Get Dates from 〔722 From〕 　➔ FromDate　» 726

〔724〕 Get Dictionary Value for To in 〔720 AlarmLabelDictionary〕 　➔ To　»

〔725〕 Get Dates from 〔724 To〕 　➔ ToDate　»

〔726〕 If All are true　〔721 Event’s Name〕 is 〔Repeat Item〕　〔723 FromDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔Repeat Item’s Start Date{"Date Style":"Custom","WFDateFormat":"HH:mm","WFISO8601IncludeTime":false}〕　〔725 ToDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔Repeat Item’s End Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕

〔727〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔728〕 End If

〔729〕 End Repeat[2] with Each　▵719

〔730〕 End If　▵718

〔731〕 Calculate 〔TravelTime〕 + 〔Extra_Time〕　»

〔732〕 Adjust Subtract Date 〔Repeat Item’s Start Date〕 　➔ Supposed_Alarm_Time　» 734 736 739 746 747
• Duration: 〔731 Calculation Result〕 min

〔733〕 Date Current Date　»

〔734〕 If Any are true　〔732 Supposed_Alarm_Time〕 < 〔733 Date〕　〔732 Supposed_Alarm_Time〕 is 〔733 Date〕

〔735〕 If 〔Repeat Item’s Location〕 has any value

〔736〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 at 〔Repeat Item’s Location〕  which  was supposed to get ready at 〔732 Supposed_Alarm_Time〕. Please check.

〔737〕 Set Variable Text to 〔736 Text〕

〔738〕 Otherwise

〔739〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 which  was supposed to get ready at 〔732 Supposed_Alarm_Time〕. Please check.

〔740〕 Set Variable Text to 〔739 Text〕

〔741〕 End If

〔742〕 Show Alert 〔Text〕

〔743〕 Show Notification 〔Text〕

〔744〕 Speak Text
• Text: 〔Text〕

〔745〕 Otherwise　▵734

〔746〕 Dictionary　»
{  "Event": "〔Repeat Item〕",
   "From": "〔Repeat Item’s Start Date〕",
   "To": "〔Repeat Item’s End Date〕",
   "Location": "〔Repeat Item’s Location〕",
   "AlarmTime": "〔732 Supposed_Alarm_Time〕"
}

〔747〕 Add Alarm for 〔732 Supposed_Alarm_Time〕 called 〔746 Dictionary〕

〔748〕 End If

〔749〕 End Repeat with Each　▵485

〔750〕 Number 3　»

〔751〕 Repeat 〔750 Number〕 Times

〔752〕 Repeat[2] with Each in 〔482 Calendar Events〕

〔753〕 Format Date 〔Repeat Item 2’s Start Date〕　» 757 760 765 768
• DateFormatStyle: None

〔754〕 Format Date 〔Repeat Item 2’s End Date〕　» 757 760 765 768
• DateFormatStyle: None

〔755〕 If 〔Repeat Item 2’s Location〕 has any value

〔756〕 If 〔484 Count〕 > 1

〔757〕 Text　»
Event 〔Repeat Index 2〕 〔Repeat Item 2〕 from 〔753 Formatted Date〕 to 〔754 Formatted Date〕 at 〔Repeat Item 2’s Location〕

〔758〕 Set Variable Text to 〔757 Text〕

〔759〕 Otherwise

〔760〕 Text　»
Event  〔Repeat Item 2〕 from 〔753 Formatted Date〕 to 〔754 Formatted Date〕 at 〔Repeat Item 2’s Location〕

〔761〕 Set Variable Text to 〔760 Text〕

〔762〕 End If

〔763〕 Otherwise　▵755

〔764〕 If 〔484 Count〕 > 1

〔765〕 Text　»
Event 〔Repeat Index 2〕 〔Repeat Item 2〕 from 〔753 Formatted Date〕 to 〔754 Formatted Date〕

〔766〕 Set Variable Text to 〔765 Text〕

〔767〕 Otherwise

〔768〕 Text　»
Event  〔Repeat Item 2〕 from 〔753 Formatted Date〕 to 〔754 Formatted Date〕

〔769〕 Set Variable Text to 〔768 Text〕

〔770〕 End If

〔771〕 End If　▵763

〔772〕 Speak Text
• Text: 〔Text〕

〔773〕 Wait 1 seconds

〔774〕 End Repeat[2] with Each　▵752

〔775〕 End Repeat Times　▵751

〔776〕 End If　▵483

〔777〕 End If　▵471

〔778〕 If 〔Shortcut Input as Number〕 is 3

〔779〕 Comment
Alarm Activation Handler
Triggered by alarm events - manages notification flow

〔780〕 Dictionary　»
{  "stop": "no" }

〔781〕 Text　»
〔780 Dictionary〕

〔782〕 Save File 〔781 Text〕
• AskWhereToSave: false
• SaveFileOverwrite: true
• FileDestinationPath: Smart Calendar Reminder/stopflag.txt

〔783〕 Date Current Date　» 802

〔784〕 Find Alarm All Alarm　» 785 794
• ContentItemFilter: {  "Value": {
      "WFActionParameterFilterPrefix": 1,
      "WFContentPredicateBoundedDate": false,
      "WFActionParameterFilterTemplates": []
   },
   "WFSerializationType": "WFContentPredicateTableTemplate"
}

〔785〕 If 〔784 Alarms〕 has any value

〔786〕 Number 10000　»

〔787〕 Repeat 〔786 Number〕 Times

〔788〕 Get File at Path Smart Calendar Reminder/stopflag.txt from Folder　»
• FileErrorIfNotFound: false

〔789〕 Get Dictionary from 〔788 File〕　»

〔790〕 Get Dictionary Value for stop in 〔789 Dictionary〕　»

〔791〕 If 〔790 Dictionary Value’s Name〕 is yes

〔792〕 Stop This Shortcut

〔793〕 End If

〔794〕 Repeat[2] with Each in 〔784 Alarms〕

〔795〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ alarm_label_dictionary　» 796 798 800 805 809 812

〔796〕 Get Dictionary Value for From in 〔795 alarm_label_dictionary〕　»

〔797〕 Get Dates from 〔796 Dictionary Value〕 　➔ From　» 803

〔798〕 Get Dictionary Value for To in 〔795 alarm_label_dictionary〕　»

〔799〕 Get Dates from 〔798 Dictionary Value〕 　➔ To　» 804

〔800〕 Get Dictionary Value for AlarmTime in 〔795 alarm_label_dictionary〕　»

〔801〕 Get Dates from 〔800 Dictionary Value〕 　➔ AlarmTime　»

〔802〕 If All are true　〔801 AlarmTime{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH"}〕 is 〔783 Date{"Date Style":"Custom","WFDateFormat":"HH","WFISO8601IncludeTime":false}〕　〔801 AlarmTime{"Date Style":"Custom","WFDateFormat":"mm","WFISO8601IncludeTime":false}〕 is 〔783 Date{"Date Style":"Custom","WFDateFormat":"mm","WFISO8601IncludeTime":false}〕

〔803〕 Format Date 〔797 From’s Time〕　» 809 812

〔804〕 Format Date 〔799 To’s Time〕　» 809 812

〔805〕 Get Dictionary Value for Location in 〔795 alarm_label_dictionary〕　»

〔806〕 Text　»
〔805 Dictionary Value〕

〔807〕 Count Characters in 〔806 Text〕　»

〔808〕 If 〔807 Count〕 > • ConditionalActionString
""• NumberValue
0

〔809〕 Text　»
Prepare for 〔795 alarm_label_dictionary.Event〕 from 〔803 Formatted Date〕 to 〔804 Formatted Date〕 at 〔795 alarm_label_dictionary.Location〕

〔810〕 Set Variable Text to 〔809 Text〕

〔811〕 Otherwise

〔812〕 Text　»
Prepare for 〔795 alarm_label_dictionary.Event〕 from 〔803 Formatted Date〕 to 〔804 Formatted Date〕

〔813〕 Set Variable Text to 〔812 Text〕

〔814〕 End If

〔815〕 Speak Text
• Text: 〔Text〕

〔816〕 End If　▵802

〔817〕 End Repeat[2] with Each　▵794

〔818〕 End Repeat Times　▵787

〔819〕 End If　▵785

〔820〕 End If　▵778

〔821〕 If 〔Shortcut Input as Number〕 is 4

〔822〕 Comment
input case 4:
Notification Interrupt System
Stop protocol for voice announcements when any alarm is stopped.

〔823〕 Dictionary　»
{  "stop": "yes" }

〔824〕 Text　»
〔823 Dictionary〕

〔825〕 Save File 〔824 Text〕
• AskWhereToSave: false
• SaveFileOverwrite: true
• FileDestinationPath: Smart Calendar Reminder/stopflag.txt

〔826〕 End If

〔827〕 If 〔Shortcut Input as Number〕 is 5

〔828〕 Comment
*Revolutionizing event management by integrating calendar data with intelligent automation:

Voice announcements for upcoming events

Dynamic alarm calculation (travel + prep time)

Calendar-driven scheduling system
Eliminates manual reminders and ensures perfect timing synchronization*

〔829〕 Get File at Path Smart Calendar Reminder/aboutme.txt from Folder　»
• FileErrorIfNotFound: false

〔830〕 Get Dictionary from 〔829 File〕　» 831 834 835

〔831〕 Get Dictionary from 〔830 Dictionary.HomeAddress〕　»

〔832〕 Text　»
〔831 Dictionary.street〕 〔831 Dictionary.city〕 〔831 Dictionary.state〕 〔831 Dictionary.postcode〕 〔831 Dictionary.country〕\u{space}

〔833〕 Set Variable HomeAddress to 〔832 Text〕

〔834〕 Set Variable TravelMethod to 〔830 Dictionary.TravelMethod〕

〔835〕 Get Dictionary Value for ExtraTime in 〔830 Dictionary〕　»

〔836〕 Get Numbers from 〔835 Dictionary Value〕　»

〔837〕 Set Variable ExtraTime to 〔836 Numbers〕

〔838〕 Find Calendar Events All Calendar Events where　» 839 840
• ContentItemSortProperty: Start Date
• ContentItemSortOrder: Oldest First
• ContentItemFilter: • All the following are true
Start Date is in the next 1 months
Is Not All Day
Canceled is {"Bool":false}

〔839〕 If 〔838 Calendar Events〕 has any value

〔840〕 Repeat with Each in 〔838 Calendar Events〕

〔841〕 Set Variable Event to  

〔842〕 If 〔Repeat Item’s Location〕 has any value

〔843〕 Get Current Location　» 855 861 947
• Accuracy: Best

〔844〕 Comment
*To specify event-specific departure locations:

1. Create calendar event notes with JSON structure:
{
“Street”: “your departure street”,
“City”: “your departure city”,
“State”: “your departure state”,
“Country”: “your departure country”,
“Postcode”: “your departure postcode”
}
2. System prioritizes these over default locations*

〔845〕 If All are true　〔Repeat Item’s Notes〕 has any value　〔Repeat Item’s Notes〕 begins with {　〔Repeat Item’s Notes〕 ends with }

〔846〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY

〔847〕 Get Dictionary from 〔Repeat Item’s Notes〕 　➔ Notes Address Dictionary　» 848 849 850 851 852

〔848〕 Set Variable Calendar_Notes_Street to 〔847 Notes Address Dictionary.Street〕

〔849〕 Set Variable Calendar_Notes_City to 〔847 Notes Address Dictionary.City〕

〔850〕 Set Variable Calendar_Notes_State to 〔847 Notes Address Dictionary.State〕

〔851〕 Set Variable Calendar_Notes_Region to 〔847 Notes Address Dictionary.Country〕

〔852〕 Set Variable Calendar_Notes_ZIP_Code to 〔847 Notes Address Dictionary.Postcode〕

〔853〕 Text　»
〔Calendar_Notes_Street〕 〔Calendar_Notes_City〕 〔Calendar_Notes_State〕 〔Calendar_Notes_ZIP_Code〕 〔Calendar_Notes_Region〕

〔854〕 Set Variable NotesAddressString to 〔853 Text〕

〔855〕 If All are true　〔843 Current Location’s Street〕 is 〔Calendar_Notes_Street〕　〔843 Current Location’s City〕 is 〔Calendar_Notes_City〕　〔843 Current Location’s State〕 is 〔Calendar_Notes_State〕　〔843 Current Location’s Country〕 is 〔Calendar_Notes_Region〕　〔843 Current Location’s ZIP Code〕 is 〔Calendar_Notes_ZIP_Code〕

〔856〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY -> CALENDAR EVENT ADDRESS IS THE SAME WITH CURRENT LOCATION

〔857〕 Number 0　»

〔858〕 Set Variable CurrentToDeparture to 〔857 Number〕

〔859〕 Otherwise

〔860〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY -> CALENDAR EVENT ADDRESS IS NOT THE SAME WITH CURRENT LOCATION

〔861〕 Get 〔TravelMethod〕 Time　»
• GetDirectionsCustomLocation: 〔843 Current Location〕
• Destination: 〔NotesAddressString〕

〔862〕 Set Variable TravelTimeString to 〔861 Travel Time〕

〔863〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔864〕 Set Variable MatchString to 〔863 Matches〕

〔865〕 Count Items in 〔MatchString〕　»

〔866〕 If 〔865 Count〕 is 1

〔867〕 Get First Item from List 〔MatchString〕　»

〔868〕 Set Variable TravelDays to 〔867 Item from List〕

〔869〕 Otherwise

〔870〕 Number 0　»

〔871〕 Set Variable TravelDays to 〔870 Number〕

〔872〕 End If

〔873〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔874〕 Set Variable MatchString to 〔873 Matches〕

〔875〕 Count Items in 〔MatchString〕　»

〔876〕 If 〔875 Count〕 is 1

〔877〕 Get First Item from List 〔MatchString〕　»

〔878〕 Set Variable TravelHours to 〔877 Item from List〕

〔879〕 Otherwise

〔880〕 Number 0　»

〔881〕 Set Variable TravelHours to 〔880 Number〕

〔882〕 End If

〔883〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔884〕 Set Variable MatchString to 〔883 Matches〕

〔885〕 Count Items in 〔MatchString〕　»

〔886〕 If 〔885 Count〕 is 1

〔887〕 Get First Item from List 〔MatchString〕　»

〔888〕 Set Variable TravelMinutes to 〔887 Item from List〕

〔889〕 Otherwise

〔890〕 Number 0　»

〔891〕 Set Variable TravelMinutes to 〔890 Number〕

〔892〕 End If

〔893〕 Calculate 〔TravelDays〕 × 1440　» 895

〔894〕 Calculate 〔TravelHours〕 × 60　»

〔895〕 Calculate 〔894 Calculation Result〕 + 〔893 Calculation Result〕　»

〔896〕 Calculate 〔895 Calculation Result〕 + 〔TravelMinutes〕　»

〔897〕 Set Variable CurrentToDeparture to 〔896 Calculation Result〕

〔898〕 End If　▵859

〔899〕 Get 〔TravelMethod〕 Time 　➔ DepartureToDestination　»
• GetDirectionsCustomLocation: 〔NotesAddressString〕
• Destination: 〔Repeat Item’s Location〕

〔900〕 Set Variable TravelTimeString to 〔899 DepartureToDestination〕

〔901〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔902〕 Set Variable MatchString to 〔901 Matches〕

〔903〕 Count Items in 〔MatchString〕　»

〔904〕 If 〔903 Count〕 is 1

〔905〕 Get First Item from List 〔MatchString〕　»

〔906〕 Set Variable TravelDays to 〔905 Item from List〕

〔907〕 Otherwise

〔908〕 Number 0　»

〔909〕 Set Variable TravelDays to 〔908 Number〕

〔910〕 End If

〔911〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔912〕 Set Variable MatchString to 〔911 Matches〕

〔913〕 Count Items in 〔MatchString〕　»

〔914〕 If 〔913 Count〕 is 1

〔915〕 Get First Item from List 〔MatchString〕　»

〔916〕 Set Variable TravelHours to 〔915 Item from List〕

〔917〕 Otherwise

〔918〕 Number 0　»

〔919〕 Set Variable TravelHours to 〔918 Number〕

〔920〕 End If

〔921〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔922〕 Set Variable MatchString to 〔921 Matches〕

〔923〕 Count Items in 〔MatchString〕　»

〔924〕 If 〔923 Count〕 is 1

〔925〕 Get First Item from List 〔MatchString〕　»

〔926〕 Set Variable TravelMinutes to 〔925 Item from List〕

〔927〕 Otherwise

〔928〕 Number 0　»

〔929〕 Set Variable TravelMinutes to 〔928 Number〕

〔930〕 End If

〔931〕 Calculate 〔TravelDays〕 × 1440　» 933

〔932〕 Calculate 〔TravelHours〕 × 60　»

〔933〕 Calculate 〔932 Calculation Result〕 + 〔931 Calculation Result〕　»

〔934〕 Calculate 〔933 Calculation Result〕 + 〔TravelMinutes〕　»

〔935〕 Calculate 〔934 Calculation Result〕 + 〔CurrentToDeparture〕　»

〔936〕 Set Variable TravelTime to 〔935 Calculation Result〕

〔937〕 Otherwise　▵845

〔938〕 Comment
CALENDER EVENT NOTES IS BLANK

〔939〕 Get Dictionary from 〔HomeAddress〕 　➔ Home Address Dictionary　» 940 941 942 943 944

〔940〕 Get Dictionary Value for street in 〔939 Home Address Dictionary〕 　➔ home_Street　» 945 947

〔941〕 Get Dictionary Value for city in 〔939 Home Address Dictionary〕 　➔ home_City　» 945 947

〔942〕 Get Dictionary Value for state in 〔939 Home Address Dictionary〕 　➔ home_State　» 945 947

〔943〕 Get Dictionary Value for country in 〔939 Home Address Dictionary〕 　➔ home_Country　» 945 947

〔944〕 Get Dictionary Value for postcode in 〔939 Home Address Dictionary〕 　➔ home_Postcode　» 945 947

〔945〕 If All are true　〔940 home_Street〕 has any value　〔941 home_City〕 has any value　〔942 home_State〕 has any value　〔943 home_Country〕 has any value　〔944 home_Postcode〕 has any value

〔946〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED

〔947〕 If All are true　〔843 Current Location’s Street〕 is 〔940 home_Street〕　〔843 Current Location’s City〕 is 〔941 home_City〕　〔843 Current Location’s State〕 is 〔942 home_State〕　〔843 Current Location’s Country〕 is 〔943 home_Country〕　〔843 Current Location’s ZIP Code〕 is 〔944 home_Postcode〕

〔948〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED -> HOME ADDRESS IS THE SAME WITH CURRENT LOCATION

〔949〕 Number 0　»

〔950〕 Set Variable CurrentToDeparture to 〔949 Number〕

〔951〕 Otherwise

〔952〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED -> HOME ADDRESS IS NOT THE SAME WITH CURRENT LOCATION

〔953〕 Get 〔TravelMethod〕 Time　»
• Destination: 〔HomeAddress〕

〔954〕 Set Variable TravelTimeString to 〔953 Travel Time〕

〔955〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔956〕 Set Variable MatchString to 〔955 Matches〕

〔957〕 Count Items in 〔MatchString〕　»

〔958〕 If 〔957 Count〕 is 1

〔959〕 Get First Item from List 〔MatchString〕　»

〔960〕 Set Variable TravelDays to 〔959 Item from List〕

〔961〕 Otherwise

〔962〕 Number 0　»

〔963〕 Set Variable TravelDays to 〔962 Number〕

〔964〕 End If

〔965〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔966〕 Set Variable MatchString to 〔965 Matches〕

〔967〕 Count Items in 〔MatchString〕　»

〔968〕 If 〔967 Count〕 is 1

〔969〕 Get First Item from List 〔MatchString〕　»

〔970〕 Set Variable TravelHours to 〔969 Item from List〕

〔971〕 Otherwise

〔972〕 Number 0　»

〔973〕 Set Variable TravelHours to 〔972 Number〕

〔974〕 End If

〔975〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔976〕 Set Variable MatchString to 〔975 Matches〕

〔977〕 Count Items in 〔MatchString〕　»

〔978〕 If 〔977 Count〕 is 1

〔979〕 Get First Item from List 〔MatchString〕　»

〔980〕 Set Variable TravelMinutes to 〔979 Item from List〕

〔981〕 Otherwise

〔982〕 Number 0　»

〔983〕 Set Variable TravelMinutes to 〔982 Number〕

〔984〕 End If

〔985〕 Calculate 〔TravelDays〕 × 1440　» 987

〔986〕 Calculate 〔TravelHours〕 × 60　»

〔987〕 Calculate 〔986 Calculation Result〕 + 〔985 Calculation Result〕　»

〔988〕 Calculate 〔987 Calculation Result〕 + 〔TravelMinutes〕　»

〔989〕 Set Variable CurrentToDeparture to 〔988 Calculation Result〕

〔990〕 End If　▵951

〔991〕 Get 〔TravelMethod〕 Time 　➔ DepartureToDestination　»
• GetDirectionsCustomLocation: 〔HomeAddress〕
• Destination: 〔Repeat Item’s Location〕

〔992〕 Set Variable TravelTimeString to 〔991 DepartureToDestination〕

〔993〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔994〕 Set Variable MatchString to 〔993 Matches〕

〔995〕 Count Items in 〔MatchString〕　»

〔996〕 If 〔995 Count〕 is 1

〔997〕 Get First Item from List 〔MatchString〕　»

〔998〕 Set Variable TravelDays to 〔997 Item from List〕

〔999〕 Otherwise

〔1000〕 Number 0　»

〔1001〕 Set Variable TravelDays to 〔1000 Number〕

〔1002〕 End If

〔1003〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1004〕 Set Variable MatchString to 〔1003 Matches〕

〔1005〕 Count Items in 〔MatchString〕　»

〔1006〕 If 〔1005 Count〕 is 1

〔1007〕 Get First Item from List 〔MatchString〕　»

〔1008〕 Set Variable TravelHours to 〔1007 Item from List〕

〔1009〕 Otherwise

〔1010〕 Number 0　»

〔1011〕 Set Variable TravelHours to 〔1010 Number〕

〔1012〕 End If

〔1013〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1014〕 Set Variable MatchString to 〔1013 Matches〕

〔1015〕 Count Items in 〔MatchString〕　»

〔1016〕 If 〔1015 Count〕 is 1

〔1017〕 Get First Item from List 〔MatchString〕　»

〔1018〕 Set Variable TravelMinutes to 〔1017 Item from List〕

〔1019〕 Otherwise

〔1020〕 Number 0　»

〔1021〕 Set Variable TravelMinutes to 〔1020 Number〕

〔1022〕 End If

〔1023〕 Calculate 〔TravelDays〕 × 1440　» 1025

〔1024〕 Calculate 〔TravelHours〕 × 60　»

〔1025〕 Calculate 〔1024 Calculation Result〕 + 〔1023 Calculation Result〕　»

〔1026〕 Calculate 〔1025 Calculation Result〕 + 〔TravelMinutes〕　»

〔1027〕 Calculate 〔1026 Calculation Result〕 + 〔CurrentToDeparture〕　»

〔1028〕 Set Variable TravelTime to 〔1027 Calculation Result〕

〔1029〕 Otherwise　▵945

〔1030〕 Text
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS NOT MAINTAINED

〔1031〕 Get 〔TravelMethod〕 Time　»
• Destination: 〔Repeat Item’s Location〕

〔1032〕 Set Variable TravelTimeString to 〔1031 Travel Time〕

〔1033〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1034〕 Set Variable MatchString to 〔1033 Matches〕

〔1035〕 Count Items in 〔MatchString〕　»

〔1036〕 If 〔1035 Count〕 is 1

〔1037〕 Get First Item from List 〔MatchString〕　»

〔1038〕 Set Variable TravelDays to 〔1037 Item from List〕

〔1039〕 Otherwise

〔1040〕 Number 0　»

〔1041〕 Set Variable TravelDays to 〔1040 Number〕

〔1042〕 End If

〔1043〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1044〕 Set Variable MatchString to 〔1043 Matches〕

〔1045〕 Count Items in 〔MatchString〕　»

〔1046〕 If 〔1045 Count〕 is 1

〔1047〕 Get First Item from List 〔MatchString〕　»

〔1048〕 Set Variable TravelHours to 〔1047 Item from List〕

〔1049〕 Otherwise

〔1050〕 Number 0　»

〔1051〕 Set Variable TravelHours to 〔1050 Number〕

〔1052〕 End If

〔1053〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1054〕 Set Variable MatchString to 〔1053 Matches〕

〔1055〕 Count Items in 〔MatchString〕　»

〔1056〕 If 〔1055 Count〕 is 1

〔1057〕 Get First Item from List 〔MatchString〕　»

〔1058〕 Set Variable TravelMinutes to 〔1057 Item from List〕

〔1059〕 Otherwise

〔1060〕 Number 0　»

〔1061〕 Set Variable TravelMinutes to 〔1060 Number〕

〔1062〕 End If

〔1063〕 Calculate 〔TravelDays〕 × 1440　» 1065

〔1064〕 Calculate 〔TravelHours〕 × 60　»

〔1065〕 Calculate 〔1064 Calculation Result〕 + 〔1063 Calculation Result〕　»

〔1066〕 Calculate 〔1065 Calculation Result〕 + 〔TravelMinutes〕　»

〔1067〕 Set Variable TravelTime to 〔1066 Calculation Result〕

〔1068〕 End If　▵1029

〔1069〕 End If　▵937

〔1070〕 Otherwise　▵842

〔1071〕 Number 0　»

〔1072〕 Set Variable TravelTime to 〔1071 Number〕

〔1073〕 End If

〔1074〕 Calculate 〔TravelTime〕 + 〔ExtraTime〕　»

〔1075〕 Adjust Subtract Date 〔Repeat Item’s Start Date〕 　➔ Supposed Alarm Time　» 1076 1079 1082 1085 1092 1108 1110 1111 1130 1135 1138
• Duration: 〔1074 Calculation Result〕 min

〔1076〕 Dictionary 　➔ Alarm Label Dictionary　» 1108 1113 1130
{  "Event": "〔Repeat Item〕",
   "From": "〔Repeat Item’s Start Date〕",
   "To": "〔Repeat Item’s End Date〕",
   "Location": "〔Repeat Item’s Location〕",
   "AlarmTime": "〔1075 Supposed Alarm Time〕"
}

〔1077〕 Date Current Date 　➔ Current Date　» 1078 1079 1110

〔1078〕 Adjust Add Date 〔1077 Current Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"dd MMM yyyy"}〕 　➔ 1 day after　» 1092 1111
• Duration: "1" days

〔1079〕 If 〔1075 Supposed Alarm Time〕 is 〔1077 Current Date〕

〔1080〕 Comment
supposed alarm time is exactly 12:00am

〔1081〕 If 〔Repeat Item’s Location〕 has any value

〔1082〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 at 〔Repeat Item’s Location〕 which  was supposed to get ready at 〔1075 Supposed Alarm Time〕. Please check.

〔1083〕 Set Variable Text to 〔1082 Text〕

〔1084〕 Otherwise

〔1085〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 which  was supposed to get ready at 〔1075 Supposed Alarm Time〕. Please check.

〔1086〕 Set Variable Text to 〔1085 Text〕

〔1087〕 End If

〔1088〕 Show Alert 〔Text〕

〔1089〕 Show Notification 〔Text〕

〔1090〕 Speak Text
• Text: 〔Text〕

〔1091〕 Otherwise　▵1079

〔1092〕 If 〔1075 Supposed Alarm Time〕 is 〔1078 1 day after〕

〔1093〕 Find Alarm All Alarm　» 1094 1095

〔1094〕 If 〔1093 Alarms〕 has any value

〔1095〕 Repeat[2] with Each in 〔1093 Alarms〕

〔1096〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ AlarmLabelDictionary　» 1097 1098 1100

〔1097〕 Get Dictionary Value for Event in 〔1096 AlarmLabelDictionary〕 　➔ Event　» 1102

〔1098〕 Get Dictionary Value for From in 〔1096 AlarmLabelDictionary〕 　➔ From　»

〔1099〕 Get Dates from 〔1098 From〕 　➔ FromDate　» 1102

〔1100〕 Get Dictionary Value for To in 〔1096 AlarmLabelDictionary〕 　➔ To　»

〔1101〕 Get Dates from 〔1100 To〕 　➔ ToDate　»

〔1102〕 If All are true　〔1097 Event’s Name〕 is 〔Repeat Item〕　〔1099 FromDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔Repeat Item’s Start Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕　〔1101 ToDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is • ConditionalActionString
〔Repeat Item’s End Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕• Date
〔Repeat Item’s End Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕

〔1103〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔1104〕 End If

〔1105〕 End Repeat[2] with Each　▵1095

〔1106〕 End If　▵1094

〔1107〕 Comment
since this will be triggered at 12:00 am each day, when the supposed alarm time is 12:00 am in the next day, you can set alarm now

〔1108〕 Add Alarm for 〔1075 Supposed Alarm Time〕 called 〔1076 Alarm Label Dictionary〕

〔1109〕 Otherwise　▵1092

〔1110〕 If 〔1075 Supposed Alarm Time〕 > 〔1077 Current Date〕

〔1111〕 If 〔1075 Supposed Alarm Time〕 > 〔1078 1 day after〕

〔1112〕 Comment
when the time is other than 12:00 am of then next day, you cannot set alarm yet. If set, it will be today. For example, triggering time 2025-4-8 12:00 am, the supposed alarm time is 2025-4-9 08:00 am, if you set an alarm at 08:00 at 2025-4-8 12:00 am, it will alarm at 2025-4-8 08:00 am instead. So we need to record the supposed alarm time and trigger next day.

〔1113〕 Set Variable Event to 〔1076 Alarm Label Dictionary〕

〔1114〕 Otherwise

〔1115〕 Find Alarm All Alarm　» 1116 1117
• ContentItemFilter: {  "Value": {
      "WFActionParameterFilterPrefix": 1,
      "WFContentPredicateBoundedDate": false,
      "WFActionParameterFilterTemplates": []
   },
   "WFSerializationType": "WFContentPredicateTableTemplate"
}

〔1116〕 If 〔1115 Alarms〕 has any value

〔1117〕 Repeat[2] with Each in 〔1115 Alarms〕

〔1118〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ AlarmLabelDictionary　» 1119 1121 1123

〔1119〕 Get Dictionary Value for Event in 〔1118 AlarmLabelDictionary〕 　➔ Event　»

〔1120〕 Get Text from 〔1119 Event〕　» 1125

〔1121〕 Get Dictionary Value for From in 〔1118 AlarmLabelDictionary〕 　➔ From　»

〔1122〕 Get Dates from 〔1121 From〕 　➔ FromDate　» 1125

〔1123〕 Get Dictionary Value for To in 〔1118 AlarmLabelDictionary〕 　➔ To　»

〔1124〕 Get Dates from 〔1123 To〕 　➔ ToDate　»

〔1125〕 If All are true　〔1120 Text〕 is 〔Repeat Item〕　〔1122 FromDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm:ss Z"}〕 is 〔Repeat Item’s Start Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm:ss Z"}〕　〔1124 ToDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm:ss Z"}〕 is 〔Repeat Item’s End Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm:ss Z"}〕

〔1126〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔1127〕 End If

〔1128〕 End Repeat[2] with Each　▵1117

〔1129〕 End If　▵1116

〔1130〕 Add Alarm for 〔1075 Supposed Alarm Time〕 called 〔1076 Alarm Label Dictionary〕

〔1131〕 End If　▵1114

〔1132〕 Otherwise　▵1110

〔1133〕 Comment
the supposed alarm time passed

〔1134〕 If 〔Repeat Item’s Location〕 has any value

〔1135〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 at 〔Repeat Item’s Location〕 which  was supposed to get ready at 〔1075 Supposed Alarm Time〕. Please check.

〔1136〕 Set Variable Text to 〔1135 Text〕

〔1137〕 Otherwise

〔1138〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 which  was supposed to get ready at 〔1075 Supposed Alarm Time〕. Please check.

〔1139〕 Set Variable Text to 〔1138 Text〕

〔1140〕 End If

〔1141〕 Show Alert 〔Text〕

〔1142〕 Show Notification 〔Text〕

〔1143〕 Speak Text
• Text: 〔Text〕

〔1144〕 End If　▵1132

〔1145〕 End If　▵1109

〔1146〕 End If　▵1091

〔1147〕 If 〔Event〕 has any value

〔1148〕 Get Dictionary from 〔Event〕　» 1149 1150 1152

〔1149〕 Get Text from 〔1148 Dictionary.Event〕　» 1167

〔1150〕 Get Dates from 〔1148 Dictionary.From〕　»

〔1151〕 Format Date 〔1150 Dates〕　» 1167
• DateFormatStyle: ISO 8601
• ISO8601IncludeTime: true

〔1152〕 Get Dates from 〔1148 Dictionary.To〕　»

〔1153〕 Format Date 〔1152 Dates〕　» 1167
• DateFormatStyle: ISO 8601
• ISO8601IncludeTime: true

〔1154〕 Text　»

〔1155〕 Set Variable TextList to 〔1154 Text〕

〔1156〕 Add 〔Event〕 to Variable TextList

〔1157〕 Get File at Path Smart Calendar Reminder/Future Alarms.txt from Folder　» 1158 1159
• FileErrorIfNotFound: false

〔1158〕 If 〔1157 File’s File Size〕 has any value

〔1159〕 Split Text 〔1157 File〕 by New Lines　»

〔1160〕 Repeat[2] with Each in 〔1159 Split Text〕

〔1161〕 Get Dictionary from 〔Repeat Item 2〕　» 1162 1163 1165

〔1162〕 Get Text from 〔1161 Dictionary.Event〕　» 1167

〔1163〕 Get Dates from 〔1161 Dictionary.From〕　» 1164 1167

〔1164〕 Format Date 〔1163 Dates〕　» 1167
• DateFormatStyle: ISO 8601
• ISO8601IncludeTime: true

〔1165〕 Get Dates from 〔1161 Dictionary.To〕　» 1166 1167

〔1166〕 Format Date 〔1165 Dates〕　»
• DateFormatStyle: ISO 8601
• ISO8601IncludeTime: true

〔1167〕 If All are true　〔1149 Text〕 is 〔1162 Text〕　〔1151 Formatted Date〕 is • ConditionalActionString
〔1164 Formatted Date〕• Date
〔1163 Dates〕　〔1153 Formatted Date〕 is • ConditionalActionString
〔1166 Formatted Date〕• Date
〔1165 Dates〕

〔1168〕 Nothing

〔1169〕 Otherwise

〔1170〕 Add 〔Repeat Item 2〕 to Variable TextList

〔1171〕 End If

〔1172〕 End Repeat[2] with Each　▵1160

〔1173〕 Combine Text 〔TextList〕 with New Lines　»

〔1174〕 Save File 〔1173 Combined Text〕
• AskWhereToSave: false
• SaveFileOverwrite: true
• FileDestinationPath: Smart Calendar Reminder/Future Alarms.txt

〔1175〕 Otherwise　▵1158

〔1176〕 Text　»

〔Event〕

〔1177〕 Save File 〔1176 Text〕
• AskWhereToSave: false
• FileDestinationPath: Smart Calendar Reminder/Future Alarms.txt

〔1178〕 End If

〔1179〕 End If　▵1147

〔1180〕 End Repeat with Each　▵840

〔1181〕 End If　▵839

〔1182〕 Get File at Path Smart Calendar Reminder/Future Alarms.txt from Folder　» 1183 1184
• FileErrorIfNotFound: false

〔1183〕 If 〔1182 File’s File Size〕 has any value

〔1184〕 Split Text 〔1182 File〕 by New Lines　»

〔1185〕 Repeat with Each in 〔1184 Split Text〕

〔1186〕 Get Dictionary from 〔Repeat Item〕　» 1187 1188 1198

〔1187〕 If 〔1186 Dictionary〕 has any value

〔1188〕 Get Dates from 〔1186 Dictionary.AlarmTime〕　» 1189 1209

〔1189〕 If 〔1188 Dates〕 is today

〔1190〕 Find Alarm Library　» 1191 1192
• ContentItemFilter: {  "Value": {
      "WFActionParameterFilterPrefix": 1,
      "WFContentPredicateBoundedDate": false,
      "WFActionParameterFilterTemplates": []
   },
   "WFSerializationType": "WFContentPredicateTableTemplate"
}

〔1191〕 If 〔1190 Alarms〕 has any value

〔1192〕 Repeat[2] with Each in 〔1190 Alarms〕

〔1193〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ Alarm_Label_Dictionary　» 1194 1196 1204 1209

〔1194〕 Get Dictionary Value for From in 〔1193 Alarm_Label_Dictionary〕　»

〔1195〕 Get Dates from 〔1194 Dictionary Value〕 　➔ From_Date　» 1204

〔1196〕 Get Dictionary Value for To in 〔1193 Alarm_Label_Dictionary〕　»

〔1197〕 Get Dates from 〔1196 Dictionary Value〕 　➔ To_Date　» 1204

〔1198〕 Get Dictionary from 〔1186 Dictionary.Event〕 　➔ FutureAlarmLabelDictionary　» 1199 1200 1202

〔1199〕 Get Dictionary Value for Event in 〔1198 FutureAlarmLabelDictionary〕 　➔ Event　» 1204

〔1200〕 Get Dictionary Value for From in 〔1198 FutureAlarmLabelDictionary〕 　➔ From　»

〔1201〕 Get Dates from 〔1200 From〕 　➔ FromDate　» 1204

〔1202〕 Get Dictionary Value for To in 〔1198 FutureAlarmLabelDictionary〕 　➔ To　»

〔1203〕 Get Dates from 〔1202 To〕 　➔ ToDate　»

〔1204〕 If All are true　〔1199 Event’s Name〕 is 〔1193 Alarm_Label_Dictionary.Event〕　〔1201 FromDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔1195 From_Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕　〔1203 ToDate{"Date Style":"Custom","WFDateFormat":"HH:mm","WFISO8601IncludeTime":false}〕 is 〔1197 To_Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕

〔1205〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔1206〕 End If

〔1207〕 End Repeat[2] with Each　▵1192

〔1208〕 End If　▵1191

〔1209〕 Add Alarm for 〔1188 Dates〕 called 〔1193 Alarm_Label_Dictionary〕

〔1210〕 End If　▵1189

〔1211〕 End If　▵1187

〔1212〕 End Repeat with Each　▵1185

〔1213〕 End If　▵1183

〔1214〕 End If　▵827

〔1215〕 If 〔Shortcut Input as Number〕 is 6

〔1216〕 Comment
*Revolutionizing event management by integrating calendar data with intelligent automation:

Voice announcements for upcoming events

Dynamic alarm calculation (travel + prep time)

Calendar-driven scheduling system
Eliminates manual reminders and ensures perfect timing synchronization*

〔1217〕 Get File at Path Smart Calendar Reminder/aboutme.txt from Folder　»
• FileErrorIfNotFound: false

〔1218〕 Get Dictionary from 〔1217 File〕　» 1219 1222 1223

〔1219〕 Get Dictionary from 〔1218 Dictionary.HomeAddress〕　»

〔1220〕 Text　»
〔1219 Dictionary.street〕 〔1219 Dictionary.city〕 〔1219 Dictionary.state〕 〔1219 Dictionary.postcode〕 〔1219 Dictionary.country〕\u{space}

〔1221〕 Set Variable HomeAddress to 〔1220 Text〕

〔1222〕 Set Variable TravelMethod to 〔1218 Dictionary.TravelMethod〕

〔1223〕 Get Dictionary Value for ExtraTime in 〔1218 Dictionary〕　»

〔1224〕 Get Numbers from 〔1223 Dictionary Value〕　»

〔1225〕 Set Variable ExtraTime to 〔1224 Numbers〕

〔1226〕 Find Calendar Events All Calendar Events where　» 1227 1228
• ContentItemSortProperty: Start Date
• ContentItemSortOrder: Oldest First
• ContentItemFilter: • All the following are true
Start Date is in the next 1 weeks
Is Not All Day
Canceled is {"Bool":false}

〔1227〕 If 〔1226 Calendar Events〕 has any value

〔1228〕 Repeat with Each in 〔1226 Calendar Events〕

〔1229〕 If 〔Repeat Item’s Location〕 has any value

〔1230〕 Get Current Location　» 1242 1248 1334
• Accuracy: Best

〔1231〕 Comment
*To specify event-specific departure locations:

1. Create calendar event notes with JSON structure:
{
“Street”: “your departure street”,
“City”: “your departure city”,
“State”: “your departure state”,
“Country”: “your departure country”,
“Postcode”: “your departure postcode”
}
2. System prioritizes these over default locations*

〔1232〕 If All are true　〔Repeat Item’s Notes〕 has any value　〔Repeat Item’s Notes〕 begins with {　〔Repeat Item’s Notes〕 ends with }

〔1233〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY

〔1234〕 Get Dictionary from 〔Repeat Item’s Notes〕 　➔ Notes Address Dictionary　» 1235 1236 1237 1238 1239

〔1235〕 Set Variable Calendar_Notes_Street to 〔1234 Notes Address Dictionary.Street〕

〔1236〕 Set Variable Calendar_Notes_City to 〔1234 Notes Address Dictionary.City〕

〔1237〕 Set Variable Calendar_Notes_State to 〔1234 Notes Address Dictionary.State〕

〔1238〕 Set Variable Calendar_Notes_Region to 〔1234 Notes Address Dictionary.Country〕

〔1239〕 Set Variable Calendar_Notes_ZIP_Code to 〔1234 Notes Address Dictionary.Postcode〕

〔1240〕 Text　»
〔Calendar_Notes_Street〕 〔Calendar_Notes_City〕 〔Calendar_Notes_State〕 〔Calendar_Notes_ZIP_Code〕 〔Calendar_Notes_Region〕

〔1241〕 Set Variable NotesAddressString to 〔1240 Text〕

〔1242〕 If All are true　〔1230 Current Location’s Street〕 is 〔Calendar_Notes_Street〕　〔1230 Current Location’s City〕 is 〔Calendar_Notes_City〕　〔1230 Current Location’s State〕 is 〔Calendar_Notes_State〕　〔1230 Current Location’s Country〕 is 〔Calendar_Notes_Region〕　〔1230 Current Location’s ZIP Code〕 is 〔Calendar_Notes_ZIP_Code〕

〔1243〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY -> CALENDAR EVENT ADDRESS IS THE SAME WITH CURRENT LOCATION

〔1244〕 Number 0　»

〔1245〕 Set Variable CurrentToDeparture to 〔1244 Number〕

〔1246〕 Otherwise

〔1247〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY -> CALENDAR EVENT ADDRESS IS NOT THE SAME WITH CURRENT LOCATION

〔1248〕 Get 〔TravelMethod〕 Time　»
• GetDirectionsCustomLocation: 〔1230 Current Location〕
• Destination: 〔NotesAddressString〕

〔1249〕 Set Variable TravelTimeString to 〔1248 Travel Time〕

〔1250〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1251〕 Set Variable MatchString to 〔1250 Matches〕

〔1252〕 Count Items in 〔MatchString〕　»

〔1253〕 If 〔1252 Count〕 is 1

〔1254〕 Get First Item from List 〔MatchString〕　»

〔1255〕 Set Variable TravelDays to 〔1254 Item from List〕

〔1256〕 Otherwise

〔1257〕 Number 0　»

〔1258〕 Set Variable TravelDays to 〔1257 Number〕

〔1259〕 End If

〔1260〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1261〕 Set Variable MatchString to 〔1260 Matches〕

〔1262〕 Count Items in 〔MatchString〕　»

〔1263〕 If 〔1262 Count〕 is 1

〔1264〕 Get First Item from List 〔MatchString〕　»

〔1265〕 Set Variable TravelHours to 〔1264 Item from List〕

〔1266〕 Otherwise

〔1267〕 Number 0　»

〔1268〕 Set Variable TravelHours to 〔1267 Number〕

〔1269〕 End If

〔1270〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1271〕 Set Variable MatchString to 〔1270 Matches〕

〔1272〕 Count Items in 〔MatchString〕　»

〔1273〕 If 〔1272 Count〕 is 1

〔1274〕 Get First Item from List 〔MatchString〕　»

〔1275〕 Set Variable TravelMinutes to 〔1274 Item from List〕

〔1276〕 Otherwise

〔1277〕 Number 0　»

〔1278〕 Set Variable TravelMinutes to 〔1277 Number〕

〔1279〕 End If

〔1280〕 Calculate 〔TravelDays〕 × 1440　» 1282

〔1281〕 Calculate 〔TravelHours〕 × 60　»

〔1282〕 Calculate 〔1281 Calculation Result〕 + 〔1280 Calculation Result〕　»

〔1283〕 Calculate 〔1282 Calculation Result〕 + 〔TravelMinutes〕　»

〔1284〕 Set Variable CurrentToDeparture to 〔1283 Calculation Result〕

〔1285〕 End If　▵1246

〔1286〕 Get 〔TravelMethod〕 Time 　➔ DepartureToDestination　»
• GetDirectionsCustomLocation: 〔NotesAddressString〕
• Destination: 〔Repeat Item’s Location〕

〔1287〕 Set Variable TravelTimeString to 〔1286 DepartureToDestination〕

〔1288〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1289〕 Set Variable MatchString to 〔1288 Matches〕

〔1290〕 Count Items in 〔MatchString〕　»

〔1291〕 If 〔1290 Count〕 is 1

〔1292〕 Get First Item from List 〔MatchString〕　»

〔1293〕 Set Variable TravelDays to 〔1292 Item from List〕

〔1294〕 Otherwise

〔1295〕 Number 0　»

〔1296〕 Set Variable TravelDays to 〔1295 Number〕

〔1297〕 End If

〔1298〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1299〕 Set Variable MatchString to 〔1298 Matches〕

〔1300〕 Count Items in 〔MatchString〕　»

〔1301〕 If 〔1300 Count〕 is 1

〔1302〕 Get First Item from List 〔MatchString〕　»

〔1303〕 Set Variable TravelHours to 〔1302 Item from List〕

〔1304〕 Otherwise

〔1305〕 Number 0　»

〔1306〕 Set Variable TravelHours to 〔1305 Number〕

〔1307〕 End If

〔1308〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1309〕 Set Variable MatchString to 〔1308 Matches〕

〔1310〕 Count Items in 〔MatchString〕　»

〔1311〕 If 〔1310 Count〕 is 1

〔1312〕 Get First Item from List 〔MatchString〕　»

〔1313〕 Set Variable TravelMinutes to 〔1312 Item from List〕

〔1314〕 Otherwise

〔1315〕 Number 0　»

〔1316〕 Set Variable TravelMinutes to 〔1315 Number〕

〔1317〕 End If

〔1318〕 Calculate 〔TravelDays〕 × 1440　» 1320

〔1319〕 Calculate 〔TravelHours〕 × 60　»

〔1320〕 Calculate 〔1319 Calculation Result〕 + 〔1318 Calculation Result〕　»

〔1321〕 Calculate 〔1320 Calculation Result〕 + 〔TravelMinutes〕　»

〔1322〕 Calculate 〔1321 Calculation Result〕 + 〔CurrentToDeparture〕　»

〔1323〕 Set Variable TravelTime to 〔1322 Calculation Result〕

〔1324〕 Otherwise　▵1232

〔1325〕 Comment
CALENDER EVENT NOTES IS BLANK

〔1326〕 Get Dictionary from 〔HomeAddress〕 　➔ Home Address Dictionary　» 1327 1328 1329 1330 1331

〔1327〕 Get Dictionary Value for street in 〔1326 Home Address Dictionary〕 　➔ home_Street　» 1332 1334

〔1328〕 Get Dictionary Value for city in 〔1326 Home Address Dictionary〕 　➔ home_City　» 1332 1334

〔1329〕 Get Dictionary Value for state in 〔1326 Home Address Dictionary〕 　➔ home_State　» 1332 1334

〔1330〕 Get Dictionary Value for country in 〔1326 Home Address Dictionary〕 　➔ home_Country　» 1332 1334

〔1331〕 Get Dictionary Value for postcode in 〔1326 Home Address Dictionary〕 　➔ home_Postcode　» 1332 1334

〔1332〕 If All are true　〔1327 home_Street〕 has any value　〔1328 home_City〕 has any value　〔1329 home_State〕 has any value　〔1330 home_Country〕 has any value　〔1331 home_Postcode〕 has any value

〔1333〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED

〔1334〕 If All are true　〔1230 Current Location’s Street〕 is 〔1327 home_Street〕　〔1230 Current Location’s City〕 is 〔1328 home_City〕　〔1230 Current Location’s State〕 is 〔1329 home_State〕　〔1230 Current Location’s Country〕 is 〔1330 home_Country〕　〔1230 Current Location’s ZIP Code〕 is 〔1331 home_Postcode〕

〔1335〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED -> HOME ADDRESS IS THE SAME WITH CURRENT LOCATION

〔1336〕 Number 0　»

〔1337〕 Set Variable CurrentToDeparture to 〔1336 Number〕

〔1338〕 Otherwise

〔1339〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED -> HOME ADDRESS IS NOT THE SAME WITH CURRENT LOCATION

〔1340〕 Get 〔TravelMethod〕 Time　»
• Destination: 〔HomeAddress〕

〔1341〕 Set Variable TravelTimeString to 〔1340 Travel Time〕

〔1342〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1343〕 Set Variable MatchString to 〔1342 Matches〕

〔1344〕 Count Items in 〔MatchString〕　»

〔1345〕 If 〔1344 Count〕 is 1

〔1346〕 Get First Item from List 〔MatchString〕　»

〔1347〕 Set Variable TravelDays to 〔1346 Item from List〕

〔1348〕 Otherwise

〔1349〕 Number 0　»

〔1350〕 Set Variable TravelDays to 〔1349 Number〕

〔1351〕 End If

〔1352〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1353〕 Set Variable MatchString to 〔1352 Matches〕

〔1354〕 Count Items in 〔MatchString〕　»

〔1355〕 If 〔1354 Count〕 is 1

〔1356〕 Get First Item from List 〔MatchString〕　»

〔1357〕 Set Variable TravelHours to 〔1356 Item from List〕

〔1358〕 Otherwise

〔1359〕 Number 0　»

〔1360〕 Set Variable TravelHours to 〔1359 Number〕

〔1361〕 End If

〔1362〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1363〕 Set Variable MatchString to 〔1362 Matches〕

〔1364〕 Count Items in 〔MatchString〕　»

〔1365〕 If 〔1364 Count〕 is 1

〔1366〕 Get First Item from List 〔MatchString〕　»

〔1367〕 Set Variable TravelMinutes to 〔1366 Item from List〕

〔1368〕 Otherwise

〔1369〕 Number 0　»

〔1370〕 Set Variable TravelMinutes to 〔1369 Number〕

〔1371〕 End If

〔1372〕 Calculate 〔TravelDays〕 × 1440　» 1374

〔1373〕 Calculate 〔TravelHours〕 × 60　»

〔1374〕 Calculate 〔1373 Calculation Result〕 + 〔1372 Calculation Result〕　»

〔1375〕 Calculate 〔1374 Calculation Result〕 + 〔TravelMinutes〕　»

〔1376〕 Set Variable CurrentToDeparture to 〔1375 Calculation Result〕

〔1377〕 End If　▵1338

〔1378〕 Get 〔TravelMethod〕 Time 　➔ DepartureToDestination　»
• GetDirectionsCustomLocation: 〔HomeAddress〕
• Destination: 〔Repeat Item’s Location〕

〔1379〕 Set Variable TravelTimeString to 〔1378 DepartureToDestination〕

〔1380〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1381〕 Set Variable MatchString to 〔1380 Matches〕

〔1382〕 Count Items in 〔MatchString〕　»

〔1383〕 If 〔1382 Count〕 is 1

〔1384〕 Get First Item from List 〔MatchString〕　»

〔1385〕 Set Variable TravelDays to 〔1384 Item from List〕

〔1386〕 Otherwise

〔1387〕 Number 0　»

〔1388〕 Set Variable TravelDays to 〔1387 Number〕

〔1389〕 End If

〔1390〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1391〕 Set Variable MatchString to 〔1390 Matches〕

〔1392〕 Count Items in 〔MatchString〕　»

〔1393〕 If 〔1392 Count〕 is 1

〔1394〕 Get First Item from List 〔MatchString〕　»

〔1395〕 Set Variable TravelHours to 〔1394 Item from List〕

〔1396〕 Otherwise

〔1397〕 Number 0　»

〔1398〕 Set Variable TravelHours to 〔1397 Number〕

〔1399〕 End If

〔1400〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1401〕 Set Variable MatchString to 〔1400 Matches〕

〔1402〕 Count Items in 〔MatchString〕　»

〔1403〕 If 〔1402 Count〕 is 1

〔1404〕 Get First Item from List 〔MatchString〕　»

〔1405〕 Set Variable TravelMinutes to 〔1404 Item from List〕

〔1406〕 Otherwise

〔1407〕 Number 0　»

〔1408〕 Set Variable TravelMinutes to 〔1407 Number〕

〔1409〕 End If

〔1410〕 Calculate 〔TravelDays〕 × 1440　» 1412

〔1411〕 Calculate 〔TravelHours〕 × 60　»

〔1412〕 Calculate 〔1411 Calculation Result〕 + 〔1410 Calculation Result〕　»

〔1413〕 Calculate 〔1412 Calculation Result〕 + 〔TravelMinutes〕　»

〔1414〕 Calculate 〔1413 Calculation Result〕 + 〔CurrentToDeparture〕　»

〔1415〕 Set Variable TravelTime to 〔1414 Calculation Result〕

〔1416〕 Otherwise　▵1332

〔1417〕 Text
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS NOT MAINTAINED

〔1418〕 Get 〔TravelMethod〕 Time　»
• Destination: 〔Repeat Item’s Location〕

〔1419〕 Set Variable TravelTimeString to 〔1418 Travel Time〕

〔1420〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1421〕 Set Variable MatchString to 〔1420 Matches〕

〔1422〕 Count Items in 〔MatchString〕　»

〔1423〕 If 〔1422 Count〕 is 1

〔1424〕 Get First Item from List 〔MatchString〕　»

〔1425〕 Set Variable TravelDays to 〔1424 Item from List〕

〔1426〕 Otherwise

〔1427〕 Number 0　»

〔1428〕 Set Variable TravelDays to 〔1427 Number〕

〔1429〕 End If

〔1430〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1431〕 Set Variable MatchString to 〔1430 Matches〕

〔1432〕 Count Items in 〔MatchString〕　»

〔1433〕 If 〔1432 Count〕 is 1

〔1434〕 Get First Item from List 〔MatchString〕　»

〔1435〕 Set Variable TravelHours to 〔1434 Item from List〕

〔1436〕 Otherwise

〔1437〕 Number 0　»

〔1438〕 Set Variable TravelHours to 〔1437 Number〕

〔1439〕 End If

〔1440〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1441〕 Set Variable MatchString to 〔1440 Matches〕

〔1442〕 Count Items in 〔MatchString〕　»

〔1443〕 If 〔1442 Count〕 is 1

〔1444〕 Get First Item from List 〔MatchString〕　»

〔1445〕 Set Variable TravelMinutes to 〔1444 Item from List〕

〔1446〕 Otherwise

〔1447〕 Number 0　»

〔1448〕 Set Variable TravelMinutes to 〔1447 Number〕

〔1449〕 End If

〔1450〕 Calculate 〔TravelDays〕 × 1440　» 1452

〔1451〕 Calculate 〔TravelHours〕 × 60　»

〔1452〕 Calculate 〔1451 Calculation Result〕 + 〔1450 Calculation Result〕　»

〔1453〕 Calculate 〔1452 Calculation Result〕 + 〔TravelMinutes〕　»

〔1454〕 Set Variable TravelTime to 〔1453 Calculation Result〕

〔1455〕 End If　▵1416

〔1456〕 End If　▵1324

〔1457〕 Otherwise　▵1229

〔1458〕 Number 0　»

〔1459〕 Set Variable TravelTime to 〔1458 Number〕

〔1460〕 End If

〔1461〕 Calculate 〔TravelTime〕 + 〔ExtraTime〕　»

〔1462〕 Adjust Subtract Date 〔Repeat Item’s Start Date〕 　➔ Supposed Alarm Time　» 1463 1466 1469 1472 1479 1495 1497 1498 1516 1521 1524
• Duration: 〔1461 Calculation Result〕 min

〔1463〕 Dictionary 　➔ Alarm Label Dictionary　» 1495 1500 1516
{  "Event": "〔Repeat Item〕",
   "From": "〔Repeat Item’s Start Date〕",
   "To": "〔Repeat Item’s End Date〕",
   "Location": "〔Repeat Item’s Location〕",
   "AlarmTime": "〔1462 Supposed Alarm Time〕"
}

〔1464〕 Date Current Date 　➔ Current Date　» 1465 1466 1497

〔1465〕 Adjust Add Date 〔1464 Current Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"dd MMM yyyy"}〕 　➔ 1 day after　» 1479 1498
• Duration: "1" days

〔1466〕 If 〔1462 Supposed Alarm Time〕 is 〔1464 Current Date〕

〔1467〕 Comment
supposed alarm time is exactly 12:00am

〔1468〕 If 〔Repeat Item’s Location〕 has any value

〔1469〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 at 〔Repeat Item’s Location〕 which  was supposed to get ready at 〔1462 Supposed Alarm Time〕. Please check.

〔1470〕 Set Variable Text to 〔1469 Text〕

〔1471〕 Otherwise

〔1472〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 which  was supposed to get ready at 〔1462 Supposed Alarm Time〕. Please check.

〔1473〕 Set Variable Text to 〔1472 Text〕

〔1474〕 End If

〔1475〕 Show Alert 〔Text〕

〔1476〕 Show Notification 〔Text〕

〔1477〕 Speak Text
• Text: 〔Text〕

〔1478〕 Otherwise　▵1466

〔1479〕 If 〔1462 Supposed Alarm Time〕 is 〔1465 1 day after〕

〔1480〕 Find Alarm All Alarm　» 1481 1482

〔1481〕 If 〔1480 Alarms〕 has any value

〔1482〕 Repeat[2] with Each in 〔1480 Alarms〕

〔1483〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ AlarmLabelDictionary　» 1484 1485 1487

〔1484〕 Get Dictionary Value for Event in 〔1483 AlarmLabelDictionary〕 　➔ Event　» 1489

〔1485〕 Get Dictionary Value for From in 〔1483 AlarmLabelDictionary〕 　➔ From　»

〔1486〕 Get Dates from 〔1485 From〕 　➔ FromDate　» 1489

〔1487〕 Get Dictionary Value for To in 〔1483 AlarmLabelDictionary〕 　➔ To　»

〔1488〕 Get Dates from 〔1487 To〕 　➔ ToDate　»

〔1489〕 If All are true　〔1484 Event’s Name〕 is 〔Repeat Item〕　〔1486 FromDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔Repeat Item’s Start Date{"Date Style":"Custom","WFDateFormat":"HH:mm","WFISO8601IncludeTime":false}〕　〔1488 ToDate{"Date Style":"Custom","WFDateFormat":"HH:mm","WFISO8601IncludeTime":false}〕 is • ConditionalActionString
〔Repeat Item’s End Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕• Date
〔Repeat Item’s End Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕

〔1490〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔1491〕 End If

〔1492〕 End Repeat[2] with Each　▵1482

〔1493〕 End If　▵1481

〔1494〕 Comment
since this will be triggered at 12:00 am each day, when the supposed alarm time is 12:00 am in the next day, you can set alarm now

〔1495〕 Add Alarm for 〔1462 Supposed Alarm Time〕 called 〔1463 Alarm Label Dictionary〕

〔1496〕 Otherwise　▵1479

〔1497〕 If 〔1462 Supposed Alarm Time〕 > 〔1464 Current Date〕

〔1498〕 If 〔1462 Supposed Alarm Time〕 > 〔1465 1 day after〕

〔1499〕 Comment
when the time is other than 12:00 am of then next day, you cannot set alarm yet. If set, it will be today. For example, triggering time 2025-4-8 12:00 am, the supposed alarm time is 2025-4-9 08:00 am, if you set an alarm at 08:00 at 2025-4-8 12:00 am, it will alarm at 2025-4-8 08:00 am instead. So we need to record the supposed alarm time and trigger next day.

〔1500〕 Set Variable FutureEvent to 〔1463 Alarm Label Dictionary〕

〔1501〕 Otherwise

〔1502〕 Find Alarm All Alarm　» 1503 1504
• ContentItemFilter: {  "Value": {
      "WFActionParameterFilterPrefix": 1,
      "WFActionParameterFilterTemplates": [],
      "WFContentPredicateBoundedDate": false
   },
   "WFSerializationType": "WFContentPredicateTableTemplate"
}

〔1503〕 If 〔1502 Alarms〕 has any value

〔1504〕 Repeat[2] with Each in 〔1502 Alarms〕

〔1505〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ AlarmLabelDictionary　» 1506 1507 1509

〔1506〕 Get Dictionary Value for Event in 〔1505 AlarmLabelDictionary〕 　➔ Event　» 1511

〔1507〕 Get Dictionary Value for From in 〔1505 AlarmLabelDictionary〕 　➔ From　»

〔1508〕 Get Dates from 〔1507 From〕 　➔ FromDate　» 1511

〔1509〕 Get Dictionary Value for To in 〔1505 AlarmLabelDictionary〕 　➔ To　»

〔1510〕 Get Dates from 〔1509 To〕 　➔ ToDate　»

〔1511〕 If All are true　〔1506 Event’s Name〕 is 〔Repeat Item〕　〔1508 FromDate{"Date Style":"Custom","WFDateFormat":"HH:mm","WFISO8601IncludeTime":false}〕 is 〔Repeat Item’s Start Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕　〔1510 ToDate{"Date Style":"Custom","WFDateFormat":"HH:mm","WFISO8601IncludeTime":false}〕 is 〔Repeat Item’s End Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕

〔1512〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔1513〕 End If

〔1514〕 End Repeat[2] with Each　▵1504

〔1515〕 End If　▵1503

〔1516〕 Add Alarm for 〔1462 Supposed Alarm Time〕 called 〔1463 Alarm Label Dictionary〕

〔1517〕 End If　▵1501

〔1518〕 Otherwise　▵1497

〔1519〕 Comment
the supposed alarm time passed

〔1520〕 If 〔Repeat Item’s Location〕 has any value

〔1521〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 at 〔Repeat Item’s Location〕 which  was supposed to get ready at 〔1462 Supposed Alarm Time〕. Please check.

〔1522〕 Set Variable Text to 〔1521 Text〕

〔1523〕 Otherwise

〔1524〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 which  was supposed to get ready at 〔1462 Supposed Alarm Time〕. Please check.

〔1525〕 Set Variable Text to 〔1524 Text〕

〔1526〕 End If

〔1527〕 Show Alert 〔Text〕

〔1528〕 Show Notification 〔Text〕

〔1529〕 Speak Text
• Text: 〔Text〕

〔1530〕 End If　▵1518

〔1531〕 End If　▵1496

〔1532〕 End If　▵1478

〔1533〕 If 〔FutureEvent as Dictionary〕 has any value

〔1534〕 Get Dictionary from 〔FutureEvent〕　» 1547

〔1535〕 Text　»

〔1536〕 Set Variable TextList to 〔1535 Text〕

〔1537〕 Add 〔Event〕 to Variable TextList

〔1538〕 Get File at Path Smart Calendar Reminder/Future Alarms.txt from Folder　» 1539 1540
• FileErrorIfNotFound: false

〔1539〕 If 〔1538 File’s File Size〕 has any value

〔1540〕 Split Text 〔1538 File〕 by New Lines　»

〔1541〕 Repeat[2] with Each in 〔1540 Split Text〕

〔1542〕 Get Dictionary from 〔Repeat Item 2〕　» 1543 1544 1545 1546

〔1543〕 Get Dictionary Value for Event in 〔1542 Dictionary〕 　➔ Event　» 1547

〔1544〕 Get Dictionary Value for From in 〔1542 Dictionary〕 　➔ From　» 1547

〔1545〕 Get Dictionary Value for To in 〔1542 Dictionary〕 　➔ To　» 1547

〔1546〕 Get Dictionary Value for Location in 〔1542 Dictionary〕 　➔ Location　»

〔1547〕 If Any are true　〔1543 Event’s Name〕 is not 〔1534 Dictionary.Event〕　〔1544 From’s Name〕 is not 〔1534 Dictionary.From〕　〔1545 To’s Name〕 is not 〔1534 Dictionary.To〕　〔1546 Location’s Name〕 is not 〔1534 Dictionary.Location〕

〔1548〕 Add 〔Repeat Item 2〕 to Variable TextList

〔1549〕 End If

〔1550〕 End Repeat[2] with Each　▵1541

〔1551〕 Combine Text 〔TextList〕 with New Lines　»

〔1552〕 Save File 〔1551 Combined Text〕
• AskWhereToSave: false
• SaveFileOverwrite: true
• FileDestinationPath: Smart Calendar Reminder/Future Alarms.txt

〔1553〕 Otherwise　▵1539

〔1554〕 Text　»

〔Event〕

〔1555〕 Save File 〔1554 Text〕
• AskWhereToSave: false
• FileDestinationPath: Smart Calendar Reminder/Future Alarms.txt

〔1556〕 End If

〔1557〕 End If　▵1533

〔1558〕 End Repeat with Each　▵1228

〔1559〕 End If　▵1227

〔1560〕 Get File at Path Smart Calendar Reminder/Future Alarms.txt from Folder　» 1561 1562
• FileErrorIfNotFound: false

〔1561〕 If 〔1560 File’s File Size〕 has any value

〔1562〕 Split Text 〔1560 File〕 by New Lines　»

〔1563〕 Repeat with Each in 〔1562 Split Text〕

〔1564〕 Get Dictionary from 〔Repeat Item〕　» 1565 1566 1567 1568 1569

〔1565〕 Get Text from 〔1564 Dictionary.Event〕　» 1577

〔1566〕 Get Dates from 〔1564 Dictionary.From〕　» 1578

〔1567〕 Get Dates from 〔1564 Dictionary.To〕　» 1578

〔1568〕 If 〔1564 Dictionary〕 has any value

〔1569〕 Get Dates from 〔1564 Dictionary.AlarmTime〕　» 1570 1582 1585

〔1570〕 If 〔1569 Dates〕 is today

〔1571〕 Find Alarm All Alarm　» 1572 1573
• ContentItemFilter: {  "Value": {
      "WFActionParameterFilterPrefix": 1,
      "WFContentPredicateBoundedDate": false,
      "WFActionParameterFilterTemplates": []
   },
   "WFSerializationType": "WFContentPredicateTableTemplate"
}

〔1572〕 If 〔1571 Alarms〕 has any value

〔1573〕 Repeat[2] with Each in 〔1571 Alarms〕

〔1574〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ Alarm_Label_Dictionary　» 1575 1576 1577 1582 1585

〔1575〕 Get Dates from 〔1574 Alarm_Label_Dictionary.From〕 　➔ From_Date　» 1578

〔1576〕 Get Dates from 〔1574 Alarm_Label_Dictionary.To〕 　➔ To_Date　» 1578

〔1577〕 If 〔1565 Text〕 is 〔1574 Alarm_Label_Dictionary.Event〕

〔1578〕 If All are true　〔1566 Dates〕 is 〔1575 From_Date〕　〔1567 Dates〕 is 〔1576 To_Date〕

〔1579〕 Nothing

〔1580〕 Otherwise

〔1581〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔1582〕 Add Alarm for 〔1569 Dates〕 called 〔1574 Alarm_Label_Dictionary〕

〔1583〕 End If

〔1584〕 Otherwise　▵1577

〔1585〕 Add Alarm for 〔1569 Dates〕 called 〔1574 Alarm_Label_Dictionary〕

〔1586〕 End If

〔1587〕 End Repeat[2] with Each　▵1573

〔1588〕 End If　▵1572

〔1589〕 End If　▵1570

〔1590〕 End If　▵1568

〔1591〕 End Repeat with Each　▵1563

〔1592〕 End If　▵1561

〔1593〕 End If　▵1215

〔1594〕 If 〔Shortcut Input as Number〕 is 7

〔1595〕 Comment
1-Hour Event Processor
*Real-time event handler for immediate notifications:

Processes events within next 60 minutes

Provides most accurate travel estimates

Recommended for hourly automation*

〔1596〕 Get File at Path Smart Calendar Reminder/aboutme.txt from Folder　»
• FileErrorIfNotFound: false

〔1597〕 Get Dictionary from 〔1596 File〕　» 1598 1601 1602

〔1598〕 Get Dictionary from 〔1597 Dictionary.HomeAddress〕　»

〔1599〕 Text　»
〔1598 Dictionary.street〕 〔1598 Dictionary.city〕 〔1598 Dictionary.state〕 〔1598 Dictionary.postcode〕 〔1598 Dictionary.country〕

〔1600〕 Set Variable Home_Address to 〔1599 Text〕

〔1601〕 Set Variable Travel_Method to 〔1597 Dictionary.TravelMethod〕

〔1602〕 Get Dictionary Value for ExtraTime in 〔1597 Dictionary〕　»

〔1603〕 Get Numbers from 〔1602 Dictionary Value〕　»

〔1604〕 Set Variable Extra_Time to 〔1603 Numbers〕

〔1605〕 Find Calendar Events All Calendar Events where　» 1606 1607 1608 1875
• ContentItemSortProperty: Start Date
• ContentItemSortOrder: Oldest First
• ContentItemFilter: • All the following are true
Start Date is in the next 30 minutes
Is Not All Day
Canceled is {"Bool":false}

〔1606〕 If 〔1605 Calendar Events〕 has any value

〔1607〕 Count Items in 〔1605 Calendar Events〕　» 1879 1887

〔1608〕 Repeat with Each in 〔1605 Calendar Events〕

〔1609〕 If 〔Repeat Item’s Location〕 has any value

〔1610〕 Get Current Location　» 1621 1627 1713
• Accuracy: Best

〔1611〕 If All are true　〔Repeat Item’s Notes〕 has any value　〔Repeat Item’s Notes〕 begins with {　〔Repeat Item’s Notes〕 ends with }

〔1612〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY

〔1613〕 Get Dictionary from 〔Repeat Item’s Notes〕 　➔ NotesAddressDictionary　» 1614 1615 1616 1617 1618

〔1614〕 Set Variable CalendarNotesStreet to 〔1613 NotesAddressDictionary.Street〕

〔1615〕 Set Variable CalendarNotesCity to 〔1613 NotesAddressDictionary.City〕

〔1616〕 Set Variable CalendarNotesState to 〔1613 NotesAddressDictionary.State〕

〔1617〕 Set Variable CalendarNotesRegion to 〔1613 NotesAddressDictionary.Country〕

〔1618〕 Set Variable CalendarNotesZIPCode to 〔1613 NotesAddressDictionary.Postcode〕

〔1619〕 Text　»
〔CalendarNotesStreet〕 〔CalendarNotesCity〕 〔CalendarNotesState〕 〔CalendarNotesZIPCode〕 〔CalendarNotesRegion〕

〔1620〕 Set Variable NotesAddressString to 〔1619 Text〕

〔1621〕 If All are true　〔1610 Current Location’s Street〕 is 〔CalendarNotesStreet〕　〔1610 Current Location’s City〕 is 〔CalendarNotesCity〕　〔1610 Current Location’s State〕 is 〔CalendarNotesState〕　〔1610 Current Location’s Country〕 is 〔CalendarNotesRegion〕　〔1610 Current Location’s ZIP Code〕 is 〔CalendarNotesZIPCode〕

〔1622〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY -> CALENDAR EVENT ADDRESS IS THE SAME WITH CURRENT LOCATION

〔1623〕 Number 0　»

〔1624〕 Set Variable CurrentToDeparture to 〔1623 Number〕

〔1625〕 Otherwise

〔1626〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY -> CALENDAR EVENT ADDRESS IS NOT THE SAME WITH CURRENT LOCATION

〔1627〕 Get 〔TravelMethod〕 Time　»
• GetDirectionsCustomLocation: 〔1610 Current Location〕
• Destination: 〔NotesAddressString〕

〔1628〕 Set Variable TravelTimeString to 〔1627 Travel Time〕

〔1629〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1630〕 Set Variable MatchString to 〔1629 Matches〕

〔1631〕 Count Items in 〔MatchString〕　»

〔1632〕 If 〔1631 Count〕 is 1

〔1633〕 Get First Item from List 〔MatchString〕　»

〔1634〕 Set Variable TravelDays to 〔1633 Item from List〕

〔1635〕 Otherwise

〔1636〕 Number 0　»

〔1637〕 Set Variable TravelDays to 〔1636 Number〕

〔1638〕 End If

〔1639〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1640〕 Set Variable MatchString to 〔1639 Matches〕

〔1641〕 Count Items in 〔MatchString〕　»

〔1642〕 If 〔1641 Count〕 is 1

〔1643〕 Get First Item from List 〔MatchString〕　»

〔1644〕 Set Variable TravelHours to 〔1643 Item from List〕

〔1645〕 Otherwise

〔1646〕 Number 0　»

〔1647〕 Set Variable TravelHours to 〔1646 Number〕

〔1648〕 End If

〔1649〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1650〕 Set Variable MatchString to 〔1649 Matches〕

〔1651〕 Count Items in 〔MatchString〕　»

〔1652〕 If 〔1651 Count〕 is 1

〔1653〕 Get First Item from List 〔MatchString〕　»

〔1654〕 Set Variable TravelMinutes to 〔1653 Item from List〕

〔1655〕 Otherwise

〔1656〕 Number 0　»

〔1657〕 Set Variable TravelMinutes to 〔1656 Number〕

〔1658〕 End If

〔1659〕 Calculate 〔TravelDays〕 × 1440　» 1661

〔1660〕 Calculate 〔TravelHours〕 × 60　»

〔1661〕 Calculate 〔1660 Calculation Result〕 + 〔1659 Calculation Result〕　»

〔1662〕 Calculate 〔1661 Calculation Result〕 + 〔TravelMinutes〕　»

〔1663〕 Set Variable CurrentToDeparture to 〔1662 Calculation Result〕

〔1664〕 End If　▵1625

〔1665〕 Get 〔TravelMethod〕 Time 　➔ DepartureToDestination　»
• GetDirectionsCustomLocation: 〔NotesAddressString〕
• Destination: 〔Repeat Item’s Location〕

〔1666〕 Set Variable TravelTimeString to 〔1665 DepartureToDestination〕

〔1667〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1668〕 Set Variable MatchString to 〔1667 Matches〕

〔1669〕 Count Items in 〔MatchString〕　»

〔1670〕 If 〔1669 Count〕 is 1

〔1671〕 Get First Item from List 〔MatchString〕　»

〔1672〕 Set Variable TravelDays to 〔1671 Item from List〕

〔1673〕 Otherwise

〔1674〕 Number 0　»

〔1675〕 Set Variable TravelDays to 〔1674 Number〕

〔1676〕 End If

〔1677〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1678〕 Set Variable MatchString to 〔1677 Matches〕

〔1679〕 Count Items in 〔MatchString〕　»

〔1680〕 If 〔1679 Count〕 is 1

〔1681〕 Get First Item from List 〔MatchString〕　»

〔1682〕 Set Variable TravelHours to 〔1681 Item from List〕

〔1683〕 Otherwise

〔1684〕 Number 0　»

〔1685〕 Set Variable TravelHours to 〔1684 Number〕

〔1686〕 End If

〔1687〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1688〕 Set Variable MatchString to 〔1687 Matches〕

〔1689〕 Count Items in 〔MatchString〕　»

〔1690〕 If 〔1689 Count〕 is 1

〔1691〕 Get First Item from List 〔MatchString〕　»

〔1692〕 Set Variable TravelMinutes to 〔1691 Item from List〕

〔1693〕 Otherwise

〔1694〕 Number 0　»

〔1695〕 Set Variable TravelMinutes to 〔1694 Number〕

〔1696〕 End If

〔1697〕 Calculate 〔TravelDays〕 × 1440　» 1699

〔1698〕 Calculate 〔TravelHours〕 × 60　»

〔1699〕 Calculate 〔1698 Calculation Result〕 + 〔1697 Calculation Result〕　»

〔1700〕 Calculate 〔1699 Calculation Result〕 + 〔TravelMinutes〕　»

〔1701〕 Calculate 〔1700 Calculation Result〕 + 〔CurrentToDeparture〕　»

〔1702〕 Set Variable TravelTime to 〔1701 Calculation Result〕

〔1703〕 Otherwise　▵1611

〔1704〕 Comment
CALENDER EVENT NOTES IS BLANK

〔1705〕 Get Dictionary from 〔HomeAddress〕 　➔ home_address_dictionary　» 1706 1707 1708 1709 1710

〔1706〕 Get Dictionary Value for street in 〔1705 home_address_dictionary〕 　➔ HomeStreet　» 1711 1713

〔1707〕 Get Dictionary Value for city in 〔1705 home_address_dictionary〕 　➔ HomeCity　» 1711 1713

〔1708〕 Get Dictionary Value for state in 〔1705 home_address_dictionary〕 　➔ HomeState　» 1711 1713

〔1709〕 Get Dictionary Value for country in 〔1705 home_address_dictionary〕 　➔ HomeCountry　» 1711 1713

〔1710〕 Get Dictionary Value for postcode in 〔1705 home_address_dictionary〕 　➔ HomePostcode　» 1711 1713

〔1711〕 If All are true　〔1706 HomeStreet〕 has any value　〔1707 HomeCity〕 has any value　〔1708 HomeState〕 has any value　〔1709 HomeCountry〕 has any value　〔1710 HomePostcode〕 has any value

〔1712〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED

〔1713〕 If All are true　〔1610 Current Location’s Street〕 is 〔1706 HomeStreet〕　〔1610 Current Location’s City〕 is 〔1707 HomeCity〕　〔1610 Current Location’s State〕 is 〔1708 HomeState〕　〔1610 Current Location’s Country〕 is 〔1709 HomeCountry〕　〔1610 Current Location’s ZIP Code〕 is 〔1710 HomePostcode〕

〔1714〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED -> HOME ADDRESS IS THE SAME WITH CURRENT LOCATION

〔1715〕 Number 0　»

〔1716〕 Set Variable CurrentToDeparture to 〔1715 Number〕

〔1717〕 Otherwise

〔1718〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED -> HOME ADDRESS IS NOT THE SAME WITH CURRENT LOCATION

〔1719〕 Get 〔TravelMethod〕 Time　»
• Destination: 〔HomeAddress〕

〔1720〕 Set Variable TravelTimeString to 〔1719 Travel Time〕

〔1721〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1722〕 Set Variable MatchString to 〔1721 Matches〕

〔1723〕 Count Items in 〔MatchString〕　»

〔1724〕 If 〔1723 Count〕 is 1

〔1725〕 Get First Item from List 〔MatchString〕　»

〔1726〕 Set Variable TravelDays to 〔1725 Item from List〕

〔1727〕 Otherwise

〔1728〕 Number 0　»

〔1729〕 Set Variable TravelDays to 〔1728 Number〕

〔1730〕 End If

〔1731〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1732〕 Set Variable MatchString to 〔1731 Matches〕

〔1733〕 Count Items in 〔MatchString〕　»

〔1734〕 If 〔1733 Count〕 is 1

〔1735〕 Get First Item from List 〔MatchString〕　»

〔1736〕 Set Variable TravelHours to 〔1735 Item from List〕

〔1737〕 Otherwise

〔1738〕 Number 0　»

〔1739〕 Set Variable TravelHours to 〔1738 Number〕

〔1740〕 End If

〔1741〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1742〕 Set Variable MatchString to 〔1741 Matches〕

〔1743〕 Count Items in 〔MatchString〕　»

〔1744〕 If 〔1743 Count〕 is 1

〔1745〕 Get First Item from List 〔MatchString〕　»

〔1746〕 Set Variable TravelMinutes to 〔1745 Item from List〕

〔1747〕 Otherwise

〔1748〕 Number 0　»

〔1749〕 Set Variable TravelMinutes to 〔1748 Number〕

〔1750〕 End If

〔1751〕 Calculate 〔TravelDays〕 × 1440　» 1753

〔1752〕 Calculate 〔TravelHours〕 × 60　»

〔1753〕 Calculate 〔1752 Calculation Result〕 + 〔1751 Calculation Result〕　»

〔1754〕 Calculate 〔1753 Calculation Result〕 + 〔TravelMinutes〕　»

〔1755〕 Set Variable CurrentToDeparture to 〔1754 Calculation Result〕

〔1756〕 End If　▵1717

〔1757〕 Get 〔TravelMethod〕 Time 　➔ DepartureToDestination　»
• GetDirectionsCustomLocation: 〔HomeAddress〕
• Destination: 〔Repeat Item’s Location〕

〔1758〕 Set Variable TravelTimeString to 〔1757 DepartureToDestination〕

〔1759〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1760〕 Set Variable MatchString to 〔1759 Matches〕

〔1761〕 Count Items in 〔MatchString〕　»

〔1762〕 If 〔1761 Count〕 is 1

〔1763〕 Get First Item from List 〔MatchString〕　»

〔1764〕 Set Variable TravelDays to 〔1763 Item from List〕

〔1765〕 Otherwise

〔1766〕 Number 0　»

〔1767〕 Set Variable TravelDays to 〔1766 Number〕

〔1768〕 End If

〔1769〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1770〕 Set Variable MatchString to 〔1769 Matches〕

〔1771〕 Count Items in 〔MatchString〕　»

〔1772〕 If 〔1771 Count〕 is 1

〔1773〕 Get First Item from List 〔MatchString〕　»

〔1774〕 Set Variable TravelHours to 〔1773 Item from List〕

〔1775〕 Otherwise

〔1776〕 Number 0　»

〔1777〕 Set Variable TravelHours to 〔1776 Number〕

〔1778〕 End If

〔1779〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1780〕 Set Variable MatchString to 〔1779 Matches〕

〔1781〕 Count Items in 〔MatchString〕　»

〔1782〕 If 〔1781 Count〕 is 1

〔1783〕 Get First Item from List 〔MatchString〕　»

〔1784〕 Set Variable TravelMinutes to 〔1783 Item from List〕

〔1785〕 Otherwise

〔1786〕 Number 0　»

〔1787〕 Set Variable TravelMinutes to 〔1786 Number〕

〔1788〕 End If

〔1789〕 Calculate 〔TravelDays〕 × 1440　» 1791

〔1790〕 Calculate 〔TravelHours〕 × 60　»

〔1791〕 Calculate 〔1790 Calculation Result〕 + 〔1789 Calculation Result〕　»

〔1792〕 Calculate 〔1791 Calculation Result〕 + 〔TravelMinutes〕　»

〔1793〕 Calculate 〔1792 Calculation Result〕 + 〔CurrentToDeparture〕　»

〔1794〕 Set Variable TravelTime to 〔1793 Calculation Result〕

〔1795〕 Otherwise　▵1711

〔1796〕 Text
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS NOT MAINTAINED

〔1797〕 Get 〔TravelMethod〕 Time　»
• Destination: 〔Repeat Item’s Location〕

〔1798〕 Set Variable TravelTimeString to 〔1797 Travel Time〕

〔1799〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1800〕 Set Variable MatchString to 〔1799 Matches〕

〔1801〕 Count Items in 〔MatchString〕　»

〔1802〕 If 〔1801 Count〕 is 1

〔1803〕 Get First Item from List 〔MatchString〕　»

〔1804〕 Set Variable TravelDays to 〔1803 Item from List〕

〔1805〕 Otherwise

〔1806〕 Number 0　»

〔1807〕 Set Variable TravelDays to 〔1806 Number〕

〔1808〕 End If

〔1809〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1810〕 Set Variable MatchString to 〔1809 Matches〕

〔1811〕 Count Items in 〔MatchString〕　»

〔1812〕 If 〔1811 Count〕 is 1

〔1813〕 Get First Item from List 〔MatchString〕　»

〔1814〕 Set Variable TravelHours to 〔1813 Item from List〕

〔1815〕 Otherwise

〔1816〕 Number 0　»

〔1817〕 Set Variable TravelHours to 〔1816 Number〕

〔1818〕 End If

〔1819〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1820〕 Set Variable MatchString to 〔1819 Matches〕

〔1821〕 Count Items in 〔MatchString〕　»

〔1822〕 If 〔1821 Count〕 is 1

〔1823〕 Get First Item from List 〔MatchString〕　»

〔1824〕 Set Variable TravelMinutes to 〔1823 Item from List〕

〔1825〕 Otherwise

〔1826〕 Number 0　»

〔1827〕 Set Variable TravelMinutes to 〔1826 Number〕

〔1828〕 End If

〔1829〕 Calculate 〔TravelDays〕 × 1440　» 1831

〔1830〕 Calculate 〔TravelHours〕 × 60　»

〔1831〕 Calculate 〔1830 Calculation Result〕 + 〔1829 Calculation Result〕　»

〔1832〕 Calculate 〔1831 Calculation Result〕 + 〔TravelMinutes〕　»

〔1833〕 Set Variable TravelTime to 〔1832 Calculation Result〕

〔1834〕 End If　▵1795

〔1835〕 End If　▵1703

〔1836〕 Otherwise　▵1609

〔1837〕 Number 0　»

〔1838〕 Set Variable TravelTime to 〔1837 Number〕

〔1839〕 End If

〔1840〕 Find Alarm All Alarm　» 1841 1842
• ContentItemFilter: {  "Value": {
      "WFActionParameterFilterPrefix": 1,
      "WFContentPredicateBoundedDate": false,
      "WFActionParameterFilterTemplates": []
   },
   "WFSerializationType": "WFContentPredicateTableTemplate"
}

〔1841〕 If 〔1840 Alarms〕 has any value

〔1842〕 Repeat[2] with Each in 〔1840 Alarms〕

〔1843〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ AlarmLabelDictionary　» 1844 1845 1847

〔1844〕 Get Dictionary Value for Event in 〔1843 AlarmLabelDictionary〕 　➔ Event　» 1849

〔1845〕 Get Dictionary Value for From in 〔1843 AlarmLabelDictionary〕 　➔ From　»

〔1846〕 Get Dates from 〔1845 From〕 　➔ FromDate　» 1849

〔1847〕 Get Dictionary Value for To in 〔1843 AlarmLabelDictionary〕 　➔ To　»

〔1848〕 Get Dates from 〔1847 To〕 　➔ ToDate　»

〔1849〕 If All are true　〔1844 Event’s Name〕 is 〔Repeat Item〕　〔1846 FromDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔Repeat Item’s Start Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕　〔1848 ToDate{"Date Style":"Custom","WFDateFormat":"HH:mm","WFISO8601IncludeTime":false}〕 is 〔Repeat Item’s End Date{"Date Style":"Custom","WFDateFormat":"HH:mm","WFISO8601IncludeTime":false}〕

〔1850〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔1851〕 End If

〔1852〕 End Repeat[2] with Each　▵1842

〔1853〕 End If　▵1841

〔1854〕 Calculate 〔TravelTime〕 + 〔Extra_Time〕　»

〔1855〕 Adjust Subtract Date 〔Repeat Item’s Start Date〕 　➔ Supposed_Alarm_Time　» 1857 1859 1862 1869 1870
• Duration: 〔1854 Calculation Result〕 min

〔1856〕 Date Current Date　»

〔1857〕 If Any are true　〔1855 Supposed_Alarm_Time〕 < 〔1856 Date〕　〔1855 Supposed_Alarm_Time〕 is 〔1856 Date〕

〔1858〕 If 〔Repeat Item’s Location〕 has any value

〔1859〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 at 〔Repeat Item’s Location〕  which  was supposed to get ready at 〔1855 Supposed_Alarm_Time〕. Please check.

〔1860〕 Set Variable Text to 〔1859 Text〕

〔1861〕 Otherwise

〔1862〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 which  was supposed to get ready at 〔1855 Supposed_Alarm_Time〕. Please check.

〔1863〕 Set Variable Text to 〔1862 Text〕

〔1864〕 End If

〔1865〕 Show Alert 〔Text〕

〔1866〕 Show Notification 〔Text〕

〔1867〕 Speak Text
• Text: 〔Text〕

〔1868〕 Otherwise　▵1857

〔1869〕 Dictionary　»
{  "Event": "〔Repeat Item〕",
   "From": "〔Repeat Item’s Start Date〕",
   "To": "〔Repeat Item’s End Date〕",
   "Location": "〔Repeat Item’s Location〕",
   "AlarmTime": "〔1855 Supposed_Alarm_Time〕"
}

〔1870〕 Add Alarm for 〔1855 Supposed_Alarm_Time〕 called 〔1869 Dictionary〕

〔1871〕 End If

〔1872〕 End Repeat with Each　▵1608

〔1873〕 Number 3　»

〔1874〕 Repeat 〔1873 Number〕 Times

〔1875〕 Repeat[2] with Each in 〔1605 Calendar Events〕

〔1876〕 Format Date 〔Repeat Item 2’s Start Date〕　» 1880 1883 1888 1891
• DateFormatStyle: None

〔1877〕 Format Date 〔Repeat Item 2’s End Date〕　» 1880 1883 1888 1891
• DateFormatStyle: None

〔1878〕 If 〔Repeat Item 2’s Location〕 has any value

〔1879〕 If 〔1607 Count〕 > 1

〔1880〕 Text　»
Event 〔Repeat Index 2〕 〔Repeat Item 2〕 from 〔1876 Formatted Date〕 to 〔1877 Formatted Date〕 at 〔Repeat Item 2’s Location〕

〔1881〕 Set Variable Text to 〔1880 Text〕

〔1882〕 Otherwise

〔1883〕 Text　»
Event  〔Repeat Item 2〕 from 〔1876 Formatted Date〕 to 〔1877 Formatted Date〕 at 〔Repeat Item 2’s Location〕

〔1884〕 Set Variable Text to 〔1883 Text〕

〔1885〕 End If

〔1886〕 Otherwise　▵1878

〔1887〕 If 〔1607 Count〕 > 1

〔1888〕 Text　»
Event 〔Repeat Index 2〕 〔Repeat Item 2〕 from 〔1876 Formatted Date〕 to 〔1877 Formatted Date〕

〔1889〕 Set Variable Text to 〔1888 Text〕

〔1890〕 Otherwise

〔1891〕 Text　»
Event  〔Repeat Item 2〕 from 〔1876 Formatted Date〕 to 〔1877 Formatted Date〕

〔1892〕 Set Variable Text to 〔1891 Text〕

〔1893〕 End If

〔1894〕 End If　▵1886

〔1895〕 Speak Text
• Text: 〔Text〕

〔1896〕 Wait 1 seconds

〔1897〕 End Repeat[2] with Each　▵1875

〔1898〕 End Repeat Times　▵1874

〔1899〕 End If　▵1606

〔1900〕 End If　▵1594

〔1901〕 End If　▵91
