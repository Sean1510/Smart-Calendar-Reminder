Smart Calendar Reminder V3 (1630 actions, 513 KB)
"WFQuickActionSurfaces": [],
"WFWorkflowClientVersion": "3303.0.5",
"WFWorkflowHasOutputFallback": false,
"WFWorkflowHasShortcutInputVariables": true,
"WFWorkflowIcon": {
   "WFWorkflowIconStartColor": 431817727,
   "WFWorkflowIconGlyphNumber": 61701
},
"WFWorkflowImportQuestions": [],
"WFWorkflowInputContentItemClasses": [],
"WFWorkflowMinimumClientVersion": 3010,
"WFWorkflowMinimumClientVersionString": "3010",
"WFWorkflowOutputContentItemClasses": [],
"WFWorkflowTypes": []


〔0〕 If 〔Shortcut Input〕 does not have any value

〔1〕 Comment
Initial setup and version update check when no input is provided

〔2〕 Comment
Inspired by [Schedule Shortcut or Alarm] but designed to work smarter for my needs! Instead of manually inputting each trigger or alarm, this shortcut leverages my Calendar as the ultimate data source. It automatically scans for upcoming events, then:

• Speaks out the event details
• Sets a tailored alarm—accounting for travel and prep time—right when you need it

No more early, forgettable reminders. It keeps your schedule perfectly in sync. Give it a try and let your Calendar do the heavy lifting!

〔3〕 Dictionary 　➔ Version Dictionary 　» 4 5 7 9 10 11 12 20 21 25 31 46 72
{  "Name": "Smart Calendar Reminder",
   "Version": "3.0",
   "RH ID": "21959",
   "Icons": {
      "Update": "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",
      "Skip": "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",
      "Not Now": "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"
   }
}

〔4〕 Get Contents of URL https://routinehub.co/api/v1/shortcuts/〔3 Version Dictionary .RH ID〕/versions/latest 　➔ RH Server　» 6 8 11 16 20

〔5〕 Get File at Path 〔3 Version Dictionary .Name〕/Skip.txt from Folder　»
• File: {  "fileLocation": {
      "crossDeviceItemID": "docs.icloud.com:com.apple.CloudDocs/documents/95d6214c39557e3de40d802073a860c04f3aed5b",
      "fileProviderDomainID": "com.apple.CloudDocs.iCloudDriveFileProvider/38059A1C-DC76-4B89-B62F-250A61DBFC73",
      "appContainerBundleIdentifier": "com.apple.shortcuts",
      "relativeSubpath": "",
      "WFFileLocationType": "Shortcuts"
   },
   "filename": "Documents",
   "displayName": "Shortcuts"
}
• FileErrorIfNotFound: false
• ShowFilePicker: false
• GetFolderContents: true

〔6〕 If 〔5 File as Text〕 is not 〔4 RH Server as Dictionary.Version〕

〔7〕 Get Dictionary Value for Version in 〔3 Version Dictionary 〕　»

〔8〕 If 〔7 Dictionary Value as Text〕 is not 〔4 RH Server as Dictionary.Version〕

〔9〕 Base64 Decode 〔3 Version Dictionary .Icons.Update〕

〔10〕 Show Alert A new version of 〔3 Version Dictionary .Name〕 is available to download!

〔11〕 Text　» 14
⬆️ Update ⬆️

A new version of 〔3 Version Dictionary .Name〕 is available to download!

〔3 Version Dictionary .Version〕 ↗ 〔4 RH Server as Dictionary.Version〕   —   〔4 RH Server as Dictionary.Release〕

〔4 RH Server as Dictionary.Notes〕

〔12〕 Text　»
BEGIN:VCARD
VERSION:3.0
N;CHARSET=utf-8:Update;;;;
PHOTO;ENCODING=b:〔3 Version Dictionary .Icons.Update〕
END:VCARD

BEGIN:VCARD
VERSION:3.0
N;CHARSET=utf-8:Skip;;;;
PHOTO;ENCODING=b:〔3 Version Dictionary .Icons.Skip〕
END:VCARD

BEGIN:VCARD
VERSION:3.0
N;CHARSET=utf-8:Not Now;;;;
PHOTO;ENCODING=b:〔3 Version Dictionary .Icons.Not Now〕
END:VCARD

〔13〕 Set Name of 〔12 Text〕 to updateprompt.vcf　»

〔14〕 Choose from List 〔13 Renamed Item as Contact〕　» 15 19
• ChooseFromListActionPrompt: 〔11 Text〕

〔15〕 If 〔14 Chosen Item as Text〕 is Update

〔16〕 Open URL 〔4 RH Server as Dictionary.URL〕
• Show-WFInput: true

〔17〕 Stop This Shortcut

〔18〕 End If

〔19〕 If 〔14 Chosen Item as Text〕 is Skip

〔20〕 Save File 〔4 RH Server as Dictionary.Version〕
• AskWhereToSave: false
• SaveFileOverwrite: true
• FileDestinationPath: 〔3 Version Dictionary .Name〕/Skip.txt

〔21〕 Show Alert This version of 〔3 Version Dictionary .Name〕 has been skipped!
• AlertActionTitle: ✅ Done ✅
• AlertActionCancelButtonShown: false

〔22〕 End If

〔23〕 End If　▵8

〔24〕 End If　▵6

〔25〕 Get File at Path 〔3 Version Dictionary .Name〕/Welcome.pdf from Folder　»
• FileErrorIfNotFound: false

〔26〕 If 〔25 File’s File Size〕 does not have any value

〔27〕 Text　»
<html><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Smart Calendar Reminder: Your Intelligent Schedule Assistant</title><style>
    /* cspell:disable-file */
    /* webkit printing magic: print all background colors */
    html {
        -webkit-print-color-adjust: exact;
    }
    * {
        box-sizing: border-box;
        -webkit-print-color-adjust: exact;
    }
\u{space}\u{space}\u{space}\u{space}
    html,
    body {
        margin: 0;
        padding: 0;
    }
    @media only screen {
        body {
            margin: 2em auto;
            max-width: 900px;
            color: rgb(55, 53, 47);
        }
    }
\u{space}\u{space}\u{space}\u{space}
    body {
        line-height: 1.5;
        white-space: pre-wrap;
    }
\u{space}\u{space}\u{space}\u{space}
    a,
    a.visited {
        color: inherit;
        text-decoration: underline;
    }
\u{space}\u{space}\u{space}\u{space}
    .pdf-relative-link-path {
        font-size: 80%;
        color: #444;
    }
\u{space}\u{space}\u{space}\u{space}
    h1,
    h2,
    h3 {
        letter-spacing: -0.01em;
        line-height: 1.2;
        font-weight: 600;
        margin-bottom: 0;
    }
\u{space}\u{space}\u{space}\u{space}
    .page-title {
        font-size: 2.5rem;
        font-weight: 700;
        margin-top: 0;
        margin-bottom: 0.75em;
    }
\u{space}\u{space}\u{space}\u{space}
    h1 {
        font-size: 1.875rem;
        margin-top: 1.875rem;
    }
\u{space}\u{space}\u{space}\u{space}
    h2 {
        font-size: 1.5rem;
        margin-top: 1.5rem;
    }
\u{space}\u{space}\u{space}\u{space}
    h3 {
        font-size: 1.25rem;
        margin-top: 1.25rem;
    }
\u{space}\u{space}\u{space}\u{space}
    .source {
        border: 1px solid #ddd;
        border-radius: 3px;
        padding: 1.5em;
        word-break: break-all;
    }
\u{space}\u{space}\u{space}\u{space}
    .callout {
        border-radius: 3px;
        padding: 1rem;
    }
\u{space}\u{space}\u{space}\u{space}
    figure {
        margin: 1.25em 0;
        page-break-inside: avoid;
    }
\u{space}\u{space}\u{space}\u{space}
    figcaption {
        opacity: 0.5;
        font-size: 85%;
        margin-top: 0.5em;
    }
\u{space}\u{space}\u{space}\u{space}
    mark {
        background-color: transparent;
    }
\u{space}\u{space}\u{space}\u{space}
    .indented {
        padding-left: 1.5em;
    }
\u{space}\u{space}\u{space}\u{space}
    hr {
        background: transparent;
        display: block;
        width: 100%;
        height: 1px;
        visibility: visible;
        border: none;
        border-bottom: 1px solid rgba(55, 53, 47, 0.09);
    }
\u{space}\u{space}\u{space}\u{space}
    img {
        max-width: 100%;
    }
\u{space}\u{space}\u{space}\u{space}
    @media only print {
        img {
            max-height: 100vh;
            object-fit: contain;
        }
    }
\u{space}\u{space}\u{space}\u{space}
    @page {
        margin: 1in;
    }
\u{space}\u{space}\u{space}\u{space}
    .collection-content {
        font-size: 0.875rem;
    }
\u{space}\u{space}\u{space}\u{space}
    .column-list {
        display: flex;
        justify-content: space-between;
    }
\u{space}\u{space}\u{space}\u{space}
    .column {
        padding: 0 1em;
    }
\u{space}\u{space}\u{space}\u{space}
    .column:first-child {
        padding-left: 0;
    }
\u{space}\u{space}\u{space}\u{space}
    .column:last-child {
        padding-right: 0;
    }
\u{space}\u{space}\u{space}\u{space}
    .table_of_contents-item {
        display: block;
        font-size: 0.875rem;
        line-height: 1.3;
        padding: 0.125rem;
    }
\u{space}\u{space}\u{space}\u{space}
    .table_of_contents-indent-1 {
        margin-left: 1.5rem;
    }
\u{space}\u{space}\u{space}\u{space}
    .table_of_contents-indent-2 {
        margin-left: 3rem;
    }
\u{space}\u{space}\u{space}\u{space}
    .table_of_contents-indent-3 {
        margin-left: 4.5rem;
    }
\u{space}\u{space}\u{space}\u{space}
    .table_of_contents-link {
        text-decoration: none;
        opacity: 0.7;
        border-bottom: 1px solid rgba(55, 53, 47, 0.18);
    }
\u{space}\u{space}\u{space}\u{space}
    table,
    th,
    td {
        border: 1px solid rgba(55, 53, 47, 0.09);
        border-collapse: collapse;
    }
\u{space}\u{space}\u{space}\u{space}
    table {
        border-left: none;
        border-right: none;
    }
\u{space}\u{space}\u{space}\u{space}
    th,
    td {
        font-weight: normal;
        padding: 0.25em 0.5em;
        line-height: 1.5;
        min-height: 1.5em;
        text-align: left;
    }
\u{space}\u{space}\u{space}\u{space}
    th {
        color: rgba(55, 53, 47, 0.6);
    }
\u{space}\u{space}\u{space}\u{space}
    ol,
    ul {
        margin: 0;
        margin-block-start: 0.6em;
        margin-block-end: 0.6em;
    }
\u{space}\u{space}\u{space}\u{space}
    li > ol:first-child,
    li > ul:first-child {
        margin-block-start: 0.6em;
    }
\u{space}\u{space}\u{space}\u{space}
    ul > li {
        list-style: disc;
    }
\u{space}\u{space}\u{space}\u{space}
    ul.to-do-list {
        padding-inline-start: 0;
    }
\u{space}\u{space}\u{space}\u{space}
    ul.to-do-list > li {
        list-style: none;
    }
\u{space}\u{space}\u{space}\u{space}
    .to-do-children-checked {
        text-decoration: line-through;
        opacity: 0.375;
    }
\u{space}\u{space}\u{space}\u{space}
    ul.toggle > li {
        list-style: none;
    }
\u{space}\u{space}\u{space}\u{space}
    ul {
        padding-inline-start: 1.7em;
    }
\u{space}\u{space}\u{space}\u{space}
    ul > li {
        padding-left: 0.1em;
    }
\u{space}\u{space}\u{space}\u{space}
    ol {
        padding-inline-start: 1.6em;
    }
\u{space}\u{space}\u{space}\u{space}
    ol > li {
        padding-left: 0.2em;
    }
\u{space}\u{space}\u{space}\u{space}
    .mono ol {
        padding-inline-start: 2em;
    }
\u{space}\u{space}\u{space}\u{space}
    .mono ol > li {
        text-indent: -0.4em;
    }
\u{space}\u{space}\u{space}\u{space}
    .toggle {
        padding-inline-start: 0em;
        list-style-type: none;
    }
\u{space}\u{space}\u{space}\u{space}
    /* Indent toggle children */
    .toggle > li > details {
        padding-left: 1.7em;
    }
\u{space}\u{space}\u{space}\u{space}
    .toggle > li > details > summary {
        margin-left: -1.1em;
    }
\u{space}\u{space}\u{space}\u{space}
    .selected-value {
        display: inline-block;
        padding: 0 0.5em;
        background: rgba(206, 205, 202, 0.5);
        border-radius: 3px;
        margin-right: 0.5em;
        margin-top: 0.3em;
        margin-bottom: 0.3em;
        white-space: nowrap;
    }
\u{space}\u{space}\u{space}\u{space}
    .collection-title {
        display: inline-block;
        margin-right: 1em;
    }
\u{space}\u{space}\u{space}\u{space}
    .page-description {
        margin-bottom: 2em;
    }
\u{space}\u{space}\u{space}\u{space}
    .simple-table {
        margin-top: 1em;
        font-size: 0.875rem;
        empty-cells: show;
    }
    .simple-table td {
        height: 29px;
        min-width: 120px;
    }
\u{space}\u{space}\u{space}\u{space}
    .simple-table th {
        height: 29px;
        min-width: 120px;
    }
\u{space}\u{space}\u{space}\u{space}
    .simple-table-header-color {
        background: rgb(247, 246, 243);
        color: black;
    }
    .simple-table-header {
        font-weight: 500;
    }
\u{space}\u{space}\u{space}\u{space}
    time {
        opacity: 0.5;
    }
\u{space}\u{space}\u{space}\u{space}
    .icon {
        display: inline-block;
        max-width: 1.2em;
        max-height: 1.2em;
        text-decoration: none;
        vertical-align: text-bottom;
        margin-right: 0.5em;
    }
\u{space}\u{space}\u{space}\u{space}
    img.icon {
        border-radius: 3px;
    }
\u{space}\u{space}\u{space}\u{space}
    .user-icon {
        width: 1.5em;
        height: 1.5em;
        border-radius: 100%;
        margin-right: 0.5rem;
    }
\u{space}\u{space}\u{space}\u{space}
    .user-icon-inner {
        font-size: 0.8em;
    }
\u{space}\u{space}\u{space}\u{space}
    .text-icon {
        border: 1px solid #000;
        text-align: center;
    }
\u{space}\u{space}\u{space}\u{space}
    .page-cover-image {
        display: block;
        object-fit: cover;
        width: 100%;
        max-height: 30vh;
    }
\u{space}\u{space}\u{space}\u{space}
    .page-header-icon {
        font-size: 3rem;
        margin-bottom: 1rem;
    }
\u{space}\u{space}\u{space}\u{space}
    .page-header-icon-with-cover {
        margin-top: -0.72em;
        margin-left: 0.07em;
    }
\u{space}\u{space}\u{space}\u{space}
    .page-header-icon img {
        border-radius: 3px;
    }
\u{space}\u{space}\u{space}\u{space}
    .link-to-page {
        margin: 1em 0;
        padding: 0;
        border: none;
        font-weight: 500;
    }
\u{space}\u{space}\u{space}\u{space}
    p > .user {
        opacity: 0.5;
    }
\u{space}\u{space}\u{space}\u{space}
    td > .user,
    td > time {
        white-space: nowrap;
    }
\u{space}\u{space}\u{space}\u{space}
    input[type="checkbox"] {
        transform: scale(1.5);
        margin-right: 0.6em;
        vertical-align: middle;
    }
\u{space}\u{space}\u{space}\u{space}
    p {
        margin-top: 0.5em;
        margin-bottom: 0.5em;
    }
\u{space}\u{space}\u{space}\u{space}
    .image {
        border: none;
        margin: 1.5em 0;
        padding: 0;
        border-radius: 0;
        text-align: center;
    }
\u{space}\u{space}\u{space}\u{space}
    .code,
    code {
        background: rgba(135, 131, 120, 0.15);
        border-radius: 3px;
        padding: 0.2em 0.4em;
        border-radius: 3px;
        font-size: 85%;
        tab-size: 2;
    }
\u{space}\u{space}\u{space}\u{space}
    code {
        color: #eb5757;
    }
\u{space}\u{space}\u{space}\u{space}
    .code {
        padding: 1.5em 1em;
    }
\u{space}\u{space}\u{space}\u{space}
    .code-wrap {
        white-space: pre-wrap;
        word-break: break-all;
    }
\u{space}\u{space}\u{space}\u{space}
    .code > code {
        background: none;
        padding: 0;
        font-size: 100%;
        color: inherit;
    }
\u{space}\u{space}\u{space}\u{space}
    blockquote {
        font-size: 1.25em;
        margin: 1em 0;
        padding-left: 1em;
        border-left: 3px solid rgb(55, 53, 47);
    }
\u{space}\u{space}\u{space}\u{space}
    .bookmark {
        text-decoration: none;
        max-height: 8em;
        padding: 0;
        display: flex;
        width: 100%;
        align-items: stretch;
    }
\u{space}\u{space}\u{space}\u{space}
    .bookmark-title {
        font-size: 0.85em;
        overflow: hidden;
        text-overflow: ellipsis;
        height: 1.75em;
        white-space: nowrap;
    }
\u{space}\u{space}\u{space}\u{space}
    .bookmark-text {
        display: flex;
        flex-direction: column;
    }
\u{space}\u{space}\u{space}\u{space}
    .bookmark-info {
        flex: 4 1 180px;
        padding: 12px 14px 14px;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
    }
\u{space}\u{space}\u{space}\u{space}
    .bookmark-image {
        width: 33%;
        flex: 1 1 180px;
        display: block;
        position: relative;
        object-fit: cover;
        border-radius: 1px;
    }
\u{space}\u{space}\u{space}\u{space}
    .bookmark-description {
        color: rgba(55, 53, 47, 0.6);
        font-size: 0.75em;
        overflow: hidden;
        max-height: 4.5em;
        word-break: break-word;
    }
\u{space}\u{space}\u{space}\u{space}
    .bookmark-href {
        font-size: 0.75em;
        margin-top: 0.25em;
    }
\u{space}\u{space}\u{space}\u{space}
    .sans { font-family: ui-sans-serif, -apple-system, BlinkMacSystemFont, "Segoe UI Variable Display", "Segoe UI", Helvetica, "Apple Color Emoji", Arial, sans-serif, "Segoe UI Emoji", "Segoe UI Symbol"; }
    .code { font-family: "SFMono-Regular", Menlo, Consolas, "PT Mono", "Liberation Mono", Courier, monospace; }
    .serif { font-family: Lyon-Text, Georgia, ui-serif, serif; }
    .mono { font-family: iawriter-mono, Nitti, Menlo, Courier, monospace; }
    .pdf .sans { font-family: Inter, ui-sans-serif, -apple-system, BlinkMacSystemFont, "Segoe UI Variable Display", "Segoe UI", Helvetica, "Apple Color Emoji", Arial, sans-serif, "Segoe UI Emoji", "Segoe UI Symbol", 'Twemoji', 'Noto Color Emoji', 'Noto Sans CJK JP'; }
    .pdf:lang(zh-CN) .sans { font-family: Inter, ui-sans-serif, -apple-system, BlinkMacSystemFont, "Segoe UI Variable Display", "Segoe UI", Helvetica, "Apple Color Emoji", Arial, sans-serif, "Segoe UI Emoji", "Segoe UI Symbol", 'Twemoji', 'Noto Color Emoji', 'Noto Sans CJK SC'; }
    .pdf:lang(zh-TW) .sans { font-family: Inter, ui-sans-serif, -apple-system, BlinkMacSystemFont, "Segoe UI Variable Display", "Segoe UI", Helvetica, "Apple Color Emoji", Arial, sans-serif, "Segoe UI Emoji", "Segoe UI Symbol", 'Twemoji', 'Noto Color Emoji', 'Noto Sans CJK TC'; }
    .pdf:lang(ko-KR) .sans { font-family: Inter, ui-sans-serif, -apple-system, BlinkMacSystemFont, "Segoe UI Variable Display", "Segoe UI", Helvetica, "Apple Color Emoji", Arial, sans-serif, "Segoe UI Emoji", "Segoe UI Symbol", 'Twemoji', 'Noto Color Emoji', 'Noto Sans CJK KR'; }
    .pdf .code { font-family: Source Code Pro, "SFMono-Regular", Menlo, Consolas, "PT Mono", "Liberation Mono", Courier, monospace, 'Twemoji', 'Noto Color Emoji', 'Noto Sans Mono CJK JP'; }
    .pdf:lang(zh-CN) .code { font-family: Source Code Pro, "SFMono-Regular", Menlo, Consolas, "PT Mono", "Liberation Mono", Courier, monospace, 'Twemoji', 'Noto Color Emoji', 'Noto Sans Mono CJK SC'; }
    .pdf:lang(zh-TW) .code { font-family: Source Code Pro, "SFMono-Regular", Menlo, Consolas, "PT Mono", "Liberation Mono", Courier, monospace, 'Twemoji', 'Noto Color Emoji', 'Noto Sans Mono CJK TC'; }
    .pdf:lang(ko-KR) .code { font-family: Source Code Pro, "SFMono-Regular", Menlo, Consolas, "PT Mono", "Liberation Mono", Courier, monospace, 'Twemoji', 'Noto Color Emoji', 'Noto Sans Mono CJK KR'; }
    .pdf .serif { font-family: PT Serif, Lyon-Text, Georgia, ui-serif, serif, 'Twemoji', 'Noto Color Emoji', 'Noto Serif CJK JP'; }
    .pdf:lang(zh-CN) .serif { font-family: PT Serif, Lyon-Text, Georgia, ui-serif, serif, 'Twemoji', 'Noto Color Emoji', 'Noto Serif CJK SC'; }
    .pdf:lang(zh-TW) .serif { font-family: PT Serif, Lyon-Text, Georgia, ui-serif, serif, 'Twemoji', 'Noto Color Emoji', 'Noto Serif CJK TC'; }
    .pdf:lang(ko-KR) .serif { font-family: PT Serif, Lyon-Text, Georgia, ui-serif, serif, 'Twemoji', 'Noto Color Emoji', 'Noto Serif CJK KR'; }
    .pdf .mono { font-family: PT Mono, iawriter-mono, Nitti, Menlo, Courier, monospace, 'Twemoji', 'Noto Color Emoji', 'Noto Sans Mono CJK JP'; }
    .pdf:lang(zh-CN) .mono { font-family: PT Mono, iawriter-mono, Nitti, Menlo, Courier, monospace, 'Twemoji', 'Noto Color Emoji', 'Noto Sans Mono CJK SC'; }
    .pdf:lang(zh-TW) .mono { font-family: PT Mono, iawriter-mono, Nitti, Menlo, Courier, monospace, 'Twemoji', 'Noto Color Emoji', 'Noto Sans Mono CJK TC'; }
    .pdf:lang(ko-KR) .mono { font-family: PT Mono, iawriter-mono, Nitti, Menlo, Courier, monospace, 'Twemoji', 'Noto Color Emoji', 'Noto Sans Mono CJK KR'; }
    .highlight-default {
        color: rgba(55, 53, 47, 1);
    }
    .highlight-gray {
        color: rgba(120, 119, 116, 1);
        fill: rgba(120, 119, 116, 1);
    }
    .highlight-brown {
        color: rgba(159, 107, 83, 1);
        fill: rgba(159, 107, 83, 1);
    }
    .highlight-orange {
        color: rgba(217, 115, 13, 1);
        fill: rgba(217, 115, 13, 1);
    }
    .highlight-yellow {
        color: rgba(203, 145, 47, 1);
        fill: rgba(203, 145, 47, 1);
    }
    .highlight-teal {
        color: rgba(68, 131, 97, 1);
        fill: rgba(68, 131, 97, 1);
    }
    .highlight-blue {
        color: rgba(51, 126, 169, 1);
        fill: rgba(51, 126, 169, 1);
    }
    .highlight-purple {
        color: rgba(144, 101, 176, 1);
        fill: rgba(144, 101, 176, 1);
    }
    .highlight-pink {
        color: rgba(193, 76, 138, 1);
        fill: rgba(193, 76, 138, 1);
    }
    .highlight-red {
        color: rgba(212, 76, 71, 1);
        fill: rgba(212, 76, 71, 1);
    }
    .highlight-default_background {
        color: rgba(55, 53, 47, 1);
    }
    .highlight-gray_background {
        background: rgba(248, 248, 247, 1);
    }
    .highlight-brown_background {
        background: rgba(244, 238, 238, 1);
    }
    .highlight-orange_background {
        background: rgba(251, 236, 221, 1);
    }
    .highlight-yellow_background {
        background: rgba(251, 243, 219, 1);
    }
    .highlight-teal_background {
        background: rgba(237, 243, 236, 1);
    }
    .highlight-blue_background {
        background: rgba(231, 243, 248, 1);
    }
    .highlight-purple_background {
        background: rgba(248, 243, 252, 1);
    }
    .highlight-pink_background {
        background: rgba(252, 241, 246, 1);
    }
    .highlight-red_background {
        background: rgba(253, 235, 236, 1);
    }
    .block-color-default {
        color: inherit;
        fill: inherit;
    }
    .block-color-gray {
        color: rgba(120, 119, 116, 1);
        fill: rgba(120, 119, 116, 1);
    }
    .block-color-brown {
        color: rgba(159, 107, 83, 1);
        fill: rgba(159, 107, 83, 1);
    }
    .block-color-orange {
        color: rgba(217, 115, 13, 1);
        fill: rgba(217, 115, 13, 1);
    }
    .block-color-yellow {
        color: rgba(203, 145, 47, 1);
        fill: rgba(203, 145, 47, 1);
    }
    .block-color-teal {
        color: rgba(68, 131, 97, 1);
        fill: rgba(68, 131, 97, 1);
    }
    .block-color-blue {
        color: rgba(51, 126, 169, 1);
        fill: rgba(51, 126, 169, 1);
    }
    .block-color-purple {
        color: rgba(144, 101, 176, 1);
        fill: rgba(144, 101, 176, 1);
    }
    .block-color-pink {
        color: rgba(193, 76, 138, 1);
        fill: rgba(193, 76, 138, 1);
    }
    .block-color-red {
        color: rgba(212, 76, 71, 1);
        fill: rgba(212, 76, 71, 1);
    }
    .block-color-default_background {
        color: inherit;
        fill: inherit;
    }
    .block-color-gray_background {
        background: rgba(248, 248, 247, 1);
    }
    .block-color-brown_background {
        background: rgba(244, 238, 238, 1);
    }
    .block-color-orange_background {
        background: rgba(251, 236, 221, 1);
    }
    .block-color-yellow_background {
        background: rgba(251, 243, 219, 1);
    }
    .block-color-teal_background {
        background: rgba(237, 243, 236, 1);
    }
    .block-color-blue_background {
        background: rgba(231, 243, 248, 1);
    }
    .block-color-purple_background {
        background: rgba(248, 243, 252, 1);
    }
    .block-color-pink_background {
        background: rgba(252, 241, 246, 1);
    }
    .block-color-red_background {
        background: rgba(253, 235, 236, 1);
    }
    .select-value-color-uiBlue { background-color: undefined; }
    .select-value-color-pink { background-color: rgba(225, 136, 179, 0.27); }
    .select-value-color-purple { background-color: rgba(168, 129, 197, 0.27); }
    .select-value-color-green { background-color: rgba(123, 183, 129, 0.27); }
    .select-value-color-gray { background-color: rgba(84, 72, 49, 0.15); }
    .select-value-color-transparentGray { background-color: undefined; }
    .select-value-color-translucentGray { background-color: undefined; }
    .select-value-color-orange { background-color: rgba(224, 124, 57, 0.27); }
    .select-value-color-brown { background-color: rgba(210, 162, 141, 0.35); }
    .select-value-color-red { background-color: rgba(244, 171, 159, 0.4); }
    .select-value-color-yellow { background-color: rgba(236, 191, 66, 0.39); }
    .select-value-color-blue { background-color: rgba(93, 165, 206, 0.27); }
    .select-value-color-pageGlass { background-color: undefined; }
    .select-value-color-washGlass { background-color: undefined; }
\u{space}\u{space}\u{space}\u{space}
    .checkbox {
        display: inline-flex;
        vertical-align: text-bottom;
        width: 16;
        height: 16;
        background-size: 16px;
        margin-left: 2px;
        margin-right: 5px;
    }
\u{space}\u{space}\u{space}\u{space}
    .checkbox-on {
        background-image: url("data:image/svg+xml;charset=UTF-8,%3Csvg%20width%3D%2216%22%20height%3D%2216%22%20viewBox%3D%220%200%2016%2016%22%20fill%3D%22none%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%0A%3Crect%20width%3D%2216%22%20height%3D%2216%22%20fill%3D%22%2358A9D7%22%2F%3E%0A%3Cpath%20d%3D%22M6.71429%2012.2852L14%204.9995L12.7143%203.71436L6.71429%209.71378L3.28571%206.2831L2%207.57092L6.71429%2012.2852Z%22%20fill%3D%22white%22%2F%3E%0A%3C%2Fsvg%3E");
    }
\u{space}\u{space}\u{space}\u{space}
    .checkbox-off {
        background-image: url("data:image/svg+xml;charset=UTF-8,%3Csvg%20width%3D%2216%22%20height%3D%2216%22%20viewBox%3D%220%200%2016%2016%22%20fill%3D%22none%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%0A%3Crect%20x%3D%220.75%22%20y%3D%220.75%22%20width%3D%2214.5%22%20height%3D%2214.5%22%20fill%3D%22white%22%20stroke%3D%22%2336352F%22%20stroke-width%3D%221.5%22%2F%3E%0A%3C%2Fsvg%3E");
    }
\u{space}\u{space}\u{space}\u{space}\u{space}\u{space}\u{space}\u{space}
    </style></head><body><article id="1d1604ef-9b4b-8020-9a43-e475a43661a0" class="page sans"><header><h1 class="page-title">Smart Calendar Reminder: Your Intelligent Schedule Assistant</h1><p class="page-description"></p></header><div class="page-body"><figure class="block-color-blue_background callout" style="white-space:pre-wrap;display:flex" id="1d1604ef-9b4b-80b2-927b-ddb2d55d6032"><div style="width:100%">👋 Welcome to Smart Calendar Reminder! This welcome message appears only during your first use.</div></figure><h1 id="1d1604ef-9b4b-80c5-a289-d2aedc69317d" class="block-color-yellow_background">Transform Your Calendar Experience</h1><p id="1d1604ef-9b4b-80f7-ac48-d98bc2a805e6" class="">While iOS Calendar is fantastic for basic scheduling, we all know those built-in reminders can be easy to miss. Adding manual alarms, calculating travel times, and customizing notifications with event details can become tedious and time-consuming. That&#x27;s where Smart Calendar Reminder comes in - your automated solution for intelligent schedule management!</p><h2 id="1d1604ef-9b4b-800f-9752-cb68ca87b1cf" class="">Powerful Features at Your Fingertips</h2><ul id="0ecdba52-af59-410f-9efb-321f8e2d4ba6" class="bulleted-list"><li style="list-style-type:disc">Seamless Calendar Integration - No manual input needed</li></ul><ul id="1d1604ef-9b4b-80b9-8d0d-fe7b3c28115b" class="bulleted-list"><li style="list-style-type:disc">Intelligent Travel Time Calculations powered by Apple Maps</li></ul><ul id="4f6b7aca-7c92-458d-9996-e8f891a3775d" class="bulleted-list"><li style="list-style-type:disc">Spoken Event Details - Hear your schedule clearly</li></ul><ul id="1d1604ef-9b4b-80f5-9fe9-ee50fd3e7795" class="bulleted-list"><li style="list-style-type:disc">Smart Preparation Time Management</li></ul><h2 id="fa2195d7-f08f-4058-a00a-18e2b562b5b2" class="">Smart Location Intelligence</h2><p id="1d1604ef-9b4b-80d3-9799-dd97b27a3773" class="">Our advanced travel time calculation system uses three methods to determine your departure location, in order of priority:</p><ol type="1" id="667c5bbb-f94c-480b-bccd-c84948a3c40f" class="numbered-list" start="1"><li>Custom Departure Address - Add this JSON format in your calendar event notes for specific departure points:<script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/prism.min.js" integrity="sha512-7Z9J3l1+EYfeaPKcGXu3MS/7T+w19WtKQY/n+xzmw4hZhJ9tyYmcUS+4QqAlzhicE5LAfMQSF3iFTK9bQdTxXg==" crossorigin="anonymous" referrerPolicy="no-referrer"></script><link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism.min.css" integrity="sha512-tN7Ec6zAFaVSG3TpNAKtk4DOHNpSwKHxxrsiw4GHKESGPs5njn/0sMCUMl2svV4wo4BK/rCP7juYz+zx+l6oeQ==" crossorigin="anonymous" referrerPolicy="no-referrer"/><pre id="1d1604ef-9b4b-80d1-9d4b-dfb42d06c7b8" class="code"><code class="language-JSON">{
        &quot;Street&quot;: &quot;your departure street&quot;,
        &quot;City&quot;: &quot;your departure city&quot;,
        &quot;State&quot;: &quot;your departure state&quot;,
        &quot;Country&quot;: &quot;your departure country&quot;,
        &quot;Postcode&quot;: &quot;your departure postcode&quot;
    }</code></pre></li></ol><ol type="1" id="1d1604ef-9b4b-80c6-b468-d002dd94b75d" class="numbered-list" start="2"><li>Home Address - Uses your pre-configured home address - perfect for regular schedules</li></ol><ol type="1" id="aba3d861-a84a-48f6-a163-ac441f18b1b3" class="numbered-list" start="3"><li>Current Location - Automatically uses your current position as a fallback</li></ol><figure class="block-color-yellow_background callout" style="white-space:pre-wrap;display:flex" id="1d1604ef-9b4b-80ed-a48d-f0cad158ed60"><div style="width:100%">Smart Travel Planning: The system automatically calculates additional travel time if you&#x27;re not at your departure location!</div></figure><h2 id="efb3fa4e-d05f-4bd3-bd94-b9b991e29ce4" class="">Voice Announcements</h2><ul id="1d1604ef-9b4b-8076-9c50-fcefa4c4903c" class="bulleted-list"><li style="list-style-type:disc">Hourly Schedule Updates: Hear upcoming events at the start of each hour</li></ul><ul id="a0eb2cf6-1637-4d13-94c8-356fd19cd78a" class="bulleted-list"><li style="list-style-type:disc">Smart Reminders: Get spoken alerts at perfectly timed intervals</li></ul><h2 id="1d1604ef-9b4b-80dd-9df1-d8fae003cae6" class="">Intelligent Automation System</h2><p id="15ce45ed-b4fa-4b81-bbd0-2fa585b5c7ce" class="">Our sophisticated automation system ensures you never miss an important event:</p><ul id="1d1604ef-9b4b-80c5-a181-f10518e7e73d" class="bulleted-list"><li style="list-style-type:disc">Daily Planning: 12:00 AM check of your next 24 hours</li></ul><ul id="f54bf941-4703-4cc3-9f61-408f1eed72ee" class="bulleted-list"><li style="list-style-type:disc">Real-time Updates: Hourly recalculation of travel times</li></ul><ul id="1d1604ef-9b4b-800d-b8f8-e85831f4b0ee" class="bulleted-list"><li style="list-style-type:disc">Dynamic Adjustments: Automatic alarm optimization</li></ul><figure class="block-color-gray_background callout" style="white-space:pre-wrap;display:flex" id="1d1604ef-9b4b-8075-9657-ed6135b16d17"><div style="width:100%">Example: For a 10:30 AM meeting with 3 hours total travel time, the system ensures your 7:30 AM alarm is set and continuously optimized based on real-time conditions.</div></figure><h1 id="1d1604ef-9b4b-803a-8fbf-c89822dbca0a" class="block-color-blue">Setup Guide</h1><p id="1d1604ef-9b4b-80a7-ae75-c35724896e17" class="">Let&#x27;s get your Smart Calendar Reminder configured with four essential automations:</p><h2 id="1d1604ef-9b4b-8072-ab56-d0757b2435ef" class="block-color-gray_background">Automation 1: Daily 12:00 AM Check</h2><p id="1d1604ef-9b4b-80c9-9b4a-ee2712524a0d" class="block-color-blue">Step 1. Open Shortcuts and tap [Automation], then tap [+] at the top right corner</p><figure id="1d1604ef-9b4b-8043-b390-ff859889379f" class="image"><a href="gZWfH4Kler-left.png"><img style="width:709.984375px" src="https://i.imgur.com/za6VDMA.jpeg"/></a></figure><p id="1d1604ef-9b4b-804a-9cb1-f487991237c6" class="">Step 2. Tap [Time of Day]</p><figure id="1d1604ef-9b4b-8085-99bb-e3d90115d5dd" class="image"><a href="NDyjdrLrYZ-left.png"><img style="width:709.984375px" src="https://i.imgur.com/z7aJ0OB.jpeg"/></a></figure><p id="1d1604ef-9b4b-806d-a7eb-f652a480cbc6" class="">Step 3. Follow the sequence shown in the image</p><figure id="1d1604ef-9b4b-80cd-9ca5-fc076df31898" class="image"><a href="6KJEFinDm6-left.png"><img style="width:709.984375px" src="https://i.imgur.com/u6C2AR9.jpeg"/></a></figure><p id="1d1604ef-9b4b-8050-b817-f0e2368f43ca" class="block-color-gray_background">Step 4. Tap [New Blank Automation]</p><figure id="1d1604ef-9b4b-8028-b872-eed1a3f6701a" class="image"><a href="XblW6TFHek-left.png"><img style="width:709.984375px" src="https://i.imgur.com/nrTr7Np.jpeg"/></a></figure><p id="b8f8c3cf-7fdc-4a99-b2ba-60e18fef34c7" class="">Step 5. Search for the [Number] action</p><figure id="1d1604ef-9b4b-80d0-ad58-f7a1dc1d1c48" class="image"><a href="4XgUTG3h3E-left.png"><img style="width:709.984375px" src="https://i.imgur.com/F6jogMJ.jpeg"/></a></figure><p id="1d1604ef-9b4b-804e-9fe3-c5b6fc8701fa" class="">Step 6. Input number 1</p><figure id="1d1604ef-9b4b-8056-be0b-c4cfaebae0f7" class="image"><a href="n0XhfXtA03-left.png"><img style="width:709.984375px" src="https://i.imgur.com/HUMvkry.jpeg"/></a></figure><p id="1d1604ef-9b4b-8004-b82f-c5b6250d69c0" class="">Step 7. Search for [Run Shortcut] action</p><figure id="1d1604ef-9b4b-801d-a2d0-e444c55bbdb1" class="image"><a href="BUB7V9ITn8-left.png"><img style="width:709.984375px" src="https://i.imgur.com/IbHA9Jf.jpeg"/></a></figure><p id="1d1604ef-9b4b-8031-a595-d6b268bb5bfc" class="">Step 8. Search and select [Smart Calendar Reminder] in [Run Shortcut] action’s shortcut field.</p><figure id="1d1604ef-9b4b-804c-8be0-d6060e3b5a73" class="image"><a href="b50xsbc2QT-left.png"><img style="width:709.984375px" src="https://i.imgur.com/41WbF2A.png"/></a></figure><p id="1d1604ef-9b4b-805d-96d8-c871e0493bdb" class="block-color-default_background">Step 9. Tap [Done] in the top right corner to complete setup</p><figure id="1d1604ef-9b4b-8024-864a-d9002a94e719" class="image"><a href="LjO11dxjS3-left.png"><img style="width:709.984375px" src="https://i.imgur.com/tmrW6r8.jpeg"/></a></figure><h2 id="1d1604ef-9b4b-8045-9247-e3afd799f547" class="">Automation 2: Hourly Check</h2><p id="1d1604ef-9b4b-809c-900e-e425d52b7a0a" class="">Follow the same steps as Automation 1, with these modifications:</p><ul id="1d1604ef-9b4b-80a8-9819-cfd9961eb078" class="bulleted-list"><li style="list-style-type:disc">In step 3, select all <em><strong><span style="border-bottom:0.05em solid">24 hourly times</span></strong></em></li></ul><ul id="1d1604ef-9b4b-80b3-b766-ed9c851957a5" class="bulleted-list"><li style="list-style-type:disc">In step 6, input number <strong>2</strong> instead of 1</li></ul><h2 id="1d1604ef-9b4b-80ad-a1ea-e247f84f2063" class="">Automation 3: Alarm Trigger</h2><p id="1d1604ef-9b4b-8044-9254-f9d3912d6d6c" class="">Follow the same steps as Automation 1, with these changes:</p><ul id="1d1604ef-9b4b-802e-98b3-c8202e4f8765" class="bulleted-list"><li style="list-style-type:disc">In step 2, tap [<strong>Alarm</strong>] instead of [Time of Day]</li></ul><ul id="1d1604ef-9b4b-80a5-9ccc-d6a2906a3429" class="bulleted-list"><li style="list-style-type:disc">Configure settings as shown:</li></ul><figure id="1d1604ef-9b4b-8014-b883-f88df7a348e1" class="image"><a href="fIF3p3ttC0-left.png"><img style="width:709.984375px" src="https://i.imgur.com/MTyZ3km.png"/></a></figure><ul id="1d1604ef-9b4b-80dc-a6f8-edc73fc17118" class="bulleted-list"><li style="list-style-type:disc">In step 6, input number <strong>3</strong> instead of 1</li></ul><h2 id="1d1604ef-9b4b-8025-9db9-e83367a64cdb" class="">Automation 4: Alarm Stop</h2><p id="1d1604ef-9b4b-805f-afe2-f2de398e695a" class="">Follow the same steps as Automation 1, with these changes:</p><ul id="10aa2fe6-80f0-4850-93c0-4fe14b146190" class="bulleted-list"><li style="list-style-type:disc">In step 2, tap [<strong>Alarm</strong>] instead of [Time of Day]</li></ul><ul id="1d1604ef-9b4b-80aa-baad-e6dd7acf4ad9" class="bulleted-list"><li style="list-style-type:disc">Configure settings as shown:</li></ul><figure id="1d1604ef-9b4b-8068-a490-e601bfafcfe7" class="image"><a href="E24uC2vV2j-left.png"><img style="width:709.984375px" src="https://i.imgur.com/2LbJK9D.png"/></a></figure><ul id="1d1604ef-9b4b-804f-bcba-f64ec9bd67f1" class="bulleted-list"><li style="list-style-type:disc">In step 6, input number <strong>4</strong> instead of 1</li></ul><figure class="block-color-teal_background callout" style="white-space:pre-wrap;display:flex" id="1d1604ef-9b4b-8031-8b44-ddb00fab6dee"><div style="width:100%">🎉 Congratulations! Once you&#x27;ve completed these automations, your Smart Calendar Reminder is ready to revolutionize your schedule management!</div></figure></div></article><span class="sans" style="font-size:14px;padding-top:2em"></span></body></html>

〔28〕 Set Name of 〔27 Text〕 to Welcome.html　» 29 30

〔29〕 Show Web View at 〔28 Renamed Item〕

〔30〕 Make PDF from 〔28 Renamed Item〕　»

〔31〕 Save File 〔30 PDF〕
• AskWhereToSave: false
• SaveFileOverwrite: true
• FileDestinationPath: 〔3 Version Dictionary .Name〕/Welcome.pdf

〔32〕 End If　▵26

〔33〕 Dictionary 　➔ menus　»
{  "mainMenu": {
      "Setup": {
         "title": "Setup",
         "sub": "Set Personal Preferences",
         "icon": "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"
      },
      "Change": {
         "title": "Change",
         "sub": "Change Personal Preferences",
         "icon": "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"
      },
      "View": {
         "title": "View",
         "sub": "View Personal Preferences or Automations Setup Inctructions",
         "icon": "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"
      }
   }
}

〔34〕 Get Dictionary from 〔33 menus.mainMenu〕　»

〔35〕 Repeat with Each in 〔34 Dictionary〕

〔36〕 Get Dictionary All Values in 〔Repeat Item as Dictionary〕 　➔ Options　»
• DictionaryKey: 〔Repeat Item as Dictionary’s Keys〕.title

〔37〕 Repeat[2] with Each in 〔36 Options as Dictionary〕

〔38〕 Text
BEGIN:VCARD
VERSION:3.0
N;CHARSET=utf-8:〔Repeat Item 2 as Dictionary.title〕;
ORG:〔Repeat Item 2 as Dictionary.sub〕;
PHOTO;ENCODING=b:〔Repeat Item 2 as Dictionary.icon〕;
END:VCARD

〔39〕 End Repeat[2] with Each

〔40〕 End Repeat with Each　»

〔41〕 Text　»
〔40 Repeat Results〕

〔42〕 Set Name of 〔41 Text〕 to mainMenu.vcf　»

〔43〕 Get Contacts from 〔42 Renamed Item〕　»

〔44〕 Choose from List 〔43 Contacts〕　» 45 78 83
• ChooseFromListActionPrompt: ☀️Welcome to Smart Calendar Reminder☀️

〔45〕 If 〔44 Selected Item’s Name〕 is Setup

〔46〕 Get File at Path 〔3 Version Dictionary .Name〕/aboutme.txt from Folder　»
• FileErrorIfNotFound: false

〔47〕 If 〔46 File’s File Size〕 does not have any value

〔48〕 Comment
All the information is stored in iCloud. The shortcut isn’t collecting anything.

〔49〕 Text　»
Choose Travel Time Calculation Method

1️⃣ Notes 🗓️ / Current 📍\u000D
Uses the address in the Calendar event Notes if available (routing via Notes if you're not already there), otherwise calculates directly from your current location to the event.\u000D
\u000D
2️⃣ Notes 🗓️ / Home 🏡\u000D
Uses the Notes address if available (same as 1️⃣), but if Notes are empty, routes via your home address if you're not already there, or directly from home if you are.\u000D
\u000D

〔50〕 Choose from Menu
• MenuPrompt: 〔49 Text〕
• MenuItems: [1️⃣ Notes 🗓️ / Current 📍,
2️⃣ Notes 🗓️ / Home 🏡]

〔51〕 Menu Item 1️⃣ Notes 🗓️ / Current 📍

〔52〕 Dictionary　»
{  "state": "\"\"",
   "street": "\"\"",
   "city": "\"\"",
   "country": "\"\"",
   "postcode": "\"\""
}

〔53〕 Set Variable HomeAddress to 〔52 Dictionary〕

〔54〕 Menu Item 2️⃣ Notes 🗓️ / Home 🏡

〔55〕 Text　»
Please provide your home address for accurate travel time calculations via Apple Maps.

〔56〕 Text　»
<!DOCTYPE html>
<html>
<head>
    <title>Address Collector</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        /* Modern CSS styling */
        body {
            font-family: 'Segoe UI', sans-serif;
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            padding: 20px;
            min-height: 100vh;
        }

        .form-container {
            max-width: 500px;
            margin: 20px auto;
            background: white;
            padding: 25px;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        }

        h2 {
            color: #2c3e50;
            text-align: center;
            margin-bottom: 25px;
        }

        .form-group {
            margin-bottom: 20px;
        }

        label {
            display: block;
            margin-bottom: 8px;
            color: #34495e;
            font-weight: 500;
        }

        input {
            width: 100%;
            padding: 12px;
            margin: 0; /* Equal left/right margins */
            border: 2px solid #e0e0e0;
            border-radius: 8px;
            font-size: 16px;
            transition: border-color 0.3s ease;
            box-sizing: border-box; /* Ensures padding doesn't affect width */
        }

        input:focus {
            outline: none;
            border-color: #3498db;
            box-shadow: 0 0 8px rgba(52, 152, 219, 0.2);
        }

        button {
            background: #3498db;
            color: white;
            padding: 15px 30px;
            border: none;
            border-radius: 8px;
            font-size: 16px;
            cursor: pointer;
            width: 100%;
            transition: background 0.3s ease;
        }

        button:hover {
            background: #2980b9;
        }

        /* New success message styling */
        .success-message {
            display: none;
            background: #e8f5e9;
            color: #2e7d32;
            padding: 20px;
            border-radius: 8px;
            margin-top: 20px;
            text-align: center;
        }

        .success-message.show {
            display: block;
        }
    </style>
</head>
<body>
    <div class="form-container">
        <h2>〔55 Text〕</h2>
        <form id="addressForm">
            <div class="form-group">
                <label>Street Address</label>
                <input type="text" id="street" placeholder="" required>
            </div>

            <div class="form-group">
                <label>City</label>
                <input type="text" id="city" placeholder="" required>
            </div>

            <div class="form-group">
                <label>State/Province</label>
                <input type="text" id="state" placeholder="" required>
            </div>

            <div class="form-group">
                <label>Country/Region</label>
                <input type="text" id="country" placeholder="" required>
            </div>

            <div class="form-group">
                <label>Postal Code</label>
                <input type="text" id="postcode" placeholder="" required>
            </div>

            <button type="button" onclick="sendToShortcut()">Submit Address</button>
        </form>

        <!-- Success message container -->
        <div class="success-message" id="successMessage">
            <p>Data collected successfully!</p>
        </div>
    </div>

<script>
function sendToShortcut() {
  const addressData = {
    street: document.getElementById('street').value,
    city: document.getElementById('city').value,
    state: document.getElementById('state').value,
    country: document.getElementById('country').value,
    postcode: document.getElementById('postcode').value
  };
\u{space}\u{space}
  // Copy data to clipboard
  navigator.clipboard.writeText(JSON.stringify(addressData));
\u{space}\u{space}
  // Show success message and hide form
  document.getElementById('addressForm').style.display = 'none';
  document.getElementById('successMessage').classList.add('show');
}
</script>
</body>
</html>

〔57〕 Set Name of 〔56 Text〕 to Address.html　»

〔58〕 Show Web View at 〔57 Renamed Item〕

〔59〕 Get Clipboard　»

〔60〕 Get Dictionary from 〔59 Clipboard〕　»

〔61〕 Set Variable HomeAddress to 〔60 Dictionary〕

〔62〕 End Menu　▵54

〔63〕 List　» 65
[Driving,
Walking,
Transit,
Biking]

〔64〕 Text　»
Select Travel Method (It will apply to all the events)

〔65〕 Choose from List 〔63 List〕 　➔ Travel Method Selected　»
• ChooseFromListActionPrompt: 〔64 Text〕

〔66〕 Set Variable TravelMethod to 〔65 Travel Method Selected〕

〔67〕 Text　»
Besides travel time, how many Extra Minutes Needed (e.g., '15 mins buffer')

〔68〕 Ask for Number Input 　➔ Extra Time Needed　»
• AskActionPrompt: 〔67 Text〕
• AskActionAllowsNegativeNumbers: false
• AskActionAllowsDecimalNumbers: false

〔69〕 Set Variable ExtraTime to 〔68 Extra Time Needed〕

〔70〕 Dictionary　»
{  "HomeAddress": "〔HomeAddress as Dictionary〕",
   "TravelMethod": "〔TravelMethod〕",
   "ExtraTime": "〔ExtraTime〕"
}

〔71〕 Text　»
〔70 Dictionary〕

〔72〕 Save File 〔71 Text〕
• Folder: {  "fileLocation": {
      "crossDeviceItemID": "docs.icloud.com:iCloud.is.workflow.my.workflows/documents/e51c720424ec90d3260ccd6f241343baea15b7f3",
      "fileProviderDomainID": "com.apple.CloudDocs.iCloudDriveFileProvider/46CA22EA-49CD-4A1D-9512-F48B36AA64B5",
      "appContainerBundleIdentifier": "com.apple.shortcuts",
      "relativeSubpath": "",
      "WFFileLocationType": "Shortcuts"
   },
   "filename": "Documents",
   "displayName": "Shortcuts"
}
• AskWhereToSave: false
• SaveFileOverwrite: true
• FileDestinationPath: 〔3 Version Dictionary .Name〕/aboutme.txt

〔73〕 Otherwise　▵47

〔74〕 Show Alert You have set up. If you want to modify, please tap [Change] instead.
• AlertActionCancelButtonShown: false

〔75〕 Run Shortcut Smart Calendar Reminder
• Workflow: {  "workflowIdentifier": "5A2BC55E-C195-4C6C-93E9-725F782CDD1B",
   "isSelf": true,
   "workflowName": "Smart Calendar Reminder"
}

〔76〕 End If

〔77〕 End If　▵45

〔78〕 If 〔44 Selected Item’s Name〕 is Change

〔79〕 Delete Files {  "fileLocation": {
      "crossDeviceItemID": "docs.icloud.com:iCloud.is.workflow.my.workflows/9F38EF56-AD52-45E7-8B63-200CBFF0E713/a708662a11276f4b1fa48be3c50990fd13a4ccdf",
      "fileProviderDomainID": "com.apple.CloudDocs.iCloudDriveFileProvider/F1A50FD9-D64E-426C-8EB2-9C6216034396",
      "appContainerBundleIdentifier": "com.apple.systemactions",
      "relativeSubpath": "Smart Calendar Reminder/aboutme.txt",
      "WFFileLocationType": "Shortcuts"
   },
   "filename": "aboutme.txt",
   "displayName": "aboutme.txt"
}
• DeleteImmediatelyDelete: true

〔80〕 Show Alert Your preferences are deleted. Please choose [Setup] from main menu to set up again.
• AlertActionCancelButtonShown: false

〔81〕 Run Shortcut Smart Calendar Reminder
• Workflow: {  "workflowIdentifier": "5A2BC55E-C195-4C6C-93E9-725F782CDD1B",
   "isSelf": true,
   "workflowName": "Smart Calendar Reminder"
}

〔82〕 End If

〔83〕 If 〔44 Selected Item’s Name〕 is View

〔84〕 Choose from Menu
• MenuItems: [Automations Setup Instructions,
Personal Preferences]

〔85〕 Menu Item Automations Setup Instructions

〔86〕 Open File {  "fileLocation": {
      "crossDeviceItemID": "docs.icloud.com:iCloud.is.workflow.my.workflows/E4DA358A-5903-4CC2-BBC8-FD498ED6EDB3/d459a12be98fb7e83aed794c6d0dcf774ef5d814",
      "fileProviderDomainID": "com.apple.CloudDocs.iCloudDriveFileProvider/F1A50FD9-D64E-426C-8EB2-9C6216034396",
      "appContainerBundleIdentifier": "com.apple.systemactions",
      "relativeSubpath": "Smart Calendar Reminder/Welcome.pdf",
      "WFFileLocationType": "Shortcuts"
   },
   "filename": "Welcome.pdf",
   "displayName": "Welcome.pdf"
}

〔87〕 Menu Item Personal Preferences

〔88〕 Open File {  "fileLocation": {
      "crossDeviceItemID": "docs.icloud.com:iCloud.is.workflow.my.workflows/81672621-501F-4225-8CDA-11AAF2112D81/06302c85b44ba41f3258ff7d1669b31859a28556",
      "fileProviderDomainID": "com.apple.CloudDocs.iCloudDriveFileProvider/F1A50FD9-D64E-426C-8EB2-9C6216034396",
      "appContainerBundleIdentifier": "com.apple.systemactions",
      "relativeSubpath": "Smart Calendar Reminder/aboutme.txt",
      "WFFileLocationType": "Shortcuts"
   },
   "filename": "aboutme.txt",
   "displayName": "aboutme.txt"
}

〔89〕 End Menu

〔90〕 End If　▵83

〔91〕 Otherwise　▵0

〔92〕 If 〔Shortcut Input as Number〕 is 1

〔93〕 Comment
*Revolutionizing event management by integrating calendar data with intelligent automation:

Voice announcements for upcoming events

Dynamic alarm calculation (travel + prep time)

Calendar-driven scheduling system
Eliminates manual reminders and ensures perfect timing synchronization*

〔94〕 Get File at Path Smart Calendar Reminder/aboutme.txt from Folder　»
• FileErrorIfNotFound: false

〔95〕 Get Dictionary from 〔94 File〕　» 96 99 100

〔96〕 Get Dictionary from 〔95 Dictionary.HomeAddress〕　»

〔97〕 Text　»
〔96 Dictionary.street〕 〔96 Dictionary.city〕 〔96 Dictionary.state〕 〔96 Dictionary.postcode〕 〔96 Dictionary.country〕\u{space}

〔98〕 Set Variable HomeAddress to 〔97 Text〕

〔99〕 Set Variable TravelMethod to 〔95 Dictionary.TravelMethod〕

〔100〕 Get Dictionary Value for ExtraTime in 〔95 Dictionary〕　»

〔101〕 Get Numbers from 〔100 Dictionary Value〕　»

〔102〕 Set Variable ExtraTime to 〔101 Numbers〕

〔103〕 Find Calendar Events All Calendar Events where　» 104 105
• ContentItemSortProperty: Start Date
• ContentItemSortOrder: Oldest First
• ContentItemFilter: • All the following are true
Start Date is in the next 1 days
Is Not All Day
Canceled is {"Bool":false}

〔104〕 If 〔103 Calendar Events〕 has any value

〔105〕 Repeat with Each in 〔103 Calendar Events〕

〔106〕 If 〔Repeat Item’s Location〕 has any value

〔107〕 Get Current Location　» 119 125 200
• Accuracy: Best

〔108〕 Comment
*To specify event-specific departure locations:

1. Create calendar event notes with JSON structure:
{
“Street”: “your departure street”,
“City”: “your departure city”,
“State”: “your departure state”,
“Country”: “your departure country”,
“Postcode”: “your departure postcode”
}
2. System prioritizes these over default locations*

〔109〕 If All are true　〔Repeat Item’s Notes〕 has any value　〔Repeat Item’s Notes〕 begins with {　〔Repeat Item’s Notes〕 ends with }

〔110〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY

〔111〕 Get Dictionary from 〔Repeat Item’s Notes〕 　➔ Notes Address Dictionary　» 112 113 114 115 116

〔112〕 Set Variable Calendar_Notes_Street to 〔111 Notes Address Dictionary.Street〕

〔113〕 Set Variable Calendar_Notes_City to 〔111 Notes Address Dictionary.City〕

〔114〕 Set Variable Calendar_Notes_State to 〔111 Notes Address Dictionary.State〕

〔115〕 Set Variable Calendar_Notes_Region to 〔111 Notes Address Dictionary.Country〕

〔116〕 Set Variable Calendar_Notes_ZIP_Code to 〔111 Notes Address Dictionary.Postcode〕

〔117〕 Text　»
〔Calendar_Notes_Street〕 〔Calendar_Notes_City〕 〔Calendar_Notes_State〕 〔Calendar_Notes_ZIP_Code〕 〔Calendar_Notes_Region〕

〔118〕 Set Variable NotesAddressString to 〔117 Text〕

〔119〕 If All are true　〔107 Current Location’s Street〕 is 〔Calendar_Notes_Street〕　〔107 Current Location’s City〕 is 〔Calendar_Notes_City〕　〔107 Current Location’s State〕 is 〔Calendar_Notes_State〕　〔107 Current Location’s Country〕 is 〔Calendar_Notes_Region〕　〔107 Current Location’s ZIP Code〕 is 〔Calendar_Notes_ZIP_Code〕

〔120〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY -> CALENDAR EVENT ADDRESS IS THE SAME WITH CURRENT LOCATION

〔121〕 Number 0　»

〔122〕 Set Variable CurrentToDeparture to 〔121 Number〕

〔123〕 Otherwise

〔124〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY -> CALENDAR EVENT ADDRESS IS NOT THE SAME WITH CURRENT LOCATION

〔125〕 Get 〔TravelMethod〕 Time　»
• GetDirectionsCustomLocation: 〔107 Current Location〕
• Destination: 〔NotesAddressString〕

〔126〕 Set Variable TravelTimeString to 〔125 Travel Time〕

〔127〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔128〕 Set Variable MatchString to 〔127 Matches〕

〔129〕 Count Items in 〔MatchString〕　»

〔130〕 If 〔129 Count〕 is 1

〔131〕 Get First Item from List 〔MatchString〕　»

〔132〕 Set Variable TravelDays to 〔131 Item from List〕

〔133〕 Otherwise

〔134〕 Number 0　»

〔135〕 Set Variable TravelDays to 〔134 Number〕

〔136〕 End If

〔137〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔138〕 Set Variable MatchString to 〔137 Matches〕

〔139〕 Count Items in 〔MatchString〕　»

〔140〕 If 〔139 Count〕 is 1

〔141〕 Get First Item from List 〔MatchString〕　»

〔142〕 Set Variable TravelHours to 〔141 Item from List〕

〔143〕 Otherwise

〔144〕 Number 0　»

〔145〕 Set Variable TravelHours to 〔144 Number〕

〔146〕 End If

〔147〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔148〕 Set Variable MatchString to 〔147 Matches〕

〔149〕 Count Items in 〔MatchString〕　»

〔150〕 If 〔149 Count〕 is 1

〔151〕 Get First Item from List 〔MatchString〕　»

〔152〕 Set Variable TravelMinutes to 〔151 Item from List〕

〔153〕 Otherwise

〔154〕 Number 0　»

〔155〕 Set Variable TravelMinutes to 〔154 Number〕

〔156〕 End If

〔157〕 Calculate 〔TravelDays〕 × 1440　» 159

〔158〕 Calculate 〔TravelHours〕 × 60　»

〔159〕 Calculate 〔158 Calculation Result〕 + 〔157 Calculation Result〕　»

〔160〕 Calculate 〔159 Calculation Result〕 + 〔TravelMinutes〕　»

〔161〕 Set Variable CurrentToDeparture to 〔160 Calculation Result〕

〔162〕 End If　▵123

〔163〕 Get 〔TravelMethod〕 Time 　➔ DepartureToDestination　» 164 1517
• GetDirectionsCustomLocation: 〔NotesAddressString〕
• Destination: 〔Repeat Item’s Location〕

〔164〕 Set Variable TravelTimeString to 〔163 DepartureToDestination〕

〔165〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　» 166 168 170 175 182
• MatchTextCaseSensitive: false

〔166〕 Count Items in 〔165 C2DMatches〕　»

〔167〕 If 〔166 Count〕 > 1

〔168〕 Get First Item from List 〔165 C2DMatches〕　»

〔169〕 Set Variable C2DHours to 〔168 Item from List〕

〔170〕 Get Last Item from List 〔165 C2DMatches〕　»

〔171〕 Set Variable C2DMinutes to 〔170 Item from List〕

〔172〕 Otherwise

〔173〕 Match Text hour(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔174〕 If 〔173 C2DMatches’s text〕 has any value

〔175〕 Get First Item from List 〔165 C2DMatches〕　»

〔176〕 Set Variable C2DHours to 〔175 Item from List〕

〔177〕 Number 0　»

〔178〕 Set Variable C2DMinutes to 〔177 Number〕

〔179〕 Otherwise

〔180〕 Number 0　»

〔181〕 Set Variable C2DHours to 〔180 Number〕

〔182〕 Get First Item from List 〔165 C2DMatches〕　»

〔183〕 Set Variable C2DMinutes to 〔182 Item from List〕

〔184〕 End If

〔185〕 End If　▵172

〔186〕 Calculate 〔C2DHours〕 × 60　»

〔187〕 Calculate 〔186 Calculation Result〕 + 〔C2DMinutes〕　»

〔188〕 Calculate 〔187 Calculation Result〕 + 〔CurrentToDeparture〕　»

〔189〕 Set Variable TravelTime to 〔188 Calculation Result〕

〔190〕 Otherwise　▵109

〔191〕 Comment
CALENDER EVENT NOTES IS BLANK

〔192〕 Get Dictionary from 〔HomeAddress〕 　➔ Home Address Dictionary　» 193 194 195 196 197

〔193〕 Get Dictionary Value for street in 〔192 Home Address Dictionary〕 　➔ home_Street　» 198 200

〔194〕 Get Dictionary Value for city in 〔192 Home Address Dictionary〕 　➔ home_City　» 198 200

〔195〕 Get Dictionary Value for state in 〔192 Home Address Dictionary〕 　➔ home_State　» 198 200

〔196〕 Get Dictionary Value for country in 〔192 Home Address Dictionary〕 　➔ home_Country　» 198 200

〔197〕 Get Dictionary Value for postcode in 〔192 Home Address Dictionary〕 　➔ home_Postcode　» 198 200

〔198〕 If All are true　〔193 home_Street〕 has any value　〔194 home_City〕 has any value　〔195 home_State〕 has any value　〔196 home_Country〕 has any value　〔197 home_Postcode〕 has any value

〔199〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED

〔200〕 If All are true　〔107 Current Location’s Street〕 is 〔193 home_Street〕　〔107 Current Location’s City〕 is 〔194 home_City〕　〔107 Current Location’s State〕 is 〔195 home_State〕　〔107 Current Location’s Country〕 is 〔196 home_Country〕　〔107 Current Location’s ZIP Code〕 is 〔197 home_Postcode〕

〔201〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED -> HOME ADDRESS IS THE SAME WITH CURRENT LOCATION

〔202〕 Number 0　»

〔203〕 Set Variable CurrentToDeparture to 〔202 Number〕

〔204〕 Otherwise

〔205〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED -> HOME ADDRESS IS NOT THE SAME WITH CURRENT LOCATION

〔206〕 Get 〔TravelMethod〕 Time　»
• Destination: 〔HomeAddress〕

〔207〕 Set Variable TravelTimeString to 〔206 Travel Time〕

〔208〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　» 209 211 213 218 225
• MatchTextCaseSensitive: false

〔209〕 Count Items in 〔208 C2DMatches〕　»

〔210〕 If 〔209 Count〕 > 1

〔211〕 Get First Item from List 〔208 C2DMatches〕　»

〔212〕 Set Variable C2DHours to 〔211 Item from List〕

〔213〕 Get Last Item from List 〔208 C2DMatches〕　»

〔214〕 Set Variable C2DMinutes to 〔213 Item from List〕

〔215〕 Otherwise

〔216〕 Match Text hour(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔217〕 If 〔216 C2DMatches’s text〕 has any value

〔218〕 Get First Item from List 〔208 C2DMatches〕　»

〔219〕 Set Variable C2DHours to 〔218 Item from List〕

〔220〕 Number 0　»

〔221〕 Set Variable C2DMinutes to 〔220 Number〕

〔222〕 Otherwise

〔223〕 Number 0　»

〔224〕 Set Variable C2DHours to 〔223 Number〕

〔225〕 Get First Item from List 〔208 C2DMatches〕　»

〔226〕 Set Variable C2DMinutes to 〔225 Item from List〕

〔227〕 End If

〔228〕 End If　▵215

〔229〕 Calculate 〔C2DHours〕 × 60　»

〔230〕 Calculate 〔229 Calculation Result〕 + 〔C2DMinutes〕　»

〔231〕 Set Variable CurrentToDeparture to 〔230 Calculation Result〕

〔232〕 End If　▵204

〔233〕 Get 〔TravelMethod〕 Time 　➔ DepartureToDestination　»
• GetDirectionsCustomLocation: 〔HomeAddress〕
• Destination: 〔Repeat Item’s Location〕

〔234〕 Set Variable TravelTimeString to 〔233 DepartureToDestination〕

〔235〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　» 236 238 240 245 252
• MatchTextCaseSensitive: false

〔236〕 Count Items in 〔235 C2DMatches〕　»

〔237〕 If 〔236 Count〕 > 1

〔238〕 Get First Item from List 〔235 C2DMatches〕　»

〔239〕 Set Variable C2DHours to 〔238 Item from List〕

〔240〕 Get Last Item from List 〔235 C2DMatches〕　»

〔241〕 Set Variable C2DMinutes to 〔240 Item from List〕

〔242〕 Otherwise

〔243〕 Match Text hour(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔244〕 If 〔243 C2DMatches’s text〕 has any value

〔245〕 Get First Item from List 〔235 C2DMatches〕　»

〔246〕 Set Variable C2DHours to 〔245 Item from List〕

〔247〕 Number 0　»

〔248〕 Set Variable C2DMinutes to 〔247 Number〕

〔249〕 Otherwise

〔250〕 Number 0　»

〔251〕 Set Variable C2DHours to 〔250 Number〕

〔252〕 Get First Item from List 〔235 C2DMatches〕　»

〔253〕 Set Variable C2DMinutes to 〔252 Item from List〕

〔254〕 End If

〔255〕 End If　▵242

〔256〕 Calculate 〔C2DHours〕 × 60　»

〔257〕 Calculate 〔256 Calculation Result〕 + 〔C2DMinutes〕　»

〔258〕 Calculate 〔257 Calculation Result〕 + 〔CurrentToDeparture〕　»

〔259〕 Set Variable TravelTime to 〔258 Calculation Result〕

〔260〕 Otherwise　▵198

〔261〕 Text
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS NOT MAINTAINED

〔262〕 Get 〔TravelMethod〕 Time　»
• Destination: 〔Repeat Item’s Location〕

〔263〕 Set Variable TravelTimeString to 〔262 Travel Time〕

〔264〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　» 265 267 269 274 281
• MatchTextCaseSensitive: false

〔265〕 Count Items in 〔264 C2DMatches〕　»

〔266〕 If 〔265 Count〕 > 1

〔267〕 Get First Item from List 〔264 C2DMatches〕　»

〔268〕 Set Variable C2DHours to 〔267 Item from List〕

〔269〕 Get Last Item from List 〔264 C2DMatches〕　»

〔270〕 Set Variable C2DMinutes to 〔269 Item from List〕

〔271〕 Otherwise

〔272〕 Match Text hour(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔273〕 If 〔272 C2DMatches’s text〕 has any value

〔274〕 Get First Item from List 〔264 C2DMatches〕　»

〔275〕 Set Variable C2DHours to 〔274 Item from List〕

〔276〕 Number 0　»

〔277〕 Set Variable C2DMinutes to 〔276 Number〕

〔278〕 Otherwise

〔279〕 Number 0　»

〔280〕 Set Variable C2DHours to 〔279 Number〕

〔281〕 Get First Item from List 〔264 C2DMatches〕　»

〔282〕 Set Variable C2DMinutes to 〔281 Item from List〕

〔283〕 End If

〔284〕 End If　▵271

〔285〕 Calculate 〔C2DHours〕 × 60　»

〔286〕 Calculate 〔285 Calculation Result〕 + 〔C2DMinutes〕　»

〔287〕 Set Variable TravelTime to 〔286 Calculation Result〕

〔288〕 End If　▵260

〔289〕 End If　▵190

〔290〕 Otherwise　▵106

〔291〕 Number 0　»

〔292〕 Set Variable TravelTime to 〔291 Number〕

〔293〕 End If

〔294〕 Calculate 〔TravelTime〕 + 〔ExtraTime〕　»

〔295〕 Adjust Subtract Date 〔Repeat Item’s Start Date〕 　➔ Supposed Alarm Time　» 296 299 302 305 312 328 330 331 349 354 357
• Duration: 〔294 Calculation Result〕 min

〔296〕 Dictionary 　➔ Alarm Label Dictionary　» 328 333 349
{  "Event": "〔Repeat Item〕",
   "From": "〔Repeat Item’s Start Date〕",
   "To": "〔Repeat Item’s End Date〕",
   "Location": "〔Repeat Item’s Location〕",
   "AlarmTime": "〔295 Supposed Alarm Time〕"
}

〔297〕 Date Current Date 　➔ Current Date　» 298 299 330

〔298〕 Adjust Add Date 〔297 Current Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"dd MMM yyyy"}〕 　➔ 1 day after　» 312 331
• Duration: "1" days

〔299〕 If 〔295 Supposed Alarm Time〕 is 〔297 Current Date〕

〔300〕 Comment
supposed alarm time is exactly 12:00am

〔301〕 If 〔Repeat Item’s Location〕 has any value

〔302〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 at 〔Repeat Item’s Location〕 which  was supposed to get ready at 〔295 Supposed Alarm Time〕. Please check.

〔303〕 Set Variable Text to 〔302 Text〕

〔304〕 Otherwise

〔305〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 which  was supposed to get ready at 〔295 Supposed Alarm Time〕. Please check.

〔306〕 Set Variable Text to 〔305 Text〕

〔307〕 End If

〔308〕 Show Alert 〔Text〕

〔309〕 Show Notification 〔Text〕

〔310〕 Speak Text
• Text: 〔Text〕

〔311〕 Otherwise　▵299

〔312〕 If 〔295 Supposed Alarm Time〕 is 〔298 1 day after〕

〔313〕 Find Alarm All Alarm　» 314 315

〔314〕 If 〔313 Alarms〕 has any value

〔315〕 Repeat[2] with Each in 〔313 Alarms〕

〔316〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ AlarmLabelDictionary　» 317 318 320

〔317〕 Get Dictionary Value for Event in 〔316 AlarmLabelDictionary〕 　➔ Event　» 322

〔318〕 Get Dictionary Value for From in 〔316 AlarmLabelDictionary〕 　➔ From　»

〔319〕 Get Dates from 〔318 From〕 　➔ FromDate　» 322

〔320〕 Get Dictionary Value for To in 〔316 AlarmLabelDictionary〕 　➔ To　»

〔321〕 Get Dates from 〔320 To〕 　➔ ToDate　»

〔322〕 If All are true　〔317 Event’s Name〕 is 〔Repeat Item〕　〔319 FromDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔Repeat Item’s Start Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕　〔321 ToDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is • ConditionalActionString
〔Repeat Item’s End Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕• Date
〔Repeat Item’s End Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕

〔323〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔324〕 End If

〔325〕 End Repeat[2] with Each　▵315

〔326〕 End If　▵314

〔327〕 Comment
since this will be triggered at 12:00 am each day, when the supposed alarm time is 12:00 am in the next day, you can set alarm now

〔328〕 Add Alarm for 〔295 Supposed Alarm Time〕 called 〔296 Alarm Label Dictionary〕

〔329〕 Otherwise　▵312

〔330〕 If 〔295 Supposed Alarm Time〕 > 〔297 Current Date〕

〔331〕 If 〔295 Supposed Alarm Time〕 > 〔298 1 day after〕

〔332〕 Comment
when the time is other than 12:00 am of then next day, you cannot set alarm yet. If set, it will be today. For example, triggering time 2025-4-8 12:00 am, the supposed alarm time is 2025-4-9 08:00 am, if you set an alarm at 08:00 at 2025-4-8 12:00 am, it will alarm at 2025-4-8 08:00 am instead. So we need to record the supposed alarm time and trigger next day.

〔333〕 Set Variable Event to 〔296 Alarm Label Dictionary〕

〔334〕 Otherwise

〔335〕 Find Alarm All Alarm　» 336 337
• ContentItemFilter: {  "Value": {
      "WFActionParameterFilterPrefix": 1,
      "WFContentPredicateBoundedDate": false,
      "WFActionParameterFilterTemplates": []
   },
   "WFSerializationType": "WFContentPredicateTableTemplate"
}

〔336〕 If 〔335 Alarms〕 has any value

〔337〕 Repeat[2] with Each in 〔335 Alarms〕

〔338〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ AlarmLabelDictionary　» 339 340 342

〔339〕 Get Dictionary Value for Event in 〔338 AlarmLabelDictionary〕 　➔ Event　» 344

〔340〕 Get Dictionary Value for From in 〔338 AlarmLabelDictionary〕 　➔ From　»

〔341〕 Get Dates from 〔340 From〕 　➔ FromDate　» 344

〔342〕 Get Dictionary Value for To in 〔338 AlarmLabelDictionary〕 　➔ To　»

〔343〕 Get Dates from 〔342 To〕 　➔ ToDate　»

〔344〕 If All are true　〔339 Event’s Name〕 is 〔Repeat Item〕　〔341 FromDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔Repeat Item’s Start Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕　〔343 ToDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔Repeat Item’s End Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕

〔345〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔346〕 End If

〔347〕 End Repeat[2] with Each　▵337

〔348〕 End If　▵336

〔349〕 Add Alarm for 〔295 Supposed Alarm Time〕 called 〔296 Alarm Label Dictionary〕

〔350〕 End If　▵334

〔351〕 Otherwise　▵330

〔352〕 Comment
the supposed alarm time passed

〔353〕 If 〔Repeat Item’s Location〕 has any value

〔354〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 at 〔Repeat Item’s Location〕 which  was supposed to get ready at 〔295 Supposed Alarm Time〕. Please check.

〔355〕 Set Variable Text to 〔354 Text〕

〔356〕 Otherwise

〔357〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 which  was supposed to get ready at 〔295 Supposed Alarm Time〕. Please check.

〔358〕 Set Variable Text to 〔357 Text〕

〔359〕 End If

〔360〕 Show Alert 〔Text〕

〔361〕 Show Notification 〔Text〕

〔362〕 Speak Text
• Text: 〔Text〕

〔363〕 End If　▵351

〔364〕 End If　▵329

〔365〕 End If　▵311

〔366〕 If 〔Event〕 has any value

〔367〕 Get Dictionary from 〔Event〕　» 380

〔368〕 Text　»

〔369〕 Set Variable TextList to 〔368 Text〕

〔370〕 Add 〔Event〕 to Variable TextList

〔371〕 Get File at Path Smart Calendar Reminder/Future Alarms.txt from Folder　» 372 373
• FileErrorIfNotFound: false

〔372〕 If 〔371 File’s File Size〕 has any value

〔373〕 Split Text 〔371 File〕 by New Lines　»

〔374〕 Repeat[2] with Each in 〔373 Split Text〕

〔375〕 Get Dictionary from 〔Repeat Item 2〕　» 376 377 378 379

〔376〕 Get Dictionary Value for Event in 〔375 Dictionary〕 　➔ Event　» 380

〔377〕 Get Dictionary Value for From in 〔375 Dictionary〕 　➔ From　» 380

〔378〕 Get Dictionary Value for To in 〔375 Dictionary〕 　➔ To　» 380

〔379〕 Get Dictionary Value for Location in 〔375 Dictionary〕 　➔ Location　»

〔380〕 If Any are true　〔376 Event’s Name〕 is not 〔367 Dictionary.Event〕　〔377 From’s Name〕 is not 〔367 Dictionary.From〕　〔378 To’s Name〕 is not 〔367 Dictionary.To〕　〔379 Location’s Name〕 is not 〔367 Dictionary.Location〕

〔381〕 Add 〔Repeat Item 2〕 to Variable TextList

〔382〕 End If

〔383〕 End Repeat[2] with Each　▵374

〔384〕 Combine Text 〔TextList〕 with New Lines　»

〔385〕 Save File 〔384 Combined Text〕
• AskWhereToSave: false
• SaveFileOverwrite: true
• FileDestinationPath: Smart Calendar Reminder/Future Alarms.txt

〔386〕 Otherwise　▵372

〔387〕 Text　»

〔Event〕

〔388〕 Save File 〔387 Text〕
• AskWhereToSave: false
• FileDestinationPath: Smart Calendar Reminder/Future Alarms.txt

〔389〕 End If

〔390〕 End If　▵366

〔391〕 End Repeat with Each　▵105

〔392〕 End If　▵104

〔393〕 Get File at Path Smart Calendar Reminder/Future Alarms.txt from Folder　» 394 395
• FileErrorIfNotFound: false

〔394〕 If 〔393 File’s File Size〕 has any value

〔395〕 Split Text 〔393 File〕 by New Lines　»

〔396〕 Repeat with Each in 〔395 Split Text〕

〔397〕 Get Dictionary from 〔Repeat Item〕　» 398 399 409 420

〔398〕 If 〔397 Dictionary〕 has any value

〔399〕 Get Dates from 〔397 Dictionary.AlarmTime〕　» 400 420

〔400〕 If 〔399 Dates〕 is today

〔401〕 Find Alarm All Alarm　» 402 403
• ContentItemFilter: {  "Value": {
      "WFActionParameterFilterPrefix": 1,
      "WFActionParameterFilterTemplates": [],
      "WFContentPredicateBoundedDate": false
   },
   "WFSerializationType": "WFContentPredicateTableTemplate"
}

〔402〕 If 〔401 Alarms〕 has any value

〔403〕 Repeat[2] with Each in 〔401 Alarms〕

〔404〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ Alarm_Label_Dictionary　» 405 407 415

〔405〕 Get Dictionary Value for From in 〔404 Alarm_Label_Dictionary〕　»

〔406〕 Get Dates from 〔405 Dictionary Value〕 　➔ From_Date　» 415

〔407〕 Get Dictionary Value for To in 〔404 Alarm_Label_Dictionary〕　»

〔408〕 Get Dates from 〔407 Dictionary Value〕 　➔ To_Date　» 415

〔409〕 Get Dictionary from 〔397 Dictionary.Event〕 　➔ FutureAlarmLabelDictionary　» 410 411 413

〔410〕 Get Dictionary Value for Event in 〔409 FutureAlarmLabelDictionary〕 　➔ Event　» 415

〔411〕 Get Dictionary Value for From in 〔409 FutureAlarmLabelDictionary〕 　➔ From　»

〔412〕 Get Dates from 〔411 From〕 　➔ FromDate　» 415

〔413〕 Get Dictionary Value for To in 〔409 FutureAlarmLabelDictionary〕 　➔ To　»

〔414〕 Get Dates from 〔413 To〕 　➔ ToDate　»

〔415〕 If All are true　〔410 Event’s Name〕 is 〔404 Alarm_Label_Dictionary.Event〕　〔412 FromDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔406 From_Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕　〔414 ToDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔408 To_Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕

〔416〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔417〕 End If

〔418〕 End Repeat[2] with Each　▵403

〔419〕 End If　▵402

〔420〕 Add Alarm for 〔399 Dates〕 called 〔397 Dictionary.Event〕

〔421〕 End If　▵400

〔422〕 End If　▵398

〔423〕 End Repeat with Each　▵396

〔424〕 End If　▵394

〔425〕 End If　▵92

〔426〕 If 〔Shortcut Input as Number〕 is 2

〔427〕 Comment
1-Hour Event Processor
*Real-time event handler for immediate notifications:

Processes events within next 60 minutes

Provides most accurate travel estimates

Recommended for hourly automation*

〔428〕 Get File at Path Smart Calendar Reminder/aboutme.txt from Folder　»
• FileErrorIfNotFound: false

〔429〕 Get Dictionary from 〔428 File〕　» 430 433 434

〔430〕 Get Dictionary from 〔429 Dictionary.HomeAddress〕　»

〔431〕 Text　»
〔430 Dictionary.street〕 〔430 Dictionary.city〕 〔430 Dictionary.state〕 〔430 Dictionary.postcode〕 〔430 Dictionary.country〕

〔432〕 Set Variable Home_Address to 〔431 Text〕

〔433〕 Set Variable Travel_Method to 〔429 Dictionary.TravelMethod〕

〔434〕 Get Dictionary Value for ExtraTime in 〔429 Dictionary〕　»

〔435〕 Get Numbers from 〔434 Dictionary Value〕　»

〔436〕 Set Variable Extra_Time to 〔435 Numbers〕

〔437〕 Find Calendar Events All Calendar Events where　» 438 439 440 652
• ContentItemSortProperty: Start Date
• ContentItemSortOrder: Oldest First
• ContentItemFilter: • All the following are true
Start Date is in the next 1 hours
Is Not All Day
Canceled is {"Bool":false}

〔438〕 If 〔437 Calendar Events〕 has any value

〔439〕 Count Items in 〔437 Calendar Events〕　» 656 664

〔440〕 Repeat with Each in 〔437 Calendar Events〕

〔441〕 If 〔Repeat Item’s Location〕 has any value

〔442〕 Get Current Location　» 453 459 523
• Accuracy: Best

〔443〕 If All are true　〔Repeat Item’s Notes〕 has any value　〔Repeat Item’s Notes〕 begins with {　〔Repeat Item’s Notes〕 ends with }

〔444〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY

〔445〕 Get Dictionary from 〔Repeat Item’s Notes〕 　➔ NotesAddressDictionary　» 446 447 448 449 450

〔446〕 Set Variable CalendarNotesStreet to 〔445 NotesAddressDictionary.Street〕

〔447〕 Set Variable CalendarNotesCity to 〔445 NotesAddressDictionary.City〕

〔448〕 Set Variable CalendarNotesState to 〔445 NotesAddressDictionary.State〕

〔449〕 Set Variable CalendarNotesRegion to 〔445 NotesAddressDictionary.Country〕

〔450〕 Set Variable CalendarNotesZIPCode to 〔445 NotesAddressDictionary.Postcode〕

〔451〕 Text　»
〔CalendarNotesStreet〕 〔CalendarNotesCity〕 〔CalendarNotesState〕 〔CalendarNotesZIPCode〕 〔CalendarNotesRegion〕

〔452〕 Set Variable NotesAddressString to 〔451 Text〕

〔453〕 If All are true　〔442 Current Location’s Street〕 is 〔CalendarNotesStreet〕　〔442 Current Location’s City〕 is 〔CalendarNotesCity〕　〔442 Current Location’s State〕 is 〔CalendarNotesState〕　〔442 Current Location’s Country〕 is 〔CalendarNotesRegion〕　〔442 Current Location’s ZIP Code〕 is 〔CalendarNotesZIPCode〕

〔454〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY -> CALENDAR EVENT ADDRESS IS THE SAME WITH CURRENT LOCATION

〔455〕 Number 0　»

〔456〕 Set Variable CurrentToDeparture to 〔455 Number〕

〔457〕 Otherwise

〔458〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY -> CALENDAR EVENT ADDRESS IS NOT THE SAME WITH CURRENT LOCATION

〔459〕 Get 〔TravelMethod〕 Time　»
• GetDirectionsCustomLocation: 〔442 Current Location〕
• Destination: 〔NotesAddressString〕

〔460〕 Set Variable TravelTimeString to 〔459 Travel Time〕

〔461〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　» 462 464 466 471 478
• MatchTextCaseSensitive: false

〔462〕 Count Items in 〔461 C2DMatches〕　»

〔463〕 If 〔462 Count〕 > 1

〔464〕 Get First Item from List 〔461 C2DMatches〕　»

〔465〕 Set Variable C2DHours to 〔464 Item from List〕

〔466〕 Get Last Item from List 〔461 C2DMatches〕　»

〔467〕 Set Variable C2DMinutes to 〔466 Item from List〕

〔468〕 Otherwise

〔469〕 Match Text hour(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔470〕 If 〔469 C2DMatches’s text〕 has any value

〔471〕 Get First Item from List 〔461 C2DMatches〕　»

〔472〕 Set Variable C2DHours to 〔471 Item from List〕

〔473〕 Number 0　»

〔474〕 Set Variable C2DMinutes to 〔473 Number〕

〔475〕 Otherwise

〔476〕 Number 0　»

〔477〕 Set Variable C2DHours to 〔476 Number〕

〔478〕 Get First Item from List 〔461 C2DMatches〕　»

〔479〕 Set Variable C2DMinutes to 〔478 Item from List〕

〔480〕 End If

〔481〕 End If　▵468

〔482〕 Calculate 〔C2DHours〕 × 60　»

〔483〕 Calculate 〔482 Calculation Result〕 + 〔C2DMinutes〕　»

〔484〕 Set Variable CurrentToDeparture to 〔483 Calculation Result〕

〔485〕 End If　▵457

〔486〕 Get 〔TravelMethod〕 Time 　➔ DepartureToDestination　»
• GetDirectionsCustomLocation: 〔NotesAddressString〕
• Destination: 〔Repeat Item’s Location〕

〔487〕 Set Variable TravelTimeString to 〔486 DepartureToDestination〕

〔488〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　» 489 491 493 498 505
• MatchTextCaseSensitive: false

〔489〕 Count Items in 〔488 C2DMatches〕　»

〔490〕 If 〔489 Count〕 > 1

〔491〕 Get First Item from List 〔488 C2DMatches〕　»

〔492〕 Set Variable C2DHours to 〔491 Item from List〕

〔493〕 Get Last Item from List 〔488 C2DMatches〕　»

〔494〕 Set Variable C2DMinutes to 〔493 Item from List〕

〔495〕 Otherwise

〔496〕 Match Text hour(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔497〕 If 〔496 C2DMatches’s text〕 has any value

〔498〕 Get First Item from List 〔488 C2DMatches〕　»

〔499〕 Set Variable C2DHours to 〔498 Item from List〕

〔500〕 Number 0　»

〔501〕 Set Variable C2DMinutes to 〔500 Number〕

〔502〕 Otherwise

〔503〕 Number 0　»

〔504〕 Set Variable C2DHours to 〔503 Number〕

〔505〕 Get First Item from List 〔488 C2DMatches〕　»

〔506〕 Set Variable C2DMinutes to 〔505 Item from List〕

〔507〕 End If

〔508〕 End If　▵495

〔509〕 Calculate 〔C2DHours〕 × 60　»

〔510〕 Calculate 〔509 Calculation Result〕 + 〔C2DMinutes〕　»

〔511〕 Calculate 〔510 Calculation Result〕 + 〔CurrentToDeparture〕　»

〔512〕 Set Variable TravelTime to 〔511 Calculation Result〕

〔513〕 Otherwise　▵443

〔514〕 Comment
CALENDER EVENT NOTES IS BLANK

〔515〕 Get Dictionary from 〔HomeAddress〕 　➔ home_address_dictionary　» 516 517 518 519 520

〔516〕 Get Dictionary Value for street in 〔515 home_address_dictionary〕 　➔ HomeStreet　» 521 523

〔517〕 Get Dictionary Value for city in 〔515 home_address_dictionary〕 　➔ HomeCity　» 521 523

〔518〕 Get Dictionary Value for state in 〔515 home_address_dictionary〕 　➔ HomeState　» 521 523

〔519〕 Get Dictionary Value for country in 〔515 home_address_dictionary〕 　➔ HomeCountry　» 521 523

〔520〕 Get Dictionary Value for postcode in 〔515 home_address_dictionary〕 　➔ HomePostcode　» 521 523

〔521〕 If All are true　〔516 HomeStreet〕 has any value　〔517 HomeCity〕 has any value　〔518 HomeState〕 has any value　〔519 HomeCountry〕 has any value　〔520 HomePostcode〕 has any value

〔522〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED

〔523〕 If All are true　〔442 Current Location’s Street〕 is 〔516 HomeStreet〕　〔442 Current Location’s City〕 is 〔517 HomeCity〕　〔442 Current Location’s State〕 is 〔518 HomeState〕　〔442 Current Location’s Country〕 is 〔519 HomeCountry〕　〔442 Current Location’s ZIP Code〕 is 〔520 HomePostcode〕

〔524〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED -> HOME ADDRESS IS THE SAME WITH CURRENT LOCATION

〔525〕 Number 0　»

〔526〕 Set Variable CurrentToDeparture to 〔525 Number〕

〔527〕 Otherwise

〔528〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED -> HOME ADDRESS IS NOT THE SAME WITH CURRENT LOCATION

〔529〕 Get 〔TravelMethod〕 Time　»
• Destination: 〔HomeAddress〕

〔530〕 Set Variable TravelTimeString to 〔529 Travel Time〕

〔531〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　» 532 534 536 541 548
• MatchTextCaseSensitive: false

〔532〕 Count Items in 〔531 C2DMatches〕　»

〔533〕 If 〔532 Count〕 > 1

〔534〕 Get First Item from List 〔531 C2DMatches〕　»

〔535〕 Set Variable C2DHours to 〔534 Item from List〕

〔536〕 Get Last Item from List 〔531 C2DMatches〕　»

〔537〕 Set Variable C2DMinutes to 〔536 Item from List〕

〔538〕 Otherwise

〔539〕 Match Text hour(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔540〕 If 〔539 C2DMatches’s text〕 has any value

〔541〕 Get First Item from List 〔531 C2DMatches〕　»

〔542〕 Set Variable C2DHours to 〔541 Item from List〕

〔543〕 Number 0　»

〔544〕 Set Variable C2DMinutes to 〔543 Number〕

〔545〕 Otherwise

〔546〕 Number 0　»

〔547〕 Set Variable C2DHours to 〔546 Number〕

〔548〕 Get First Item from List 〔531 C2DMatches〕　»

〔549〕 Set Variable C2DMinutes to 〔548 Item from List〕

〔550〕 End If

〔551〕 End If　▵538

〔552〕 Calculate 〔C2DHours〕 × 60　»

〔553〕 Calculate 〔552 Calculation Result〕 + 〔C2DMinutes〕　»

〔554〕 Set Variable CurrentToDeparture to 〔553 Calculation Result〕

〔555〕 End If　▵527

〔556〕 Get 〔TravelMethod〕 Time 　➔ DepartureToDestination　»
• GetDirectionsCustomLocation: 〔HomeAddress〕
• Destination: 〔Repeat Item’s Location〕

〔557〕 Set Variable TravelTimeString to 〔556 DepartureToDestination〕

〔558〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　» 559 561 563 568 575
• MatchTextCaseSensitive: false

〔559〕 Count Items in 〔558 C2DMatches〕　»

〔560〕 If 〔559 Count〕 > 1

〔561〕 Get First Item from List 〔558 C2DMatches〕　»

〔562〕 Set Variable C2DHours to 〔561 Item from List〕

〔563〕 Get Last Item from List 〔558 C2DMatches〕　»

〔564〕 Set Variable C2DMinutes to 〔563 Item from List〕

〔565〕 Otherwise

〔566〕 Match Text hour(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔567〕 If 〔566 C2DMatches’s text〕 has any value

〔568〕 Get First Item from List 〔558 C2DMatches〕　»

〔569〕 Set Variable C2DHours to 〔568 Item from List〕

〔570〕 Number 0　»

〔571〕 Set Variable C2DMinutes to 〔570 Number〕

〔572〕 Otherwise

〔573〕 Number 0　»

〔574〕 Set Variable C2DHours to 〔573 Number〕

〔575〕 Get First Item from List 〔558 C2DMatches〕　»

〔576〕 Set Variable C2DMinutes to 〔575 Item from List〕

〔577〕 End If

〔578〕 End If　▵565

〔579〕 Calculate 〔C2DHours〕 × 60　»

〔580〕 Calculate 〔579 Calculation Result〕 + 〔C2DMinutes〕　»

〔581〕 Calculate 〔580 Calculation Result〕 + 〔CurrentToDeparture〕　»

〔582〕 Set Variable TravelTime to 〔581 Calculation Result〕

〔583〕 Otherwise　▵521

〔584〕 Text
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS NOT MAINTAINED

〔585〕 Get 〔TravelMethod〕 Time　»
• Destination: 〔Repeat Item’s Location〕

〔586〕 Set Variable TravelTimeString to 〔585 Travel Time〕

〔587〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　» 588 590 592 597 604
• MatchTextCaseSensitive: false

〔588〕 Count Items in 〔587 C2DMatches〕　»

〔589〕 If 〔588 Count〕 > 1

〔590〕 Get First Item from List 〔587 C2DMatches〕　»

〔591〕 Set Variable C2DHours to 〔590 Item from List〕

〔592〕 Get Last Item from List 〔587 C2DMatches〕　»

〔593〕 Set Variable C2DMinutes to 〔592 Item from List〕

〔594〕 Otherwise

〔595〕 Match Text hour(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔596〕 If 〔595 C2DMatches’s text〕 has any value

〔597〕 Get First Item from List 〔587 C2DMatches〕　»

〔598〕 Set Variable C2DHours to 〔597 Item from List〕

〔599〕 Number 0　»

〔600〕 Set Variable C2DMinutes to 〔599 Number〕

〔601〕 Otherwise

〔602〕 Number 0　»

〔603〕 Set Variable C2DHours to 〔602 Number〕

〔604〕 Get First Item from List 〔587 C2DMatches〕　»

〔605〕 Set Variable C2DMinutes to 〔604 Item from List〕

〔606〕 End If

〔607〕 End If　▵594

〔608〕 Calculate 〔C2DHours〕 × 60　»

〔609〕 Calculate 〔608 Calculation Result〕 + 〔C2DMinutes〕　»

〔610〕 Set Variable TravelTime to 〔609 Calculation Result〕

〔611〕 End If　▵583

〔612〕 End If　▵513

〔613〕 Otherwise　▵441

〔614〕 Number 0　»

〔615〕 Set Variable TravelTime to 〔614 Number〕

〔616〕 End If

〔617〕 Find Alarm All Alarm　» 618 619
• ContentItemFilter: {  "Value": {
      "WFActionParameterFilterPrefix": 1,
      "WFContentPredicateBoundedDate": false,
      "WFActionParameterFilterTemplates": []
   },
   "WFSerializationType": "WFContentPredicateTableTemplate"
}

〔618〕 If 〔617 Alarms〕 has any value

〔619〕 Repeat[2] with Each in 〔617 Alarms〕

〔620〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ AlarmLabelDictionary　» 621 622 624

〔621〕 Get Dictionary Value for Event in 〔620 AlarmLabelDictionary〕 　➔ Event　» 626

〔622〕 Get Dictionary Value for From in 〔620 AlarmLabelDictionary〕 　➔ From　»

〔623〕 Get Dates from 〔622 From〕 　➔ FromDate　» 626

〔624〕 Get Dictionary Value for To in 〔620 AlarmLabelDictionary〕 　➔ To　»

〔625〕 Get Dates from 〔624 To〕 　➔ ToDate　»

〔626〕 If All are true　〔621 Event’s Name〕 is 〔Repeat Item〕　〔623 FromDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔Repeat Item’s Start Date{"Date Style":"Custom","WFDateFormat":"HH:mm","WFISO8601IncludeTime":false}〕　〔625 ToDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔Repeat Item’s End Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕

〔627〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔628〕 End If

〔629〕 End Repeat[2] with Each　▵619

〔630〕 End If　▵618

〔631〕 Calculate 〔TravelTime〕 + 〔Extra_Time〕　»

〔632〕 Adjust Subtract Date 〔Repeat Item’s Start Date〕 　➔ Supposed_Alarm_Time　» 634 636 639 646 647
• Duration: 〔631 Calculation Result〕 min

〔633〕 Date Current Date　»

〔634〕 If Any are true　〔632 Supposed_Alarm_Time〕 < 〔633 Date〕　〔632 Supposed_Alarm_Time〕 is 〔633 Date〕

〔635〕 If 〔Repeat Item’s Location〕 has any value

〔636〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 at 〔Repeat Item’s Location〕  which  was supposed to get ready at 〔632 Supposed_Alarm_Time〕. Please check.

〔637〕 Set Variable Text to 〔636 Text〕

〔638〕 Otherwise

〔639〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 which  was supposed to get ready at 〔632 Supposed_Alarm_Time〕. Please check.

〔640〕 Set Variable Text to 〔639 Text〕

〔641〕 End If

〔642〕 Show Alert 〔Text〕

〔643〕 Show Notification 〔Text〕

〔644〕 Speak Text
• Text: 〔Text〕

〔645〕 Otherwise　▵634

〔646〕 Dictionary　»
{  "Event": "〔Repeat Item〕",
   "From": "〔Repeat Item’s Start Date〕",
   "To": "〔Repeat Item’s End Date〕",
   "Location": "〔Repeat Item’s Location〕",
   "AlarmTime": "〔632 Supposed_Alarm_Time〕"
}

〔647〕 Add Alarm for 〔632 Supposed_Alarm_Time〕 called 〔646 Dictionary〕

〔648〕 End If

〔649〕 End Repeat with Each　▵440

〔650〕 Number 3　»

〔651〕 Repeat 〔650 Number〕 Times

〔652〕 Repeat[2] with Each in 〔437 Calendar Events〕

〔653〕 Format Date 〔Repeat Item 2’s Start Date〕　» 657 660 665 668
• DateFormatStyle: None

〔654〕 Format Date 〔Repeat Item 2’s End Date〕　» 657 660 665 668
• DateFormatStyle: None

〔655〕 If 〔Repeat Item 2’s Location〕 has any value

〔656〕 If 〔439 Count〕 > 1

〔657〕 Text　»
Event 〔Repeat Index 2〕 〔Repeat Item 2〕 from 〔653 Formatted Date〕 to 〔654 Formatted Date〕 at 〔Repeat Item 2’s Location〕

〔658〕 Set Variable Text to 〔657 Text〕

〔659〕 Otherwise

〔660〕 Text　»
Event  〔Repeat Item 2〕 from 〔653 Formatted Date〕 to 〔654 Formatted Date〕 at 〔Repeat Item 2’s Location〕

〔661〕 Set Variable Text to 〔660 Text〕

〔662〕 End If

〔663〕 Otherwise　▵655

〔664〕 If 〔439 Count〕 > 1

〔665〕 Text　»
Event 〔Repeat Index 2〕 〔Repeat Item 2〕 from 〔653 Formatted Date〕 to 〔654 Formatted Date〕

〔666〕 Set Variable Text to 〔665 Text〕

〔667〕 Otherwise

〔668〕 Text　»
Event  〔Repeat Item 2〕 from 〔653 Formatted Date〕 to 〔654 Formatted Date〕

〔669〕 Set Variable Text to 〔668 Text〕

〔670〕 End If

〔671〕 End If　▵663

〔672〕 Speak Text
• Text: 〔Text〕

〔673〕 Wait 1 seconds

〔674〕 End Repeat[2] with Each　▵652

〔675〕 End Repeat Times　▵651

〔676〕 End If　▵438

〔677〕 End If　▵426

〔678〕 If 〔Shortcut Input as Number〕 is 3

〔679〕 Comment
Alarm Activation Handler
Triggered by alarm events - manages notification flow

〔680〕 Dictionary　»
{  "stop": "no" }

〔681〕 Text　»
〔680 Dictionary〕

〔682〕 Save File 〔681 Text〕
• AskWhereToSave: false
• SaveFileOverwrite: true
• FileDestinationPath: Smart Calendar Reminder/stopflag.txt

〔683〕 Date Current Date　» 702

〔684〕 Find Alarm All Alarm　» 685 694
• ContentItemFilter: {  "Value": {
      "WFActionParameterFilterPrefix": 1,
      "WFActionParameterFilterTemplates": [],
      "WFContentPredicateBoundedDate": false
   },
   "WFSerializationType": "WFContentPredicateTableTemplate"
}

〔685〕 If 〔684 Alarms〕 has any value

〔686〕 Number 10000　» 687 688

〔687〕 Repeat 〔686 Number〕 Times

〔688〕 Get File at Path Smart Calendar Reminder/stopflag.txt from Folder　»
• FileErrorIfNotFound: false
• File: 〔686 Number〕

〔689〕 Get Dictionary from 〔688 File〕　»

〔690〕 Get Dictionary Value for stop in 〔689 Dictionary〕　»

〔691〕 If 〔690 Dictionary Value’s Name〕 is yes

〔692〕 Stop This Shortcut

〔693〕 End If

〔694〕 Repeat[2] with Each in 〔684 Alarms〕

〔695〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ alarm_label_dictionary　» 696 698 700 705 709 712

〔696〕 Get Dictionary Value for From in 〔695 alarm_label_dictionary〕　»

〔697〕 Get Dates from 〔696 Dictionary Value〕 　➔ From　» 703

〔698〕 Get Dictionary Value for To in 〔695 alarm_label_dictionary〕　»

〔699〕 Get Dates from 〔698 Dictionary Value〕 　➔ To　» 704

〔700〕 Get Dictionary Value for AlarmTime in 〔695 alarm_label_dictionary〕　»

〔701〕 Get Dates from 〔700 Dictionary Value〕 　➔ AlarmTime　»

〔702〕 If All are true　〔701 AlarmTime{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH"}〕 is 〔683 Date{"Date Style":"Custom","WFDateFormat":"HH","WFISO8601IncludeTime":false}〕　〔701 AlarmTime{"Date Style":"Custom","WFDateFormat":"mm","WFISO8601IncludeTime":false}〕 is 〔683 Date{"Date Style":"Custom","WFDateFormat":"mm","WFISO8601IncludeTime":false}〕

〔703〕 Format Date 〔697 From’s Time〕　» 709 712

〔704〕 Format Date 〔699 To’s Time〕　» 709 712

〔705〕 Get Dictionary Value for Location in 〔695 alarm_label_dictionary〕　»

〔706〕 Text　»
〔705 Dictionary Value〕

〔707〕 Count Characters in 〔706 Text〕　»

〔708〕 If 〔707 Count〕 > • ConditionalActionString
""• NumberValue
0

〔709〕 Text　»
Prepare for 〔695 alarm_label_dictionary.Event〕 from 〔703 Formatted Date〕 to 〔704 Formatted Date〕 at 〔695 alarm_label_dictionary.Location〕

〔710〕 Set Variable Text to 〔709 Text〕

〔711〕 Otherwise

〔712〕 Text　»
Prepare for 〔695 alarm_label_dictionary.Event〕 from 〔703 Formatted Date〕 to 〔704 Formatted Date〕

〔713〕 Set Variable Text to 〔712 Text〕

〔714〕 End If

〔715〕 Speak Text
• Text: 〔Text〕

〔716〕 End If　▵702

〔717〕 End Repeat[2] with Each　▵694

〔718〕 End Repeat Times　▵687

〔719〕 End If　▵685

〔720〕 End If　▵678

〔721〕 If 〔Shortcut Input as Number〕 is 4

〔722〕 Comment
input case 4:
Notification Interrupt System
Stop protocol for voice announcements when any alarm is stopped.

〔723〕 Dictionary　»
{  "stop": "yes" }

〔724〕 Text　»
〔723 Dictionary〕

〔725〕 Save File 〔724 Text〕
• AskWhereToSave: false
• SaveFileOverwrite: true
• FileDestinationPath: Smart Calendar Reminder/stopflag.txt

〔726〕 End If

〔727〕 If 〔Shortcut Input as Number〕 is 5

〔728〕 Comment
*Revolutionizing event management by integrating calendar data with intelligent automation:

Voice announcements for upcoming events

Dynamic alarm calculation (travel + prep time)

Calendar-driven scheduling system
Eliminates manual reminders and ensures perfect timing synchronization*

〔729〕 Get File at Path Smart Calendar Reminder/aboutme.txt from Folder　»
• FileErrorIfNotFound: false

〔730〕 Get Dictionary from 〔729 File〕　» 731 734 735

〔731〕 Get Dictionary from 〔730 Dictionary.HomeAddress〕　»

〔732〕 Text　»
〔731 Dictionary.street〕 〔731 Dictionary.city〕 〔731 Dictionary.state〕 〔731 Dictionary.postcode〕 〔731 Dictionary.country〕\u{space}

〔733〕 Set Variable HomeAddress to 〔732 Text〕

〔734〕 Set Variable TravelMethod to 〔730 Dictionary.TravelMethod〕

〔735〕 Get Dictionary Value for ExtraTime in 〔730 Dictionary〕　»

〔736〕 Get Numbers from 〔735 Dictionary Value〕　»

〔737〕 Set Variable ExtraTime to 〔736 Numbers〕

〔738〕 Find Calendar Events All Calendar Events where　» 739 740
• ContentItemSortProperty: Start Date
• ContentItemSortOrder: Oldest First
• ContentItemFilter: • All the following are true
Start Date is in the next 1 months
Is Not All Day
Canceled is {"Bool":false}

〔739〕 If 〔738 Calendar Events〕 has any value

〔740〕 Repeat with Each in 〔738 Calendar Events〕

〔741〕 If 〔Repeat Item’s Location〕 has any value

〔742〕 Get Current Location　» 754 760 824
• Accuracy: Best

〔743〕 Comment
*To specify event-specific departure locations:

1. Create calendar event notes with JSON structure:
{
“Street”: “your departure street”,
“City”: “your departure city”,
“State”: “your departure state”,
“Country”: “your departure country”,
“Postcode”: “your departure postcode”
}
2. System prioritizes these over default locations*

〔744〕 If All are true　〔Repeat Item’s Notes〕 has any value　〔Repeat Item’s Notes〕 begins with {　〔Repeat Item’s Notes〕 ends with }

〔745〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY

〔746〕 Get Dictionary from 〔Repeat Item’s Notes〕 　➔ Notes Address Dictionary　» 747 748 749 750 751

〔747〕 Set Variable Calendar_Notes_Street to 〔746 Notes Address Dictionary.Street〕

〔748〕 Set Variable Calendar_Notes_City to 〔746 Notes Address Dictionary.City〕

〔749〕 Set Variable Calendar_Notes_State to 〔746 Notes Address Dictionary.State〕

〔750〕 Set Variable Calendar_Notes_Region to 〔746 Notes Address Dictionary.Country〕

〔751〕 Set Variable Calendar_Notes_ZIP_Code to 〔746 Notes Address Dictionary.Postcode〕

〔752〕 Text　»
〔Calendar_Notes_Street〕 〔Calendar_Notes_City〕 〔Calendar_Notes_State〕 〔Calendar_Notes_ZIP_Code〕 〔Calendar_Notes_Region〕

〔753〕 Set Variable NotesAddressString to 〔752 Text〕

〔754〕 If All are true　〔742 Current Location’s Street〕 is 〔Calendar_Notes_Street〕　〔742 Current Location’s City〕 is 〔Calendar_Notes_City〕　〔742 Current Location’s State〕 is 〔Calendar_Notes_State〕　〔742 Current Location’s Country〕 is 〔Calendar_Notes_Region〕　〔742 Current Location’s ZIP Code〕 is 〔Calendar_Notes_ZIP_Code〕

〔755〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY -> CALENDAR EVENT ADDRESS IS THE SAME WITH CURRENT LOCATION

〔756〕 Number 0　»

〔757〕 Set Variable CurrentToDeparture to 〔756 Number〕

〔758〕 Otherwise

〔759〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY -> CALENDAR EVENT ADDRESS IS NOT THE SAME WITH CURRENT LOCATION

〔760〕 Get 〔TravelMethod〕 Time　»
• GetDirectionsCustomLocation: 〔742 Current Location〕
• Destination: 〔NotesAddressString〕

〔761〕 Set Variable TravelTimeString to 〔760 Travel Time〕

〔762〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　» 763 765 767 772 779
• MatchTextCaseSensitive: false

〔763〕 Count Items in 〔762 C2DMatches〕　»

〔764〕 If 〔763 Count〕 > 1

〔765〕 Get First Item from List 〔762 C2DMatches〕　»

〔766〕 Set Variable C2DHours to 〔765 Item from List〕

〔767〕 Get Last Item from List 〔762 C2DMatches〕　»

〔768〕 Set Variable C2DMinutes to 〔767 Item from List〕

〔769〕 Otherwise

〔770〕 Match Text hour(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔771〕 If 〔770 C2DMatches’s text〕 has any value

〔772〕 Get First Item from List 〔762 C2DMatches〕　»

〔773〕 Set Variable C2DHours to 〔772 Item from List〕

〔774〕 Number 0　»

〔775〕 Set Variable C2DMinutes to 〔774 Number〕

〔776〕 Otherwise

〔777〕 Number 0　»

〔778〕 Set Variable C2DHours to 〔777 Number〕

〔779〕 Get First Item from List 〔762 C2DMatches〕　»

〔780〕 Set Variable C2DMinutes to 〔779 Item from List〕

〔781〕 End If

〔782〕 End If　▵769

〔783〕 Calculate 〔C2DHours〕 × 60　»

〔784〕 Calculate 〔783 Calculation Result〕 + 〔C2DMinutes〕　»

〔785〕 Set Variable CurrentToDeparture to 〔784 Calculation Result〕

〔786〕 End If　▵758

〔787〕 Get 〔TravelMethod〕 Time 　➔ DepartureToDestination　»
• GetDirectionsCustomLocation: 〔NotesAddressString〕
• Destination: 〔Repeat Item’s Location〕

〔788〕 Set Variable TravelTimeString to 〔787 DepartureToDestination〕

〔789〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　» 790 792 794 799 806
• MatchTextCaseSensitive: false

〔790〕 Count Items in 〔789 C2DMatches〕　»

〔791〕 If 〔790 Count〕 > 1

〔792〕 Get First Item from List 〔789 C2DMatches〕　»

〔793〕 Set Variable C2DHours to 〔792 Item from List〕

〔794〕 Get Last Item from List 〔789 C2DMatches〕　»

〔795〕 Set Variable C2DMinutes to 〔794 Item from List〕

〔796〕 Otherwise

〔797〕 Match Text hour(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔798〕 If 〔797 C2DMatches’s text〕 has any value

〔799〕 Get First Item from List 〔789 C2DMatches〕　»

〔800〕 Set Variable C2DHours to 〔799 Item from List〕

〔801〕 Number 0　»

〔802〕 Set Variable C2DMinutes to 〔801 Number〕

〔803〕 Otherwise

〔804〕 Number 0　»

〔805〕 Set Variable C2DHours to 〔804 Number〕

〔806〕 Get First Item from List 〔789 C2DMatches〕　»

〔807〕 Set Variable C2DMinutes to 〔806 Item from List〕

〔808〕 End If

〔809〕 End If　▵796

〔810〕 Calculate 〔C2DHours〕 × 60　»

〔811〕 Calculate 〔810 Calculation Result〕 + 〔C2DMinutes〕　»

〔812〕 Calculate 〔811 Calculation Result〕 + 〔CurrentToDeparture〕　»

〔813〕 Set Variable TravelTime to 〔812 Calculation Result〕

〔814〕 Otherwise　▵744

〔815〕 Comment
CALENDER EVENT NOTES IS BLANK

〔816〕 Get Dictionary from 〔HomeAddress〕 　➔ Home Address Dictionary　» 817 818 819 820 821

〔817〕 Get Dictionary Value for street in 〔816 Home Address Dictionary〕 　➔ home_Street　» 822 824

〔818〕 Get Dictionary Value for city in 〔816 Home Address Dictionary〕 　➔ home_City　» 822 824

〔819〕 Get Dictionary Value for state in 〔816 Home Address Dictionary〕 　➔ home_State　» 822 824

〔820〕 Get Dictionary Value for country in 〔816 Home Address Dictionary〕 　➔ home_Country　» 822 824

〔821〕 Get Dictionary Value for postcode in 〔816 Home Address Dictionary〕 　➔ home_Postcode　» 822 824

〔822〕 If All are true　〔817 home_Street〕 has any value　〔818 home_City〕 has any value　〔819 home_State〕 has any value　〔820 home_Country〕 has any value　〔821 home_Postcode〕 has any value

〔823〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED

〔824〕 If All are true　〔742 Current Location’s Street〕 is 〔817 home_Street〕　〔742 Current Location’s City〕 is 〔818 home_City〕　〔742 Current Location’s State〕 is 〔819 home_State〕　〔742 Current Location’s Country〕 is 〔820 home_Country〕　〔742 Current Location’s ZIP Code〕 is 〔821 home_Postcode〕

〔825〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED -> HOME ADDRESS IS THE SAME WITH CURRENT LOCATION

〔826〕 Number 0　»

〔827〕 Set Variable CurrentToDeparture to 〔826 Number〕

〔828〕 Otherwise

〔829〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED -> HOME ADDRESS IS NOT THE SAME WITH CURRENT LOCATION

〔830〕 Get 〔TravelMethod〕 Time　»
• Destination: 〔HomeAddress〕

〔831〕 Set Variable TravelTimeString to 〔830 Travel Time〕

〔832〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　» 833 835 837 842 849
• MatchTextCaseSensitive: false

〔833〕 Count Items in 〔832 C2DMatches〕　»

〔834〕 If 〔833 Count〕 > 1

〔835〕 Get First Item from List 〔832 C2DMatches〕　»

〔836〕 Set Variable C2DHours to 〔835 Item from List〕

〔837〕 Get Last Item from List 〔832 C2DMatches〕　»

〔838〕 Set Variable C2DMinutes to 〔837 Item from List〕

〔839〕 Otherwise

〔840〕 Match Text hour(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔841〕 If 〔840 C2DMatches’s text〕 has any value

〔842〕 Get First Item from List 〔832 C2DMatches〕　»

〔843〕 Set Variable C2DHours to 〔842 Item from List〕

〔844〕 Number 0　»

〔845〕 Set Variable C2DMinutes to 〔844 Number〕

〔846〕 Otherwise

〔847〕 Number 0　»

〔848〕 Set Variable C2DHours to 〔847 Number〕

〔849〕 Get First Item from List 〔832 C2DMatches〕　»

〔850〕 Set Variable C2DMinutes to 〔849 Item from List〕

〔851〕 End If

〔852〕 End If　▵839

〔853〕 Calculate 〔C2DHours〕 × 60　»

〔854〕 Calculate 〔853 Calculation Result〕 + 〔C2DMinutes〕　»

〔855〕 Set Variable CurrentToDeparture to 〔854 Calculation Result〕

〔856〕 End If　▵828

〔857〕 Get 〔TravelMethod〕 Time 　➔ DepartureToDestination　»
• GetDirectionsCustomLocation: 〔HomeAddress〕
• Destination: 〔Repeat Item’s Location〕

〔858〕 Set Variable TravelTimeString to 〔857 DepartureToDestination〕

〔859〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　» 860 862 864 869 876
• MatchTextCaseSensitive: false

〔860〕 Count Items in 〔859 C2DMatches〕　»

〔861〕 If 〔860 Count〕 > 1

〔862〕 Get First Item from List 〔859 C2DMatches〕　»

〔863〕 Set Variable C2DHours to 〔862 Item from List〕

〔864〕 Get Last Item from List 〔859 C2DMatches〕　»

〔865〕 Set Variable C2DMinutes to 〔864 Item from List〕

〔866〕 Otherwise

〔867〕 Match Text hour(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔868〕 If 〔867 C2DMatches’s text〕 has any value

〔869〕 Get First Item from List 〔859 C2DMatches〕　»

〔870〕 Set Variable C2DHours to 〔869 Item from List〕

〔871〕 Number 0　»

〔872〕 Set Variable C2DMinutes to 〔871 Number〕

〔873〕 Otherwise

〔874〕 Number 0　»

〔875〕 Set Variable C2DHours to 〔874 Number〕

〔876〕 Get First Item from List 〔859 C2DMatches〕　»

〔877〕 Set Variable C2DMinutes to 〔876 Item from List〕

〔878〕 End If

〔879〕 End If　▵866

〔880〕 Calculate 〔C2DHours〕 × 60　»

〔881〕 Calculate 〔880 Calculation Result〕 + 〔C2DMinutes〕　»

〔882〕 Calculate 〔881 Calculation Result〕 + 〔CurrentToDeparture〕　»

〔883〕 Set Variable TravelTime to 〔882 Calculation Result〕

〔884〕 Otherwise　▵822

〔885〕 Text
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS NOT MAINTAINED

〔886〕 Get 〔TravelMethod〕 Time　»
• Destination: 〔Repeat Item’s Location〕

〔887〕 Set Variable TravelTimeString to 〔886 Travel Time〕

〔888〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　» 889 891 893 898 905
• MatchTextCaseSensitive: false

〔889〕 Count Items in 〔888 C2DMatches〕　»

〔890〕 If 〔889 Count〕 > 1

〔891〕 Get First Item from List 〔888 C2DMatches〕　»

〔892〕 Set Variable C2DHours to 〔891 Item from List〕

〔893〕 Get Last Item from List 〔888 C2DMatches〕　»

〔894〕 Set Variable C2DMinutes to 〔893 Item from List〕

〔895〕 Otherwise

〔896〕 Match Text hour(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔897〕 If 〔896 C2DMatches’s text〕 has any value

〔898〕 Get First Item from List 〔888 C2DMatches〕　»

〔899〕 Set Variable C2DHours to 〔898 Item from List〕

〔900〕 Number 0　»

〔901〕 Set Variable C2DMinutes to 〔900 Number〕

〔902〕 Otherwise

〔903〕 Number 0　»

〔904〕 Set Variable C2DHours to 〔903 Number〕

〔905〕 Get First Item from List 〔888 C2DMatches〕　»

〔906〕 Set Variable C2DMinutes to 〔905 Item from List〕

〔907〕 End If

〔908〕 End If　▵895

〔909〕 Calculate 〔C2DHours〕 × 60　»

〔910〕 Calculate 〔909 Calculation Result〕 + 〔C2DMinutes〕　»

〔911〕 Set Variable TravelTime to 〔910 Calculation Result〕

〔912〕 End If　▵884

〔913〕 End If　▵814

〔914〕 Otherwise　▵741

〔915〕 Number 0　»

〔916〕 Set Variable TravelTime to 〔915 Number〕

〔917〕 End If

〔918〕 Calculate 〔TravelTime〕 + 〔ExtraTime〕　»

〔919〕 Adjust Subtract Date 〔Repeat Item’s Start Date〕 　➔ Supposed Alarm Time　» 920 923 926 929 936 952 954 955 973 978 981
• Duration: 〔918 Calculation Result〕 min

〔920〕 Dictionary 　➔ Alarm Label Dictionary　» 952 957 973
{  "Event": "〔Repeat Item〕",
   "From": "〔Repeat Item’s Start Date〕",
   "To": "〔Repeat Item’s End Date〕",
   "Location": "〔Repeat Item’s Location〕",
   "AlarmTime": "〔919 Supposed Alarm Time〕"
}

〔921〕 Date Current Date 　➔ Current Date　» 922 923 954

〔922〕 Adjust Add Date 〔921 Current Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"dd MMM yyyy"}〕 　➔ 1 day after　» 936 955
• Duration: "1" days

〔923〕 If 〔919 Supposed Alarm Time〕 is 〔921 Current Date〕

〔924〕 Comment
supposed alarm time is exactly 12:00am

〔925〕 If 〔Repeat Item’s Location〕 has any value

〔926〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 at 〔Repeat Item’s Location〕 which  was supposed to get ready at 〔919 Supposed Alarm Time〕. Please check.

〔927〕 Set Variable Text to 〔926 Text〕

〔928〕 Otherwise

〔929〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 which  was supposed to get ready at 〔919 Supposed Alarm Time〕. Please check.

〔930〕 Set Variable Text to 〔929 Text〕

〔931〕 End If

〔932〕 Show Alert 〔Text〕

〔933〕 Show Notification 〔Text〕

〔934〕 Speak Text
• Text: 〔Text〕

〔935〕 Otherwise　▵923

〔936〕 If 〔919 Supposed Alarm Time〕 is 〔922 1 day after〕

〔937〕 Find Alarm All Alarm　» 938 939

〔938〕 If 〔937 Alarms〕 has any value

〔939〕 Repeat[2] with Each in 〔937 Alarms〕

〔940〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ AlarmLabelDictionary　» 941 942 944

〔941〕 Get Dictionary Value for Event in 〔940 AlarmLabelDictionary〕 　➔ Event　» 946

〔942〕 Get Dictionary Value for From in 〔940 AlarmLabelDictionary〕 　➔ From　»

〔943〕 Get Dates from 〔942 From〕 　➔ FromDate　» 946

〔944〕 Get Dictionary Value for To in 〔940 AlarmLabelDictionary〕 　➔ To　»

〔945〕 Get Dates from 〔944 To〕 　➔ ToDate　»

〔946〕 If All are true　〔941 Event’s Name〕 is 〔Repeat Item〕　〔943 FromDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔Repeat Item’s Start Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕　〔945 ToDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is • ConditionalActionString
〔Repeat Item’s End Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕• Date
〔Repeat Item’s End Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕

〔947〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔948〕 End If

〔949〕 End Repeat[2] with Each　▵939

〔950〕 End If　▵938

〔951〕 Comment
since this will be triggered at 12:00 am each day, when the supposed alarm time is 12:00 am in the next day, you can set alarm now

〔952〕 Add Alarm for 〔919 Supposed Alarm Time〕 called 〔920 Alarm Label Dictionary〕

〔953〕 Otherwise　▵936

〔954〕 If 〔919 Supposed Alarm Time〕 > 〔921 Current Date〕

〔955〕 If 〔919 Supposed Alarm Time〕 > 〔922 1 day after〕

〔956〕 Comment
when the time is other than 12:00 am of then next day, you cannot set alarm yet. If set, it will be today. For example, triggering time 2025-4-8 12:00 am, the supposed alarm time is 2025-4-9 08:00 am, if you set an alarm at 08:00 at 2025-4-8 12:00 am, it will alarm at 2025-4-8 08:00 am instead. So we need to record the supposed alarm time and trigger next day.

〔957〕 Set Variable Event to 〔920 Alarm Label Dictionary〕

〔958〕 Otherwise

〔959〕 Find Alarm All Alarm　» 960 961
• ContentItemFilter: {  "Value": {
      "WFActionParameterFilterPrefix": 1,
      "WFContentPredicateBoundedDate": false,
      "WFActionParameterFilterTemplates": []
   },
   "WFSerializationType": "WFContentPredicateTableTemplate"
}

〔960〕 If 〔959 Alarms〕 has any value

〔961〕 Repeat[2] with Each in 〔959 Alarms〕

〔962〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ AlarmLabelDictionary　» 963 964 966

〔963〕 Get Dictionary Value for Event in 〔962 AlarmLabelDictionary〕 　➔ Event　» 968

〔964〕 Get Dictionary Value for From in 〔962 AlarmLabelDictionary〕 　➔ From　»

〔965〕 Get Dates from 〔964 From〕 　➔ FromDate　» 968

〔966〕 Get Dictionary Value for To in 〔962 AlarmLabelDictionary〕 　➔ To　»

〔967〕 Get Dates from 〔966 To〕 　➔ ToDate　»

〔968〕 If All are true　〔963 Event’s Name〕 is 〔Repeat Item〕　〔965 FromDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔Repeat Item’s Start Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕　〔967 ToDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔Repeat Item’s End Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕

〔969〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔970〕 End If

〔971〕 End Repeat[2] with Each　▵961

〔972〕 End If　▵960

〔973〕 Add Alarm for 〔919 Supposed Alarm Time〕 called 〔920 Alarm Label Dictionary〕

〔974〕 End If　▵958

〔975〕 Otherwise　▵954

〔976〕 Comment
the supposed alarm time passed

〔977〕 If 〔Repeat Item’s Location〕 has any value

〔978〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 at 〔Repeat Item’s Location〕 which  was supposed to get ready at 〔919 Supposed Alarm Time〕. Please check.

〔979〕 Set Variable Text to 〔978 Text〕

〔980〕 Otherwise

〔981〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 which  was supposed to get ready at 〔919 Supposed Alarm Time〕. Please check.

〔982〕 Set Variable Text to 〔981 Text〕

〔983〕 End If

〔984〕 Show Alert 〔Text〕

〔985〕 Show Notification 〔Text〕

〔986〕 Speak Text
• Text: 〔Text〕

〔987〕 End If　▵975

〔988〕 End If　▵953

〔989〕 End If　▵935

〔990〕 If 〔Event〕 has any value

〔991〕 Get Dictionary from 〔Event〕　» 992 993 994 995 1008

〔992〕 Get Text from 〔991 Dictionary.Event〕　» 1008

〔993〕 Get Dates from 〔991 Dictionary.From〕　» 1008

〔994〕 Get Dates from 〔991 Dictionary.To〕　» 1008

〔995〕 Get Text from 〔991 Dictionary.Location〕　» 1008

〔996〕 Text　»

〔997〕 Set Variable TextList to 〔996 Text〕

〔998〕 Add 〔Event〕 to Variable TextList

〔999〕 Get File at Path Smart Calendar Reminder/Future Alarms.txt from Folder　» 1000 1001
• FileErrorIfNotFound: false

〔1000〕 If 〔999 File’s File Size〕 has any value

〔1001〕 Split Text 〔999 File〕 by New Lines　»

〔1002〕 Repeat[2] with Each in 〔1001 Split Text〕

〔1003〕 Get Dictionary from 〔Repeat Item 2〕　» 1004 1005 1006 1007

〔1004〕 Get Text from 〔1003 Dictionary.Event〕　» 1008

〔1005〕 Get Dates from 〔1003 Dictionary.From〕　» 1008

〔1006〕 Get Dates from 〔1003 Dictionary.To〕

〔1007〕 Get Text from 〔1003 Dictionary.Location〕　»

〔1008〕 If Any are true　〔992 Text〕 is not 〔1004 Text〕　〔993 Dates〕 is not • ConditionalActionString
〔991 Dictionary.From〕• Date
〔1005 Dates〕　〔994 Dates〕 is not • ConditionalActionString
〔991 Dictionary.To〕• Date
〔1005 Dates〕　〔995 Text〕 is not 〔1007 Text〕

〔1009〕 Add 〔Repeat Item 2〕 to Variable TextList

〔1010〕 End If

〔1011〕 End Repeat[2] with Each　▵1002

〔1012〕 Combine Text 〔TextList〕 with New Lines　»

〔1013〕 Save File 〔1012 Combined Text〕
• AskWhereToSave: false
• SaveFileOverwrite: true
• FileDestinationPath: Smart Calendar Reminder/Future Alarms.txt

〔1014〕 Otherwise　▵1000

〔1015〕 Text　»

〔Event〕

〔1016〕 Save File 〔1015 Text〕
• AskWhereToSave: false
• FileDestinationPath: Smart Calendar Reminder/Future Alarms.txt

〔1017〕 End If

〔1018〕 End If　▵990

〔1019〕 End Repeat with Each　▵740

〔1020〕 End If　▵739

〔1021〕 Get File at Path Smart Calendar Reminder/Future Alarms.txt from Folder　» 1022 1023
• FileErrorIfNotFound: false

〔1022〕 If 〔1021 File’s File Size〕 has any value

〔1023〕 Split Text 〔1021 File〕 by New Lines　»

〔1024〕 Repeat with Each in 〔1023 Split Text〕

〔1025〕 Get Dictionary from 〔Repeat Item〕　» 1026 1027 1037 1048

〔1026〕 If 〔1025 Dictionary〕 has any value

〔1027〕 Get Dates from 〔1025 Dictionary.AlarmTime〕　» 1028 1029 1048

〔1028〕 If 〔1027 Dates〕 is today

〔1029〕 Find Alarm 〔1027 Dates〕　» 1030 1031
• ContentItemFilter: {  "Value": {
      "WFActionParameterFilterPrefix": 1,
      "WFActionParameterFilterTemplates": [],
      "WFContentPredicateBoundedDate": false
   },
   "WFSerializationType": "WFContentPredicateTableTemplate"
}

〔1030〕 If 〔1029 Alarms〕 has any value

〔1031〕 Repeat[2] with Each in 〔1029 Alarms〕

〔1032〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ Alarm_Label_Dictionary　» 1033 1035 1043

〔1033〕 Get Dictionary Value for From in 〔1032 Alarm_Label_Dictionary〕　»

〔1034〕 Get Dates from 〔1033 Dictionary Value〕 　➔ From_Date　» 1043

〔1035〕 Get Dictionary Value for To in 〔1032 Alarm_Label_Dictionary〕　»

〔1036〕 Get Dates from 〔1035 Dictionary Value〕 　➔ To_Date　» 1043

〔1037〕 Get Dictionary from 〔1025 Dictionary.Event〕 　➔ FutureAlarmLabelDictionary　» 1038 1039 1041

〔1038〕 Get Dictionary Value for Event in 〔1037 FutureAlarmLabelDictionary〕 　➔ Event　» 1043

〔1039〕 Get Dictionary Value for From in 〔1037 FutureAlarmLabelDictionary〕 　➔ From　»

〔1040〕 Get Dates from 〔1039 From〕 　➔ FromDate　» 1043

〔1041〕 Get Dictionary Value for To in 〔1037 FutureAlarmLabelDictionary〕 　➔ To　»

〔1042〕 Get Dates from 〔1041 To〕 　➔ ToDate　»

〔1043〕 If All are true　〔1038 Event’s Name〕 is 〔1032 Alarm_Label_Dictionary.Event〕　〔1040 FromDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔1034 From_Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕　〔1042 ToDate{"Date Style":"Custom","WFDateFormat":"HH:mm","WFISO8601IncludeTime":false}〕 is 〔1036 To_Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕

〔1044〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔1045〕 End If

〔1046〕 End Repeat[2] with Each　▵1031

〔1047〕 End If　▵1030

〔1048〕 Add Alarm for 〔1027 Dates〕 called 〔1025 Dictionary.Event〕

〔1049〕 End If　▵1028

〔1050〕 End If　▵1026

〔1051〕 End Repeat with Each　▵1024

〔1052〕 End If　▵1022

〔1053〕 End If　▵727

〔1054〕 If 〔Shortcut Input as Number〕 is 6

〔1055〕 Comment
*Revolutionizing event management by integrating calendar data with intelligent automation:

Voice announcements for upcoming events

Dynamic alarm calculation (travel + prep time)

Calendar-driven scheduling system
Eliminates manual reminders and ensures perfect timing synchronization*

〔1056〕 Get File at Path Smart Calendar Reminder/aboutme.txt from Folder　»
• FileErrorIfNotFound: false

〔1057〕 Get Dictionary from 〔1056 File〕　» 1058 1061 1062

〔1058〕 Get Dictionary from 〔1057 Dictionary.HomeAddress〕　»

〔1059〕 Text　»
〔1058 Dictionary.street〕 〔1058 Dictionary.city〕 〔1058 Dictionary.state〕 〔1058 Dictionary.postcode〕 〔1058 Dictionary.country〕\u{space}

〔1060〕 Set Variable HomeAddress to 〔1059 Text〕

〔1061〕 Set Variable TravelMethod to 〔1057 Dictionary.TravelMethod〕

〔1062〕 Get Dictionary Value for ExtraTime in 〔1057 Dictionary〕　»

〔1063〕 Get Numbers from 〔1062 Dictionary Value〕　»

〔1064〕 Set Variable ExtraTime to 〔1063 Numbers〕

〔1065〕 Find Calendar Events All Calendar Events where　» 1066 1067
• ContentItemSortProperty: Start Date
• ContentItemSortOrder: Oldest First
• ContentItemFilter: • All the following are true
Start Date is in the next 1 weeks
Is Not All Day
Canceled is {"Bool":false}

〔1066〕 If 〔1065 Calendar Events〕 has any value

〔1067〕 Repeat with Each in 〔1065 Calendar Events〕

〔1068〕 If 〔Repeat Item’s Location〕 has any value

〔1069〕 Get Current Location　» 1081 1087 1151
• Accuracy: Best

〔1070〕 Comment
*To specify event-specific departure locations:

1. Create calendar event notes with JSON structure:
{
“Street”: “your departure street”,
“City”: “your departure city”,
“State”: “your departure state”,
“Country”: “your departure country”,
“Postcode”: “your departure postcode”
}
2. System prioritizes these over default locations*

〔1071〕 If All are true　〔Repeat Item’s Notes〕 has any value　〔Repeat Item’s Notes〕 begins with {　〔Repeat Item’s Notes〕 ends with }

〔1072〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY

〔1073〕 Get Dictionary from 〔Repeat Item’s Notes〕 　➔ Notes Address Dictionary　» 1074 1075 1076 1077 1078

〔1074〕 Set Variable Calendar_Notes_Street to 〔1073 Notes Address Dictionary.Street〕

〔1075〕 Set Variable Calendar_Notes_City to 〔1073 Notes Address Dictionary.City〕

〔1076〕 Set Variable Calendar_Notes_State to 〔1073 Notes Address Dictionary.State〕

〔1077〕 Set Variable Calendar_Notes_Region to 〔1073 Notes Address Dictionary.Country〕

〔1078〕 Set Variable Calendar_Notes_ZIP_Code to 〔1073 Notes Address Dictionary.Postcode〕

〔1079〕 Text　»
〔Calendar_Notes_Street〕 〔Calendar_Notes_City〕 〔Calendar_Notes_State〕 〔Calendar_Notes_ZIP_Code〕 〔Calendar_Notes_Region〕

〔1080〕 Set Variable NotesAddressString to 〔1079 Text〕

〔1081〕 If All are true　〔1069 Current Location’s Street〕 is 〔Calendar_Notes_Street〕　〔1069 Current Location’s City〕 is 〔Calendar_Notes_City〕　〔1069 Current Location’s State〕 is 〔Calendar_Notes_State〕　〔1069 Current Location’s Country〕 is 〔Calendar_Notes_Region〕　〔1069 Current Location’s ZIP Code〕 is 〔Calendar_Notes_ZIP_Code〕

〔1082〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY -> CALENDAR EVENT ADDRESS IS THE SAME WITH CURRENT LOCATION

〔1083〕 Number 0　»

〔1084〕 Set Variable CurrentToDeparture to 〔1083 Number〕

〔1085〕 Otherwise

〔1086〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY -> CALENDAR EVENT ADDRESS IS NOT THE SAME WITH CURRENT LOCATION

〔1087〕 Get 〔TravelMethod〕 Time　»
• GetDirectionsCustomLocation: 〔1069 Current Location〕
• Destination: 〔NotesAddressString〕

〔1088〕 Set Variable TravelTimeString to 〔1087 Travel Time〕

〔1089〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　» 1090 1092 1094 1099 1106
• MatchTextCaseSensitive: false

〔1090〕 Count Items in 〔1089 C2DMatches〕　»

〔1091〕 If 〔1090 Count〕 > 1

〔1092〕 Get First Item from List 〔1089 C2DMatches〕　»

〔1093〕 Set Variable C2DHours to 〔1092 Item from List〕

〔1094〕 Get Last Item from List 〔1089 C2DMatches〕　»

〔1095〕 Set Variable C2DMinutes to 〔1094 Item from List〕

〔1096〕 Otherwise

〔1097〕 Match Text hour(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔1098〕 If 〔1097 C2DMatches’s text〕 has any value

〔1099〕 Get First Item from List 〔1089 C2DMatches〕　»

〔1100〕 Set Variable C2DHours to 〔1099 Item from List〕

〔1101〕 Number 0　»

〔1102〕 Set Variable C2DMinutes to 〔1101 Number〕

〔1103〕 Otherwise

〔1104〕 Number 0　»

〔1105〕 Set Variable C2DHours to 〔1104 Number〕

〔1106〕 Get First Item from List 〔1089 C2DMatches〕　»

〔1107〕 Set Variable C2DMinutes to 〔1106 Item from List〕

〔1108〕 End If

〔1109〕 End If　▵1096

〔1110〕 Calculate 〔C2DHours〕 × 60　»

〔1111〕 Calculate 〔1110 Calculation Result〕 + 〔C2DMinutes〕　»

〔1112〕 Set Variable CurrentToDeparture to 〔1111 Calculation Result〕

〔1113〕 End If　▵1085

〔1114〕 Get 〔TravelMethod〕 Time 　➔ DepartureToDestination　»
• GetDirectionsCustomLocation: 〔NotesAddressString〕
• Destination: 〔Repeat Item’s Location〕

〔1115〕 Set Variable TravelTimeString to 〔1114 DepartureToDestination〕

〔1116〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　» 1117 1119 1121 1126 1133
• MatchTextCaseSensitive: false

〔1117〕 Count Items in 〔1116 C2DMatches〕　»

〔1118〕 If 〔1117 Count〕 > 1

〔1119〕 Get First Item from List 〔1116 C2DMatches〕　»

〔1120〕 Set Variable C2DHours to 〔1119 Item from List〕

〔1121〕 Get Last Item from List 〔1116 C2DMatches〕　»

〔1122〕 Set Variable C2DMinutes to 〔1121 Item from List〕

〔1123〕 Otherwise

〔1124〕 Match Text hour(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔1125〕 If 〔1124 C2DMatches’s text〕 has any value

〔1126〕 Get First Item from List 〔1116 C2DMatches〕　»

〔1127〕 Set Variable C2DHours to 〔1126 Item from List〕

〔1128〕 Number 0　»

〔1129〕 Set Variable C2DMinutes to 〔1128 Number〕

〔1130〕 Otherwise

〔1131〕 Number 0　»

〔1132〕 Set Variable C2DHours to 〔1131 Number〕

〔1133〕 Get First Item from List 〔1116 C2DMatches〕　»

〔1134〕 Set Variable C2DMinutes to 〔1133 Item from List〕

〔1135〕 End If

〔1136〕 End If　▵1123

〔1137〕 Calculate 〔C2DHours〕 × 60　»

〔1138〕 Calculate 〔1137 Calculation Result〕 + 〔C2DMinutes〕　»

〔1139〕 Calculate 〔1138 Calculation Result〕 + 〔CurrentToDeparture〕　»

〔1140〕 Set Variable TravelTime to 〔1139 Calculation Result〕

〔1141〕 Otherwise　▵1071

〔1142〕 Comment
CALENDER EVENT NOTES IS BLANK

〔1143〕 Get Dictionary from 〔HomeAddress〕 　➔ Home Address Dictionary　» 1144 1145 1146 1147 1148

〔1144〕 Get Dictionary Value for street in 〔1143 Home Address Dictionary〕 　➔ home_Street　» 1149 1151

〔1145〕 Get Dictionary Value for city in 〔1143 Home Address Dictionary〕 　➔ home_City　» 1149 1151

〔1146〕 Get Dictionary Value for state in 〔1143 Home Address Dictionary〕 　➔ home_State　» 1149 1151

〔1147〕 Get Dictionary Value for country in 〔1143 Home Address Dictionary〕 　➔ home_Country　» 1149 1151

〔1148〕 Get Dictionary Value for postcode in 〔1143 Home Address Dictionary〕 　➔ home_Postcode　» 1149 1151

〔1149〕 If All are true　〔1144 home_Street〕 has any value　〔1145 home_City〕 has any value　〔1146 home_State〕 has any value　〔1147 home_Country〕 has any value　〔1148 home_Postcode〕 has any value

〔1150〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED

〔1151〕 If All are true　〔1069 Current Location’s Street〕 is 〔1144 home_Street〕　〔1069 Current Location’s City〕 is 〔1145 home_City〕　〔1069 Current Location’s State〕 is 〔1146 home_State〕　〔1069 Current Location’s Country〕 is 〔1147 home_Country〕　〔1069 Current Location’s ZIP Code〕 is 〔1148 home_Postcode〕

〔1152〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED -> HOME ADDRESS IS THE SAME WITH CURRENT LOCATION

〔1153〕 Number 0　»

〔1154〕 Set Variable CurrentToDeparture to 〔1153 Number〕

〔1155〕 Otherwise

〔1156〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED -> HOME ADDRESS IS NOT THE SAME WITH CURRENT LOCATION

〔1157〕 Get 〔TravelMethod〕 Time　»
• Destination: 〔HomeAddress〕

〔1158〕 Set Variable TravelTimeString to 〔1157 Travel Time〕

〔1159〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　» 1160 1162 1164 1169 1176
• MatchTextCaseSensitive: false

〔1160〕 Count Items in 〔1159 C2DMatches〕　»

〔1161〕 If 〔1160 Count〕 > 1

〔1162〕 Get First Item from List 〔1159 C2DMatches〕　»

〔1163〕 Set Variable C2DHours to 〔1162 Item from List〕

〔1164〕 Get Last Item from List 〔1159 C2DMatches〕　»

〔1165〕 Set Variable C2DMinutes to 〔1164 Item from List〕

〔1166〕 Otherwise

〔1167〕 Match Text hour(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔1168〕 If 〔1167 C2DMatches’s text〕 has any value

〔1169〕 Get First Item from List 〔1159 C2DMatches〕　»

〔1170〕 Set Variable C2DHours to 〔1169 Item from List〕

〔1171〕 Number 0　»

〔1172〕 Set Variable C2DMinutes to 〔1171 Number〕

〔1173〕 Otherwise

〔1174〕 Number 0　»

〔1175〕 Set Variable C2DHours to 〔1174 Number〕

〔1176〕 Get First Item from List 〔1159 C2DMatches〕　»

〔1177〕 Set Variable C2DMinutes to 〔1176 Item from List〕

〔1178〕 End If

〔1179〕 End If　▵1166

〔1180〕 Calculate 〔C2DHours〕 × 60　»

〔1181〕 Calculate 〔1180 Calculation Result〕 + 〔C2DMinutes〕　»

〔1182〕 Set Variable CurrentToDeparture to 〔1181 Calculation Result〕

〔1183〕 End If　▵1155

〔1184〕 Get 〔TravelMethod〕 Time 　➔ DepartureToDestination　»
• GetDirectionsCustomLocation: 〔HomeAddress〕
• Destination: 〔Repeat Item’s Location〕

〔1185〕 Set Variable TravelTimeString to 〔1184 DepartureToDestination〕

〔1186〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　» 1187 1189 1191 1196 1203
• MatchTextCaseSensitive: false

〔1187〕 Count Items in 〔1186 C2DMatches〕　»

〔1188〕 If 〔1187 Count〕 > 1

〔1189〕 Get First Item from List 〔1186 C2DMatches〕　»

〔1190〕 Set Variable C2DHours to 〔1189 Item from List〕

〔1191〕 Get Last Item from List 〔1186 C2DMatches〕　»

〔1192〕 Set Variable C2DMinutes to 〔1191 Item from List〕

〔1193〕 Otherwise

〔1194〕 Match Text hour(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔1195〕 If 〔1194 C2DMatches’s text〕 has any value

〔1196〕 Get First Item from List 〔1186 C2DMatches〕　»

〔1197〕 Set Variable C2DHours to 〔1196 Item from List〕

〔1198〕 Number 0　»

〔1199〕 Set Variable C2DMinutes to 〔1198 Number〕

〔1200〕 Otherwise

〔1201〕 Number 0　»

〔1202〕 Set Variable C2DHours to 〔1201 Number〕

〔1203〕 Get First Item from List 〔1186 C2DMatches〕　»

〔1204〕 Set Variable C2DMinutes to 〔1203 Item from List〕

〔1205〕 End If

〔1206〕 End If　▵1193

〔1207〕 Calculate 〔C2DHours〕 × 60　»

〔1208〕 Calculate 〔1207 Calculation Result〕 + 〔C2DMinutes〕　»

〔1209〕 Calculate 〔1208 Calculation Result〕 + 〔CurrentToDeparture〕　»

〔1210〕 Set Variable TravelTime to 〔1209 Calculation Result〕

〔1211〕 Otherwise　▵1149

〔1212〕 Text
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS NOT MAINTAINED

〔1213〕 Get 〔TravelMethod〕 Time　»
• Destination: 〔Repeat Item’s Location〕

〔1214〕 Set Variable TravelTimeString to 〔1213 Travel Time〕

〔1215〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　» 1216 1218 1220 1225 1232
• MatchTextCaseSensitive: false

〔1216〕 Count Items in 〔1215 C2DMatches〕　»

〔1217〕 If 〔1216 Count〕 > 1

〔1218〕 Get First Item from List 〔1215 C2DMatches〕　»

〔1219〕 Set Variable C2DHours to 〔1218 Item from List〕

〔1220〕 Get Last Item from List 〔1215 C2DMatches〕　»

〔1221〕 Set Variable C2DMinutes to 〔1220 Item from List〕

〔1222〕 Otherwise

〔1223〕 Match Text hour(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔1224〕 If 〔1223 C2DMatches’s text〕 has any value

〔1225〕 Get First Item from List 〔1215 C2DMatches〕　»

〔1226〕 Set Variable C2DHours to 〔1225 Item from List〕

〔1227〕 Number 0　»

〔1228〕 Set Variable C2DMinutes to 〔1227 Number〕

〔1229〕 Otherwise

〔1230〕 Number 0　»

〔1231〕 Set Variable C2DHours to 〔1230 Number〕

〔1232〕 Get First Item from List 〔1215 C2DMatches〕　»

〔1233〕 Set Variable C2DMinutes to 〔1232 Item from List〕

〔1234〕 End If

〔1235〕 End If　▵1222

〔1236〕 Calculate 〔C2DHours〕 × 60　»

〔1237〕 Calculate 〔1236 Calculation Result〕 + 〔C2DMinutes〕　»

〔1238〕 Set Variable TravelTime to 〔1237 Calculation Result〕

〔1239〕 End If　▵1211

〔1240〕 End If　▵1141

〔1241〕 Otherwise　▵1068

〔1242〕 Number 0　»

〔1243〕 Set Variable TravelTime to 〔1242 Number〕

〔1244〕 End If

〔1245〕 Calculate 〔TravelTime〕 + 〔ExtraTime〕　»

〔1246〕 Adjust Subtract Date 〔Repeat Item’s Start Date〕 　➔ Supposed Alarm Time　» 1247 1250 1253 1256 1263 1279 1281 1282 1300 1305 1308
• Duration: 〔1245 Calculation Result〕 min

〔1247〕 Dictionary 　➔ Alarm Label Dictionary　» 1279 1284 1300
{  "Event": "〔Repeat Item〕",
   "From": "〔Repeat Item’s Start Date〕",
   "To": "〔Repeat Item’s End Date〕",
   "Location": "〔Repeat Item’s Location〕",
   "AlarmTime": "〔1246 Supposed Alarm Time〕"
}

〔1248〕 Date Current Date 　➔ Current Date　» 1249 1250 1281

〔1249〕 Adjust Add Date 〔1248 Current Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"dd MMM yyyy"}〕 　➔ 1 day after　» 1263 1264 1282 1286
• Duration: "1" days

〔1250〕 If 〔1246 Supposed Alarm Time〕 is 〔1248 Current Date〕

〔1251〕 Comment
supposed alarm time is exactly 12:00am

〔1252〕 If 〔Repeat Item’s Location〕 has any value

〔1253〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 at 〔Repeat Item’s Location〕 which  was supposed to get ready at 〔1246 Supposed Alarm Time〕. Please check.

〔1254〕 Set Variable Text to 〔1253 Text〕

〔1255〕 Otherwise

〔1256〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 which  was supposed to get ready at 〔1246 Supposed Alarm Time〕. Please check.

〔1257〕 Set Variable Text to 〔1256 Text〕

〔1258〕 End If

〔1259〕 Show Alert 〔Text〕

〔1260〕 Show Notification 〔Text〕

〔1261〕 Speak Text
• Text: 〔Text〕

〔1262〕 Otherwise　▵1250

〔1263〕 If 〔1246 Supposed Alarm Time〕 is 〔1249 1 day after〕

〔1264〕 Find Alarm 〔1249 1 day after〕　» 1265 1266

〔1265〕 If 〔1264 Alarms〕 has any value

〔1266〕 Repeat[2] with Each in 〔1264 Alarms〕

〔1267〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ AlarmLabelDictionary　» 1268 1269 1271

〔1268〕 Get Dictionary Value for Event in 〔1267 AlarmLabelDictionary〕 　➔ Event　» 1273

〔1269〕 Get Dictionary Value for From in 〔1267 AlarmLabelDictionary〕 　➔ From　»

〔1270〕 Get Dates from 〔1269 From〕 　➔ FromDate　» 1273

〔1271〕 Get Dictionary Value for To in 〔1267 AlarmLabelDictionary〕 　➔ To　»

〔1272〕 Get Dates from 〔1271 To〕 　➔ ToDate　»

〔1273〕 If All are true　〔1268 Event’s Name〕 is 〔Repeat Item〕　〔1270 FromDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔Repeat Item’s Start Date{"Date Style":"Custom","WFDateFormat":"HH:mm","WFISO8601IncludeTime":false}〕　〔1272 ToDate{"Date Style":"Custom","WFDateFormat":"HH:mm","WFISO8601IncludeTime":false}〕 is • ConditionalActionString
〔Repeat Item’s End Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕• Date
〔Repeat Item’s End Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕

〔1274〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔1275〕 End If

〔1276〕 End Repeat[2] with Each　▵1266

〔1277〕 End If　▵1265

〔1278〕 Comment
since this will be triggered at 12:00 am each day, when the supposed alarm time is 12:00 am in the next day, you can set alarm now

〔1279〕 Add Alarm for 〔1246 Supposed Alarm Time〕 called 〔1247 Alarm Label Dictionary〕

〔1280〕 Otherwise　▵1263

〔1281〕 If 〔1246 Supposed Alarm Time〕 > 〔1248 Current Date〕

〔1282〕 If 〔1246 Supposed Alarm Time〕 > 〔1249 1 day after〕

〔1283〕 Comment
when the time is other than 12:00 am of then next day, you cannot set alarm yet. If set, it will be today. For example, triggering time 2025-4-8 12:00 am, the supposed alarm time is 2025-4-9 08:00 am, if you set an alarm at 08:00 at 2025-4-8 12:00 am, it will alarm at 2025-4-8 08:00 am instead. So we need to record the supposed alarm time and trigger next day.

〔1284〕 Set Variable Event to 〔1247 Alarm Label Dictionary〕

〔1285〕 Otherwise

〔1286〕 Find Alarm 〔1249 1 day after〕　» 1287 1288
• ContentItemFilter: {  "Value": {
      "WFActionParameterFilterPrefix": 1,
      "WFContentPredicateBoundedDate": false,
      "WFActionParameterFilterTemplates": []
   },
   "WFSerializationType": "WFContentPredicateTableTemplate"
}

〔1287〕 If 〔1286 Alarms〕 has any value

〔1288〕 Repeat[2] with Each in 〔1286 Alarms〕

〔1289〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ AlarmLabelDictionary　» 1290 1291 1293

〔1290〕 Get Dictionary Value for Event in 〔1289 AlarmLabelDictionary〕 　➔ Event　» 1295

〔1291〕 Get Dictionary Value for From in 〔1289 AlarmLabelDictionary〕 　➔ From　»

〔1292〕 Get Dates from 〔1291 From〕 　➔ FromDate　» 1295

〔1293〕 Get Dictionary Value for To in 〔1289 AlarmLabelDictionary〕 　➔ To　»

〔1294〕 Get Dates from 〔1293 To〕 　➔ ToDate　»

〔1295〕 If All are true　〔1290 Event’s Name〕 is 〔Repeat Item〕　〔1292 FromDate{"Date Style":"Custom","WFDateFormat":"HH:mm","WFISO8601IncludeTime":false}〕 is 〔Repeat Item’s Start Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕　〔1294 ToDate{"Date Style":"Custom","WFDateFormat":"HH:mm","WFISO8601IncludeTime":false}〕 is 〔Repeat Item’s End Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕

〔1296〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔1297〕 End If

〔1298〕 End Repeat[2] with Each　▵1288

〔1299〕 End If　▵1287

〔1300〕 Add Alarm for 〔1246 Supposed Alarm Time〕 called 〔1247 Alarm Label Dictionary〕

〔1301〕 End If　▵1285

〔1302〕 Otherwise　▵1281

〔1303〕 Comment
the supposed alarm time passed

〔1304〕 If 〔Repeat Item’s Location〕 has any value

〔1305〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 at 〔Repeat Item’s Location〕 which  was supposed to get ready at 〔1246 Supposed Alarm Time〕. Please check.

〔1306〕 Set Variable Text to 〔1305 Text〕

〔1307〕 Otherwise

〔1308〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 which  was supposed to get ready at 〔1246 Supposed Alarm Time〕. Please check.

〔1309〕 Set Variable Text to 〔1308 Text〕

〔1310〕 End If

〔1311〕 Show Alert 〔Text〕

〔1312〕 Show Notification 〔Text〕

〔1313〕 Speak Text
• Text: 〔Text〕

〔1314〕 End If　▵1302

〔1315〕 End If　▵1280

〔1316〕 End If　▵1262

〔1317〕 If 〔Event〕 has any value

〔1318〕 Get Dictionary from 〔Event〕　» 1331

〔1319〕 Text　»

〔1320〕 Set Variable TextList to 〔1319 Text〕

〔1321〕 Add 〔Event〕 to Variable TextList

〔1322〕 Get File at Path Smart Calendar Reminder/Future Alarms.txt from Folder　» 1323 1324
• FileErrorIfNotFound: false

〔1323〕 If 〔1322 File’s File Size〕 has any value

〔1324〕 Split Text 〔1322 File〕 by New Lines　»

〔1325〕 Repeat[2] with Each in 〔1324 Split Text〕

〔1326〕 Get Dictionary from 〔Repeat Item 2〕　» 1327 1328 1329 1330

〔1327〕 Get Dictionary Value for Event in 〔1326 Dictionary〕 　➔ Event　» 1331

〔1328〕 Get Dictionary Value for From in 〔1326 Dictionary〕 　➔ From　» 1331

〔1329〕 Get Dictionary Value for To in 〔1326 Dictionary〕 　➔ To　» 1331

〔1330〕 Get Dictionary Value for Location in 〔1326 Dictionary〕 　➔ Location　»

〔1331〕 If Any are true　〔1327 Event’s Name〕 is not 〔1318 Dictionary.Event〕　〔1328 From’s Name〕 is not 〔1318 Dictionary.From〕　〔1329 To’s Name〕 is not 〔1318 Dictionary.To〕　〔1330 Location’s Name〕 is not 〔1318 Dictionary.Location〕

〔1332〕 Add 〔Repeat Item 2〕 to Variable TextList

〔1333〕 End If

〔1334〕 End Repeat[2] with Each　▵1325

〔1335〕 Combine Text 〔TextList〕 with New Lines　»

〔1336〕 Save File 〔1335 Combined Text〕
• AskWhereToSave: false
• SaveFileOverwrite: true
• FileDestinationPath: Smart Calendar Reminder/Future Alarms.txt

〔1337〕 Otherwise　▵1323

〔1338〕 Text　»

〔Event〕

〔1339〕 Save File 〔1338 Text〕
• AskWhereToSave: false
• FileDestinationPath: Smart Calendar Reminder/Future Alarms.txt

〔1340〕 End If

〔1341〕 End If　▵1317

〔1342〕 End Repeat with Each　▵1067

〔1343〕 End If　▵1066

〔1344〕 Get File at Path Smart Calendar Reminder/Future Alarms.txt from Folder　» 1345 1346
• FileErrorIfNotFound: false

〔1345〕 If 〔1344 File’s File Size〕 has any value

〔1346〕 Split Text 〔1344 File〕 by New Lines　»

〔1347〕 Repeat with Each in 〔1346 Split Text〕

〔1348〕 Get Dictionary from 〔Repeat Item〕　» 1349 1350 1360 1371

〔1349〕 If 〔1348 Dictionary〕 has any value

〔1350〕 Get Dates from 〔1348 Dictionary.AlarmTime〕　» 1351 1352 1371

〔1351〕 If 〔1350 Dates〕 is today

〔1352〕 Find Alarm 〔1350 Dates〕　» 1353 1354
• ContentItemFilter: {  "Value": {
      "WFActionParameterFilterPrefix": 1,
      "WFContentPredicateBoundedDate": false,
      "WFActionParameterFilterTemplates": []
   },
   "WFSerializationType": "WFContentPredicateTableTemplate"
}

〔1353〕 If 〔1352 Alarms〕 has any value

〔1354〕 Repeat[2] with Each in 〔1352 Alarms〕

〔1355〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ Alarm_Label_Dictionary　» 1356 1358 1366

〔1356〕 Get Dictionary Value for From in 〔1355 Alarm_Label_Dictionary〕　»

〔1357〕 Get Dates from 〔1356 Dictionary Value〕 　➔ From_Date　» 1366

〔1358〕 Get Dictionary Value for To in 〔1355 Alarm_Label_Dictionary〕　»

〔1359〕 Get Dates from 〔1358 Dictionary Value〕 　➔ To_Date　» 1366

〔1360〕 Get Dictionary from 〔1348 Dictionary.Event〕 　➔ FutureAlarmLabelDictionary　» 1361 1362 1364

〔1361〕 Get Dictionary Value for Event in 〔1360 FutureAlarmLabelDictionary〕 　➔ Event　» 1366

〔1362〕 Get Dictionary Value for From in 〔1360 FutureAlarmLabelDictionary〕 　➔ From　»

〔1363〕 Get Dates from 〔1362 From〕 　➔ FromDate　» 1366

〔1364〕 Get Dictionary Value for To in 〔1360 FutureAlarmLabelDictionary〕 　➔ To　»

〔1365〕 Get Dates from 〔1364 To〕 　➔ ToDate　»

〔1366〕 If All are true　〔1361 Event’s Name〕 is 〔1355 Alarm_Label_Dictionary.Event〕　〔1363 FromDate{"Date Style":"Custom","WFDateFormat":"HH:mm","WFISO8601IncludeTime":false}〕 is 〔1357 From_Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕　〔1365 ToDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔1359 To_Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕

〔1367〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔1368〕 End If

〔1369〕 End Repeat[2] with Each　▵1354

〔1370〕 End If　▵1353

〔1371〕 Add Alarm for 〔1350 Dates〕 called 〔1348 Dictionary.Event〕

〔1372〕 End If　▵1351

〔1373〕 End If　▵1349

〔1374〕 End Repeat with Each　▵1347

〔1375〕 End If　▵1345

〔1376〕 End If　▵1054

〔1377〕 If 〔Shortcut Input as Number〕 is 7

〔1378〕 Comment
1-Hour Event Processor
*Real-time event handler for immediate notifications:

Processes events within next 60 minutes

Provides most accurate travel estimates

Recommended for hourly automation*

〔1379〕 Get File at Path Smart Calendar Reminder/aboutme.txt from Folder　»
• FileErrorIfNotFound: false

〔1380〕 Get Dictionary from 〔1379 File〕　» 1381 1384 1385

〔1381〕 Get Dictionary from 〔1380 Dictionary.HomeAddress〕　»

〔1382〕 Text　»
〔1381 Dictionary.street〕 〔1381 Dictionary.city〕 〔1381 Dictionary.state〕 〔1381 Dictionary.postcode〕 〔1381 Dictionary.country〕

〔1383〕 Set Variable Home_Address to 〔1382 Text〕

〔1384〕 Set Variable Travel_Method to 〔1380 Dictionary.TravelMethod〕

〔1385〕 Get Dictionary Value for ExtraTime in 〔1380 Dictionary〕　»

〔1386〕 Get Numbers from 〔1385 Dictionary Value〕　»

〔1387〕 Set Variable Extra_Time to 〔1386 Numbers〕

〔1388〕 Find Calendar Events All Calendar Events where　» 1389 1390 1391 1603
• ContentItemSortProperty: Start Date
• ContentItemSortOrder: Oldest First
• ContentItemFilter: • All the following are true
Start Date is in the next 30 minutes
Is Not All Day
Canceled is {"Bool":false}

〔1389〕 If 〔1388 Calendar Events〕 has any value

〔1390〕 Count Items in 〔1388 Calendar Events〕　» 1607 1615

〔1391〕 Repeat with Each in 〔1388 Calendar Events〕

〔1392〕 If 〔Repeat Item’s Location〕 has any value

〔1393〕 Get Current Location　» 1404 1410 1474
• Accuracy: Best

〔1394〕 If All are true　〔Repeat Item’s Notes〕 has any value　〔Repeat Item’s Notes〕 begins with {　〔Repeat Item’s Notes〕 ends with }

〔1395〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY

〔1396〕 Get Dictionary from 〔Repeat Item’s Notes〕 　➔ NotesAddressDictionary　» 1397 1398 1399 1400 1401

〔1397〕 Set Variable CalendarNotesStreet to 〔1396 NotesAddressDictionary.Street〕

〔1398〕 Set Variable CalendarNotesCity to 〔1396 NotesAddressDictionary.City〕

〔1399〕 Set Variable CalendarNotesState to 〔1396 NotesAddressDictionary.State〕

〔1400〕 Set Variable CalendarNotesRegion to 〔1396 NotesAddressDictionary.Country〕

〔1401〕 Set Variable CalendarNotesZIPCode to 〔1396 NotesAddressDictionary.Postcode〕

〔1402〕 Text　»
〔CalendarNotesStreet〕 〔CalendarNotesCity〕 〔CalendarNotesState〕 〔CalendarNotesZIPCode〕 〔CalendarNotesRegion〕

〔1403〕 Set Variable NotesAddressString to 〔1402 Text〕

〔1404〕 If All are true　〔1393 Current Location’s Street〕 is 〔CalendarNotesStreet〕　〔1393 Current Location’s City〕 is 〔CalendarNotesCity〕　〔1393 Current Location’s State〕 is 〔CalendarNotesState〕　〔1393 Current Location’s Country〕 is 〔CalendarNotesRegion〕　〔1393 Current Location’s ZIP Code〕 is 〔CalendarNotesZIPCode〕

〔1405〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY -> CALENDAR EVENT ADDRESS IS THE SAME WITH CURRENT LOCATION

〔1406〕 Number 0　»

〔1407〕 Set Variable CurrentToDeparture to 〔1406 Number〕

〔1408〕 Otherwise

〔1409〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY -> CALENDAR EVENT ADDRESS IS NOT THE SAME WITH CURRENT LOCATION

〔1410〕 Get 〔TravelMethod〕 Time　»
• GetDirectionsCustomLocation: 〔1393 Current Location〕
• Destination: 〔NotesAddressString〕

〔1411〕 Set Variable TravelTimeString to 〔1410 Travel Time〕

〔1412〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　» 1413 1415 1417 1422 1429
• MatchTextCaseSensitive: false

〔1413〕 Count Items in 〔1412 C2DMatches〕　»

〔1414〕 If 〔1413 Count〕 > 1

〔1415〕 Get First Item from List 〔1412 C2DMatches〕　»

〔1416〕 Set Variable C2DHours to 〔1415 Item from List〕

〔1417〕 Get Last Item from List 〔1412 C2DMatches〕　»

〔1418〕 Set Variable C2DMinutes to 〔1417 Item from List〕

〔1419〕 Otherwise

〔1420〕 Match Text hour(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔1421〕 If 〔1420 C2DMatches’s text〕 has any value

〔1422〕 Get First Item from List 〔1412 C2DMatches〕　»

〔1423〕 Set Variable C2DHours to 〔1422 Item from List〕

〔1424〕 Number 0　»

〔1425〕 Set Variable C2DMinutes to 〔1424 Number〕

〔1426〕 Otherwise

〔1427〕 Number 0　»

〔1428〕 Set Variable C2DHours to 〔1427 Number〕

〔1429〕 Get First Item from List 〔1412 C2DMatches〕　»

〔1430〕 Set Variable C2DMinutes to 〔1429 Item from List〕

〔1431〕 End If

〔1432〕 End If　▵1419

〔1433〕 Calculate 〔C2DHours〕 × 60　»

〔1434〕 Calculate 〔1433 Calculation Result〕 + 〔C2DMinutes〕　»

〔1435〕 Set Variable CurrentToDeparture to 〔1434 Calculation Result〕

〔1436〕 End If　▵1408

〔1437〕 Get 〔TravelMethod〕 Time 　➔ DepartureToDestination　»
• GetDirectionsCustomLocation: 〔NotesAddressString〕
• Destination: 〔Repeat Item’s Location〕

〔1438〕 Set Variable TravelTimeString to 〔1437 DepartureToDestination〕

〔1439〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　» 1440 1442 1444 1449 1456
• MatchTextCaseSensitive: false

〔1440〕 Count Items in 〔1439 C2DMatches〕　»

〔1441〕 If 〔1440 Count〕 > 1

〔1442〕 Get First Item from List 〔1439 C2DMatches〕　»

〔1443〕 Set Variable C2DHours to 〔1442 Item from List〕

〔1444〕 Get Last Item from List 〔1439 C2DMatches〕　»

〔1445〕 Set Variable C2DMinutes to 〔1444 Item from List〕

〔1446〕 Otherwise

〔1447〕 Match Text hour(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔1448〕 If 〔1447 C2DMatches’s text〕 has any value

〔1449〕 Get First Item from List 〔1439 C2DMatches〕　»

〔1450〕 Set Variable C2DHours to 〔1449 Item from List〕

〔1451〕 Number 0　»

〔1452〕 Set Variable C2DMinutes to 〔1451 Number〕

〔1453〕 Otherwise

〔1454〕 Number 0　»

〔1455〕 Set Variable C2DHours to 〔1454 Number〕

〔1456〕 Get First Item from List 〔1439 C2DMatches〕　»

〔1457〕 Set Variable C2DMinutes to 〔1456 Item from List〕

〔1458〕 End If

〔1459〕 End If　▵1446

〔1460〕 Calculate 〔C2DHours〕 × 60　»

〔1461〕 Calculate 〔1460 Calculation Result〕 + 〔C2DMinutes〕　»

〔1462〕 Calculate 〔1461 Calculation Result〕 + 〔CurrentToDeparture〕　»

〔1463〕 Set Variable TravelTime to 〔1462 Calculation Result〕

〔1464〕 Otherwise　▵1394

〔1465〕 Comment
CALENDER EVENT NOTES IS BLANK

〔1466〕 Get Dictionary from 〔HomeAddress〕 　➔ home_address_dictionary　» 1467 1468 1469 1470 1471

〔1467〕 Get Dictionary Value for street in 〔1466 home_address_dictionary〕 　➔ HomeStreet　» 1472 1474

〔1468〕 Get Dictionary Value for city in 〔1466 home_address_dictionary〕 　➔ HomeCity　» 1472 1474

〔1469〕 Get Dictionary Value for state in 〔1466 home_address_dictionary〕 　➔ HomeState　» 1472 1474

〔1470〕 Get Dictionary Value for country in 〔1466 home_address_dictionary〕 　➔ HomeCountry　» 1472 1474

〔1471〕 Get Dictionary Value for postcode in 〔1466 home_address_dictionary〕 　➔ HomePostcode　» 1472 1474

〔1472〕 If All are true　〔1467 HomeStreet〕 has any value　〔1468 HomeCity〕 has any value　〔1469 HomeState〕 has any value　〔1470 HomeCountry〕 has any value　〔1471 HomePostcode〕 has any value

〔1473〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED

〔1474〕 If All are true　〔1393 Current Location’s Street〕 is 〔1467 HomeStreet〕　〔1393 Current Location’s City〕 is 〔1468 HomeCity〕　〔1393 Current Location’s State〕 is 〔1469 HomeState〕　〔1393 Current Location’s Country〕 is 〔1470 HomeCountry〕　〔1393 Current Location’s ZIP Code〕 is 〔1471 HomePostcode〕

〔1475〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED -> HOME ADDRESS IS THE SAME WITH CURRENT LOCATION

〔1476〕 Number 0　»

〔1477〕 Set Variable CurrentToDeparture to 〔1476 Number〕

〔1478〕 Otherwise

〔1479〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED -> HOME ADDRESS IS NOT THE SAME WITH CURRENT LOCATION

〔1480〕 Get 〔TravelMethod〕 Time　»
• Destination: 〔HomeAddress〕

〔1481〕 Set Variable TravelTimeString to 〔1480 Travel Time〕

〔1482〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　» 1483 1485 1487 1492 1499
• MatchTextCaseSensitive: false

〔1483〕 Count Items in 〔1482 C2DMatches〕　»

〔1484〕 If 〔1483 Count〕 > 1

〔1485〕 Get First Item from List 〔1482 C2DMatches〕　»

〔1486〕 Set Variable C2DHours to 〔1485 Item from List〕

〔1487〕 Get Last Item from List 〔1482 C2DMatches〕　»

〔1488〕 Set Variable C2DMinutes to 〔1487 Item from List〕

〔1489〕 Otherwise

〔1490〕 Match Text hour(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔1491〕 If 〔1490 C2DMatches’s text〕 has any value

〔1492〕 Get First Item from List 〔1482 C2DMatches〕　»

〔1493〕 Set Variable C2DHours to 〔1492 Item from List〕

〔1494〕 Number 0　»

〔1495〕 Set Variable C2DMinutes to 〔1494 Number〕

〔1496〕 Otherwise

〔1497〕 Number 0　»

〔1498〕 Set Variable C2DHours to 〔1497 Number〕

〔1499〕 Get First Item from List 〔1482 C2DMatches〕　»

〔1500〕 Set Variable C2DMinutes to 〔1499 Item from List〕

〔1501〕 End If

〔1502〕 End If　▵1489

〔1503〕 Calculate 〔C2DHours〕 × 60　»

〔1504〕 Calculate 〔1503 Calculation Result〕 + 〔C2DMinutes〕　»

〔1505〕 Set Variable CurrentToDeparture to 〔1504 Calculation Result〕

〔1506〕 End If　▵1478

〔1507〕 Get 〔TravelMethod〕 Time 　➔ DepartureToDestination　» 1508 1509
• GetDirectionsCustomLocation: 〔HomeAddress〕
• Destination: 〔Repeat Item’s Location〕

〔1508〕 Set Variable TravelTimeString to 〔1507 DepartureToDestination〕

〔1509〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔1507 DepartureToDestination〕 　➔ C2DMatches　» 1510 1512 1514 1519 1526
• MatchTextCaseSensitive: false

〔1510〕 Count Items in 〔1509 C2DMatches〕　»

〔1511〕 If 〔1510 Count〕 > 1

〔1512〕 Get First Item from List 〔1509 C2DMatches〕　»

〔1513〕 Set Variable C2DHours to 〔1512 Item from List〕

〔1514〕 Get Last Item from List 〔1509 C2DMatches〕　»

〔1515〕 Set Variable C2DMinutes to 〔1514 Item from List〕

〔1516〕 Otherwise

〔1517〕 Match Text hour(?:s)? in 〔163 DepartureToDestination〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔1518〕 If 〔1517 C2DMatches’s text〕 has any value

〔1519〕 Get First Item from List 〔1509 C2DMatches〕　»

〔1520〕 Set Variable C2DHours to 〔1519 Item from List〕

〔1521〕 Number 0　»

〔1522〕 Set Variable C2DMinutes to 〔1521 Number〕

〔1523〕 Otherwise

〔1524〕 Number 0　»

〔1525〕 Set Variable C2DHours to 〔1524 Number〕

〔1526〕 Get First Item from List 〔1509 C2DMatches〕　»

〔1527〕 Set Variable C2DMinutes to 〔1526 Item from List〕

〔1528〕 End If

〔1529〕 End If　▵1516

〔1530〕 Calculate 〔C2DHours〕 × 60　»

〔1531〕 Calculate 〔1530 Calculation Result〕 + 〔C2DMinutes〕　»

〔1532〕 Calculate 〔1531 Calculation Result〕 + 〔CurrentToDeparture〕　»

〔1533〕 Set Variable TravelTime to 〔1532 Calculation Result〕

〔1534〕 Otherwise　▵1472

〔1535〕 Text
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS NOT MAINTAINED

〔1536〕 Get 〔TravelMethod〕 Time　»
• Destination: 〔Repeat Item’s Location〕

〔1537〕 Set Variable TravelTimeString to 〔1536 Travel Time〕

〔1538〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　» 1539 1541 1543 1548 1555
• MatchTextCaseSensitive: false

〔1539〕 Count Items in 〔1538 C2DMatches〕　»

〔1540〕 If 〔1539 Count〕 > 1

〔1541〕 Get First Item from List 〔1538 C2DMatches〕　»

〔1542〕 Set Variable C2DHours to 〔1541 Item from List〕

〔1543〕 Get Last Item from List 〔1538 C2DMatches〕　»

〔1544〕 Set Variable C2DMinutes to 〔1543 Item from List〕

〔1545〕 Otherwise

〔1546〕 Match Text hour(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔1547〕 If 〔1546 C2DMatches’s text〕 has any value

〔1548〕 Get First Item from List 〔1538 C2DMatches〕　»

〔1549〕 Set Variable C2DHours to 〔1548 Item from List〕

〔1550〕 Number 0　»

〔1551〕 Set Variable C2DMinutes to 〔1550 Number〕

〔1552〕 Otherwise

〔1553〕 Number 0　»

〔1554〕 Set Variable C2DHours to 〔1553 Number〕

〔1555〕 Get First Item from List 〔1538 C2DMatches〕　»

〔1556〕 Set Variable C2DMinutes to 〔1555 Item from List〕

〔1557〕 End If

〔1558〕 End If　▵1545

〔1559〕 Calculate 〔C2DHours〕 × 60　»

〔1560〕 Calculate 〔1559 Calculation Result〕 + 〔C2DMinutes〕　»

〔1561〕 Set Variable TravelTime to 〔1560 Calculation Result〕

〔1562〕 End If　▵1534

〔1563〕 End If　▵1464

〔1564〕 Otherwise　▵1392

〔1565〕 Number 0　»

〔1566〕 Set Variable TravelTime to 〔1565 Number〕

〔1567〕 End If

〔1568〕 Find Alarm All Alarm　» 1569 1570
• ContentItemFilter: {  "Value": {
      "WFActionParameterFilterPrefix": 1,
      "WFActionParameterFilterTemplates": [],
      "WFContentPredicateBoundedDate": false
   },
   "WFSerializationType": "WFContentPredicateTableTemplate"
}

〔1569〕 If 〔1568 Alarms〕 has any value

〔1570〕 Repeat[2] with Each in 〔1568 Alarms〕

〔1571〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ AlarmLabelDictionary　» 1572 1573 1575

〔1572〕 Get Dictionary Value for Event in 〔1571 AlarmLabelDictionary〕 　➔ Event　» 1577

〔1573〕 Get Dictionary Value for From in 〔1571 AlarmLabelDictionary〕 　➔ From　»

〔1574〕 Get Dates from 〔1573 From〕 　➔ FromDate　» 1577

〔1575〕 Get Dictionary Value for To in 〔1571 AlarmLabelDictionary〕 　➔ To　»

〔1576〕 Get Dates from 〔1575 To〕 　➔ ToDate　»

〔1577〕 If All are true　〔1572 Event’s Name〕 is 〔Repeat Item〕　〔1574 FromDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔Repeat Item’s Start Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕　〔1576 ToDate{"Date Style":"Custom","WFDateFormat":"HH:mm","WFISO8601IncludeTime":false}〕 is 〔Repeat Item’s End Date{"Date Style":"Custom","WFDateFormat":"HH:mm","WFISO8601IncludeTime":false}〕

〔1578〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔1579〕 End If

〔1580〕 End Repeat[2] with Each　▵1570

〔1581〕 End If　▵1569

〔1582〕 Calculate 〔TravelTime〕 + 〔Extra_Time〕　»

〔1583〕 Adjust Subtract Date 〔Repeat Item’s Start Date〕 　➔ Supposed_Alarm_Time　» 1585 1587 1590 1597 1598
• Duration: 〔1582 Calculation Result〕 min

〔1584〕 Date Current Date　»

〔1585〕 If Any are true　〔1583 Supposed_Alarm_Time〕 < 〔1584 Date〕　〔1583 Supposed_Alarm_Time〕 is 〔1584 Date〕

〔1586〕 If 〔Repeat Item’s Location〕 has any value

〔1587〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 at 〔Repeat Item’s Location〕  which  was supposed to get ready at 〔1583 Supposed_Alarm_Time〕. Please check.

〔1588〕 Set Variable Text to 〔1587 Text〕

〔1589〕 Otherwise

〔1590〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 which  was supposed to get ready at 〔1583 Supposed_Alarm_Time〕. Please check.

〔1591〕 Set Variable Text to 〔1590 Text〕

〔1592〕 End If

〔1593〕 Show Alert 〔Text〕

〔1594〕 Show Notification 〔Text〕

〔1595〕 Speak Text
• Text: 〔Text〕

〔1596〕 Otherwise　▵1585

〔1597〕 Dictionary　»
{  "Event": "〔Repeat Item〕",
   "From": "〔Repeat Item’s Start Date〕",
   "To": "〔Repeat Item’s End Date〕",
   "Location": "〔Repeat Item’s Location〕",
   "AlarmTime": "〔1583 Supposed_Alarm_Time〕"
}

〔1598〕 Add Alarm for 〔1583 Supposed_Alarm_Time〕 called 〔1597 Dictionary〕

〔1599〕 End If

〔1600〕 End Repeat with Each　▵1391

〔1601〕 Number 3　»

〔1602〕 Repeat 〔1601 Number〕 Times

〔1603〕 Repeat[2] with Each in 〔1388 Calendar Events〕

〔1604〕 Format Date 〔Repeat Item 2’s Start Date〕　» 1608 1611 1616 1619
• DateFormatStyle: None

〔1605〕 Format Date 〔Repeat Item 2’s End Date〕　» 1608 1611 1616 1619
• DateFormatStyle: None

〔1606〕 If 〔Repeat Item 2’s Location〕 has any value

〔1607〕 If 〔1390 Count〕 > 1

〔1608〕 Text　»
Event 〔Repeat Index 2〕 〔Repeat Item 2〕 from 〔1604 Formatted Date〕 to 〔1605 Formatted Date〕 at 〔Repeat Item 2’s Location〕

〔1609〕 Set Variable Text to 〔1608 Text〕

〔1610〕 Otherwise

〔1611〕 Text　»
Event  〔Repeat Item 2〕 from 〔1604 Formatted Date〕 to 〔1605 Formatted Date〕 at 〔Repeat Item 2’s Location〕

〔1612〕 Set Variable Text to 〔1611 Text〕

〔1613〕 End If

〔1614〕 Otherwise　▵1606

〔1615〕 If 〔1390 Count〕 > 1

〔1616〕 Text　»
Event 〔Repeat Index 2〕 〔Repeat Item 2〕 from 〔1604 Formatted Date〕 to 〔1605 Formatted Date〕

〔1617〕 Set Variable Text to 〔1616 Text〕

〔1618〕 Otherwise

〔1619〕 Text　»
Event  〔Repeat Item 2〕 from 〔1604 Formatted Date〕 to 〔1605 Formatted Date〕

〔1620〕 Set Variable Text to 〔1619 Text〕

〔1621〕 End If

〔1622〕 End If　▵1614

〔1623〕 Speak Text
• Text: 〔Text〕

〔1624〕 Wait 1 seconds

〔1625〕 End Repeat[2] with Each　▵1603

〔1626〕 End Repeat Times　▵1602

〔1627〕 End If　▵1389

〔1628〕 End If　▵1377

〔1629〕 End If　▵91