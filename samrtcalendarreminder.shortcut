Smart Calendar Reminder V3 (1615 actions, 510 KB)
"WFQuickActionSurfaces": [],
"WFWorkflowClientVersion": "3303.0.5",
"WFWorkflowHasOutputFallback": false,
"WFWorkflowHasShortcutInputVariables": true,
"WFWorkflowIcon": {
   "WFWorkflowIconStartColor": 431817727,
   "WFWorkflowIconGlyphNumber": 61701
},
"WFWorkflowImportQuestions": [],
"WFWorkflowInputContentItemClasses": [],
"WFWorkflowMinimumClientVersion": 3010,
"WFWorkflowMinimumClientVersionString": "3010",
"WFWorkflowOutputContentItemClasses": [],
"WFWorkflowTypes": []


〔0〕 If 〔Shortcut Input〕 does not have any value

〔1〕 Comment
Initial setup and version update check when no input is provided

〔2〕 Comment
Inspired by [Schedule Shortcut or Alarm] but designed to work smarter for my needs! Instead of manually inputting each trigger or alarm, this shortcut leverages my Calendar as the ultimate data source. It automatically scans for upcoming events, then:

• Speaks out the event details
• Sets a tailored alarm—accounting for travel and prep time—right when you need it

No more early, forgettable reminders. It keeps your schedule perfectly in sync. Give it a try and let your Calendar do the heavy lifting!

〔3〕 Dictionary 　➔ Version Dictionary 　» 4 5 7 9 10 11 12 20 21 25 31 46 72
{  "Name": "Smart Calendar Reminder",
   "Version": "3.0",
   "RH ID": "21959",
   "Icons": {
      "Update": "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",
      "Skip": "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",
      "Not Now": "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"
   }
}

〔4〕 Get Contents of URL https://routinehub.co/api/v1/shortcuts/〔3 Version Dictionary .RH ID〕/versions/latest 　➔ RH Server　» 6 8 11 16 20

〔5〕 Get File at Path 〔3 Version Dictionary .Name〕/Skip.txt from Folder　»
• File: {  "fileLocation": {
      "crossDeviceItemID": "docs.icloud.com:com.apple.CloudDocs/documents/95d6214c39557e3de40d802073a860c04f3aed5b",
      "fileProviderDomainID": "com.apple.CloudDocs.iCloudDriveFileProvider/38059A1C-DC76-4B89-B62F-250A61DBFC73",
      "appContainerBundleIdentifier": "com.apple.shortcuts",
      "relativeSubpath": "",
      "WFFileLocationType": "Shortcuts"
   },
   "filename": "Documents",
   "displayName": "Shortcuts"
}
• FileErrorIfNotFound: false
• ShowFilePicker: false
• GetFolderContents: true

〔6〕 If 〔5 File as Text〕 is not 〔4 RH Server as Dictionary.Version〕

〔7〕 Get Dictionary Value for Version in 〔3 Version Dictionary 〕　»

〔8〕 If 〔7 Dictionary Value as Text〕 is not 〔4 RH Server as Dictionary.Version〕

〔9〕 Base64 Decode 〔3 Version Dictionary .Icons.Update〕

〔10〕 Show Alert A new version of 〔3 Version Dictionary .Name〕 is available to download!

〔11〕 Text　» 14
⬆️ Update ⬆️

A new version of 〔3 Version Dictionary .Name〕 is available to download!

〔3 Version Dictionary .Version〕 ↗ 〔4 RH Server as Dictionary.Version〕   —   〔4 RH Server as Dictionary.Release〕

〔4 RH Server as Dictionary.Notes〕

〔12〕 Text　»
BEGIN:VCARD
VERSION:3.0
N;CHARSET=utf-8:Update;;;;
PHOTO;ENCODING=b:〔3 Version Dictionary .Icons.Update〕
END:VCARD

BEGIN:VCARD
VERSION:3.0
N;CHARSET=utf-8:Skip;;;;
PHOTO;ENCODING=b:〔3 Version Dictionary .Icons.Skip〕
END:VCARD

BEGIN:VCARD
VERSION:3.0
N;CHARSET=utf-8:Not Now;;;;
PHOTO;ENCODING=b:〔3 Version Dictionary .Icons.Not Now〕
END:VCARD

〔13〕 Set Name of 〔12 Text〕 to updateprompt.vcf　»

〔14〕 Choose from List 〔13 Renamed Item as Contact〕　» 15 19
• ChooseFromListActionPrompt: 〔11 Text〕

〔15〕 If 〔14 Chosen Item as Text〕 is Update

〔16〕 Open URL 〔4 RH Server as Dictionary.URL〕
• Show-WFInput: true

〔17〕 Stop This Shortcut

〔18〕 End If

〔19〕 If 〔14 Chosen Item as Text〕 is Skip

〔20〕 Save File 〔4 RH Server as Dictionary.Version〕
• AskWhereToSave: false
• SaveFileOverwrite: true
• FileDestinationPath: 〔3 Version Dictionary .Name〕/Skip.txt

〔21〕 Show Alert This version of 〔3 Version Dictionary .Name〕 has been skipped!
• AlertActionTitle: ✅ Done ✅
• AlertActionCancelButtonShown: false

〔22〕 End If

〔23〕 End If　▵8

〔24〕 End If　▵6

〔25〕 Get File at Path 〔3 Version Dictionary .Name〕/Welcome.pdf from Folder　»
• FileErrorIfNotFound: false

〔26〕 If 〔25 File’s File Size〕 does not have any value

〔27〕 Text　»
<html><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Smart Calendar Reminder: Your Intelligent Schedule Assistant</title><style>
    /* cspell:disable-file */
    /* webkit printing magic: print all background colors */
    html {
        -webkit-print-color-adjust: exact;
    }
    * {
        box-sizing: border-box;
        -webkit-print-color-adjust: exact;
    }
\u{space}\u{space}\u{space}\u{space}
    html,
    body {
        margin: 0;
        padding: 0;
    }
    @media only screen {
        body {
            margin: 2em auto;
            max-width: 900px;
            color: rgb(55, 53, 47);
        }
    }
\u{space}\u{space}\u{space}\u{space}
    body {
        line-height: 1.5;
        white-space: pre-wrap;
    }
\u{space}\u{space}\u{space}\u{space}
    a,
    a.visited {
        color: inherit;
        text-decoration: underline;
    }
\u{space}\u{space}\u{space}\u{space}
    .pdf-relative-link-path {
        font-size: 80%;
        color: #444;
    }
\u{space}\u{space}\u{space}\u{space}
    h1,
    h2,
    h3 {
        letter-spacing: -0.01em;
        line-height: 1.2;
        font-weight: 600;
        margin-bottom: 0;
    }
\u{space}\u{space}\u{space}\u{space}
    .page-title {
        font-size: 2.5rem;
        font-weight: 700;
        margin-top: 0;
        margin-bottom: 0.75em;
    }
\u{space}\u{space}\u{space}\u{space}
    h1 {
        font-size: 1.875rem;
        margin-top: 1.875rem;
    }
\u{space}\u{space}\u{space}\u{space}
    h2 {
        font-size: 1.5rem;
        margin-top: 1.5rem;
    }
\u{space}\u{space}\u{space}\u{space}
    h3 {
        font-size: 1.25rem;
        margin-top: 1.25rem;
    }
\u{space}\u{space}\u{space}\u{space}
    .source {
        border: 1px solid #ddd;
        border-radius: 3px;
        padding: 1.5em;
        word-break: break-all;
    }
\u{space}\u{space}\u{space}\u{space}
    .callout {
        border-radius: 3px;
        padding: 1rem;
    }
\u{space}\u{space}\u{space}\u{space}
    figure {
        margin: 1.25em 0;
        page-break-inside: avoid;
    }
\u{space}\u{space}\u{space}\u{space}
    figcaption {
        opacity: 0.5;
        font-size: 85%;
        margin-top: 0.5em;
    }
\u{space}\u{space}\u{space}\u{space}
    mark {
        background-color: transparent;
    }
\u{space}\u{space}\u{space}\u{space}
    .indented {
        padding-left: 1.5em;
    }
\u{space}\u{space}\u{space}\u{space}
    hr {
        background: transparent;
        display: block;
        width: 100%;
        height: 1px;
        visibility: visible;
        border: none;
        border-bottom: 1px solid rgba(55, 53, 47, 0.09);
    }
\u{space}\u{space}\u{space}\u{space}
    img {
        max-width: 100%;
    }
\u{space}\u{space}\u{space}\u{space}
    @media only print {
        img {
            max-height: 100vh;
            object-fit: contain;
        }
    }
\u{space}\u{space}\u{space}\u{space}
    @page {
        margin: 1in;
    }
\u{space}\u{space}\u{space}\u{space}
    .collection-content {
        font-size: 0.875rem;
    }
\u{space}\u{space}\u{space}\u{space}
    .column-list {
        display: flex;
        justify-content: space-between;
    }
\u{space}\u{space}\u{space}\u{space}
    .column {
        padding: 0 1em;
    }
\u{space}\u{space}\u{space}\u{space}
    .column:first-child {
        padding-left: 0;
    }
\u{space}\u{space}\u{space}\u{space}
    .column:last-child {
        padding-right: 0;
    }
\u{space}\u{space}\u{space}\u{space}
    .table_of_contents-item {
        display: block;
        font-size: 0.875rem;
        line-height: 1.3;
        padding: 0.125rem;
    }
\u{space}\u{space}\u{space}\u{space}
    .table_of_contents-indent-1 {
        margin-left: 1.5rem;
    }
\u{space}\u{space}\u{space}\u{space}
    .table_of_contents-indent-2 {
        margin-left: 3rem;
    }
\u{space}\u{space}\u{space}\u{space}
    .table_of_contents-indent-3 {
        margin-left: 4.5rem;
    }
\u{space}\u{space}\u{space}\u{space}
    .table_of_contents-link {
        text-decoration: none;
        opacity: 0.7;
        border-bottom: 1px solid rgba(55, 53, 47, 0.18);
    }
\u{space}\u{space}\u{space}\u{space}
    table,
    th,
    td {
        border: 1px solid rgba(55, 53, 47, 0.09);
        border-collapse: collapse;
    }
\u{space}\u{space}\u{space}\u{space}
    table {
        border-left: none;
        border-right: none;
    }
\u{space}\u{space}\u{space}\u{space}
    th,
    td {
        font-weight: normal;
        padding: 0.25em 0.5em;
        line-height: 1.5;
        min-height: 1.5em;
        text-align: left;
    }
\u{space}\u{space}\u{space}\u{space}
    th {
        color: rgba(55, 53, 47, 0.6);
    }
\u{space}\u{space}\u{space}\u{space}
    ol,
    ul {
        margin: 0;
        margin-block-start: 0.6em;
        margin-block-end: 0.6em;
    }
\u{space}\u{space}\u{space}\u{space}
    li > ol:first-child,
    li > ul:first-child {
        margin-block-start: 0.6em;
    }
\u{space}\u{space}\u{space}\u{space}
    ul > li {
        list-style: disc;
    }
\u{space}\u{space}\u{space}\u{space}
    ul.to-do-list {
        padding-inline-start: 0;
    }
\u{space}\u{space}\u{space}\u{space}
    ul.to-do-list > li {
        list-style: none;
    }
\u{space}\u{space}\u{space}\u{space}
    .to-do-children-checked {
        text-decoration: line-through;
        opacity: 0.375;
    }
\u{space}\u{space}\u{space}\u{space}
    ul.toggle > li {
        list-style: none;
    }
\u{space}\u{space}\u{space}\u{space}
    ul {
        padding-inline-start: 1.7em;
    }
\u{space}\u{space}\u{space}\u{space}
    ul > li {
        padding-left: 0.1em;
    }
\u{space}\u{space}\u{space}\u{space}
    ol {
        padding-inline-start: 1.6em;
    }
\u{space}\u{space}\u{space}\u{space}
    ol > li {
        padding-left: 0.2em;
    }
\u{space}\u{space}\u{space}\u{space}
    .mono ol {
        padding-inline-start: 2em;
    }
\u{space}\u{space}\u{space}\u{space}
    .mono ol > li {
        text-indent: -0.4em;
    }
\u{space}\u{space}\u{space}\u{space}
    .toggle {
        padding-inline-start: 0em;
        list-style-type: none;
    }
\u{space}\u{space}\u{space}\u{space}
    /* Indent toggle children */
    .toggle > li > details {
        padding-left: 1.7em;
    }
\u{space}\u{space}\u{space}\u{space}
    .toggle > li > details > summary {
        margin-left: -1.1em;
    }
\u{space}\u{space}\u{space}\u{space}
    .selected-value {
        display: inline-block;
        padding: 0 0.5em;
        background: rgba(206, 205, 202, 0.5);
        border-radius: 3px;
        margin-right: 0.5em;
        margin-top: 0.3em;
        margin-bottom: 0.3em;
        white-space: nowrap;
    }
\u{space}\u{space}\u{space}\u{space}
    .collection-title {
        display: inline-block;
        margin-right: 1em;
    }
\u{space}\u{space}\u{space}\u{space}
    .page-description {
        margin-bottom: 2em;
    }
\u{space}\u{space}\u{space}\u{space}
    .simple-table {
        margin-top: 1em;
        font-size: 0.875rem;
        empty-cells: show;
    }
    .simple-table td {
        height: 29px;
        min-width: 120px;
    }
\u{space}\u{space}\u{space}\u{space}
    .simple-table th {
        height: 29px;
        min-width: 120px;
    }
\u{space}\u{space}\u{space}\u{space}
    .simple-table-header-color {
        background: rgb(247, 246, 243);
        color: black;
    }
    .simple-table-header {
        font-weight: 500;
    }
\u{space}\u{space}\u{space}\u{space}
    time {
        opacity: 0.5;
    }
\u{space}\u{space}\u{space}\u{space}
    .icon {
        display: inline-block;
        max-width: 1.2em;
        max-height: 1.2em;
        text-decoration: none;
        vertical-align: text-bottom;
        margin-right: 0.5em;
    }
\u{space}\u{space}\u{space}\u{space}
    img.icon {
        border-radius: 3px;
    }
\u{space}\u{space}\u{space}\u{space}
    .user-icon {
        width: 1.5em;
        height: 1.5em;
        border-radius: 100%;
        margin-right: 0.5rem;
    }
\u{space}\u{space}\u{space}\u{space}
    .user-icon-inner {
        font-size: 0.8em;
    }
\u{space}\u{space}\u{space}\u{space}
    .text-icon {
        border: 1px solid #000;
        text-align: center;
    }
\u{space}\u{space}\u{space}\u{space}
    .page-cover-image {
        display: block;
        object-fit: cover;
        width: 100%;
        max-height: 30vh;
    }
\u{space}\u{space}\u{space}\u{space}
    .page-header-icon {
        font-size: 3rem;
        margin-bottom: 1rem;
    }
\u{space}\u{space}\u{space}\u{space}
    .page-header-icon-with-cover {
        margin-top: -0.72em;
        margin-left: 0.07em;
    }
\u{space}\u{space}\u{space}\u{space}
    .page-header-icon img {
        border-radius: 3px;
    }
\u{space}\u{space}\u{space}\u{space}
    .link-to-page {
        margin: 1em 0;
        padding: 0;
        border: none;
        font-weight: 500;
    }
\u{space}\u{space}\u{space}\u{space}
    p > .user {
        opacity: 0.5;
    }
\u{space}\u{space}\u{space}\u{space}
    td > .user,
    td > time {
        white-space: nowrap;
    }
\u{space}\u{space}\u{space}\u{space}
    input[type="checkbox"] {
        transform: scale(1.5);
        margin-right: 0.6em;
        vertical-align: middle;
    }
\u{space}\u{space}\u{space}\u{space}
    p {
        margin-top: 0.5em;
        margin-bottom: 0.5em;
    }
\u{space}\u{space}\u{space}\u{space}
    .image {
        border: none;
        margin: 1.5em 0;
        padding: 0;
        border-radius: 0;
        text-align: center;
    }
\u{space}\u{space}\u{space}\u{space}
    .code,
    code {
        background: rgba(135, 131, 120, 0.15);
        border-radius: 3px;
        padding: 0.2em 0.4em;
        border-radius: 3px;
        font-size: 85%;
        tab-size: 2;
    }
\u{space}\u{space}\u{space}\u{space}
    code {
        color: #eb5757;
    }
\u{space}\u{space}\u{space}\u{space}
    .code {
        padding: 1.5em 1em;
    }
\u{space}\u{space}\u{space}\u{space}
    .code-wrap {
        white-space: pre-wrap;
        word-break: break-all;
    }
\u{space}\u{space}\u{space}\u{space}
    .code > code {
        background: none;
        padding: 0;
        font-size: 100%;
        color: inherit;
    }
\u{space}\u{space}\u{space}\u{space}
    blockquote {
        font-size: 1.25em;
        margin: 1em 0;
        padding-left: 1em;
        border-left: 3px solid rgb(55, 53, 47);
    }
\u{space}\u{space}\u{space}\u{space}
    .bookmark {
        text-decoration: none;
        max-height: 8em;
        padding: 0;
        display: flex;
        width: 100%;
        align-items: stretch;
    }
\u{space}\u{space}\u{space}\u{space}
    .bookmark-title {
        font-size: 0.85em;
        overflow: hidden;
        text-overflow: ellipsis;
        height: 1.75em;
        white-space: nowrap;
    }
\u{space}\u{space}\u{space}\u{space}
    .bookmark-text {
        display: flex;
        flex-direction: column;
    }
\u{space}\u{space}\u{space}\u{space}
    .bookmark-info {
        flex: 4 1 180px;
        padding: 12px 14px 14px;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
    }
\u{space}\u{space}\u{space}\u{space}
    .bookmark-image {
        width: 33%;
        flex: 1 1 180px;
        display: block;
        position: relative;
        object-fit: cover;
        border-radius: 1px;
    }
\u{space}\u{space}\u{space}\u{space}
    .bookmark-description {
        color: rgba(55, 53, 47, 0.6);
        font-size: 0.75em;
        overflow: hidden;
        max-height: 4.5em;
        word-break: break-word;
    }
\u{space}\u{space}\u{space}\u{space}
    .bookmark-href {
        font-size: 0.75em;
        margin-top: 0.25em;
    }
\u{space}\u{space}\u{space}\u{space}
    .sans { font-family: ui-sans-serif, -apple-system, BlinkMacSystemFont, "Segoe UI Variable Display", "Segoe UI", Helvetica, "Apple Color Emoji", Arial, sans-serif, "Segoe UI Emoji", "Segoe UI Symbol"; }
    .code { font-family: "SFMono-Regular", Menlo, Consolas, "PT Mono", "Liberation Mono", Courier, monospace; }
    .serif { font-family: Lyon-Text, Georgia, ui-serif, serif; }
    .mono { font-family: iawriter-mono, Nitti, Menlo, Courier, monospace; }
    .pdf .sans { font-family: Inter, ui-sans-serif, -apple-system, BlinkMacSystemFont, "Segoe UI Variable Display", "Segoe UI", Helvetica, "Apple Color Emoji", Arial, sans-serif, "Segoe UI Emoji", "Segoe UI Symbol", 'Twemoji', 'Noto Color Emoji', 'Noto Sans CJK JP'; }
    .pdf:lang(zh-CN) .sans { font-family: Inter, ui-sans-serif, -apple-system, BlinkMacSystemFont, "Segoe UI Variable Display", "Segoe UI", Helvetica, "Apple Color Emoji", Arial, sans-serif, "Segoe UI Emoji", "Segoe UI Symbol", 'Twemoji', 'Noto Color Emoji', 'Noto Sans CJK SC'; }
    .pdf:lang(zh-TW) .sans { font-family: Inter, ui-sans-serif, -apple-system, BlinkMacSystemFont, "Segoe UI Variable Display", "Segoe UI", Helvetica, "Apple Color Emoji", Arial, sans-serif, "Segoe UI Emoji", "Segoe UI Symbol", 'Twemoji', 'Noto Color Emoji', 'Noto Sans CJK TC'; }
    .pdf:lang(ko-KR) .sans { font-family: Inter, ui-sans-serif, -apple-system, BlinkMacSystemFont, "Segoe UI Variable Display", "Segoe UI", Helvetica, "Apple Color Emoji", Arial, sans-serif, "Segoe UI Emoji", "Segoe UI Symbol", 'Twemoji', 'Noto Color Emoji', 'Noto Sans CJK KR'; }
    .pdf .code { font-family: Source Code Pro, "SFMono-Regular", Menlo, Consolas, "PT Mono", "Liberation Mono", Courier, monospace, 'Twemoji', 'Noto Color Emoji', 'Noto Sans Mono CJK JP'; }
    .pdf:lang(zh-CN) .code { font-family: Source Code Pro, "SFMono-Regular", Menlo, Consolas, "PT Mono", "Liberation Mono", Courier, monospace, 'Twemoji', 'Noto Color Emoji', 'Noto Sans Mono CJK SC'; }
    .pdf:lang(zh-TW) .code { font-family: Source Code Pro, "SFMono-Regular", Menlo, Consolas, "PT Mono", "Liberation Mono", Courier, monospace, 'Twemoji', 'Noto Color Emoji', 'Noto Sans Mono CJK TC'; }
    .pdf:lang(ko-KR) .code { font-family: Source Code Pro, "SFMono-Regular", Menlo, Consolas, "PT Mono", "Liberation Mono", Courier, monospace, 'Twemoji', 'Noto Color Emoji', 'Noto Sans Mono CJK KR'; }
    .pdf .serif { font-family: PT Serif, Lyon-Text, Georgia, ui-serif, serif, 'Twemoji', 'Noto Color Emoji', 'Noto Serif CJK JP'; }
    .pdf:lang(zh-CN) .serif { font-family: PT Serif, Lyon-Text, Georgia, ui-serif, serif, 'Twemoji', 'Noto Color Emoji', 'Noto Serif CJK SC'; }
    .pdf:lang(zh-TW) .serif { font-family: PT Serif, Lyon-Text, Georgia, ui-serif, serif, 'Twemoji', 'Noto Color Emoji', 'Noto Serif CJK TC'; }
    .pdf:lang(ko-KR) .serif { font-family: PT Serif, Lyon-Text, Georgia, ui-serif, serif, 'Twemoji', 'Noto Color Emoji', 'Noto Serif CJK KR'; }
    .pdf .mono { font-family: PT Mono, iawriter-mono, Nitti, Menlo, Courier, monospace, 'Twemoji', 'Noto Color Emoji', 'Noto Sans Mono CJK JP'; }
    .pdf:lang(zh-CN) .mono { font-family: PT Mono, iawriter-mono, Nitti, Menlo, Courier, monospace, 'Twemoji', 'Noto Color Emoji', 'Noto Sans Mono CJK SC'; }
    .pdf:lang(zh-TW) .mono { font-family: PT Mono, iawriter-mono, Nitti, Menlo, Courier, monospace, 'Twemoji', 'Noto Color Emoji', 'Noto Sans Mono CJK TC'; }
    .pdf:lang(ko-KR) .mono { font-family: PT Mono, iawriter-mono, Nitti, Menlo, Courier, monospace, 'Twemoji', 'Noto Color Emoji', 'Noto Sans Mono CJK KR'; }
    .highlight-default {
        color: rgba(55, 53, 47, 1);
    }
    .highlight-gray {
        color: rgba(120, 119, 116, 1);
        fill: rgba(120, 119, 116, 1);
    }
    .highlight-brown {
        color: rgba(159, 107, 83, 1);
        fill: rgba(159, 107, 83, 1);
    }
    .highlight-orange {
        color: rgba(217, 115, 13, 1);
        fill: rgba(217, 115, 13, 1);
    }
    .highlight-yellow {
        color: rgba(203, 145, 47, 1);
        fill: rgba(203, 145, 47, 1);
    }
    .highlight-teal {
        color: rgba(68, 131, 97, 1);
        fill: rgba(68, 131, 97, 1);
    }
    .highlight-blue {
        color: rgba(51, 126, 169, 1);
        fill: rgba(51, 126, 169, 1);
    }
    .highlight-purple {
        color: rgba(144, 101, 176, 1);
        fill: rgba(144, 101, 176, 1);
    }
    .highlight-pink {
        color: rgba(193, 76, 138, 1);
        fill: rgba(193, 76, 138, 1);
    }
    .highlight-red {
        color: rgba(212, 76, 71, 1);
        fill: rgba(212, 76, 71, 1);
    }
    .highlight-default_background {
        color: rgba(55, 53, 47, 1);
    }
    .highlight-gray_background {
        background: rgba(248, 248, 247, 1);
    }
    .highlight-brown_background {
        background: rgba(244, 238, 238, 1);
    }
    .highlight-orange_background {
        background: rgba(251, 236, 221, 1);
    }
    .highlight-yellow_background {
        background: rgba(251, 243, 219, 1);
    }
    .highlight-teal_background {
        background: rgba(237, 243, 236, 1);
    }
    .highlight-blue_background {
        background: rgba(231, 243, 248, 1);
    }
    .highlight-purple_background {
        background: rgba(248, 243, 252, 1);
    }
    .highlight-pink_background {
        background: rgba(252, 241, 246, 1);
    }
    .highlight-red_background {
        background: rgba(253, 235, 236, 1);
    }
    .block-color-default {
        color: inherit;
        fill: inherit;
    }
    .block-color-gray {
        color: rgba(120, 119, 116, 1);
        fill: rgba(120, 119, 116, 1);
    }
    .block-color-brown {
        color: rgba(159, 107, 83, 1);
        fill: rgba(159, 107, 83, 1);
    }
    .block-color-orange {
        color: rgba(217, 115, 13, 1);
        fill: rgba(217, 115, 13, 1);
    }
    .block-color-yellow {
        color: rgba(203, 145, 47, 1);
        fill: rgba(203, 145, 47, 1);
    }
    .block-color-teal {
        color: rgba(68, 131, 97, 1);
        fill: rgba(68, 131, 97, 1);
    }
    .block-color-blue {
        color: rgba(51, 126, 169, 1);
        fill: rgba(51, 126, 169, 1);
    }
    .block-color-purple {
        color: rgba(144, 101, 176, 1);
        fill: rgba(144, 101, 176, 1);
    }
    .block-color-pink {
        color: rgba(193, 76, 138, 1);
        fill: rgba(193, 76, 138, 1);
    }
    .block-color-red {
        color: rgba(212, 76, 71, 1);
        fill: rgba(212, 76, 71, 1);
    }
    .block-color-default_background {
        color: inherit;
        fill: inherit;
    }
    .block-color-gray_background {
        background: rgba(248, 248, 247, 1);
    }
    .block-color-brown_background {
        background: rgba(244, 238, 238, 1);
    }
    .block-color-orange_background {
        background: rgba(251, 236, 221, 1);
    }
    .block-color-yellow_background {
        background: rgba(251, 243, 219, 1);
    }
    .block-color-teal_background {
        background: rgba(237, 243, 236, 1);
    }
    .block-color-blue_background {
        background: rgba(231, 243, 248, 1);
    }
    .block-color-purple_background {
        background: rgba(248, 243, 252, 1);
    }
    .block-color-pink_background {
        background: rgba(252, 241, 246, 1);
    }
    .block-color-red_background {
        background: rgba(253, 235, 236, 1);
    }
    .select-value-color-uiBlue { background-color: undefined; }
    .select-value-color-pink { background-color: rgba(225, 136, 179, 0.27); }
    .select-value-color-purple { background-color: rgba(168, 129, 197, 0.27); }
    .select-value-color-green { background-color: rgba(123, 183, 129, 0.27); }
    .select-value-color-gray { background-color: rgba(84, 72, 49, 0.15); }
    .select-value-color-transparentGray { background-color: undefined; }
    .select-value-color-translucentGray { background-color: undefined; }
    .select-value-color-orange { background-color: rgba(224, 124, 57, 0.27); }
    .select-value-color-brown { background-color: rgba(210, 162, 141, 0.35); }
    .select-value-color-red { background-color: rgba(244, 171, 159, 0.4); }
    .select-value-color-yellow { background-color: rgba(236, 191, 66, 0.39); }
    .select-value-color-blue { background-color: rgba(93, 165, 206, 0.27); }
    .select-value-color-pageGlass { background-color: undefined; }
    .select-value-color-washGlass { background-color: undefined; }
\u{space}\u{space}\u{space}\u{space}
    .checkbox {
        display: inline-flex;
        vertical-align: text-bottom;
        width: 16;
        height: 16;
        background-size: 16px;
        margin-left: 2px;
        margin-right: 5px;
    }
\u{space}\u{space}\u{space}\u{space}
    .checkbox-on {
        background-image: url("data:image/svg+xml;charset=UTF-8,%3Csvg%20width%3D%2216%22%20height%3D%2216%22%20viewBox%3D%220%200%2016%2016%22%20fill%3D%22none%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%0A%3Crect%20width%3D%2216%22%20height%3D%2216%22%20fill%3D%22%2358A9D7%22%2F%3E%0A%3Cpath%20d%3D%22M6.71429%2012.2852L14%204.9995L12.7143%203.71436L6.71429%209.71378L3.28571%206.2831L2%207.57092L6.71429%2012.2852Z%22%20fill%3D%22white%22%2F%3E%0A%3C%2Fsvg%3E");
    }
\u{space}\u{space}\u{space}\u{space}
    .checkbox-off {
        background-image: url("data:image/svg+xml;charset=UTF-8,%3Csvg%20width%3D%2216%22%20height%3D%2216%22%20viewBox%3D%220%200%2016%2016%22%20fill%3D%22none%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%0A%3Crect%20x%3D%220.75%22%20y%3D%220.75%22%20width%3D%2214.5%22%20height%3D%2214.5%22%20fill%3D%22white%22%20stroke%3D%22%2336352F%22%20stroke-width%3D%221.5%22%2F%3E%0A%3C%2Fsvg%3E");
    }
\u{space}\u{space}\u{space}\u{space}\u{space}\u{space}\u{space}\u{space}
    </style></head><body><article id="1d1604ef-9b4b-8020-9a43-e475a43661a0" class="page sans"><header><h1 class="page-title">Smart Calendar Reminder: Your Intelligent Schedule Assistant</h1><p class="page-description"></p></header><div class="page-body"><figure class="block-color-blue_background callout" style="white-space:pre-wrap;display:flex" id="1d1604ef-9b4b-80b2-927b-ddb2d55d6032"><div style="width:100%">👋 Welcome to Smart Calendar Reminder! This welcome message appears only during your first use.</div></figure><h1 id="1d1604ef-9b4b-80c5-a289-d2aedc69317d" class="block-color-yellow_background">Transform Your Calendar Experience</h1><p id="1d1604ef-9b4b-80f7-ac48-d98bc2a805e6" class="">While iOS Calendar is fantastic for basic scheduling, we all know those built-in reminders can be easy to miss. Adding manual alarms, calculating travel times, and customizing notifications with event details can become tedious and time-consuming. That&#x27;s where Smart Calendar Reminder comes in - your automated solution for intelligent schedule management!</p><h2 id="1d1604ef-9b4b-800f-9752-cb68ca87b1cf" class="">Powerful Features at Your Fingertips</h2><ul id="0ecdba52-af59-410f-9efb-321f8e2d4ba6" class="bulleted-list"><li style="list-style-type:disc">Seamless Calendar Integration - No manual input needed</li></ul><ul id="1d1604ef-9b4b-80b9-8d0d-fe7b3c28115b" class="bulleted-list"><li style="list-style-type:disc">Intelligent Travel Time Calculations powered by Apple Maps</li></ul><ul id="4f6b7aca-7c92-458d-9996-e8f891a3775d" class="bulleted-list"><li style="list-style-type:disc">Spoken Event Details - Hear your schedule clearly</li></ul><ul id="1d1604ef-9b4b-80f5-9fe9-ee50fd3e7795" class="bulleted-list"><li style="list-style-type:disc">Smart Preparation Time Management</li></ul><h2 id="fa2195d7-f08f-4058-a00a-18e2b562b5b2" class="">Smart Location Intelligence</h2><p id="1d1604ef-9b4b-80d3-9799-dd97b27a3773" class="">Our advanced travel time calculation system uses three methods to determine your departure location, in order of priority:</p><ol type="1" id="667c5bbb-f94c-480b-bccd-c84948a3c40f" class="numbered-list" start="1"><li>Custom Departure Address - Add this JSON format in your calendar event notes for specific departure points:<script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/prism.min.js" integrity="sha512-7Z9J3l1+EYfeaPKcGXu3MS/7T+w19WtKQY/n+xzmw4hZhJ9tyYmcUS+4QqAlzhicE5LAfMQSF3iFTK9bQdTxXg==" crossorigin="anonymous" referrerPolicy="no-referrer"></script><link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism.min.css" integrity="sha512-tN7Ec6zAFaVSG3TpNAKtk4DOHNpSwKHxxrsiw4GHKESGPs5njn/0sMCUMl2svV4wo4BK/rCP7juYz+zx+l6oeQ==" crossorigin="anonymous" referrerPolicy="no-referrer"/><pre id="1d1604ef-9b4b-80d1-9d4b-dfb42d06c7b8" class="code"><code class="language-JSON">{
        &quot;Street&quot;: &quot;your departure street&quot;,
        &quot;City&quot;: &quot;your departure city&quot;,
        &quot;State&quot;: &quot;your departure state&quot;,
        &quot;Country&quot;: &quot;your departure country&quot;,
        &quot;Postcode&quot;: &quot;your departure postcode&quot;
    }</code></pre></li></ol><ol type="1" id="1d1604ef-9b4b-80c6-b468-d002dd94b75d" class="numbered-list" start="2"><li>Home Address - Uses your pre-configured home address - perfect for regular schedules</li></ol><ol type="1" id="aba3d861-a84a-48f6-a163-ac441f18b1b3" class="numbered-list" start="3"><li>Current Location - Automatically uses your current position as a fallback</li></ol><figure class="block-color-yellow_background callout" style="white-space:pre-wrap;display:flex" id="1d1604ef-9b4b-80ed-a48d-f0cad158ed60"><div style="width:100%">Smart Travel Planning: The system automatically calculates additional travel time if you&#x27;re not at your departure location!</div></figure><h2 id="efb3fa4e-d05f-4bd3-bd94-b9b991e29ce4" class="">Voice Announcements</h2><ul id="1d1604ef-9b4b-8076-9c50-fcefa4c4903c" class="bulleted-list"><li style="list-style-type:disc">Hourly Schedule Updates: Hear upcoming events at the start of each hour</li></ul><ul id="a0eb2cf6-1637-4d13-94c8-356fd19cd78a" class="bulleted-list"><li style="list-style-type:disc">Smart Reminders: Get spoken alerts at perfectly timed intervals</li></ul><h2 id="1d1604ef-9b4b-80dd-9df1-d8fae003cae6" class="">Intelligent Automation System</h2><p id="15ce45ed-b4fa-4b81-bbd0-2fa585b5c7ce" class="">Our sophisticated automation system ensures you never miss an important event:</p><ul id="1d1604ef-9b4b-80c5-a181-f10518e7e73d" class="bulleted-list"><li style="list-style-type:disc">Daily Planning: 12:00 AM check of your next 24 hours</li></ul><ul id="f54bf941-4703-4cc3-9f61-408f1eed72ee" class="bulleted-list"><li style="list-style-type:disc">Real-time Updates: Hourly recalculation of travel times</li></ul><ul id="1d1604ef-9b4b-800d-b8f8-e85831f4b0ee" class="bulleted-list"><li style="list-style-type:disc">Dynamic Adjustments: Automatic alarm optimization</li></ul><figure class="block-color-gray_background callout" style="white-space:pre-wrap;display:flex" id="1d1604ef-9b4b-8075-9657-ed6135b16d17"><div style="width:100%">Example: For a 10:30 AM meeting with 3 hours total travel time, the system ensures your 7:30 AM alarm is set and continuously optimized based on real-time conditions.</div></figure><h1 id="1d1604ef-9b4b-803a-8fbf-c89822dbca0a" class="block-color-blue">Setup Guide</h1><p id="1d1604ef-9b4b-80a7-ae75-c35724896e17" class="">Let&#x27;s get your Smart Calendar Reminder configured with four essential automations:</p><h2 id="1d1604ef-9b4b-8072-ab56-d0757b2435ef" class="block-color-gray_background">Automation 1: Daily 12:00 AM Check</h2><p id="1d1604ef-9b4b-80c9-9b4a-ee2712524a0d" class="block-color-blue">Step 1. Open Shortcuts and tap [Automation], then tap [+] at the top right corner</p><figure id="1d1604ef-9b4b-8043-b390-ff859889379f" class="image"><a href="gZWfH4Kler-left.png"><img style="width:709.984375px" src="https://i.imgur.com/za6VDMA.jpeg"/></a></figure><p id="1d1604ef-9b4b-804a-9cb1-f487991237c6" class="">Step 2. Tap [Time of Day]</p><figure id="1d1604ef-9b4b-8085-99bb-e3d90115d5dd" class="image"><a href="NDyjdrLrYZ-left.png"><img style="width:709.984375px" src="https://i.imgur.com/z7aJ0OB.jpeg"/></a></figure><p id="1d1604ef-9b4b-806d-a7eb-f652a480cbc6" class="">Step 3. Follow the sequence shown in the image</p><figure id="1d1604ef-9b4b-80cd-9ca5-fc076df31898" class="image"><a href="6KJEFinDm6-left.png"><img style="width:709.984375px" src="https://i.imgur.com/u6C2AR9.jpeg"/></a></figure><p id="1d1604ef-9b4b-8050-b817-f0e2368f43ca" class="block-color-gray_background">Step 4. Tap [New Blank Automation]</p><figure id="1d1604ef-9b4b-8028-b872-eed1a3f6701a" class="image"><a href="XblW6TFHek-left.png"><img style="width:709.984375px" src="https://i.imgur.com/nrTr7Np.jpeg"/></a></figure><p id="b8f8c3cf-7fdc-4a99-b2ba-60e18fef34c7" class="">Step 5. Search for the [Number] action</p><figure id="1d1604ef-9b4b-80d0-ad58-f7a1dc1d1c48" class="image"><a href="4XgUTG3h3E-left.png"><img style="width:709.984375px" src="https://i.imgur.com/F6jogMJ.jpeg"/></a></figure><p id="1d1604ef-9b4b-804e-9fe3-c5b6fc8701fa" class="">Step 6. Input number 1</p><figure id="1d1604ef-9b4b-8056-be0b-c4cfaebae0f7" class="image"><a href="n0XhfXtA03-left.png"><img style="width:709.984375px" src="https://i.imgur.com/HUMvkry.jpeg"/></a></figure><p id="1d1604ef-9b4b-8004-b82f-c5b6250d69c0" class="">Step 7. Search for [Run Shortcut] action</p><figure id="1d1604ef-9b4b-801d-a2d0-e444c55bbdb1" class="image"><a href="BUB7V9ITn8-left.png"><img style="width:709.984375px" src="https://i.imgur.com/IbHA9Jf.jpeg"/></a></figure><p id="1d1604ef-9b4b-8031-a595-d6b268bb5bfc" class="">Step 8. Search and select [Smart Calendar Reminder] in [Run Shortcut] action’s shortcut field.</p><figure id="1d1604ef-9b4b-804c-8be0-d6060e3b5a73" class="image"><a href="b50xsbc2QT-left.png"><img style="width:709.984375px" src="https://i.imgur.com/41WbF2A.png"/></a></figure><p id="1d1604ef-9b4b-805d-96d8-c871e0493bdb" class="block-color-default_background">Step 9. Tap [Done] in the top right corner to complete setup</p><figure id="1d1604ef-9b4b-8024-864a-d9002a94e719" class="image"><a href="LjO11dxjS3-left.png"><img style="width:709.984375px" src="https://i.imgur.com/tmrW6r8.jpeg"/></a></figure><h2 id="1d1604ef-9b4b-8045-9247-e3afd799f547" class="">Automation 2: Hourly Check</h2><p id="1d1604ef-9b4b-809c-900e-e425d52b7a0a" class="">Follow the same steps as Automation 1, with these modifications:</p><ul id="1d1604ef-9b4b-80a8-9819-cfd9961eb078" class="bulleted-list"><li style="list-style-type:disc">In step 3, select all <em><strong><span style="border-bottom:0.05em solid">24 hourly times</span></strong></em></li></ul><ul id="1d1604ef-9b4b-80b3-b766-ed9c851957a5" class="bulleted-list"><li style="list-style-type:disc">In step 6, input number <strong>2</strong> instead of 1</li></ul><h2 id="1d1604ef-9b4b-80ad-a1ea-e247f84f2063" class="">Automation 3: Alarm Trigger</h2><p id="1d1604ef-9b4b-8044-9254-f9d3912d6d6c" class="">Follow the same steps as Automation 1, with these changes:</p><ul id="1d1604ef-9b4b-802e-98b3-c8202e4f8765" class="bulleted-list"><li style="list-style-type:disc">In step 2, tap [<strong>Alarm</strong>] instead of [Time of Day]</li></ul><ul id="1d1604ef-9b4b-80a5-9ccc-d6a2906a3429" class="bulleted-list"><li style="list-style-type:disc">Configure settings as shown:</li></ul><figure id="1d1604ef-9b4b-8014-b883-f88df7a348e1" class="image"><a href="fIF3p3ttC0-left.png"><img style="width:709.984375px" src="https://i.imgur.com/MTyZ3km.png"/></a></figure><ul id="1d1604ef-9b4b-80dc-a6f8-edc73fc17118" class="bulleted-list"><li style="list-style-type:disc">In step 6, input number <strong>3</strong> instead of 1</li></ul><h2 id="1d1604ef-9b4b-8025-9db9-e83367a64cdb" class="">Automation 4: Alarm Stop</h2><p id="1d1604ef-9b4b-805f-afe2-f2de398e695a" class="">Follow the same steps as Automation 1, with these changes:</p><ul id="10aa2fe6-80f0-4850-93c0-4fe14b146190" class="bulleted-list"><li style="list-style-type:disc">In step 2, tap [<strong>Alarm</strong>] instead of [Time of Day]</li></ul><ul id="1d1604ef-9b4b-80aa-baad-e6dd7acf4ad9" class="bulleted-list"><li style="list-style-type:disc">Configure settings as shown:</li></ul><figure id="1d1604ef-9b4b-8068-a490-e601bfafcfe7" class="image"><a href="E24uC2vV2j-left.png"><img style="width:709.984375px" src="https://i.imgur.com/2LbJK9D.png"/></a></figure><ul id="1d1604ef-9b4b-804f-bcba-f64ec9bd67f1" class="bulleted-list"><li style="list-style-type:disc">In step 6, input number <strong>4</strong> instead of 1</li></ul><figure class="block-color-teal_background callout" style="white-space:pre-wrap;display:flex" id="1d1604ef-9b4b-8031-8b44-ddb00fab6dee"><div style="width:100%">🎉 Congratulations! Once you&#x27;ve completed these automations, your Smart Calendar Reminder is ready to revolutionize your schedule management!</div></figure></div></article><span class="sans" style="font-size:14px;padding-top:2em"></span></body></html>

〔28〕 Set Name of 〔27 Text〕 to Welcome.html　» 29 30

〔29〕 Show Web View at 〔28 Renamed Item〕

〔30〕 Make PDF from 〔28 Renamed Item〕　»

〔31〕 Save File 〔30 PDF〕
• AskWhereToSave: false
• SaveFileOverwrite: true
• FileDestinationPath: 〔3 Version Dictionary .Name〕/Welcome.pdf

〔32〕 End If　▵26

〔33〕 Dictionary 　➔ menus　»
{  "mainMenu": {
      "Setup": {
         "title": "Setup",
         "sub": "Set Personal Preferences",
         "icon": "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"
      },
      "Change": {
         "title": "Change",
         "sub": "Change Personal Preferences",
         "icon": "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"
      },
      "View": {
         "title": "View",
         "sub": "View Personal Preferences or Automations Setup Inctructions",
         "icon": "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"
      }
   }
}

〔34〕 Get Dictionary from 〔33 menus.mainMenu〕　»

〔35〕 Repeat with Each in 〔34 Dictionary〕

〔36〕 Get Dictionary All Values in 〔Repeat Item as Dictionary〕 　➔ Options　»
• DictionaryKey: 〔Repeat Item as Dictionary’s Keys〕.title

〔37〕 Repeat[2] with Each in 〔36 Options as Dictionary〕

〔38〕 Text
BEGIN:VCARD
VERSION:3.0
N;CHARSET=utf-8:〔Repeat Item 2 as Dictionary.title〕;
ORG:〔Repeat Item 2 as Dictionary.sub〕;
PHOTO;ENCODING=b:〔Repeat Item 2 as Dictionary.icon〕;
END:VCARD

〔39〕 End Repeat[2] with Each

〔40〕 End Repeat with Each　»

〔41〕 Text　»
〔40 Repeat Results〕

〔42〕 Set Name of 〔41 Text〕 to mainMenu.vcf　»

〔43〕 Get Contacts from 〔42 Renamed Item〕　»

〔44〕 Choose from List 〔43 Contacts〕　» 45 78 83
• ChooseFromListActionPrompt: ☀️Welcome to Smart Calendar Reminder☀️

〔45〕 If 〔44 Selected Item’s Name〕 is Setup

〔46〕 Get File at Path 〔3 Version Dictionary .Name〕/aboutme.txt from Folder　»
• FileErrorIfNotFound: false

〔47〕 If 〔46 File’s File Size〕 does not have any value

〔48〕 Comment
All the information is stored in iCloud. The shortcut isn’t collecting anything.

〔49〕 Text　»
Choose Travel Time Calculation Method

1️⃣ Notes 🗓️ / Current 📍\u000D
Uses the address in the Calendar event Notes if available (routing via Notes if you're not already there), otherwise calculates directly from your current location to the event.\u000D
\u000D
2️⃣ Notes 🗓️ / Home 🏡\u000D
Uses the Notes address if available (same as 1️⃣), but if Notes are empty, routes via your home address if you're not already there, or directly from home if you are.\u000D
\u000D

〔50〕 Choose from Menu
• MenuPrompt: 〔49 Text〕
• MenuItems: [1️⃣ Notes 🗓️ / Current 📍,
2️⃣ Notes 🗓️ / Home 🏡]

〔51〕 Menu Item 1️⃣ Notes 🗓️ / Current 📍

〔52〕 Dictionary　»
{  "state": "\"\"",
   "street": "\"\"",
   "city": "\"\"",
   "country": "\"\"",
   "postcode": "\"\""
}

〔53〕 Set Variable HomeAddress to 〔52 Dictionary〕

〔54〕 Menu Item 2️⃣ Notes 🗓️ / Home 🏡

〔55〕 Text　»
Please provide your home address for accurate travel time calculations via Apple Maps.

〔56〕 Text　»
<!DOCTYPE html>
<html>
<head>
    <title>Address Collector</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        /* Modern CSS styling */
        body {
            font-family: 'Segoe UI', sans-serif;
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            padding: 20px;
            min-height: 100vh;
        }

        .form-container {
            max-width: 500px;
            margin: 20px auto;
            background: white;
            padding: 25px;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        }

        h2 {
            color: #2c3e50;
            text-align: center;
            margin-bottom: 25px;
        }

        .form-group {
            margin-bottom: 20px;
        }

        label {
            display: block;
            margin-bottom: 8px;
            color: #34495e;
            font-weight: 500;
        }

        input {
            width: 100%;
            padding: 12px;
            margin: 0; /* Equal left/right margins */
            border: 2px solid #e0e0e0;
            border-radius: 8px;
            font-size: 16px;
            transition: border-color 0.3s ease;
            box-sizing: border-box; /* Ensures padding doesn't affect width */
        }

        input:focus {
            outline: none;
            border-color: #3498db;
            box-shadow: 0 0 8px rgba(52, 152, 219, 0.2);
        }

        button {
            background: #3498db;
            color: white;
            padding: 15px 30px;
            border: none;
            border-radius: 8px;
            font-size: 16px;
            cursor: pointer;
            width: 100%;
            transition: background 0.3s ease;
        }

        button:hover {
            background: #2980b9;
        }

        /* New success message styling */
        .success-message {
            display: none;
            background: #e8f5e9;
            color: #2e7d32;
            padding: 20px;
            border-radius: 8px;
            margin-top: 20px;
            text-align: center;
        }

        .success-message.show {
            display: block;
        }
    </style>
</head>
<body>
    <div class="form-container">
        <h2>〔55 Text〕</h2>
        <form id="addressForm">
            <div class="form-group">
                <label>Street Address</label>
                <input type="text" id="street" placeholder="" required>
            </div>

            <div class="form-group">
                <label>City</label>
                <input type="text" id="city" placeholder="" required>
            </div>

            <div class="form-group">
                <label>State/Province</label>
                <input type="text" id="state" placeholder="" required>
            </div>

            <div class="form-group">
                <label>Country/Region</label>
                <input type="text" id="country" placeholder="" required>
            </div>

            <div class="form-group">
                <label>Postal Code</label>
                <input type="text" id="postcode" placeholder="" required>
            </div>

            <button type="button" onclick="sendToShortcut()">Submit Address</button>
        </form>

        <!-- Success message container -->
        <div class="success-message" id="successMessage">
            <p>Data collected successfully!</p>
        </div>
    </div>

<script>
function sendToShortcut() {
  const addressData = {
    street: document.getElementById('street').value,
    city: document.getElementById('city').value,
    state: document.getElementById('state').value,
    country: document.getElementById('country').value,
    postcode: document.getElementById('postcode').value
  };
\u{space}\u{space}
  // Copy data to clipboard
  navigator.clipboard.writeText(JSON.stringify(addressData));
\u{space}\u{space}
  // Show success message and hide form
  document.getElementById('addressForm').style.display = 'none';
  document.getElementById('successMessage').classList.add('show');
}
</script>
</body>
</html>

〔57〕 Set Name of 〔56 Text〕 to Address.html　»

〔58〕 Show Web View at 〔57 Renamed Item〕

〔59〕 Get Clipboard　»

〔60〕 Get Dictionary from 〔59 Clipboard〕　»

〔61〕 Set Variable HomeAddress to 〔60 Dictionary〕

〔62〕 End Menu　▵54

〔63〕 List　» 65
[Driving,
Walking,
Transit,
Biking]

〔64〕 Text　»
Select Travel Method (It will apply to all the events)

〔65〕 Choose from List 〔63 List〕 　➔ Travel Method Selected　»
• ChooseFromListActionPrompt: 〔64 Text〕

〔66〕 Set Variable TravelMethod to 〔65 Travel Method Selected〕

〔67〕 Text　»
Besides travel time, how many Extra Minutes Needed (e.g., '15 mins buffer')

〔68〕 Ask for Number Input 　➔ Extra Time Needed　»
• AskActionPrompt: 〔67 Text〕
• AskActionAllowsNegativeNumbers: false
• AskActionAllowsDecimalNumbers: false

〔69〕 Set Variable ExtraTime to 〔68 Extra Time Needed〕

〔70〕 Dictionary　»
{  "HomeAddress": "〔HomeAddress as Dictionary〕",
   "TravelMethod": "〔TravelMethod〕",
   "ExtraTime": "〔ExtraTime〕"
}

〔71〕 Text　»
〔70 Dictionary〕

〔72〕 Save File 〔71 Text〕
• Folder: {  "fileLocation": {
      "crossDeviceItemID": "docs.icloud.com:iCloud.is.workflow.my.workflows/documents/e51c720424ec90d3260ccd6f241343baea15b7f3",
      "fileProviderDomainID": "com.apple.CloudDocs.iCloudDriveFileProvider/46CA22EA-49CD-4A1D-9512-F48B36AA64B5",
      "appContainerBundleIdentifier": "com.apple.shortcuts",
      "relativeSubpath": "",
      "WFFileLocationType": "Shortcuts"
   },
   "filename": "Documents",
   "displayName": "Shortcuts"
}
• AskWhereToSave: false
• SaveFileOverwrite: true
• FileDestinationPath: 〔3 Version Dictionary .Name〕/aboutme.txt

〔73〕 Otherwise　▵47

〔74〕 Show Alert You have set up. If you want to modify, please tap [Change] instead.
• AlertActionCancelButtonShown: false

〔75〕 Run Shortcut Smart Calendar Reminder
• Workflow: {  "workflowIdentifier": "5A2BC55E-C195-4C6C-93E9-725F782CDD1B",
   "isSelf": true,
   "workflowName": "Smart Calendar Reminder"
}

〔76〕 End If

〔77〕 End If　▵45

〔78〕 If 〔44 Selected Item’s Name〕 is Change

〔79〕 Delete Files {  "fileLocation": {
      "crossDeviceItemID": "docs.icloud.com:iCloud.is.workflow.my.workflows/9F38EF56-AD52-45E7-8B63-200CBFF0E713/a708662a11276f4b1fa48be3c50990fd13a4ccdf",
      "fileProviderDomainID": "com.apple.CloudDocs.iCloudDriveFileProvider/F1A50FD9-D64E-426C-8EB2-9C6216034396",
      "appContainerBundleIdentifier": "com.apple.systemactions",
      "relativeSubpath": "Smart Calendar Reminder/aboutme.txt",
      "WFFileLocationType": "Shortcuts"
   },
   "filename": "aboutme.txt",
   "displayName": "aboutme.txt"
}
• DeleteImmediatelyDelete: true

〔80〕 Show Alert Your preferences are deleted. Please choose [Setup] from main menu to set up again.
• AlertActionCancelButtonShown: false

〔81〕 Run Shortcut Smart Calendar Reminder
• Workflow: {  "workflowIdentifier": "5A2BC55E-C195-4C6C-93E9-725F782CDD1B",
   "isSelf": true,
   "workflowName": "Smart Calendar Reminder"
}

〔82〕 End If

〔83〕 If 〔44 Selected Item’s Name〕 is View

〔84〕 Choose from Menu
• MenuItems: [Automations Setup Instructions,
Personal Preferences]

〔85〕 Menu Item Automations Setup Instructions

〔86〕 Open File {  "fileLocation": {
      "crossDeviceItemID": "docs.icloud.com:iCloud.is.workflow.my.workflows/E4DA358A-5903-4CC2-BBC8-FD498ED6EDB3/d459a12be98fb7e83aed794c6d0dcf774ef5d814",
      "fileProviderDomainID": "com.apple.CloudDocs.iCloudDriveFileProvider/F1A50FD9-D64E-426C-8EB2-9C6216034396",
      "appContainerBundleIdentifier": "com.apple.systemactions",
      "relativeSubpath": "Smart Calendar Reminder/Welcome.pdf",
      "WFFileLocationType": "Shortcuts"
   },
   "filename": "Welcome.pdf",
   "displayName": "Welcome.pdf"
}

〔87〕 Menu Item Personal Preferences

〔88〕 Open File {  "fileLocation": {
      "crossDeviceItemID": "docs.icloud.com:iCloud.is.workflow.my.workflows/81672621-501F-4225-8CDA-11AAF2112D81/06302c85b44ba41f3258ff7d1669b31859a28556",
      "fileProviderDomainID": "com.apple.CloudDocs.iCloudDriveFileProvider/F1A50FD9-D64E-426C-8EB2-9C6216034396",
      "appContainerBundleIdentifier": "com.apple.systemactions",
      "relativeSubpath": "Smart Calendar Reminder/aboutme.txt",
      "WFFileLocationType": "Shortcuts"
   },
   "filename": "aboutme.txt",
   "displayName": "aboutme.txt"
}

〔89〕 End Menu

〔90〕 End If　▵83

〔91〕 Otherwise　▵0

〔92〕 If 〔Shortcut Input as Number〕 is 1

〔93〕 Comment
*Revolutionizing event management by integrating calendar data with intelligent automation:

Voice announcements for upcoming events

Dynamic alarm calculation (travel + prep time)

Calendar-driven scheduling system
Eliminates manual reminders and ensures perfect timing synchronization*

〔94〕 Get File at Path Smart Calendar Reminder/aboutme.txt from Folder　»
• FileErrorIfNotFound: false

〔95〕 Get Dictionary from 〔94 File〕　» 96 99 100

〔96〕 Get Dictionary from 〔95 Dictionary.HomeAddress〕　»

〔97〕 Text　»
〔96 Dictionary.street〕 〔96 Dictionary.city〕 〔96 Dictionary.state〕 〔96 Dictionary.postcode〕 〔96 Dictionary.country〕\u{space}

〔98〕 Set Variable HomeAddress to 〔97 Text〕

〔99〕 Set Variable TravelMethod to 〔95 Dictionary.TravelMethod〕

〔100〕 Get Dictionary Value for ExtraTime in 〔95 Dictionary〕　»

〔101〕 Get Numbers from 〔100 Dictionary Value〕　»

〔102〕 Set Variable ExtraTime to 〔101 Numbers〕

〔103〕 Find Calendar Events All Calendar Events where　» 104 105
• ContentItemSortProperty: Start Date
• ContentItemSortOrder: Oldest First
• ContentItemFilter: • All the following are true
Start Date is in the next 1 days
Is Not All Day
Canceled is {"Bool":false}

〔104〕 If 〔103 Calendar Events〕 has any value

〔105〕 Repeat with Each in 〔103 Calendar Events〕

〔106〕 If 〔Repeat Item’s Location〕 has any value

〔107〕 Get Current Location　» 119 125 189
• Accuracy: Best

〔108〕 Comment
*To specify event-specific departure locations:

1. Create calendar event notes with JSON structure:
{
“Street”: “your departure street”,
“City”: “your departure city”,
“State”: “your departure state”,
“Country”: “your departure country”,
“Postcode”: “your departure postcode”
}
2. System prioritizes these over default locations*

〔109〕 If All are true　〔Repeat Item’s Notes〕 has any value　〔Repeat Item’s Notes〕 begins with {　〔Repeat Item’s Notes〕 ends with }

〔110〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY

〔111〕 Get Dictionary from 〔Repeat Item’s Notes〕 　➔ Notes Address Dictionary　» 112 113 114 115 116

〔112〕 Set Variable Calendar_Notes_Street to 〔111 Notes Address Dictionary.Street〕

〔113〕 Set Variable Calendar_Notes_City to 〔111 Notes Address Dictionary.City〕

〔114〕 Set Variable Calendar_Notes_State to 〔111 Notes Address Dictionary.State〕

〔115〕 Set Variable Calendar_Notes_Region to 〔111 Notes Address Dictionary.Country〕

〔116〕 Set Variable Calendar_Notes_ZIP_Code to 〔111 Notes Address Dictionary.Postcode〕

〔117〕 Text　»
〔Calendar_Notes_Street〕 〔Calendar_Notes_City〕 〔Calendar_Notes_State〕 〔Calendar_Notes_ZIP_Code〕 〔Calendar_Notes_Region〕

〔118〕 Set Variable NotesAddressString to 〔117 Text〕

〔119〕 If All are true　〔107 Current Location’s Street〕 is 〔Calendar_Notes_Street〕　〔107 Current Location’s City〕 is 〔Calendar_Notes_City〕　〔107 Current Location’s State〕 is 〔Calendar_Notes_State〕　〔107 Current Location’s Country〕 is 〔Calendar_Notes_Region〕　〔107 Current Location’s ZIP Code〕 is 〔Calendar_Notes_ZIP_Code〕

〔120〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY -> CALENDAR EVENT ADDRESS IS THE SAME WITH CURRENT LOCATION

〔121〕 Number 0　»

〔122〕 Set Variable CurrentToDeparture to 〔121 Number〕

〔123〕 Otherwise

〔124〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY -> CALENDAR EVENT ADDRESS IS NOT THE SAME WITH CURRENT LOCATION

〔125〕 Get 〔TravelMethod〕 Time　»
• GetDirectionsCustomLocation: 〔107 Current Location〕
• Destination: 〔NotesAddressString〕

〔126〕 Set Variable TravelTimeString to 〔125 Travel Time〕

〔127〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　» 128 130 132 137 144
• MatchTextCaseSensitive: false

〔128〕 Count Items in 〔127 C2DMatches〕　»

〔129〕 If 〔128 Count〕 > 1

〔130〕 Get First Item from List 〔127 C2DMatches〕　»

〔131〕 Set Variable C2DHours to 〔130 Item from List〕

〔132〕 Get Last Item from List 〔127 C2DMatches〕　»

〔133〕 Set Variable C2DMinutes to 〔132 Item from List〕

〔134〕 Otherwise

〔135〕 Match Text hour(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔136〕 If 〔135 C2DMatches’s text〕 has any value

〔137〕 Get First Item from List 〔127 C2DMatches〕　»

〔138〕 Set Variable C2DHours to 〔137 Item from List〕

〔139〕 Number 0　»

〔140〕 Set Variable C2DMinutes to 〔139 Number〕

〔141〕 Otherwise

〔142〕 Number 0　»

〔143〕 Set Variable C2DHours to 〔142 Number〕

〔144〕 Get First Item from List 〔127 C2DMatches〕　»

〔145〕 Set Variable C2DMinutes to 〔144 Item from List〕

〔146〕 End If

〔147〕 End If　▵134

〔148〕 Calculate 〔C2DHours〕 × 60　»

〔149〕 Calculate 〔148 Calculation Result〕 + 〔C2DMinutes〕　»

〔150〕 Set Variable CurrentToDeparture to 〔149 Calculation Result〕

〔151〕 End If　▵123

〔152〕 Get 〔TravelMethod〕 Time 　➔ DepartureToDestination　» 153 1502
• GetDirectionsCustomLocation: 〔NotesAddressString〕
• Destination: 〔Repeat Item’s Location〕

〔153〕 Set Variable TravelTimeString to 〔152 DepartureToDestination〕

〔154〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　» 155 157 159 164 171
• MatchTextCaseSensitive: false

〔155〕 Count Items in 〔154 C2DMatches〕　»

〔156〕 If 〔155 Count〕 > 1

〔157〕 Get First Item from List 〔154 C2DMatches〕　»

〔158〕 Set Variable C2DHours to 〔157 Item from List〕

〔159〕 Get Last Item from List 〔154 C2DMatches〕　»

〔160〕 Set Variable C2DMinutes to 〔159 Item from List〕

〔161〕 Otherwise

〔162〕 Match Text hour(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔163〕 If 〔162 C2DMatches’s text〕 has any value

〔164〕 Get First Item from List 〔154 C2DMatches〕　»

〔165〕 Set Variable C2DHours to 〔164 Item from List〕

〔166〕 Number 0　»

〔167〕 Set Variable C2DMinutes to 〔166 Number〕

〔168〕 Otherwise

〔169〕 Number 0　»

〔170〕 Set Variable C2DHours to 〔169 Number〕

〔171〕 Get First Item from List 〔154 C2DMatches〕　»

〔172〕 Set Variable C2DMinutes to 〔171 Item from List〕

〔173〕 End If

〔174〕 End If　▵161

〔175〕 Calculate 〔C2DHours〕 × 60　»

〔176〕 Calculate 〔175 Calculation Result〕 + 〔C2DMinutes〕　»

〔177〕 Calculate 〔176 Calculation Result〕 + 〔CurrentToDeparture〕　»

〔178〕 Set Variable TravelTime to 〔177 Calculation Result〕

〔179〕 Otherwise　▵109

〔180〕 Comment
CALENDER EVENT NOTES IS BLANK

〔181〕 Get Dictionary from 〔HomeAddress〕 　➔ Home Address Dictionary　» 182 183 184 185 186

〔182〕 Get Dictionary Value for street in 〔181 Home Address Dictionary〕 　➔ home_Street　» 187 189

〔183〕 Get Dictionary Value for city in 〔181 Home Address Dictionary〕 　➔ home_City　» 187 189

〔184〕 Get Dictionary Value for state in 〔181 Home Address Dictionary〕 　➔ home_State　» 187 189

〔185〕 Get Dictionary Value for country in 〔181 Home Address Dictionary〕 　➔ home_Country　» 187 189

〔186〕 Get Dictionary Value for postcode in 〔181 Home Address Dictionary〕 　➔ home_Postcode　» 187 189

〔187〕 If All are true　〔182 home_Street〕 has any value　〔183 home_City〕 has any value　〔184 home_State〕 has any value　〔185 home_Country〕 has any value　〔186 home_Postcode〕 has any value

〔188〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED

〔189〕 If All are true　〔107 Current Location’s Street〕 is 〔182 home_Street〕　〔107 Current Location’s City〕 is 〔183 home_City〕　〔107 Current Location’s State〕 is 〔184 home_State〕　〔107 Current Location’s Country〕 is 〔185 home_Country〕　〔107 Current Location’s ZIP Code〕 is 〔186 home_Postcode〕

〔190〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED -> HOME ADDRESS IS THE SAME WITH CURRENT LOCATION

〔191〕 Number 0　»

〔192〕 Set Variable CurrentToDeparture to 〔191 Number〕

〔193〕 Otherwise

〔194〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED -> HOME ADDRESS IS NOT THE SAME WITH CURRENT LOCATION

〔195〕 Get 〔TravelMethod〕 Time　»
• Destination: 〔HomeAddress〕

〔196〕 Set Variable TravelTimeString to 〔195 Travel Time〕

〔197〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　» 198 200 202 207 214
• MatchTextCaseSensitive: false

〔198〕 Count Items in 〔197 C2DMatches〕　»

〔199〕 If 〔198 Count〕 > 1

〔200〕 Get First Item from List 〔197 C2DMatches〕　»

〔201〕 Set Variable C2DHours to 〔200 Item from List〕

〔202〕 Get Last Item from List 〔197 C2DMatches〕　»

〔203〕 Set Variable C2DMinutes to 〔202 Item from List〕

〔204〕 Otherwise

〔205〕 Match Text hour(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔206〕 If 〔205 C2DMatches’s text〕 has any value

〔207〕 Get First Item from List 〔197 C2DMatches〕　»

〔208〕 Set Variable C2DHours to 〔207 Item from List〕

〔209〕 Number 0　»

〔210〕 Set Variable C2DMinutes to 〔209 Number〕

〔211〕 Otherwise

〔212〕 Number 0　»

〔213〕 Set Variable C2DHours to 〔212 Number〕

〔214〕 Get First Item from List 〔197 C2DMatches〕　»

〔215〕 Set Variable C2DMinutes to 〔214 Item from List〕

〔216〕 End If

〔217〕 End If　▵204

〔218〕 Calculate 〔C2DHours〕 × 60　»

〔219〕 Calculate 〔218 Calculation Result〕 + 〔C2DMinutes〕　»

〔220〕 Set Variable CurrentToDeparture to 〔219 Calculation Result〕

〔221〕 End If　▵193

〔222〕 Get 〔TravelMethod〕 Time 　➔ DepartureToDestination　»
• GetDirectionsCustomLocation: 〔HomeAddress〕
• Destination: 〔Repeat Item’s Location〕

〔223〕 Set Variable TravelTimeString to 〔222 DepartureToDestination〕

〔224〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　» 225 227 229 234 241
• MatchTextCaseSensitive: false

〔225〕 Count Items in 〔224 C2DMatches〕　»

〔226〕 If 〔225 Count〕 > 1

〔227〕 Get First Item from List 〔224 C2DMatches〕　»

〔228〕 Set Variable C2DHours to 〔227 Item from List〕

〔229〕 Get Last Item from List 〔224 C2DMatches〕　»

〔230〕 Set Variable C2DMinutes to 〔229 Item from List〕

〔231〕 Otherwise

〔232〕 Match Text hour(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔233〕 If 〔232 C2DMatches’s text〕 has any value

〔234〕 Get First Item from List 〔224 C2DMatches〕　»

〔235〕 Set Variable C2DHours to 〔234 Item from List〕

〔236〕 Number 0　»

〔237〕 Set Variable C2DMinutes to 〔236 Number〕

〔238〕 Otherwise

〔239〕 Number 0　»

〔240〕 Set Variable C2DHours to 〔239 Number〕

〔241〕 Get First Item from List 〔224 C2DMatches〕　»

〔242〕 Set Variable C2DMinutes to 〔241 Item from List〕

〔243〕 End If

〔244〕 End If　▵231

〔245〕 Calculate 〔C2DHours〕 × 60　»

〔246〕 Calculate 〔245 Calculation Result〕 + 〔C2DMinutes〕　»

〔247〕 Calculate 〔246 Calculation Result〕 + 〔CurrentToDeparture〕　»

〔248〕 Set Variable TravelTime to 〔247 Calculation Result〕

〔249〕 Otherwise　▵187

〔250〕 Text
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS NOT MAINTAINED

〔251〕 Get 〔TravelMethod〕 Time　»
• Destination: 〔Repeat Item’s Location〕

〔252〕 Set Variable TravelTimeString to 〔251 Travel Time〕

〔253〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　» 254 256 258 263 270
• MatchTextCaseSensitive: false

〔254〕 Count Items in 〔253 C2DMatches〕　»

〔255〕 If 〔254 Count〕 > 1

〔256〕 Get First Item from List 〔253 C2DMatches〕　»

〔257〕 Set Variable C2DHours to 〔256 Item from List〕

〔258〕 Get Last Item from List 〔253 C2DMatches〕　»

〔259〕 Set Variable C2DMinutes to 〔258 Item from List〕

〔260〕 Otherwise

〔261〕 Match Text hour(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔262〕 If 〔261 C2DMatches’s text〕 has any value

〔263〕 Get First Item from List 〔253 C2DMatches〕　»

〔264〕 Set Variable C2DHours to 〔263 Item from List〕

〔265〕 Number 0　»

〔266〕 Set Variable C2DMinutes to 〔265 Number〕

〔267〕 Otherwise

〔268〕 Number 0　»

〔269〕 Set Variable C2DHours to 〔268 Number〕

〔270〕 Get First Item from List 〔253 C2DMatches〕　»

〔271〕 Set Variable C2DMinutes to 〔270 Item from List〕

〔272〕 End If

〔273〕 End If　▵260

〔274〕 Calculate 〔C2DHours〕 × 60　»

〔275〕 Calculate 〔274 Calculation Result〕 + 〔C2DMinutes〕　»

〔276〕 Set Variable TravelTime to 〔275 Calculation Result〕

〔277〕 End If　▵249

〔278〕 End If　▵179

〔279〕 Otherwise　▵106

〔280〕 Number 0　»

〔281〕 Set Variable TravelTime to 〔280 Number〕

〔282〕 End If

〔283〕 Calculate 〔TravelTime〕 + 〔ExtraTime〕　»

〔284〕 Adjust Subtract Date 〔Repeat Item’s Start Date〕 　➔ Supposed Alarm Time　» 285 288 291 294 301 317 319 320 338 343 346
• Duration: 〔283 Calculation Result〕 min

〔285〕 Dictionary 　➔ Alarm Label Dictionary　» 317 322 338
{  "Event": "〔Repeat Item〕",
   "From": "〔Repeat Item’s Start Date〕",
   "To": "〔Repeat Item’s End Date〕",
   "Location": "〔Repeat Item’s Location〕",
   "AlarmTime": "〔284 Supposed Alarm Time〕"
}

〔286〕 Date Current Date 　➔ Current Date　» 287 288 319

〔287〕 Adjust Add Date 〔286 Current Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"dd MMM yyyy"}〕 　➔ 1 day after　» 301 320
• Duration: "1" days

〔288〕 If 〔284 Supposed Alarm Time〕 is 〔286 Current Date〕

〔289〕 Comment
supposed alarm time is exactly 12:00am

〔290〕 If 〔Repeat Item’s Location〕 has any value

〔291〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 at 〔Repeat Item’s Location〕 which  was supposed to get ready at 〔284 Supposed Alarm Time〕. Please check.

〔292〕 Set Variable Text to 〔291 Text〕

〔293〕 Otherwise

〔294〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 which  was supposed to get ready at 〔284 Supposed Alarm Time〕. Please check.

〔295〕 Set Variable Text to 〔294 Text〕

〔296〕 End If

〔297〕 Show Alert 〔Text〕

〔298〕 Show Notification 〔Text〕

〔299〕 Speak Text
• Text: 〔Text〕

〔300〕 Otherwise　▵288

〔301〕 If 〔284 Supposed Alarm Time〕 is 〔287 1 day after〕

〔302〕 Find Alarm All Alarm　» 303 304

〔303〕 If 〔302 Alarms〕 has any value

〔304〕 Repeat[2] with Each in 〔302 Alarms〕

〔305〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ AlarmLabelDictionary　» 306 307 309

〔306〕 Get Dictionary Value for Event in 〔305 AlarmLabelDictionary〕 　➔ Event　» 311

〔307〕 Get Dictionary Value for From in 〔305 AlarmLabelDictionary〕 　➔ From　»

〔308〕 Get Dates from 〔307 From〕 　➔ FromDate　» 311

〔309〕 Get Dictionary Value for To in 〔305 AlarmLabelDictionary〕 　➔ To　»

〔310〕 Get Dates from 〔309 To〕 　➔ ToDate　»

〔311〕 If All are true　〔306 Event’s Name〕 is 〔Repeat Item〕　〔308 FromDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔Repeat Item’s Start Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕　〔310 ToDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is • ConditionalActionString
〔Repeat Item’s End Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕• Date
〔Repeat Item’s End Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕

〔312〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔313〕 End If

〔314〕 End Repeat[2] with Each　▵304

〔315〕 End If　▵303

〔316〕 Comment
since this will be triggered at 12:00 am each day, when the supposed alarm time is 12:00 am in the next day, you can set alarm now

〔317〕 Add Alarm for 〔284 Supposed Alarm Time〕 called 〔285 Alarm Label Dictionary〕

〔318〕 Otherwise　▵301

〔319〕 If 〔284 Supposed Alarm Time〕 > 〔286 Current Date〕

〔320〕 If 〔284 Supposed Alarm Time〕 > 〔287 1 day after〕

〔321〕 Comment
when the time is other than 12:00 am of then next day, you cannot set alarm yet. If set, it will be today. For example, triggering time 2025-4-8 12:00 am, the supposed alarm time is 2025-4-9 08:00 am, if you set an alarm at 08:00 at 2025-4-8 12:00 am, it will alarm at 2025-4-8 08:00 am instead. So we need to record the supposed alarm time and trigger next day.

〔322〕 Set Variable Event to 〔285 Alarm Label Dictionary〕

〔323〕 Otherwise

〔324〕 Find Alarm All Alarm　» 325 326
• ContentItemFilter: {  "Value": {
      "WFActionParameterFilterPrefix": 1,
      "WFActionParameterFilterTemplates": [],
      "WFContentPredicateBoundedDate": false
   },
   "WFSerializationType": "WFContentPredicateTableTemplate"
}

〔325〕 If 〔324 Alarms〕 has any value

〔326〕 Repeat[2] with Each in 〔324 Alarms〕

〔327〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ AlarmLabelDictionary　» 328 329 331

〔328〕 Get Dictionary Value for Event in 〔327 AlarmLabelDictionary〕 　➔ Event　» 333

〔329〕 Get Dictionary Value for From in 〔327 AlarmLabelDictionary〕 　➔ From　»

〔330〕 Get Dates from 〔329 From〕 　➔ FromDate　» 333

〔331〕 Get Dictionary Value for To in 〔327 AlarmLabelDictionary〕 　➔ To　»

〔332〕 Get Dates from 〔331 To〕 　➔ ToDate　»

〔333〕 If All are true　〔328 Event’s Name〕 is 〔Repeat Item〕　〔330 FromDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔Repeat Item’s Start Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕　〔332 ToDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔Repeat Item’s End Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕

〔334〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔335〕 End If

〔336〕 End Repeat[2] with Each　▵326

〔337〕 End If　▵325

〔338〕 Add Alarm for 〔284 Supposed Alarm Time〕 called 〔285 Alarm Label Dictionary〕

〔339〕 End If　▵323

〔340〕 Otherwise　▵319

〔341〕 Comment
the supposed alarm time passed

〔342〕 If 〔Repeat Item’s Location〕 has any value

〔343〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 at 〔Repeat Item’s Location〕 which  was supposed to get ready at 〔284 Supposed Alarm Time〕. Please check.

〔344〕 Set Variable Text to 〔343 Text〕

〔345〕 Otherwise

〔346〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 which  was supposed to get ready at 〔284 Supposed Alarm Time〕. Please check.

〔347〕 Set Variable Text to 〔346 Text〕

〔348〕 End If

〔349〕 Show Alert 〔Text〕

〔350〕 Show Notification 〔Text〕

〔351〕 Speak Text
• Text: 〔Text〕

〔352〕 End If　▵340

〔353〕 End If　▵318

〔354〕 End If　▵300

〔355〕 If 〔Event〕 has any value

〔356〕 Get Dictionary from 〔Event〕　» 369

〔357〕 Text　»

〔358〕 Set Variable TextList to 〔357 Text〕

〔359〕 Add 〔Event〕 to Variable TextList

〔360〕 Get File at Path Smart Calendar Reminder/Future Alarms.txt from Folder　» 361 362
• FileErrorIfNotFound: false

〔361〕 If 〔360 File’s File Size〕 has any value

〔362〕 Split Text 〔360 File〕 by New Lines　»

〔363〕 Repeat[2] with Each in 〔362 Split Text〕

〔364〕 Get Dictionary from 〔Repeat Item 2〕　» 365 366 367 368

〔365〕 Get Dictionary Value for Event in 〔364 Dictionary〕 　➔ Event　» 369

〔366〕 Get Dictionary Value for From in 〔364 Dictionary〕 　➔ From　» 369

〔367〕 Get Dictionary Value for To in 〔364 Dictionary〕 　➔ To　» 369

〔368〕 Get Dictionary Value for Location in 〔364 Dictionary〕 　➔ Location　»

〔369〕 If Any are true　〔365 Event’s Name〕 is not 〔356 Dictionary.Event〕　〔366 From’s Name〕 is not 〔356 Dictionary.From〕　〔367 To’s Name〕 is not 〔356 Dictionary.To〕　〔368 Location’s Name〕 is not 〔356 Dictionary.Location〕

〔370〕 Add 〔Repeat Item 2〕 to Variable TextList

〔371〕 End If

〔372〕 End Repeat[2] with Each　▵363

〔373〕 Combine Text 〔TextList〕 with New Lines　»

〔374〕 Save File 〔373 Combined Text〕
• AskWhereToSave: false
• SaveFileOverwrite: true
• FileDestinationPath: Smart Calendar Reminder/Future Alarms.txt

〔375〕 Otherwise　▵361

〔376〕 Text　»

〔Event〕

〔377〕 Save File 〔376 Text〕
• AskWhereToSave: false
• FileDestinationPath: Smart Calendar Reminder/Future Alarms.txt

〔378〕 End If

〔379〕 End If　▵355

〔380〕 End Repeat with Each　▵105

〔381〕 End If　▵104

〔382〕 Get File at Path Smart Calendar Reminder/Future Alarms.txt from Folder　» 383 384
• FileErrorIfNotFound: false

〔383〕 If 〔382 File’s File Size〕 has any value

〔384〕 Split Text 〔382 File〕 by New Lines　»

〔385〕 Repeat with Each in 〔384 Split Text〕

〔386〕 Get Dictionary from 〔Repeat Item〕　» 387 388 398 409

〔387〕 If 〔386 Dictionary〕 has any value

〔388〕 Get Dates from 〔386 Dictionary.AlarmTime〕　» 389 409

〔389〕 If 〔388 Dates〕 is today

〔390〕 Find Alarm All Alarm　» 391 392
• ContentItemFilter: {  "Value": {
      "WFActionParameterFilterPrefix": 1,
      "WFContentPredicateBoundedDate": false,
      "WFActionParameterFilterTemplates": []
   },
   "WFSerializationType": "WFContentPredicateTableTemplate"
}

〔391〕 If 〔390 Alarms〕 has any value

〔392〕 Repeat[2] with Each in 〔390 Alarms〕

〔393〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ Alarm_Label_Dictionary　» 394 396 404

〔394〕 Get Dictionary Value for From in 〔393 Alarm_Label_Dictionary〕　»

〔395〕 Get Dates from 〔394 Dictionary Value〕 　➔ From_Date　» 404

〔396〕 Get Dictionary Value for To in 〔393 Alarm_Label_Dictionary〕　»

〔397〕 Get Dates from 〔396 Dictionary Value〕 　➔ To_Date　» 404

〔398〕 Get Dictionary from 〔386 Dictionary.Event〕 　➔ FutureAlarmLabelDictionary　» 399 400 402

〔399〕 Get Dictionary Value for Event in 〔398 FutureAlarmLabelDictionary〕 　➔ Event　» 404

〔400〕 Get Dictionary Value for From in 〔398 FutureAlarmLabelDictionary〕 　➔ From　»

〔401〕 Get Dates from 〔400 From〕 　➔ FromDate　» 404

〔402〕 Get Dictionary Value for To in 〔398 FutureAlarmLabelDictionary〕 　➔ To　»

〔403〕 Get Dates from 〔402 To〕 　➔ ToDate　»

〔404〕 If All are true　〔399 Event’s Name〕 is 〔393 Alarm_Label_Dictionary.Event〕　〔401 FromDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔395 From_Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕　〔403 ToDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔397 To_Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕

〔405〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔406〕 End If

〔407〕 End Repeat[2] with Each　▵392

〔408〕 End If　▵391

〔409〕 Add Alarm for 〔388 Dates〕 called 〔386 Dictionary.Event〕

〔410〕 End If　▵389

〔411〕 End If　▵387

〔412〕 End Repeat with Each　▵385

〔413〕 End If　▵383

〔414〕 End If　▵92

〔415〕 If 〔Shortcut Input as Number〕 is 2

〔416〕 Comment
1-Hour Event Processor
*Real-time event handler for immediate notifications:

Processes events within next 60 minutes

Provides most accurate travel estimates

Recommended for hourly automation*

〔417〕 Get File at Path Smart Calendar Reminder/aboutme.txt from Folder　»
• FileErrorIfNotFound: false

〔418〕 Get Dictionary from 〔417 File〕　» 419 422 423

〔419〕 Get Dictionary from 〔418 Dictionary.HomeAddress〕　»

〔420〕 Text　»
〔419 Dictionary.street〕 〔419 Dictionary.city〕 〔419 Dictionary.state〕 〔419 Dictionary.postcode〕 〔419 Dictionary.country〕

〔421〕 Set Variable Home_Address to 〔420 Text〕

〔422〕 Set Variable Travel_Method to 〔418 Dictionary.TravelMethod〕

〔423〕 Get Dictionary Value for ExtraTime in 〔418 Dictionary〕　»

〔424〕 Get Numbers from 〔423 Dictionary Value〕　»

〔425〕 Set Variable Extra_Time to 〔424 Numbers〕

〔426〕 Find Calendar Events All Calendar Events where　» 427 428 429 641
• ContentItemSortProperty: Start Date
• ContentItemSortOrder: Oldest First
• ContentItemFilter: • All the following are true
Start Date is in the next 1 hours
Is Not All Day
Canceled is {"Bool":false}

〔427〕 If 〔426 Calendar Events〕 has any value

〔428〕 Count Items in 〔426 Calendar Events〕　» 645 653

〔429〕 Repeat with Each in 〔426 Calendar Events〕

〔430〕 If 〔Repeat Item’s Location〕 has any value

〔431〕 Get Current Location　» 442 448 512
• Accuracy: Best

〔432〕 If All are true　〔Repeat Item’s Notes〕 has any value　〔Repeat Item’s Notes〕 begins with {　〔Repeat Item’s Notes〕 ends with }

〔433〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY

〔434〕 Get Dictionary from 〔Repeat Item’s Notes〕 　➔ NotesAddressDictionary　» 435 436 437 438 439

〔435〕 Set Variable CalendarNotesStreet to 〔434 NotesAddressDictionary.Street〕

〔436〕 Set Variable CalendarNotesCity to 〔434 NotesAddressDictionary.City〕

〔437〕 Set Variable CalendarNotesState to 〔434 NotesAddressDictionary.State〕

〔438〕 Set Variable CalendarNotesRegion to 〔434 NotesAddressDictionary.Country〕

〔439〕 Set Variable CalendarNotesZIPCode to 〔434 NotesAddressDictionary.Postcode〕

〔440〕 Text　»
〔CalendarNotesStreet〕 〔CalendarNotesCity〕 〔CalendarNotesState〕 〔CalendarNotesZIPCode〕 〔CalendarNotesRegion〕

〔441〕 Set Variable NotesAddressString to 〔440 Text〕

〔442〕 If All are true　〔431 Current Location’s Street〕 is 〔CalendarNotesStreet〕　〔431 Current Location’s City〕 is 〔CalendarNotesCity〕　〔431 Current Location’s State〕 is 〔CalendarNotesState〕　〔431 Current Location’s Country〕 is 〔CalendarNotesRegion〕　〔431 Current Location’s ZIP Code〕 is 〔CalendarNotesZIPCode〕

〔443〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY -> CALENDAR EVENT ADDRESS IS THE SAME WITH CURRENT LOCATION

〔444〕 Number 0　»

〔445〕 Set Variable CurrentToDeparture to 〔444 Number〕

〔446〕 Otherwise

〔447〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY -> CALENDAR EVENT ADDRESS IS NOT THE SAME WITH CURRENT LOCATION

〔448〕 Get 〔TravelMethod〕 Time　»
• GetDirectionsCustomLocation: 〔431 Current Location〕
• Destination: 〔NotesAddressString〕

〔449〕 Set Variable TravelTimeString to 〔448 Travel Time〕

〔450〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　» 451 453 455 460 467
• MatchTextCaseSensitive: false

〔451〕 Count Items in 〔450 C2DMatches〕　»

〔452〕 If 〔451 Count〕 > 1

〔453〕 Get First Item from List 〔450 C2DMatches〕　»

〔454〕 Set Variable C2DHours to 〔453 Item from List〕

〔455〕 Get Last Item from List 〔450 C2DMatches〕　»

〔456〕 Set Variable C2DMinutes to 〔455 Item from List〕

〔457〕 Otherwise

〔458〕 Match Text hour(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔459〕 If 〔458 C2DMatches’s text〕 has any value

〔460〕 Get First Item from List 〔450 C2DMatches〕　»

〔461〕 Set Variable C2DHours to 〔460 Item from List〕

〔462〕 Number 0　»

〔463〕 Set Variable C2DMinutes to 〔462 Number〕

〔464〕 Otherwise

〔465〕 Number 0　»

〔466〕 Set Variable C2DHours to 〔465 Number〕

〔467〕 Get First Item from List 〔450 C2DMatches〕　»

〔468〕 Set Variable C2DMinutes to 〔467 Item from List〕

〔469〕 End If

〔470〕 End If　▵457

〔471〕 Calculate 〔C2DHours〕 × 60　»

〔472〕 Calculate 〔471 Calculation Result〕 + 〔C2DMinutes〕　»

〔473〕 Set Variable CurrentToDeparture to 〔472 Calculation Result〕

〔474〕 End If　▵446

〔475〕 Get 〔TravelMethod〕 Time 　➔ DepartureToDestination　»
• GetDirectionsCustomLocation: 〔NotesAddressString〕
• Destination: 〔Repeat Item’s Location〕

〔476〕 Set Variable TravelTimeString to 〔475 DepartureToDestination〕

〔477〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　» 478 480 482 487 494
• MatchTextCaseSensitive: false

〔478〕 Count Items in 〔477 C2DMatches〕　»

〔479〕 If 〔478 Count〕 > 1

〔480〕 Get First Item from List 〔477 C2DMatches〕　»

〔481〕 Set Variable C2DHours to 〔480 Item from List〕

〔482〕 Get Last Item from List 〔477 C2DMatches〕　»

〔483〕 Set Variable C2DMinutes to 〔482 Item from List〕

〔484〕 Otherwise

〔485〕 Match Text hour(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔486〕 If 〔485 C2DMatches’s text〕 has any value

〔487〕 Get First Item from List 〔477 C2DMatches〕　»

〔488〕 Set Variable C2DHours to 〔487 Item from List〕

〔489〕 Number 0　»

〔490〕 Set Variable C2DMinutes to 〔489 Number〕

〔491〕 Otherwise

〔492〕 Number 0　»

〔493〕 Set Variable C2DHours to 〔492 Number〕

〔494〕 Get First Item from List 〔477 C2DMatches〕　»

〔495〕 Set Variable C2DMinutes to 〔494 Item from List〕

〔496〕 End If

〔497〕 End If　▵484

〔498〕 Calculate 〔C2DHours〕 × 60　»

〔499〕 Calculate 〔498 Calculation Result〕 + 〔C2DMinutes〕　»

〔500〕 Calculate 〔499 Calculation Result〕 + 〔CurrentToDeparture〕　»

〔501〕 Set Variable TravelTime to 〔500 Calculation Result〕

〔502〕 Otherwise　▵432

〔503〕 Comment
CALENDER EVENT NOTES IS BLANK

〔504〕 Get Dictionary from 〔HomeAddress〕 　➔ home_address_dictionary　» 505 506 507 508 509

〔505〕 Get Dictionary Value for street in 〔504 home_address_dictionary〕 　➔ HomeStreet　» 510 512

〔506〕 Get Dictionary Value for city in 〔504 home_address_dictionary〕 　➔ HomeCity　» 510 512

〔507〕 Get Dictionary Value for state in 〔504 home_address_dictionary〕 　➔ HomeState　» 510 512

〔508〕 Get Dictionary Value for country in 〔504 home_address_dictionary〕 　➔ HomeCountry　» 510 512

〔509〕 Get Dictionary Value for postcode in 〔504 home_address_dictionary〕 　➔ HomePostcode　» 510 512

〔510〕 If All are true　〔505 HomeStreet〕 has any value　〔506 HomeCity〕 has any value　〔507 HomeState〕 has any value　〔508 HomeCountry〕 has any value　〔509 HomePostcode〕 has any value

〔511〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED

〔512〕 If All are true　〔431 Current Location’s Street〕 is 〔505 HomeStreet〕　〔431 Current Location’s City〕 is 〔506 HomeCity〕　〔431 Current Location’s State〕 is 〔507 HomeState〕　〔431 Current Location’s Country〕 is 〔508 HomeCountry〕　〔431 Current Location’s ZIP Code〕 is 〔509 HomePostcode〕

〔513〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED -> HOME ADDRESS IS THE SAME WITH CURRENT LOCATION

〔514〕 Number 0　»

〔515〕 Set Variable CurrentToDeparture to 〔514 Number〕

〔516〕 Otherwise

〔517〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED -> HOME ADDRESS IS NOT THE SAME WITH CURRENT LOCATION

〔518〕 Get 〔TravelMethod〕 Time　»
• Destination: 〔HomeAddress〕

〔519〕 Set Variable TravelTimeString to 〔518 Travel Time〕

〔520〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　» 521 523 525 530 537
• MatchTextCaseSensitive: false

〔521〕 Count Items in 〔520 C2DMatches〕　»

〔522〕 If 〔521 Count〕 > 1

〔523〕 Get First Item from List 〔520 C2DMatches〕　»

〔524〕 Set Variable C2DHours to 〔523 Item from List〕

〔525〕 Get Last Item from List 〔520 C2DMatches〕　»

〔526〕 Set Variable C2DMinutes to 〔525 Item from List〕

〔527〕 Otherwise

〔528〕 Match Text hour(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔529〕 If 〔528 C2DMatches’s text〕 has any value

〔530〕 Get First Item from List 〔520 C2DMatches〕　»

〔531〕 Set Variable C2DHours to 〔530 Item from List〕

〔532〕 Number 0　»

〔533〕 Set Variable C2DMinutes to 〔532 Number〕

〔534〕 Otherwise

〔535〕 Number 0　»

〔536〕 Set Variable C2DHours to 〔535 Number〕

〔537〕 Get First Item from List 〔520 C2DMatches〕　»

〔538〕 Set Variable C2DMinutes to 〔537 Item from List〕

〔539〕 End If

〔540〕 End If　▵527

〔541〕 Calculate 〔C2DHours〕 × 60　»

〔542〕 Calculate 〔541 Calculation Result〕 + 〔C2DMinutes〕　»

〔543〕 Set Variable CurrentToDeparture to 〔542 Calculation Result〕

〔544〕 End If　▵516

〔545〕 Get 〔TravelMethod〕 Time 　➔ DepartureToDestination　»
• GetDirectionsCustomLocation: 〔HomeAddress〕
• Destination: 〔Repeat Item’s Location〕

〔546〕 Set Variable TravelTimeString to 〔545 DepartureToDestination〕

〔547〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　» 548 550 552 557 564
• MatchTextCaseSensitive: false

〔548〕 Count Items in 〔547 C2DMatches〕　»

〔549〕 If 〔548 Count〕 > 1

〔550〕 Get First Item from List 〔547 C2DMatches〕　»

〔551〕 Set Variable C2DHours to 〔550 Item from List〕

〔552〕 Get Last Item from List 〔547 C2DMatches〕　»

〔553〕 Set Variable C2DMinutes to 〔552 Item from List〕

〔554〕 Otherwise

〔555〕 Match Text hour(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔556〕 If 〔555 C2DMatches’s text〕 has any value

〔557〕 Get First Item from List 〔547 C2DMatches〕　»

〔558〕 Set Variable C2DHours to 〔557 Item from List〕

〔559〕 Number 0　»

〔560〕 Set Variable C2DMinutes to 〔559 Number〕

〔561〕 Otherwise

〔562〕 Number 0　»

〔563〕 Set Variable C2DHours to 〔562 Number〕

〔564〕 Get First Item from List 〔547 C2DMatches〕　»

〔565〕 Set Variable C2DMinutes to 〔564 Item from List〕

〔566〕 End If

〔567〕 End If　▵554

〔568〕 Calculate 〔C2DHours〕 × 60　»

〔569〕 Calculate 〔568 Calculation Result〕 + 〔C2DMinutes〕　»

〔570〕 Calculate 〔569 Calculation Result〕 + 〔CurrentToDeparture〕　»

〔571〕 Set Variable TravelTime to 〔570 Calculation Result〕

〔572〕 Otherwise　▵510

〔573〕 Text
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS NOT MAINTAINED

〔574〕 Get 〔TravelMethod〕 Time　»
• Destination: 〔Repeat Item’s Location〕

〔575〕 Set Variable TravelTimeString to 〔574 Travel Time〕

〔576〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　» 577 579 581 586 593
• MatchTextCaseSensitive: false

〔577〕 Count Items in 〔576 C2DMatches〕　»

〔578〕 If 〔577 Count〕 > 1

〔579〕 Get First Item from List 〔576 C2DMatches〕　»

〔580〕 Set Variable C2DHours to 〔579 Item from List〕

〔581〕 Get Last Item from List 〔576 C2DMatches〕　»

〔582〕 Set Variable C2DMinutes to 〔581 Item from List〕

〔583〕 Otherwise

〔584〕 Match Text hour(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔585〕 If 〔584 C2DMatches’s text〕 has any value

〔586〕 Get First Item from List 〔576 C2DMatches〕　»

〔587〕 Set Variable C2DHours to 〔586 Item from List〕

〔588〕 Number 0　»

〔589〕 Set Variable C2DMinutes to 〔588 Number〕

〔590〕 Otherwise

〔591〕 Number 0　»

〔592〕 Set Variable C2DHours to 〔591 Number〕

〔593〕 Get First Item from List 〔576 C2DMatches〕　»

〔594〕 Set Variable C2DMinutes to 〔593 Item from List〕

〔595〕 End If

〔596〕 End If　▵583

〔597〕 Calculate 〔C2DHours〕 × 60　»

〔598〕 Calculate 〔597 Calculation Result〕 + 〔C2DMinutes〕　»

〔599〕 Set Variable TravelTime to 〔598 Calculation Result〕

〔600〕 End If　▵572

〔601〕 End If　▵502

〔602〕 Otherwise　▵430

〔603〕 Number 0　»

〔604〕 Set Variable TravelTime to 〔603 Number〕

〔605〕 End If

〔606〕 Find Alarm All Alarm　» 607 608
• ContentItemFilter: {  "Value": {
      "WFActionParameterFilterPrefix": 1,
      "WFActionParameterFilterTemplates": [],
      "WFContentPredicateBoundedDate": false
   },
   "WFSerializationType": "WFContentPredicateTableTemplate"
}

〔607〕 If 〔606 Alarms〕 has any value

〔608〕 Repeat[2] with Each in 〔606 Alarms〕

〔609〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ AlarmLabelDictionary　» 610 611 613

〔610〕 Get Dictionary Value for Event in 〔609 AlarmLabelDictionary〕 　➔ Event　» 615

〔611〕 Get Dictionary Value for From in 〔609 AlarmLabelDictionary〕 　➔ From　»

〔612〕 Get Dates from 〔611 From〕 　➔ FromDate　» 615

〔613〕 Get Dictionary Value for To in 〔609 AlarmLabelDictionary〕 　➔ To　»

〔614〕 Get Dates from 〔613 To〕 　➔ ToDate　»

〔615〕 If All are true　〔610 Event’s Name〕 is 〔Repeat Item〕　〔612 FromDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔Repeat Item’s Start Date{"Date Style":"Custom","WFDateFormat":"HH:mm","WFISO8601IncludeTime":false}〕　〔614 ToDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔Repeat Item’s End Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕

〔616〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔617〕 End If

〔618〕 End Repeat[2] with Each　▵608

〔619〕 End If　▵607

〔620〕 Calculate 〔TravelTime〕 + 〔Extra_Time〕　»

〔621〕 Adjust Subtract Date 〔Repeat Item’s Start Date〕 　➔ Supposed_Alarm_Time　» 623 625 628 635 636
• Duration: 〔620 Calculation Result〕 min

〔622〕 Date Current Date　»

〔623〕 If Any are true　〔621 Supposed_Alarm_Time〕 < 〔622 Date〕　〔621 Supposed_Alarm_Time〕 is 〔622 Date〕

〔624〕 If 〔Repeat Item’s Location〕 has any value

〔625〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 at 〔Repeat Item’s Location〕  which  was supposed to get ready at 〔621 Supposed_Alarm_Time〕. Please check.

〔626〕 Set Variable Text to 〔625 Text〕

〔627〕 Otherwise

〔628〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 which  was supposed to get ready at 〔621 Supposed_Alarm_Time〕. Please check.

〔629〕 Set Variable Text to 〔628 Text〕

〔630〕 End If

〔631〕 Show Alert 〔Text〕

〔632〕 Show Notification 〔Text〕

〔633〕 Speak Text
• Text: 〔Text〕

〔634〕 Otherwise　▵623

〔635〕 Dictionary　»
{  "Event": "〔Repeat Item〕",
   "From": "〔Repeat Item’s Start Date〕",
   "To": "〔Repeat Item’s End Date〕",
   "Location": "〔Repeat Item’s Location〕",
   "AlarmTime": "〔621 Supposed_Alarm_Time〕"
}

〔636〕 Add Alarm for 〔621 Supposed_Alarm_Time〕 called 〔635 Dictionary〕

〔637〕 End If

〔638〕 End Repeat with Each　▵429

〔639〕 Number 3　»

〔640〕 Repeat 〔639 Number〕 Times

〔641〕 Repeat[2] with Each in 〔426 Calendar Events〕

〔642〕 Format Date 〔Repeat Item 2’s Start Date〕　» 646 649 654 657
• DateFormatStyle: None

〔643〕 Format Date 〔Repeat Item 2’s End Date〕　» 646 649 654 657
• DateFormatStyle: None

〔644〕 If 〔Repeat Item 2’s Location〕 has any value

〔645〕 If 〔428 Count〕 > 1

〔646〕 Text　»
Event 〔Repeat Index 2〕 〔Repeat Item 2〕 from 〔642 Formatted Date〕 to 〔643 Formatted Date〕 at 〔Repeat Item 2’s Location〕

〔647〕 Set Variable Text to 〔646 Text〕

〔648〕 Otherwise

〔649〕 Text　»
Event  〔Repeat Item 2〕 from 〔642 Formatted Date〕 to 〔643 Formatted Date〕 at 〔Repeat Item 2’s Location〕

〔650〕 Set Variable Text to 〔649 Text〕

〔651〕 End If

〔652〕 Otherwise　▵644

〔653〕 If 〔428 Count〕 > 1

〔654〕 Text　»
Event 〔Repeat Index 2〕 〔Repeat Item 2〕 from 〔642 Formatted Date〕 to 〔643 Formatted Date〕

〔655〕 Set Variable Text to 〔654 Text〕

〔656〕 Otherwise

〔657〕 Text　»
Event  〔Repeat Item 2〕 from 〔642 Formatted Date〕 to 〔643 Formatted Date〕

〔658〕 Set Variable Text to 〔657 Text〕

〔659〕 End If

〔660〕 End If　▵652

〔661〕 Speak Text
• Text: 〔Text〕

〔662〕 Wait 1 seconds

〔663〕 End Repeat[2] with Each　▵641

〔664〕 End Repeat Times　▵640

〔665〕 End If　▵427

〔666〕 End If　▵415

〔667〕 If 〔Shortcut Input as Number〕 is 3

〔668〕 Comment
Alarm Activation Handler
Triggered by alarm events - manages notification flow

〔669〕 Dictionary　»
{  "stop": "no" }

〔670〕 Text　»
〔669 Dictionary〕

〔671〕 Save File 〔670 Text〕
• AskWhereToSave: false
• SaveFileOverwrite: true
• FileDestinationPath: Smart Calendar Reminder/stopflag.txt

〔672〕 Date Current Date　» 691

〔673〕 Find Alarm All Alarm　» 674 683
• ContentItemFilter: {  "Value": {
      "WFActionParameterFilterPrefix": 1,
      "WFActionParameterFilterTemplates": [],
      "WFContentPredicateBoundedDate": false
   },
   "WFSerializationType": "WFContentPredicateTableTemplate"
}

〔674〕 If 〔673 Alarms〕 has any value

〔675〕 Number 10000　» 676 677

〔676〕 Repeat 〔675 Number〕 Times

〔677〕 Get File at Path Smart Calendar Reminder/stopflag.txt from Folder　»
• FileErrorIfNotFound: false
• File: 〔675 Number〕

〔678〕 Get Dictionary from 〔677 File〕　»

〔679〕 Get Dictionary Value for stop in 〔678 Dictionary〕　»

〔680〕 If 〔679 Dictionary Value’s Name〕 is yes

〔681〕 Stop This Shortcut

〔682〕 End If

〔683〕 Repeat[2] with Each in 〔673 Alarms〕

〔684〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ alarm_label_dictionary　» 685 687 689 694 698 701

〔685〕 Get Dictionary Value for From in 〔684 alarm_label_dictionary〕　»

〔686〕 Get Dates from 〔685 Dictionary Value〕 　➔ From　» 692

〔687〕 Get Dictionary Value for To in 〔684 alarm_label_dictionary〕　»

〔688〕 Get Dates from 〔687 Dictionary Value〕 　➔ To　» 693

〔689〕 Get Dictionary Value for AlarmTime in 〔684 alarm_label_dictionary〕　»

〔690〕 Get Dates from 〔689 Dictionary Value〕 　➔ AlarmTime　»

〔691〕 If All are true　〔690 AlarmTime{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH"}〕 is 〔672 Date{"Date Style":"Custom","WFDateFormat":"HH","WFISO8601IncludeTime":false}〕　〔690 AlarmTime{"Date Style":"Custom","WFDateFormat":"mm","WFISO8601IncludeTime":false}〕 is 〔672 Date{"Date Style":"Custom","WFDateFormat":"mm","WFISO8601IncludeTime":false}〕

〔692〕 Format Date 〔686 From’s Time〕　» 698 701

〔693〕 Format Date 〔688 To’s Time〕　» 698 701

〔694〕 Get Dictionary Value for Location in 〔684 alarm_label_dictionary〕　»

〔695〕 Text　»
〔694 Dictionary Value〕

〔696〕 Count Characters in 〔695 Text〕　»

〔697〕 If 〔696 Count〕 > • ConditionalActionString
""• NumberValue
0

〔698〕 Text　»
Prepare for 〔684 alarm_label_dictionary.Event〕 from 〔692 Formatted Date〕 to 〔693 Formatted Date〕 at 〔684 alarm_label_dictionary.Location〕

〔699〕 Set Variable Text to 〔698 Text〕

〔700〕 Otherwise

〔701〕 Text　»
Prepare for 〔684 alarm_label_dictionary.Event〕 from 〔692 Formatted Date〕 to 〔693 Formatted Date〕

〔702〕 Set Variable Text to 〔701 Text〕

〔703〕 End If

〔704〕 Speak Text
• Text: 〔Text〕

〔705〕 End If　▵691

〔706〕 End Repeat[2] with Each　▵683

〔707〕 End Repeat Times　▵676

〔708〕 End If　▵674

〔709〕 End If　▵667

〔710〕 If 〔Shortcut Input as Number〕 is 4

〔711〕 Comment
input case 4:
Notification Interrupt System
Stop protocol for voice announcements when any alarm is stopped.

〔712〕 Dictionary　»
{  "stop": "yes" }

〔713〕 Text　»
〔712 Dictionary〕

〔714〕 Save File 〔713 Text〕
• AskWhereToSave: false
• SaveFileOverwrite: true
• FileDestinationPath: Smart Calendar Reminder/stopflag.txt

〔715〕 End If

〔716〕 If 〔Shortcut Input as Number〕 is 5

〔717〕 Comment
*Revolutionizing event management by integrating calendar data with intelligent automation:

Voice announcements for upcoming events

Dynamic alarm calculation (travel + prep time)

Calendar-driven scheduling system
Eliminates manual reminders and ensures perfect timing synchronization*

〔718〕 Get File at Path Smart Calendar Reminder/aboutme.txt from Folder　»
• FileErrorIfNotFound: false

〔719〕 Get Dictionary from 〔718 File〕　» 720 723 724

〔720〕 Get Dictionary from 〔719 Dictionary.HomeAddress〕　»

〔721〕 Text　»
〔720 Dictionary.street〕 〔720 Dictionary.city〕 〔720 Dictionary.state〕 〔720 Dictionary.postcode〕 〔720 Dictionary.country〕\u{space}

〔722〕 Set Variable HomeAddress to 〔721 Text〕

〔723〕 Set Variable TravelMethod to 〔719 Dictionary.TravelMethod〕

〔724〕 Get Dictionary Value for ExtraTime in 〔719 Dictionary〕　»

〔725〕 Get Numbers from 〔724 Dictionary Value〕　»

〔726〕 Set Variable ExtraTime to 〔725 Numbers〕

〔727〕 Find Calendar Events All Calendar Events where　» 728 729
• ContentItemSortProperty: Start Date
• ContentItemSortOrder: Oldest First
• ContentItemFilter: • All the following are true
Start Date is in the next 1 months
Is Not All Day
Canceled is {"Bool":false}

〔728〕 If 〔727 Calendar Events〕 has any value

〔729〕 Repeat with Each in 〔727 Calendar Events〕

〔730〕 If 〔Repeat Item’s Location〕 has any value

〔731〕 Get Current Location　» 743 749 813
• Accuracy: Best

〔732〕 Comment
*To specify event-specific departure locations:

1. Create calendar event notes with JSON structure:
{
“Street”: “your departure street”,
“City”: “your departure city”,
“State”: “your departure state”,
“Country”: “your departure country”,
“Postcode”: “your departure postcode”
}
2. System prioritizes these over default locations*

〔733〕 If All are true　〔Repeat Item’s Notes〕 has any value　〔Repeat Item’s Notes〕 begins with {　〔Repeat Item’s Notes〕 ends with }

〔734〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY

〔735〕 Get Dictionary from 〔Repeat Item’s Notes〕 　➔ Notes Address Dictionary　» 736 737 738 739 740

〔736〕 Set Variable Calendar_Notes_Street to 〔735 Notes Address Dictionary.Street〕

〔737〕 Set Variable Calendar_Notes_City to 〔735 Notes Address Dictionary.City〕

〔738〕 Set Variable Calendar_Notes_State to 〔735 Notes Address Dictionary.State〕

〔739〕 Set Variable Calendar_Notes_Region to 〔735 Notes Address Dictionary.Country〕

〔740〕 Set Variable Calendar_Notes_ZIP_Code to 〔735 Notes Address Dictionary.Postcode〕

〔741〕 Text　»
〔Calendar_Notes_Street〕 〔Calendar_Notes_City〕 〔Calendar_Notes_State〕 〔Calendar_Notes_ZIP_Code〕 〔Calendar_Notes_Region〕

〔742〕 Set Variable NotesAddressString to 〔741 Text〕

〔743〕 If All are true　〔731 Current Location’s Street〕 is 〔Calendar_Notes_Street〕　〔731 Current Location’s City〕 is 〔Calendar_Notes_City〕　〔731 Current Location’s State〕 is 〔Calendar_Notes_State〕　〔731 Current Location’s Country〕 is 〔Calendar_Notes_Region〕　〔731 Current Location’s ZIP Code〕 is 〔Calendar_Notes_ZIP_Code〕

〔744〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY -> CALENDAR EVENT ADDRESS IS THE SAME WITH CURRENT LOCATION

〔745〕 Number 0　»

〔746〕 Set Variable CurrentToDeparture to 〔745 Number〕

〔747〕 Otherwise

〔748〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY -> CALENDAR EVENT ADDRESS IS NOT THE SAME WITH CURRENT LOCATION

〔749〕 Get 〔TravelMethod〕 Time　»
• GetDirectionsCustomLocation: 〔731 Current Location〕
• Destination: 〔NotesAddressString〕

〔750〕 Set Variable TravelTimeString to 〔749 Travel Time〕

〔751〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　» 752 754 756 761 768
• MatchTextCaseSensitive: false

〔752〕 Count Items in 〔751 C2DMatches〕　»

〔753〕 If 〔752 Count〕 > 1

〔754〕 Get First Item from List 〔751 C2DMatches〕　»

〔755〕 Set Variable C2DHours to 〔754 Item from List〕

〔756〕 Get Last Item from List 〔751 C2DMatches〕　»

〔757〕 Set Variable C2DMinutes to 〔756 Item from List〕

〔758〕 Otherwise

〔759〕 Match Text hour(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔760〕 If 〔759 C2DMatches’s text〕 has any value

〔761〕 Get First Item from List 〔751 C2DMatches〕　»

〔762〕 Set Variable C2DHours to 〔761 Item from List〕

〔763〕 Number 0　»

〔764〕 Set Variable C2DMinutes to 〔763 Number〕

〔765〕 Otherwise

〔766〕 Number 0　»

〔767〕 Set Variable C2DHours to 〔766 Number〕

〔768〕 Get First Item from List 〔751 C2DMatches〕　»

〔769〕 Set Variable C2DMinutes to 〔768 Item from List〕

〔770〕 End If

〔771〕 End If　▵758

〔772〕 Calculate 〔C2DHours〕 × 60　»

〔773〕 Calculate 〔772 Calculation Result〕 + 〔C2DMinutes〕　»

〔774〕 Set Variable CurrentToDeparture to 〔773 Calculation Result〕

〔775〕 End If　▵747

〔776〕 Get 〔TravelMethod〕 Time 　➔ DepartureToDestination　»
• GetDirectionsCustomLocation: 〔NotesAddressString〕
• Destination: 〔Repeat Item’s Location〕

〔777〕 Set Variable TravelTimeString to 〔776 DepartureToDestination〕

〔778〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　» 779 781 783 788 795
• MatchTextCaseSensitive: false

〔779〕 Count Items in 〔778 C2DMatches〕　»

〔780〕 If 〔779 Count〕 > 1

〔781〕 Get First Item from List 〔778 C2DMatches〕　»

〔782〕 Set Variable C2DHours to 〔781 Item from List〕

〔783〕 Get Last Item from List 〔778 C2DMatches〕　»

〔784〕 Set Variable C2DMinutes to 〔783 Item from List〕

〔785〕 Otherwise

〔786〕 Match Text hour(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔787〕 If 〔786 C2DMatches’s text〕 has any value

〔788〕 Get First Item from List 〔778 C2DMatches〕　»

〔789〕 Set Variable C2DHours to 〔788 Item from List〕

〔790〕 Number 0　»

〔791〕 Set Variable C2DMinutes to 〔790 Number〕

〔792〕 Otherwise

〔793〕 Number 0　»

〔794〕 Set Variable C2DHours to 〔793 Number〕

〔795〕 Get First Item from List 〔778 C2DMatches〕　»

〔796〕 Set Variable C2DMinutes to 〔795 Item from List〕

〔797〕 End If

〔798〕 End If　▵785

〔799〕 Calculate 〔C2DHours〕 × 60　»

〔800〕 Calculate 〔799 Calculation Result〕 + 〔C2DMinutes〕　»

〔801〕 Calculate 〔800 Calculation Result〕 + 〔CurrentToDeparture〕　»

〔802〕 Set Variable TravelTime to 〔801 Calculation Result〕

〔803〕 Otherwise　▵733

〔804〕 Comment
CALENDER EVENT NOTES IS BLANK

〔805〕 Get Dictionary from 〔HomeAddress〕 　➔ Home Address Dictionary　» 806 807 808 809 810

〔806〕 Get Dictionary Value for street in 〔805 Home Address Dictionary〕 　➔ home_Street　» 811 813

〔807〕 Get Dictionary Value for city in 〔805 Home Address Dictionary〕 　➔ home_City　» 811 813

〔808〕 Get Dictionary Value for state in 〔805 Home Address Dictionary〕 　➔ home_State　» 811 813

〔809〕 Get Dictionary Value for country in 〔805 Home Address Dictionary〕 　➔ home_Country　» 811 813

〔810〕 Get Dictionary Value for postcode in 〔805 Home Address Dictionary〕 　➔ home_Postcode　» 811 813

〔811〕 If All are true　〔806 home_Street〕 has any value　〔807 home_City〕 has any value　〔808 home_State〕 has any value　〔809 home_Country〕 has any value　〔810 home_Postcode〕 has any value

〔812〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED

〔813〕 If All are true　〔731 Current Location’s Street〕 is 〔806 home_Street〕　〔731 Current Location’s City〕 is 〔807 home_City〕　〔731 Current Location’s State〕 is 〔808 home_State〕　〔731 Current Location’s Country〕 is 〔809 home_Country〕　〔731 Current Location’s ZIP Code〕 is 〔810 home_Postcode〕

〔814〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED -> HOME ADDRESS IS THE SAME WITH CURRENT LOCATION

〔815〕 Number 0　»

〔816〕 Set Variable CurrentToDeparture to 〔815 Number〕

〔817〕 Otherwise

〔818〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED -> HOME ADDRESS IS NOT THE SAME WITH CURRENT LOCATION

〔819〕 Get 〔TravelMethod〕 Time　»
• Destination: 〔HomeAddress〕

〔820〕 Set Variable TravelTimeString to 〔819 Travel Time〕

〔821〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　» 822 824 826 831 838
• MatchTextCaseSensitive: false

〔822〕 Count Items in 〔821 C2DMatches〕　»

〔823〕 If 〔822 Count〕 > 1

〔824〕 Get First Item from List 〔821 C2DMatches〕　»

〔825〕 Set Variable C2DHours to 〔824 Item from List〕

〔826〕 Get Last Item from List 〔821 C2DMatches〕　»

〔827〕 Set Variable C2DMinutes to 〔826 Item from List〕

〔828〕 Otherwise

〔829〕 Match Text hour(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔830〕 If 〔829 C2DMatches’s text〕 has any value

〔831〕 Get First Item from List 〔821 C2DMatches〕　»

〔832〕 Set Variable C2DHours to 〔831 Item from List〕

〔833〕 Number 0　»

〔834〕 Set Variable C2DMinutes to 〔833 Number〕

〔835〕 Otherwise

〔836〕 Number 0　»

〔837〕 Set Variable C2DHours to 〔836 Number〕

〔838〕 Get First Item from List 〔821 C2DMatches〕　»

〔839〕 Set Variable C2DMinutes to 〔838 Item from List〕

〔840〕 End If

〔841〕 End If　▵828

〔842〕 Calculate 〔C2DHours〕 × 60　»

〔843〕 Calculate 〔842 Calculation Result〕 + 〔C2DMinutes〕　»

〔844〕 Set Variable CurrentToDeparture to 〔843 Calculation Result〕

〔845〕 End If　▵817

〔846〕 Get 〔TravelMethod〕 Time 　➔ DepartureToDestination　»
• GetDirectionsCustomLocation: 〔HomeAddress〕
• Destination: 〔Repeat Item’s Location〕

〔847〕 Set Variable TravelTimeString to 〔846 DepartureToDestination〕

〔848〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　» 849 851 853 858 865
• MatchTextCaseSensitive: false

〔849〕 Count Items in 〔848 C2DMatches〕　»

〔850〕 If 〔849 Count〕 > 1

〔851〕 Get First Item from List 〔848 C2DMatches〕　»

〔852〕 Set Variable C2DHours to 〔851 Item from List〕

〔853〕 Get Last Item from List 〔848 C2DMatches〕　»

〔854〕 Set Variable C2DMinutes to 〔853 Item from List〕

〔855〕 Otherwise

〔856〕 Match Text hour(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔857〕 If 〔856 C2DMatches’s text〕 has any value

〔858〕 Get First Item from List 〔848 C2DMatches〕　»

〔859〕 Set Variable C2DHours to 〔858 Item from List〕

〔860〕 Number 0　»

〔861〕 Set Variable C2DMinutes to 〔860 Number〕

〔862〕 Otherwise

〔863〕 Number 0　»

〔864〕 Set Variable C2DHours to 〔863 Number〕

〔865〕 Get First Item from List 〔848 C2DMatches〕　»

〔866〕 Set Variable C2DMinutes to 〔865 Item from List〕

〔867〕 End If

〔868〕 End If　▵855

〔869〕 Calculate 〔C2DHours〕 × 60　»

〔870〕 Calculate 〔869 Calculation Result〕 + 〔C2DMinutes〕　»

〔871〕 Calculate 〔870 Calculation Result〕 + 〔CurrentToDeparture〕　»

〔872〕 Set Variable TravelTime to 〔871 Calculation Result〕

〔873〕 Otherwise　▵811

〔874〕 Text
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS NOT MAINTAINED

〔875〕 Get 〔TravelMethod〕 Time　»
• Destination: 〔Repeat Item’s Location〕

〔876〕 Set Variable TravelTimeString to 〔875 Travel Time〕

〔877〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　» 878 880 882 887 894
• MatchTextCaseSensitive: false

〔878〕 Count Items in 〔877 C2DMatches〕　»

〔879〕 If 〔878 Count〕 > 1

〔880〕 Get First Item from List 〔877 C2DMatches〕　»

〔881〕 Set Variable C2DHours to 〔880 Item from List〕

〔882〕 Get Last Item from List 〔877 C2DMatches〕　»

〔883〕 Set Variable C2DMinutes to 〔882 Item from List〕

〔884〕 Otherwise

〔885〕 Match Text hour(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔886〕 If 〔885 C2DMatches’s text〕 has any value

〔887〕 Get First Item from List 〔877 C2DMatches〕　»

〔888〕 Set Variable C2DHours to 〔887 Item from List〕

〔889〕 Number 0　»

〔890〕 Set Variable C2DMinutes to 〔889 Number〕

〔891〕 Otherwise

〔892〕 Number 0　»

〔893〕 Set Variable C2DHours to 〔892 Number〕

〔894〕 Get First Item from List 〔877 C2DMatches〕　»

〔895〕 Set Variable C2DMinutes to 〔894 Item from List〕

〔896〕 End If

〔897〕 End If　▵884

〔898〕 Calculate 〔C2DHours〕 × 60　»

〔899〕 Calculate 〔898 Calculation Result〕 + 〔C2DMinutes〕　»

〔900〕 Set Variable TravelTime to 〔899 Calculation Result〕

〔901〕 End If　▵873

〔902〕 End If　▵803

〔903〕 Otherwise　▵730

〔904〕 Number 0　»

〔905〕 Set Variable TravelTime to 〔904 Number〕

〔906〕 End If

〔907〕 Calculate 〔TravelTime〕 + 〔ExtraTime〕　»

〔908〕 Adjust Subtract Date 〔Repeat Item’s Start Date〕 　➔ Supposed Alarm Time　» 909 912 915 918 925 941 943 944 962 967 970
• Duration: 〔907 Calculation Result〕 min

〔909〕 Dictionary 　➔ Alarm Label Dictionary　» 941 946 962
{  "Event": "〔Repeat Item〕",
   "From": "〔Repeat Item’s Start Date〕",
   "To": "〔Repeat Item’s End Date〕",
   "Location": "〔Repeat Item’s Location〕",
   "AlarmTime": "〔908 Supposed Alarm Time〕"
}

〔910〕 Date Current Date 　➔ Current Date　» 911 912 943

〔911〕 Adjust Add Date 〔910 Current Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"dd MMM yyyy"}〕 　➔ 1 day after　» 925 926 944 948
• Duration: "1" days

〔912〕 If 〔908 Supposed Alarm Time〕 is 〔910 Current Date〕

〔913〕 Comment
supposed alarm time is exactly 12:00am

〔914〕 If 〔Repeat Item’s Location〕 has any value

〔915〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 at 〔Repeat Item’s Location〕 which  was supposed to get ready at 〔908 Supposed Alarm Time〕. Please check.

〔916〕 Set Variable Text to 〔915 Text〕

〔917〕 Otherwise

〔918〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 which  was supposed to get ready at 〔908 Supposed Alarm Time〕. Please check.

〔919〕 Set Variable Text to 〔918 Text〕

〔920〕 End If

〔921〕 Show Alert 〔Text〕

〔922〕 Show Notification 〔Text〕

〔923〕 Speak Text
• Text: 〔Text〕

〔924〕 Otherwise　▵912

〔925〕 If 〔908 Supposed Alarm Time〕 is 〔911 1 day after〕

〔926〕 Find Alarm 〔911 1 day after〕　» 927 928

〔927〕 If 〔926 Alarms〕 has any value

〔928〕 Repeat[2] with Each in 〔926 Alarms〕

〔929〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ AlarmLabelDictionary　» 930 931 933

〔930〕 Get Dictionary Value for Event in 〔929 AlarmLabelDictionary〕 　➔ Event　» 935

〔931〕 Get Dictionary Value for From in 〔929 AlarmLabelDictionary〕 　➔ From　»

〔932〕 Get Dates from 〔931 From〕 　➔ FromDate　» 935

〔933〕 Get Dictionary Value for To in 〔929 AlarmLabelDictionary〕 　➔ To　»

〔934〕 Get Dates from 〔933 To〕 　➔ ToDate　»

〔935〕 If All are true　〔930 Event’s Name〕 is 〔Repeat Item〕　〔932 FromDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔Repeat Item’s Start Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕　〔934 ToDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is • ConditionalActionString
〔Repeat Item’s End Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕• Date
〔Repeat Item’s End Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕

〔936〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔937〕 End If

〔938〕 End Repeat[2] with Each　▵928

〔939〕 End If　▵927

〔940〕 Comment
since this will be triggered at 12:00 am each day, when the supposed alarm time is 12:00 am in the next day, you can set alarm now

〔941〕 Add Alarm for 〔908 Supposed Alarm Time〕 called 〔909 Alarm Label Dictionary〕

〔942〕 Otherwise　▵925

〔943〕 If 〔908 Supposed Alarm Time〕 > 〔910 Current Date〕

〔944〕 If 〔908 Supposed Alarm Time〕 > 〔911 1 day after〕

〔945〕 Comment
when the time is other than 12:00 am of then next day, you cannot set alarm yet. If set, it will be today. For example, triggering time 2025-4-8 12:00 am, the supposed alarm time is 2025-4-9 08:00 am, if you set an alarm at 08:00 at 2025-4-8 12:00 am, it will alarm at 2025-4-8 08:00 am instead. So we need to record the supposed alarm time and trigger next day.

〔946〕 Set Variable Event to 〔909 Alarm Label Dictionary〕

〔947〕 Otherwise

〔948〕 Find Alarm 〔911 1 day after〕　» 949 950
• ContentItemFilter: {  "Value": {
      "WFActionParameterFilterPrefix": 1,
      "WFActionParameterFilterTemplates": [],
      "WFContentPredicateBoundedDate": false
   },
   "WFSerializationType": "WFContentPredicateTableTemplate"
}

〔949〕 If 〔948 Alarms〕 has any value

〔950〕 Repeat[2] with Each in 〔948 Alarms〕

〔951〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ AlarmLabelDictionary　» 952 953 955

〔952〕 Get Dictionary Value for Event in 〔951 AlarmLabelDictionary〕 　➔ Event　» 957

〔953〕 Get Dictionary Value for From in 〔951 AlarmLabelDictionary〕 　➔ From　»

〔954〕 Get Dates from 〔953 From〕 　➔ FromDate　» 957

〔955〕 Get Dictionary Value for To in 〔951 AlarmLabelDictionary〕 　➔ To　»

〔956〕 Get Dates from 〔955 To〕 　➔ ToDate　»

〔957〕 If All are true　〔952 Event’s Name〕 is 〔Repeat Item〕　〔954 FromDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔Repeat Item’s Start Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕　〔956 ToDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔Repeat Item’s End Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕

〔958〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔959〕 End If

〔960〕 End Repeat[2] with Each　▵950

〔961〕 End If　▵949

〔962〕 Add Alarm for 〔908 Supposed Alarm Time〕 called 〔909 Alarm Label Dictionary〕

〔963〕 End If　▵947

〔964〕 Otherwise　▵943

〔965〕 Comment
the supposed alarm time passed

〔966〕 If 〔Repeat Item’s Location〕 has any value

〔967〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 at 〔Repeat Item’s Location〕 which  was supposed to get ready at 〔908 Supposed Alarm Time〕. Please check.

〔968〕 Set Variable Text to 〔967 Text〕

〔969〕 Otherwise

〔970〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 which  was supposed to get ready at 〔908 Supposed Alarm Time〕. Please check.

〔971〕 Set Variable Text to 〔970 Text〕

〔972〕 End If

〔973〕 Show Alert 〔Text〕

〔974〕 Show Notification 〔Text〕

〔975〕 Speak Text
• Text: 〔Text〕

〔976〕 End If　▵964

〔977〕 End If　▵942

〔978〕 End If　▵924

〔979〕 If 〔Event〕 has any value

〔980〕 Get Dictionary from 〔Event〕　» 993

〔981〕 Text　»

〔982〕 Set Variable TextList to 〔981 Text〕

〔983〕 Add 〔Event〕 to Variable TextList

〔984〕 Get File at Path Smart Calendar Reminder/Future Alarms.txt from Folder　» 985 986
• FileErrorIfNotFound: false

〔985〕 If 〔984 File’s File Size〕 has any value

〔986〕 Split Text 〔984 File〕 by New Lines　»

〔987〕 Repeat[2] with Each in 〔986 Split Text〕

〔988〕 Get Dictionary from 〔Repeat Item 2〕　» 989 990 991 992

〔989〕 Get Dictionary Value for Event in 〔988 Dictionary〕 　➔ Event　» 993

〔990〕 Get Dictionary Value for From in 〔988 Dictionary〕 　➔ From　» 993

〔991〕 Get Dictionary Value for To in 〔988 Dictionary〕 　➔ To　» 993

〔992〕 Get Dictionary Value for Location in 〔988 Dictionary〕 　➔ Location　»

〔993〕 If Any are true　〔989 Event’s Name〕 is not 〔980 Dictionary.Event〕　〔990 From’s Name〕 is not 〔980 Dictionary.From〕　〔991 To’s Name〕 is not 〔980 Dictionary.To〕　〔992 Location’s Name〕 is not 〔980 Dictionary.Location〕

〔994〕 Add 〔Repeat Item 2〕 to Variable TextList

〔995〕 End If

〔996〕 End Repeat[2] with Each　▵987

〔997〕 Combine Text 〔TextList〕 with New Lines　»

〔998〕 Save File 〔997 Combined Text〕
• AskWhereToSave: false
• SaveFileOverwrite: true
• FileDestinationPath: Smart Calendar Reminder/Future Alarms.txt

〔999〕 Otherwise　▵985

〔1000〕 Text　»

〔Event〕

〔1001〕 Save File 〔1000 Text〕
• AskWhereToSave: false
• FileDestinationPath: Smart Calendar Reminder/Future Alarms.txt

〔1002〕 End If

〔1003〕 End If　▵979

〔1004〕 End Repeat with Each　▵729

〔1005〕 End If　▵728

〔1006〕 Get File at Path Smart Calendar Reminder/Future Alarms.txt from Folder　» 1007 1008
• FileErrorIfNotFound: false

〔1007〕 If 〔1006 File’s File Size〕 has any value

〔1008〕 Split Text 〔1006 File〕 by New Lines　»

〔1009〕 Repeat with Each in 〔1008 Split Text〕

〔1010〕 Get Dictionary from 〔Repeat Item〕　» 1011 1012 1022 1033

〔1011〕 If 〔1010 Dictionary〕 has any value

〔1012〕 Get Dates from 〔1010 Dictionary.AlarmTime〕　» 1013 1014 1033

〔1013〕 If 〔1012 Dates〕 is today

〔1014〕 Find Alarm 〔1012 Dates〕　» 1015 1016
• ContentItemFilter: {  "Value": {
      "WFActionParameterFilterPrefix": 1,
      "WFContentPredicateBoundedDate": false,
      "WFActionParameterFilterTemplates": []
   },
   "WFSerializationType": "WFContentPredicateTableTemplate"
}

〔1015〕 If 〔1014 Alarms〕 has any value

〔1016〕 Repeat[2] with Each in 〔1014 Alarms〕

〔1017〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ Alarm_Label_Dictionary　» 1018 1020 1028

〔1018〕 Get Dictionary Value for From in 〔1017 Alarm_Label_Dictionary〕　»

〔1019〕 Get Dates from 〔1018 Dictionary Value〕 　➔ From_Date　» 1028

〔1020〕 Get Dictionary Value for To in 〔1017 Alarm_Label_Dictionary〕　»

〔1021〕 Get Dates from 〔1020 Dictionary Value〕 　➔ To_Date　» 1028

〔1022〕 Get Dictionary from 〔1010 Dictionary.Event〕 　➔ FutureAlarmLabelDictionary　» 1023 1024 1026

〔1023〕 Get Dictionary Value for Event in 〔1022 FutureAlarmLabelDictionary〕 　➔ Event　» 1028

〔1024〕 Get Dictionary Value for From in 〔1022 FutureAlarmLabelDictionary〕 　➔ From　»

〔1025〕 Get Dates from 〔1024 From〕 　➔ FromDate　» 1028

〔1026〕 Get Dictionary Value for To in 〔1022 FutureAlarmLabelDictionary〕 　➔ To　»

〔1027〕 Get Dates from 〔1026 To〕 　➔ ToDate　»

〔1028〕 If All are true　〔1023 Event’s Name〕 is 〔1017 Alarm_Label_Dictionary.Event〕　〔1025 FromDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔1019 From_Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕　〔1027 ToDate{"Date Style":"Custom","WFDateFormat":"HH:mm","WFISO8601IncludeTime":false}〕 is 〔1021 To_Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕

〔1029〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔1030〕 End If

〔1031〕 End Repeat[2] with Each　▵1016

〔1032〕 End If　▵1015

〔1033〕 Add Alarm for 〔1012 Dates〕 called 〔1010 Dictionary.Event〕

〔1034〕 End If　▵1013

〔1035〕 End If　▵1011

〔1036〕 End Repeat with Each　▵1009

〔1037〕 End If　▵1007

〔1038〕 End If　▵716

〔1039〕 If 〔Shortcut Input as Number〕 is 6

〔1040〕 Comment
*Revolutionizing event management by integrating calendar data with intelligent automation:

Voice announcements for upcoming events

Dynamic alarm calculation (travel + prep time)

Calendar-driven scheduling system
Eliminates manual reminders and ensures perfect timing synchronization*

〔1041〕 Get File at Path Smart Calendar Reminder/aboutme.txt from Folder　»
• FileErrorIfNotFound: false

〔1042〕 Get Dictionary from 〔1041 File〕　» 1043 1046 1047

〔1043〕 Get Dictionary from 〔1042 Dictionary.HomeAddress〕　»

〔1044〕 Text　»
〔1043 Dictionary.street〕 〔1043 Dictionary.city〕 〔1043 Dictionary.state〕 〔1043 Dictionary.postcode〕 〔1043 Dictionary.country〕\u{space}

〔1045〕 Set Variable HomeAddress to 〔1044 Text〕

〔1046〕 Set Variable TravelMethod to 〔1042 Dictionary.TravelMethod〕

〔1047〕 Get Dictionary Value for ExtraTime in 〔1042 Dictionary〕　»

〔1048〕 Get Numbers from 〔1047 Dictionary Value〕　»

〔1049〕 Set Variable ExtraTime to 〔1048 Numbers〕

〔1050〕 Find Calendar Events All Calendar Events where　» 1051 1052
• ContentItemSortProperty: Start Date
• ContentItemSortOrder: Oldest First
• ContentItemFilter: • All the following are true
Start Date is in the next 1 weeks
Is Not All Day
Canceled is {"Bool":false}

〔1051〕 If 〔1050 Calendar Events〕 has any value

〔1052〕 Repeat with Each in 〔1050 Calendar Events〕

〔1053〕 If 〔Repeat Item’s Location〕 has any value

〔1054〕 Get Current Location　» 1066 1072 1136
• Accuracy: Best

〔1055〕 Comment
*To specify event-specific departure locations:

1. Create calendar event notes with JSON structure:
{
“Street”: “your departure street”,
“City”: “your departure city”,
“State”: “your departure state”,
“Country”: “your departure country”,
“Postcode”: “your departure postcode”
}
2. System prioritizes these over default locations*

〔1056〕 If All are true　〔Repeat Item’s Notes〕 has any value　〔Repeat Item’s Notes〕 begins with {　〔Repeat Item’s Notes〕 ends with }

〔1057〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY

〔1058〕 Get Dictionary from 〔Repeat Item’s Notes〕 　➔ Notes Address Dictionary　» 1059 1060 1061 1062 1063

〔1059〕 Set Variable Calendar_Notes_Street to 〔1058 Notes Address Dictionary.Street〕

〔1060〕 Set Variable Calendar_Notes_City to 〔1058 Notes Address Dictionary.City〕

〔1061〕 Set Variable Calendar_Notes_State to 〔1058 Notes Address Dictionary.State〕

〔1062〕 Set Variable Calendar_Notes_Region to 〔1058 Notes Address Dictionary.Country〕

〔1063〕 Set Variable Calendar_Notes_ZIP_Code to 〔1058 Notes Address Dictionary.Postcode〕

〔1064〕 Text　»
〔Calendar_Notes_Street〕 〔Calendar_Notes_City〕 〔Calendar_Notes_State〕 〔Calendar_Notes_ZIP_Code〕 〔Calendar_Notes_Region〕

〔1065〕 Set Variable NotesAddressString to 〔1064 Text〕

〔1066〕 If All are true　〔1054 Current Location’s Street〕 is 〔Calendar_Notes_Street〕　〔1054 Current Location’s City〕 is 〔Calendar_Notes_City〕　〔1054 Current Location’s State〕 is 〔Calendar_Notes_State〕　〔1054 Current Location’s Country〕 is 〔Calendar_Notes_Region〕　〔1054 Current Location’s ZIP Code〕 is 〔Calendar_Notes_ZIP_Code〕

〔1067〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY -> CALENDAR EVENT ADDRESS IS THE SAME WITH CURRENT LOCATION

〔1068〕 Number 0　»

〔1069〕 Set Variable CurrentToDeparture to 〔1068 Number〕

〔1070〕 Otherwise

〔1071〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY -> CALENDAR EVENT ADDRESS IS NOT THE SAME WITH CURRENT LOCATION

〔1072〕 Get 〔TravelMethod〕 Time　»
• GetDirectionsCustomLocation: 〔1054 Current Location〕
• Destination: 〔NotesAddressString〕

〔1073〕 Set Variable TravelTimeString to 〔1072 Travel Time〕

〔1074〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　» 1075 1077 1079 1084 1091
• MatchTextCaseSensitive: false

〔1075〕 Count Items in 〔1074 C2DMatches〕　»

〔1076〕 If 〔1075 Count〕 > 1

〔1077〕 Get First Item from List 〔1074 C2DMatches〕　»

〔1078〕 Set Variable C2DHours to 〔1077 Item from List〕

〔1079〕 Get Last Item from List 〔1074 C2DMatches〕　»

〔1080〕 Set Variable C2DMinutes to 〔1079 Item from List〕

〔1081〕 Otherwise

〔1082〕 Match Text hour(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔1083〕 If 〔1082 C2DMatches’s text〕 has any value

〔1084〕 Get First Item from List 〔1074 C2DMatches〕　»

〔1085〕 Set Variable C2DHours to 〔1084 Item from List〕

〔1086〕 Number 0　»

〔1087〕 Set Variable C2DMinutes to 〔1086 Number〕

〔1088〕 Otherwise

〔1089〕 Number 0　»

〔1090〕 Set Variable C2DHours to 〔1089 Number〕

〔1091〕 Get First Item from List 〔1074 C2DMatches〕　»

〔1092〕 Set Variable C2DMinutes to 〔1091 Item from List〕

〔1093〕 End If

〔1094〕 End If　▵1081

〔1095〕 Calculate 〔C2DHours〕 × 60　»

〔1096〕 Calculate 〔1095 Calculation Result〕 + 〔C2DMinutes〕　»

〔1097〕 Set Variable CurrentToDeparture to 〔1096 Calculation Result〕

〔1098〕 End If　▵1070

〔1099〕 Get 〔TravelMethod〕 Time 　➔ DepartureToDestination　»
• GetDirectionsCustomLocation: 〔NotesAddressString〕
• Destination: 〔Repeat Item’s Location〕

〔1100〕 Set Variable TravelTimeString to 〔1099 DepartureToDestination〕

〔1101〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　» 1102 1104 1106 1111 1118
• MatchTextCaseSensitive: false

〔1102〕 Count Items in 〔1101 C2DMatches〕　»

〔1103〕 If 〔1102 Count〕 > 1

〔1104〕 Get First Item from List 〔1101 C2DMatches〕　»

〔1105〕 Set Variable C2DHours to 〔1104 Item from List〕

〔1106〕 Get Last Item from List 〔1101 C2DMatches〕　»

〔1107〕 Set Variable C2DMinutes to 〔1106 Item from List〕

〔1108〕 Otherwise

〔1109〕 Match Text hour(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔1110〕 If 〔1109 C2DMatches’s text〕 has any value

〔1111〕 Get First Item from List 〔1101 C2DMatches〕　»

〔1112〕 Set Variable C2DHours to 〔1111 Item from List〕

〔1113〕 Number 0　»

〔1114〕 Set Variable C2DMinutes to 〔1113 Number〕

〔1115〕 Otherwise

〔1116〕 Number 0　»

〔1117〕 Set Variable C2DHours to 〔1116 Number〕

〔1118〕 Get First Item from List 〔1101 C2DMatches〕　»

〔1119〕 Set Variable C2DMinutes to 〔1118 Item from List〕

〔1120〕 End If

〔1121〕 End If　▵1108

〔1122〕 Calculate 〔C2DHours〕 × 60　»

〔1123〕 Calculate 〔1122 Calculation Result〕 + 〔C2DMinutes〕　»

〔1124〕 Calculate 〔1123 Calculation Result〕 + 〔CurrentToDeparture〕　»

〔1125〕 Set Variable TravelTime to 〔1124 Calculation Result〕

〔1126〕 Otherwise　▵1056

〔1127〕 Comment
CALENDER EVENT NOTES IS BLANK

〔1128〕 Get Dictionary from 〔HomeAddress〕 　➔ Home Address Dictionary　» 1129 1130 1131 1132 1133

〔1129〕 Get Dictionary Value for street in 〔1128 Home Address Dictionary〕 　➔ home_Street　» 1134 1136

〔1130〕 Get Dictionary Value for city in 〔1128 Home Address Dictionary〕 　➔ home_City　» 1134 1136

〔1131〕 Get Dictionary Value for state in 〔1128 Home Address Dictionary〕 　➔ home_State　» 1134 1136

〔1132〕 Get Dictionary Value for country in 〔1128 Home Address Dictionary〕 　➔ home_Country　» 1134 1136

〔1133〕 Get Dictionary Value for postcode in 〔1128 Home Address Dictionary〕 　➔ home_Postcode　» 1134 1136

〔1134〕 If All are true　〔1129 home_Street〕 has any value　〔1130 home_City〕 has any value　〔1131 home_State〕 has any value　〔1132 home_Country〕 has any value　〔1133 home_Postcode〕 has any value

〔1135〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED

〔1136〕 If All are true　〔1054 Current Location’s Street〕 is 〔1129 home_Street〕　〔1054 Current Location’s City〕 is 〔1130 home_City〕　〔1054 Current Location’s State〕 is 〔1131 home_State〕　〔1054 Current Location’s Country〕 is 〔1132 home_Country〕　〔1054 Current Location’s ZIP Code〕 is 〔1133 home_Postcode〕

〔1137〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED -> HOME ADDRESS IS THE SAME WITH CURRENT LOCATION

〔1138〕 Number 0　»

〔1139〕 Set Variable CurrentToDeparture to 〔1138 Number〕

〔1140〕 Otherwise

〔1141〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED -> HOME ADDRESS IS NOT THE SAME WITH CURRENT LOCATION

〔1142〕 Get 〔TravelMethod〕 Time　»
• Destination: 〔HomeAddress〕

〔1143〕 Set Variable TravelTimeString to 〔1142 Travel Time〕

〔1144〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　» 1145 1147 1149 1154 1161
• MatchTextCaseSensitive: false

〔1145〕 Count Items in 〔1144 C2DMatches〕　»

〔1146〕 If 〔1145 Count〕 > 1

〔1147〕 Get First Item from List 〔1144 C2DMatches〕　»

〔1148〕 Set Variable C2DHours to 〔1147 Item from List〕

〔1149〕 Get Last Item from List 〔1144 C2DMatches〕　»

〔1150〕 Set Variable C2DMinutes to 〔1149 Item from List〕

〔1151〕 Otherwise

〔1152〕 Match Text hour(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔1153〕 If 〔1152 C2DMatches’s text〕 has any value

〔1154〕 Get First Item from List 〔1144 C2DMatches〕　»

〔1155〕 Set Variable C2DHours to 〔1154 Item from List〕

〔1156〕 Number 0　»

〔1157〕 Set Variable C2DMinutes to 〔1156 Number〕

〔1158〕 Otherwise

〔1159〕 Number 0　»

〔1160〕 Set Variable C2DHours to 〔1159 Number〕

〔1161〕 Get First Item from List 〔1144 C2DMatches〕　»

〔1162〕 Set Variable C2DMinutes to 〔1161 Item from List〕

〔1163〕 End If

〔1164〕 End If　▵1151

〔1165〕 Calculate 〔C2DHours〕 × 60　»

〔1166〕 Calculate 〔1165 Calculation Result〕 + 〔C2DMinutes〕　»

〔1167〕 Set Variable CurrentToDeparture to 〔1166 Calculation Result〕

〔1168〕 End If　▵1140

〔1169〕 Get 〔TravelMethod〕 Time 　➔ DepartureToDestination　»
• GetDirectionsCustomLocation: 〔HomeAddress〕
• Destination: 〔Repeat Item’s Location〕

〔1170〕 Set Variable TravelTimeString to 〔1169 DepartureToDestination〕

〔1171〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　» 1172 1174 1176 1181 1188
• MatchTextCaseSensitive: false

〔1172〕 Count Items in 〔1171 C2DMatches〕　»

〔1173〕 If 〔1172 Count〕 > 1

〔1174〕 Get First Item from List 〔1171 C2DMatches〕　»

〔1175〕 Set Variable C2DHours to 〔1174 Item from List〕

〔1176〕 Get Last Item from List 〔1171 C2DMatches〕　»

〔1177〕 Set Variable C2DMinutes to 〔1176 Item from List〕

〔1178〕 Otherwise

〔1179〕 Match Text hour(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔1180〕 If 〔1179 C2DMatches’s text〕 has any value

〔1181〕 Get First Item from List 〔1171 C2DMatches〕　»

〔1182〕 Set Variable C2DHours to 〔1181 Item from List〕

〔1183〕 Number 0　»

〔1184〕 Set Variable C2DMinutes to 〔1183 Number〕

〔1185〕 Otherwise

〔1186〕 Number 0　»

〔1187〕 Set Variable C2DHours to 〔1186 Number〕

〔1188〕 Get First Item from List 〔1171 C2DMatches〕　»

〔1189〕 Set Variable C2DMinutes to 〔1188 Item from List〕

〔1190〕 End If

〔1191〕 End If　▵1178

〔1192〕 Calculate 〔C2DHours〕 × 60　»

〔1193〕 Calculate 〔1192 Calculation Result〕 + 〔C2DMinutes〕　»

〔1194〕 Calculate 〔1193 Calculation Result〕 + 〔CurrentToDeparture〕　»

〔1195〕 Set Variable TravelTime to 〔1194 Calculation Result〕

〔1196〕 Otherwise　▵1134

〔1197〕 Text
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS NOT MAINTAINED

〔1198〕 Get 〔TravelMethod〕 Time　»
• Destination: 〔Repeat Item’s Location〕

〔1199〕 Set Variable TravelTimeString to 〔1198 Travel Time〕

〔1200〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　» 1201 1203 1205 1210 1217
• MatchTextCaseSensitive: false

〔1201〕 Count Items in 〔1200 C2DMatches〕　»

〔1202〕 If 〔1201 Count〕 > 1

〔1203〕 Get First Item from List 〔1200 C2DMatches〕　»

〔1204〕 Set Variable C2DHours to 〔1203 Item from List〕

〔1205〕 Get Last Item from List 〔1200 C2DMatches〕　»

〔1206〕 Set Variable C2DMinutes to 〔1205 Item from List〕

〔1207〕 Otherwise

〔1208〕 Match Text hour(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔1209〕 If 〔1208 C2DMatches’s text〕 has any value

〔1210〕 Get First Item from List 〔1200 C2DMatches〕　»

〔1211〕 Set Variable C2DHours to 〔1210 Item from List〕

〔1212〕 Number 0　»

〔1213〕 Set Variable C2DMinutes to 〔1212 Number〕

〔1214〕 Otherwise

〔1215〕 Number 0　»

〔1216〕 Set Variable C2DHours to 〔1215 Number〕

〔1217〕 Get First Item from List 〔1200 C2DMatches〕　»

〔1218〕 Set Variable C2DMinutes to 〔1217 Item from List〕

〔1219〕 End If

〔1220〕 End If　▵1207

〔1221〕 Calculate 〔C2DHours〕 × 60　»

〔1222〕 Calculate 〔1221 Calculation Result〕 + 〔C2DMinutes〕　»

〔1223〕 Set Variable TravelTime to 〔1222 Calculation Result〕

〔1224〕 End If　▵1196

〔1225〕 End If　▵1126

〔1226〕 Otherwise　▵1053

〔1227〕 Number 0　»

〔1228〕 Set Variable TravelTime to 〔1227 Number〕

〔1229〕 End If

〔1230〕 Calculate 〔TravelTime〕 + 〔ExtraTime〕　»

〔1231〕 Adjust Subtract Date 〔Repeat Item’s Start Date〕 　➔ Supposed Alarm Time　» 1232 1235 1238 1241 1248 1264 1266 1267 1285 1290 1293
• Duration: 〔1230 Calculation Result〕 min

〔1232〕 Dictionary 　➔ Alarm Label Dictionary　» 1264 1269 1285
{  "Event": "〔Repeat Item〕",
   "From": "〔Repeat Item’s Start Date〕",
   "To": "〔Repeat Item’s End Date〕",
   "Location": "〔Repeat Item’s Location〕",
   "AlarmTime": "〔1231 Supposed Alarm Time〕"
}

〔1233〕 Date Current Date 　➔ Current Date　» 1234 1235 1266

〔1234〕 Adjust Add Date 〔1233 Current Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"dd MMM yyyy"}〕 　➔ 1 day after　» 1248 1249 1267 1271
• Duration: "1" days

〔1235〕 If 〔1231 Supposed Alarm Time〕 is 〔1233 Current Date〕

〔1236〕 Comment
supposed alarm time is exactly 12:00am

〔1237〕 If 〔Repeat Item’s Location〕 has any value

〔1238〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 at 〔Repeat Item’s Location〕 which  was supposed to get ready at 〔1231 Supposed Alarm Time〕. Please check.

〔1239〕 Set Variable Text to 〔1238 Text〕

〔1240〕 Otherwise

〔1241〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 which  was supposed to get ready at 〔1231 Supposed Alarm Time〕. Please check.

〔1242〕 Set Variable Text to 〔1241 Text〕

〔1243〕 End If

〔1244〕 Show Alert 〔Text〕

〔1245〕 Show Notification 〔Text〕

〔1246〕 Speak Text
• Text: 〔Text〕

〔1247〕 Otherwise　▵1235

〔1248〕 If 〔1231 Supposed Alarm Time〕 is 〔1234 1 day after〕

〔1249〕 Find Alarm 〔1234 1 day after〕　» 1250 1251

〔1250〕 If 〔1249 Alarms〕 has any value

〔1251〕 Repeat[2] with Each in 〔1249 Alarms〕

〔1252〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ AlarmLabelDictionary　» 1253 1254 1256

〔1253〕 Get Dictionary Value for Event in 〔1252 AlarmLabelDictionary〕 　➔ Event　» 1258

〔1254〕 Get Dictionary Value for From in 〔1252 AlarmLabelDictionary〕 　➔ From　»

〔1255〕 Get Dates from 〔1254 From〕 　➔ FromDate　» 1258

〔1256〕 Get Dictionary Value for To in 〔1252 AlarmLabelDictionary〕 　➔ To　»

〔1257〕 Get Dates from 〔1256 To〕 　➔ ToDate　»

〔1258〕 If All are true　〔1253 Event’s Name〕 is 〔Repeat Item〕　〔1255 FromDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔Repeat Item’s Start Date{"Date Style":"Custom","WFDateFormat":"HH:mm","WFISO8601IncludeTime":false}〕　〔1257 ToDate{"Date Style":"Custom","WFDateFormat":"HH:mm","WFISO8601IncludeTime":false}〕 is • ConditionalActionString
〔Repeat Item’s End Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕• Date
〔Repeat Item’s End Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕

〔1259〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔1260〕 End If

〔1261〕 End Repeat[2] with Each　▵1251

〔1262〕 End If　▵1250

〔1263〕 Comment
since this will be triggered at 12:00 am each day, when the supposed alarm time is 12:00 am in the next day, you can set alarm now

〔1264〕 Add Alarm for 〔1231 Supposed Alarm Time〕 called 〔1232 Alarm Label Dictionary〕

〔1265〕 Otherwise　▵1248

〔1266〕 If 〔1231 Supposed Alarm Time〕 > 〔1233 Current Date〕

〔1267〕 If 〔1231 Supposed Alarm Time〕 > 〔1234 1 day after〕

〔1268〕 Comment
when the time is other than 12:00 am of then next day, you cannot set alarm yet. If set, it will be today. For example, triggering time 2025-4-8 12:00 am, the supposed alarm time is 2025-4-9 08:00 am, if you set an alarm at 08:00 at 2025-4-8 12:00 am, it will alarm at 2025-4-8 08:00 am instead. So we need to record the supposed alarm time and trigger next day.

〔1269〕 Set Variable Event to 〔1232 Alarm Label Dictionary〕

〔1270〕 Otherwise

〔1271〕 Find Alarm 〔1234 1 day after〕　» 1272 1273
• ContentItemFilter: {  "Value": {
      "WFActionParameterFilterPrefix": 1,
      "WFContentPredicateBoundedDate": false,
      "WFActionParameterFilterTemplates": []
   },
   "WFSerializationType": "WFContentPredicateTableTemplate"
}

〔1272〕 If 〔1271 Alarms〕 has any value

〔1273〕 Repeat[2] with Each in 〔1271 Alarms〕

〔1274〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ AlarmLabelDictionary　» 1275 1276 1278

〔1275〕 Get Dictionary Value for Event in 〔1274 AlarmLabelDictionary〕 　➔ Event　» 1280

〔1276〕 Get Dictionary Value for From in 〔1274 AlarmLabelDictionary〕 　➔ From　»

〔1277〕 Get Dates from 〔1276 From〕 　➔ FromDate　» 1280

〔1278〕 Get Dictionary Value for To in 〔1274 AlarmLabelDictionary〕 　➔ To　»

〔1279〕 Get Dates from 〔1278 To〕 　➔ ToDate　»

〔1280〕 If All are true　〔1275 Event’s Name〕 is 〔Repeat Item〕　〔1277 FromDate{"Date Style":"Custom","WFDateFormat":"HH:mm","WFISO8601IncludeTime":false}〕 is 〔Repeat Item’s Start Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕　〔1279 ToDate{"Date Style":"Custom","WFDateFormat":"HH:mm","WFISO8601IncludeTime":false}〕 is 〔Repeat Item’s End Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕

〔1281〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔1282〕 End If

〔1283〕 End Repeat[2] with Each　▵1273

〔1284〕 End If　▵1272

〔1285〕 Add Alarm for 〔1231 Supposed Alarm Time〕 called 〔1232 Alarm Label Dictionary〕

〔1286〕 End If　▵1270

〔1287〕 Otherwise　▵1266

〔1288〕 Comment
the supposed alarm time passed

〔1289〕 If 〔Repeat Item’s Location〕 has any value

〔1290〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 at 〔Repeat Item’s Location〕 which  was supposed to get ready at 〔1231 Supposed Alarm Time〕. Please check.

〔1291〕 Set Variable Text to 〔1290 Text〕

〔1292〕 Otherwise

〔1293〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 which  was supposed to get ready at 〔1231 Supposed Alarm Time〕. Please check.

〔1294〕 Set Variable Text to 〔1293 Text〕

〔1295〕 End If

〔1296〕 Show Alert 〔Text〕

〔1297〕 Show Notification 〔Text〕

〔1298〕 Speak Text
• Text: 〔Text〕

〔1299〕 End If　▵1287

〔1300〕 End If　▵1265

〔1301〕 End If　▵1247

〔1302〕 If 〔Event〕 has any value

〔1303〕 Get Dictionary from 〔Event〕　» 1316

〔1304〕 Text　»

〔1305〕 Set Variable TextList to 〔1304 Text〕

〔1306〕 Add 〔Event〕 to Variable TextList

〔1307〕 Get File at Path Smart Calendar Reminder/Future Alarms.txt from Folder　» 1308 1309
• FileErrorIfNotFound: false

〔1308〕 If 〔1307 File’s File Size〕 has any value

〔1309〕 Split Text 〔1307 File〕 by New Lines　»

〔1310〕 Repeat[2] with Each in 〔1309 Split Text〕

〔1311〕 Get Dictionary from 〔Repeat Item 2〕　» 1312 1313 1314 1315

〔1312〕 Get Dictionary Value for Event in 〔1311 Dictionary〕 　➔ Event　» 1316

〔1313〕 Get Dictionary Value for From in 〔1311 Dictionary〕 　➔ From　» 1316

〔1314〕 Get Dictionary Value for To in 〔1311 Dictionary〕 　➔ To　» 1316

〔1315〕 Get Dictionary Value for Location in 〔1311 Dictionary〕 　➔ Location　»

〔1316〕 If Any are true　〔1312 Event’s Name〕 is not 〔1303 Dictionary.Event〕　〔1313 From’s Name〕 is not 〔1303 Dictionary.From〕　〔1314 To’s Name〕 is not 〔1303 Dictionary.To〕　〔1315 Location’s Name〕 is not 〔1303 Dictionary.Location〕

〔1317〕 Add 〔Repeat Item 2〕 to Variable TextList

〔1318〕 End If

〔1319〕 End Repeat[2] with Each　▵1310

〔1320〕 Combine Text 〔TextList〕 with New Lines　»

〔1321〕 Save File 〔1320 Combined Text〕
• AskWhereToSave: false
• SaveFileOverwrite: true
• FileDestinationPath: Smart Calendar Reminder/Future Alarms.txt

〔1322〕 Otherwise　▵1308

〔1323〕 Text　»

〔Event〕

〔1324〕 Save File 〔1323 Text〕
• AskWhereToSave: false
• FileDestinationPath: Smart Calendar Reminder/Future Alarms.txt

〔1325〕 End If

〔1326〕 End If　▵1302

〔1327〕 End Repeat with Each　▵1052

〔1328〕 End If　▵1051

〔1329〕 Get File at Path Smart Calendar Reminder/Future Alarms.txt from Folder　» 1330 1331
• FileErrorIfNotFound: false

〔1330〕 If 〔1329 File’s File Size〕 has any value

〔1331〕 Split Text 〔1329 File〕 by New Lines　»

〔1332〕 Repeat with Each in 〔1331 Split Text〕

〔1333〕 Get Dictionary from 〔Repeat Item〕　» 1334 1335 1345 1356

〔1334〕 If 〔1333 Dictionary〕 has any value

〔1335〕 Get Dates from 〔1333 Dictionary.AlarmTime〕　» 1336 1337 1356

〔1336〕 If 〔1335 Dates〕 is today

〔1337〕 Find Alarm 〔1335 Dates〕　» 1338 1339
• ContentItemFilter: {  "Value": {
      "WFActionParameterFilterPrefix": 1,
      "WFActionParameterFilterTemplates": [],
      "WFContentPredicateBoundedDate": false
   },
   "WFSerializationType": "WFContentPredicateTableTemplate"
}

〔1338〕 If 〔1337 Alarms〕 has any value

〔1339〕 Repeat[2] with Each in 〔1337 Alarms〕

〔1340〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ Alarm_Label_Dictionary　» 1341 1343 1351

〔1341〕 Get Dictionary Value for From in 〔1340 Alarm_Label_Dictionary〕　»

〔1342〕 Get Dates from 〔1341 Dictionary Value〕 　➔ From_Date　» 1351

〔1343〕 Get Dictionary Value for To in 〔1340 Alarm_Label_Dictionary〕　»

〔1344〕 Get Dates from 〔1343 Dictionary Value〕 　➔ To_Date　» 1351

〔1345〕 Get Dictionary from 〔1333 Dictionary.Event〕 　➔ FutureAlarmLabelDictionary　» 1346 1347 1349

〔1346〕 Get Dictionary Value for Event in 〔1345 FutureAlarmLabelDictionary〕 　➔ Event　» 1351

〔1347〕 Get Dictionary Value for From in 〔1345 FutureAlarmLabelDictionary〕 　➔ From　»

〔1348〕 Get Dates from 〔1347 From〕 　➔ FromDate　» 1351

〔1349〕 Get Dictionary Value for To in 〔1345 FutureAlarmLabelDictionary〕 　➔ To　»

〔1350〕 Get Dates from 〔1349 To〕 　➔ ToDate　»

〔1351〕 If All are true　〔1346 Event’s Name〕 is 〔1340 Alarm_Label_Dictionary.Event〕　〔1348 FromDate{"Date Style":"Custom","WFDateFormat":"HH:mm","WFISO8601IncludeTime":false}〕 is 〔1342 From_Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕　〔1350 ToDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔1344 To_Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕

〔1352〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔1353〕 End If

〔1354〕 End Repeat[2] with Each　▵1339

〔1355〕 End If　▵1338

〔1356〕 Add Alarm for 〔1335 Dates〕 called 〔1333 Dictionary.Event〕

〔1357〕 End If　▵1336

〔1358〕 End If　▵1334

〔1359〕 End Repeat with Each　▵1332

〔1360〕 End If　▵1330

〔1361〕 End If　▵1039

〔1362〕 If 〔Shortcut Input as Number〕 is 7

〔1363〕 Comment
1-Hour Event Processor
*Real-time event handler for immediate notifications:

Processes events within next 60 minutes

Provides most accurate travel estimates

Recommended for hourly automation*

〔1364〕 Get File at Path Smart Calendar Reminder/aboutme.txt from Folder　»
• FileErrorIfNotFound: false

〔1365〕 Get Dictionary from 〔1364 File〕　» 1366 1369 1370

〔1366〕 Get Dictionary from 〔1365 Dictionary.HomeAddress〕　»

〔1367〕 Text　»
〔1366 Dictionary.street〕 〔1366 Dictionary.city〕 〔1366 Dictionary.state〕 〔1366 Dictionary.postcode〕 〔1366 Dictionary.country〕

〔1368〕 Set Variable Home_Address to 〔1367 Text〕

〔1369〕 Set Variable Travel_Method to 〔1365 Dictionary.TravelMethod〕

〔1370〕 Get Dictionary Value for ExtraTime in 〔1365 Dictionary〕　»

〔1371〕 Get Numbers from 〔1370 Dictionary Value〕　»

〔1372〕 Set Variable Extra_Time to 〔1371 Numbers〕

〔1373〕 Find Calendar Events All Calendar Events where　» 1374 1375 1376 1588
• ContentItemSortProperty: Start Date
• ContentItemSortOrder: Oldest First
• ContentItemFilter: • All the following are true
Start Date is in the next 30 minutes
Is Not All Day
Canceled is {"Bool":false}

〔1374〕 If 〔1373 Calendar Events〕 has any value

〔1375〕 Count Items in 〔1373 Calendar Events〕　» 1592 1600

〔1376〕 Repeat with Each in 〔1373 Calendar Events〕

〔1377〕 If 〔Repeat Item’s Location〕 has any value

〔1378〕 Get Current Location　» 1389 1395 1459
• Accuracy: Best

〔1379〕 If All are true　〔Repeat Item’s Notes〕 has any value　〔Repeat Item’s Notes〕 begins with {　〔Repeat Item’s Notes〕 ends with }

〔1380〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY

〔1381〕 Get Dictionary from 〔Repeat Item’s Notes〕 　➔ NotesAddressDictionary　» 1382 1383 1384 1385 1386

〔1382〕 Set Variable CalendarNotesStreet to 〔1381 NotesAddressDictionary.Street〕

〔1383〕 Set Variable CalendarNotesCity to 〔1381 NotesAddressDictionary.City〕

〔1384〕 Set Variable CalendarNotesState to 〔1381 NotesAddressDictionary.State〕

〔1385〕 Set Variable CalendarNotesRegion to 〔1381 NotesAddressDictionary.Country〕

〔1386〕 Set Variable CalendarNotesZIPCode to 〔1381 NotesAddressDictionary.Postcode〕

〔1387〕 Text　»
〔CalendarNotesStreet〕 〔CalendarNotesCity〕 〔CalendarNotesState〕 〔CalendarNotesZIPCode〕 〔CalendarNotesRegion〕

〔1388〕 Set Variable NotesAddressString to 〔1387 Text〕

〔1389〕 If All are true　〔1378 Current Location’s Street〕 is 〔CalendarNotesStreet〕　〔1378 Current Location’s City〕 is 〔CalendarNotesCity〕　〔1378 Current Location’s State〕 is 〔CalendarNotesState〕　〔1378 Current Location’s Country〕 is 〔CalendarNotesRegion〕　〔1378 Current Location’s ZIP Code〕 is 〔CalendarNotesZIPCode〕

〔1390〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY -> CALENDAR EVENT ADDRESS IS THE SAME WITH CURRENT LOCATION

〔1391〕 Number 0　»

〔1392〕 Set Variable CurrentToDeparture to 〔1391 Number〕

〔1393〕 Otherwise

〔1394〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY -> CALENDAR EVENT ADDRESS IS NOT THE SAME WITH CURRENT LOCATION

〔1395〕 Get 〔TravelMethod〕 Time　»
• GetDirectionsCustomLocation: 〔1378 Current Location〕
• Destination: 〔NotesAddressString〕

〔1396〕 Set Variable TravelTimeString to 〔1395 Travel Time〕

〔1397〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　» 1398 1400 1402 1407 1414
• MatchTextCaseSensitive: false

〔1398〕 Count Items in 〔1397 C2DMatches〕　»

〔1399〕 If 〔1398 Count〕 > 1

〔1400〕 Get First Item from List 〔1397 C2DMatches〕　»

〔1401〕 Set Variable C2DHours to 〔1400 Item from List〕

〔1402〕 Get Last Item from List 〔1397 C2DMatches〕　»

〔1403〕 Set Variable C2DMinutes to 〔1402 Item from List〕

〔1404〕 Otherwise

〔1405〕 Match Text hour(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔1406〕 If 〔1405 C2DMatches’s text〕 has any value

〔1407〕 Get First Item from List 〔1397 C2DMatches〕　»

〔1408〕 Set Variable C2DHours to 〔1407 Item from List〕

〔1409〕 Number 0　»

〔1410〕 Set Variable C2DMinutes to 〔1409 Number〕

〔1411〕 Otherwise

〔1412〕 Number 0　»

〔1413〕 Set Variable C2DHours to 〔1412 Number〕

〔1414〕 Get First Item from List 〔1397 C2DMatches〕　»

〔1415〕 Set Variable C2DMinutes to 〔1414 Item from List〕

〔1416〕 End If

〔1417〕 End If　▵1404

〔1418〕 Calculate 〔C2DHours〕 × 60　»

〔1419〕 Calculate 〔1418 Calculation Result〕 + 〔C2DMinutes〕　»

〔1420〕 Set Variable CurrentToDeparture to 〔1419 Calculation Result〕

〔1421〕 End If　▵1393

〔1422〕 Get 〔TravelMethod〕 Time 　➔ DepartureToDestination　»
• GetDirectionsCustomLocation: 〔NotesAddressString〕
• Destination: 〔Repeat Item’s Location〕

〔1423〕 Set Variable TravelTimeString to 〔1422 DepartureToDestination〕

〔1424〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　» 1425 1427 1429 1434 1441
• MatchTextCaseSensitive: false

〔1425〕 Count Items in 〔1424 C2DMatches〕　»

〔1426〕 If 〔1425 Count〕 > 1

〔1427〕 Get First Item from List 〔1424 C2DMatches〕　»

〔1428〕 Set Variable C2DHours to 〔1427 Item from List〕

〔1429〕 Get Last Item from List 〔1424 C2DMatches〕　»

〔1430〕 Set Variable C2DMinutes to 〔1429 Item from List〕

〔1431〕 Otherwise

〔1432〕 Match Text hour(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔1433〕 If 〔1432 C2DMatches’s text〕 has any value

〔1434〕 Get First Item from List 〔1424 C2DMatches〕　»

〔1435〕 Set Variable C2DHours to 〔1434 Item from List〕

〔1436〕 Number 0　»

〔1437〕 Set Variable C2DMinutes to 〔1436 Number〕

〔1438〕 Otherwise

〔1439〕 Number 0　»

〔1440〕 Set Variable C2DHours to 〔1439 Number〕

〔1441〕 Get First Item from List 〔1424 C2DMatches〕　»

〔1442〕 Set Variable C2DMinutes to 〔1441 Item from List〕

〔1443〕 End If

〔1444〕 End If　▵1431

〔1445〕 Calculate 〔C2DHours〕 × 60　»

〔1446〕 Calculate 〔1445 Calculation Result〕 + 〔C2DMinutes〕　»

〔1447〕 Calculate 〔1446 Calculation Result〕 + 〔CurrentToDeparture〕　»

〔1448〕 Set Variable TravelTime to 〔1447 Calculation Result〕

〔1449〕 Otherwise　▵1379

〔1450〕 Comment
CALENDER EVENT NOTES IS BLANK

〔1451〕 Get Dictionary from 〔HomeAddress〕 　➔ home_address_dictionary　» 1452 1453 1454 1455 1456

〔1452〕 Get Dictionary Value for street in 〔1451 home_address_dictionary〕 　➔ HomeStreet　» 1457 1459

〔1453〕 Get Dictionary Value for city in 〔1451 home_address_dictionary〕 　➔ HomeCity　» 1457 1459

〔1454〕 Get Dictionary Value for state in 〔1451 home_address_dictionary〕 　➔ HomeState　» 1457 1459

〔1455〕 Get Dictionary Value for country in 〔1451 home_address_dictionary〕 　➔ HomeCountry　» 1457 1459

〔1456〕 Get Dictionary Value for postcode in 〔1451 home_address_dictionary〕 　➔ HomePostcode　» 1457 1459

〔1457〕 If All are true　〔1452 HomeStreet〕 has any value　〔1453 HomeCity〕 has any value　〔1454 HomeState〕 has any value　〔1455 HomeCountry〕 has any value　〔1456 HomePostcode〕 has any value

〔1458〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED

〔1459〕 If All are true　〔1378 Current Location’s Street〕 is 〔1452 HomeStreet〕　〔1378 Current Location’s City〕 is 〔1453 HomeCity〕　〔1378 Current Location’s State〕 is 〔1454 HomeState〕　〔1378 Current Location’s Country〕 is 〔1455 HomeCountry〕　〔1378 Current Location’s ZIP Code〕 is 〔1456 HomePostcode〕

〔1460〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED -> HOME ADDRESS IS THE SAME WITH CURRENT LOCATION

〔1461〕 Number 0　»

〔1462〕 Set Variable CurrentToDeparture to 〔1461 Number〕

〔1463〕 Otherwise

〔1464〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED -> HOME ADDRESS IS NOT THE SAME WITH CURRENT LOCATION

〔1465〕 Get 〔TravelMethod〕 Time　»
• Destination: 〔HomeAddress〕

〔1466〕 Set Variable TravelTimeString to 〔1465 Travel Time〕

〔1467〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　» 1468 1470 1472 1477 1484
• MatchTextCaseSensitive: false

〔1468〕 Count Items in 〔1467 C2DMatches〕　»

〔1469〕 If 〔1468 Count〕 > 1

〔1470〕 Get First Item from List 〔1467 C2DMatches〕　»

〔1471〕 Set Variable C2DHours to 〔1470 Item from List〕

〔1472〕 Get Last Item from List 〔1467 C2DMatches〕　»

〔1473〕 Set Variable C2DMinutes to 〔1472 Item from List〕

〔1474〕 Otherwise

〔1475〕 Match Text hour(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔1476〕 If 〔1475 C2DMatches’s text〕 has any value

〔1477〕 Get First Item from List 〔1467 C2DMatches〕　»

〔1478〕 Set Variable C2DHours to 〔1477 Item from List〕

〔1479〕 Number 0　»

〔1480〕 Set Variable C2DMinutes to 〔1479 Number〕

〔1481〕 Otherwise

〔1482〕 Number 0　»

〔1483〕 Set Variable C2DHours to 〔1482 Number〕

〔1484〕 Get First Item from List 〔1467 C2DMatches〕　»

〔1485〕 Set Variable C2DMinutes to 〔1484 Item from List〕

〔1486〕 End If

〔1487〕 End If　▵1474

〔1488〕 Calculate 〔C2DHours〕 × 60　»

〔1489〕 Calculate 〔1488 Calculation Result〕 + 〔C2DMinutes〕　»

〔1490〕 Set Variable CurrentToDeparture to 〔1489 Calculation Result〕

〔1491〕 End If　▵1463

〔1492〕 Get 〔TravelMethod〕 Time 　➔ DepartureToDestination　» 1493 1494
• GetDirectionsCustomLocation: 〔HomeAddress〕
• Destination: 〔Repeat Item’s Location〕

〔1493〕 Set Variable TravelTimeString to 〔1492 DepartureToDestination〕

〔1494〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔1492 DepartureToDestination〕 　➔ C2DMatches　» 1495 1497 1499 1504 1511
• MatchTextCaseSensitive: false

〔1495〕 Count Items in 〔1494 C2DMatches〕　»

〔1496〕 If 〔1495 Count〕 > 1

〔1497〕 Get First Item from List 〔1494 C2DMatches〕　»

〔1498〕 Set Variable C2DHours to 〔1497 Item from List〕

〔1499〕 Get Last Item from List 〔1494 C2DMatches〕　»

〔1500〕 Set Variable C2DMinutes to 〔1499 Item from List〕

〔1501〕 Otherwise

〔1502〕 Match Text hour(?:s)? in 〔152 DepartureToDestination〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔1503〕 If 〔1502 C2DMatches’s text〕 has any value

〔1504〕 Get First Item from List 〔1494 C2DMatches〕　»

〔1505〕 Set Variable C2DHours to 〔1504 Item from List〕

〔1506〕 Number 0　»

〔1507〕 Set Variable C2DMinutes to 〔1506 Number〕

〔1508〕 Otherwise

〔1509〕 Number 0　»

〔1510〕 Set Variable C2DHours to 〔1509 Number〕

〔1511〕 Get First Item from List 〔1494 C2DMatches〕　»

〔1512〕 Set Variable C2DMinutes to 〔1511 Item from List〕

〔1513〕 End If

〔1514〕 End If　▵1501

〔1515〕 Calculate 〔C2DHours〕 × 60　»

〔1516〕 Calculate 〔1515 Calculation Result〕 + 〔C2DMinutes〕　»

〔1517〕 Calculate 〔1516 Calculation Result〕 + 〔CurrentToDeparture〕　»

〔1518〕 Set Variable TravelTime to 〔1517 Calculation Result〕

〔1519〕 Otherwise　▵1457

〔1520〕 Text
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS NOT MAINTAINED

〔1521〕 Get 〔TravelMethod〕 Time　»
• Destination: 〔Repeat Item’s Location〕

〔1522〕 Set Variable TravelTimeString to 〔1521 Travel Time〕

〔1523〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　» 1524 1526 1528 1533 1540
• MatchTextCaseSensitive: false

〔1524〕 Count Items in 〔1523 C2DMatches〕　»

〔1525〕 If 〔1524 Count〕 > 1

〔1526〕 Get First Item from List 〔1523 C2DMatches〕　»

〔1527〕 Set Variable C2DHours to 〔1526 Item from List〕

〔1528〕 Get Last Item from List 〔1523 C2DMatches〕　»

〔1529〕 Set Variable C2DMinutes to 〔1528 Item from List〕

〔1530〕 Otherwise

〔1531〕 Match Text hour(?:s)? in 〔TravelTimeString〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔1532〕 If 〔1531 C2DMatches’s text〕 has any value

〔1533〕 Get First Item from List 〔1523 C2DMatches〕　»

〔1534〕 Set Variable C2DHours to 〔1533 Item from List〕

〔1535〕 Number 0　»

〔1536〕 Set Variable C2DMinutes to 〔1535 Number〕

〔1537〕 Otherwise

〔1538〕 Number 0　»

〔1539〕 Set Variable C2DHours to 〔1538 Number〕

〔1540〕 Get First Item from List 〔1523 C2DMatches〕　»

〔1541〕 Set Variable C2DMinutes to 〔1540 Item from List〕

〔1542〕 End If

〔1543〕 End If　▵1530

〔1544〕 Calculate 〔C2DHours〕 × 60　»

〔1545〕 Calculate 〔1544 Calculation Result〕 + 〔C2DMinutes〕　»

〔1546〕 Set Variable TravelTime to 〔1545 Calculation Result〕

〔1547〕 End If　▵1519

〔1548〕 End If　▵1449

〔1549〕 Otherwise　▵1377

〔1550〕 Number 0　»

〔1551〕 Set Variable TravelTime to 〔1550 Number〕

〔1552〕 End If

〔1553〕 Find Alarm All Alarm　» 1554 1555
• ContentItemFilter: {  "Value": {
      "WFActionParameterFilterPrefix": 1,
      "WFActionParameterFilterTemplates": [],
      "WFContentPredicateBoundedDate": false
   },
   "WFSerializationType": "WFContentPredicateTableTemplate"
}

〔1554〕 If 〔1553 Alarms〕 has any value

〔1555〕 Repeat[2] with Each in 〔1553 Alarms〕

〔1556〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ AlarmLabelDictionary　» 1557 1558 1560

〔1557〕 Get Dictionary Value for Event in 〔1556 AlarmLabelDictionary〕 　➔ Event　» 1562

〔1558〕 Get Dictionary Value for From in 〔1556 AlarmLabelDictionary〕 　➔ From　»

〔1559〕 Get Dates from 〔1558 From〕 　➔ FromDate　» 1562

〔1560〕 Get Dictionary Value for To in 〔1556 AlarmLabelDictionary〕 　➔ To　»

〔1561〕 Get Dates from 〔1560 To〕 　➔ ToDate　»

〔1562〕 If All are true　〔1557 Event’s Name〕 is 〔Repeat Item〕　〔1559 FromDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔Repeat Item’s Start Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕　〔1561 ToDate{"Date Style":"Custom","WFDateFormat":"HH:mm","WFISO8601IncludeTime":false}〕 is 〔Repeat Item’s End Date{"Date Style":"Custom","WFDateFormat":"HH:mm","WFISO8601IncludeTime":false}〕

〔1563〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔1564〕 End If

〔1565〕 End Repeat[2] with Each　▵1555

〔1566〕 End If　▵1554

〔1567〕 Calculate 〔TravelTime〕 + 〔Extra_Time〕　»

〔1568〕 Adjust Subtract Date 〔Repeat Item’s Start Date〕 　➔ Supposed_Alarm_Time　» 1570 1572 1575 1582 1583
• Duration: 〔1567 Calculation Result〕 min

〔1569〕 Date Current Date　»

〔1570〕 If Any are true　〔1568 Supposed_Alarm_Time〕 < 〔1569 Date〕　〔1568 Supposed_Alarm_Time〕 is 〔1569 Date〕

〔1571〕 If 〔Repeat Item’s Location〕 has any value

〔1572〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 at 〔Repeat Item’s Location〕  which  was supposed to get ready at 〔1568 Supposed_Alarm_Time〕. Please check.

〔1573〕 Set Variable Text to 〔1572 Text〕

〔1574〕 Otherwise

〔1575〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 which  was supposed to get ready at 〔1568 Supposed_Alarm_Time〕. Please check.

〔1576〕 Set Variable Text to 〔1575 Text〕

〔1577〕 End If

〔1578〕 Show Alert 〔Text〕

〔1579〕 Show Notification 〔Text〕

〔1580〕 Speak Text
• Text: 〔Text〕

〔1581〕 Otherwise　▵1570

〔1582〕 Dictionary　»
{  "Event": "〔Repeat Item〕",
   "From": "〔Repeat Item’s Start Date〕",
   "To": "〔Repeat Item’s End Date〕",
   "Location": "〔Repeat Item’s Location〕",
   "AlarmTime": "〔1568 Supposed_Alarm_Time〕"
}

〔1583〕 Add Alarm for 〔1568 Supposed_Alarm_Time〕 called 〔1582 Dictionary〕

〔1584〕 End If

〔1585〕 End Repeat with Each　▵1376

〔1586〕 Number 3　»

〔1587〕 Repeat 〔1586 Number〕 Times

〔1588〕 Repeat[2] with Each in 〔1373 Calendar Events〕

〔1589〕 Format Date 〔Repeat Item 2’s Start Date〕　» 1593 1596 1601 1604
• DateFormatStyle: None

〔1590〕 Format Date 〔Repeat Item 2’s End Date〕　» 1593 1596 1601 1604
• DateFormatStyle: None

〔1591〕 If 〔Repeat Item 2’s Location〕 has any value

〔1592〕 If 〔1375 Count〕 > 1

〔1593〕 Text　»
Event 〔Repeat Index 2〕 〔Repeat Item 2〕 from 〔1589 Formatted Date〕 to 〔1590 Formatted Date〕 at 〔Repeat Item 2’s Location〕

〔1594〕 Set Variable Text to 〔1593 Text〕

〔1595〕 Otherwise

〔1596〕 Text　»
Event  〔Repeat Item 2〕 from 〔1589 Formatted Date〕 to 〔1590 Formatted Date〕 at 〔Repeat Item 2’s Location〕

〔1597〕 Set Variable Text to 〔1596 Text〕

〔1598〕 End If

〔1599〕 Otherwise　▵1591

〔1600〕 If 〔1375 Count〕 > 1

〔1601〕 Text　»
Event 〔Repeat Index 2〕 〔Repeat Item 2〕 from 〔1589 Formatted Date〕 to 〔1590 Formatted Date〕

〔1602〕 Set Variable Text to 〔1601 Text〕

〔1603〕 Otherwise

〔1604〕 Text　»
Event  〔Repeat Item 2〕 from 〔1589 Formatted Date〕 to 〔1590 Formatted Date〕

〔1605〕 Set Variable Text to 〔1604 Text〕

〔1606〕 End If

〔1607〕 End If　▵1599

〔1608〕 Speak Text
• Text: 〔Text〕

〔1609〕 Wait 1 seconds

〔1610〕 End Repeat[2] with Each　▵1588

〔1611〕 End Repeat Times　▵1587

〔1612〕 End If　▵1374

〔1613〕 End If　▵1362

〔1614〕 End If　▵91