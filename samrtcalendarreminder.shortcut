Smart Calendar Reminder V3 (1893 actions, 559 KB)
"WFQuickActionSurfaces": [],
"WFWorkflowClientVersion": "3303.0.5",
"WFWorkflowHasOutputFallback": false,
"WFWorkflowHasShortcutInputVariables": true,
"WFWorkflowIcon": {
   "WFWorkflowIconStartColor": 431817727,
   "WFWorkflowIconGlyphNumber": 61701
},
"WFWorkflowImportQuestions": [],
"WFWorkflowInputContentItemClasses": [],
"WFWorkflowMinimumClientVersion": 3010,
"WFWorkflowMinimumClientVersionString": "3010",
"WFWorkflowOutputContentItemClasses": [],
"WFWorkflowTypes": []


〔0〕 If 〔Shortcut Input〕 does not have any value

〔1〕 Comment
Initial setup and version update check when no input is provided

〔2〕 Comment
Inspired by [Schedule Shortcut or Alarm] but designed to work smarter for my needs! Instead of manually inputting each trigger or alarm, this shortcut leverages my Calendar as the ultimate data source. It automatically scans for upcoming events, then:

• Speaks out the event details
• Sets a tailored alarm—accounting for travel and prep time—right when you need it

No more early, forgettable reminders. It keeps your schedule perfectly in sync. Give it a try and let your Calendar do the heavy lifting!

〔3〕 Dictionary 　➔ Version Dictionary 　» 4 5 7 9 10 11 12 20 21 25 31 46 72
{  "Name": "Smart Calendar Reminder",
   "Version": "3.0",
   "RH ID": "21959",
   "Icons": {
      "Update": "iVBORw0KGgoAAAANSUhEUgAAAHsAAAB7CAYAAABUx/9/AAAAAXNSR0IArs4c6QAAB7RJREFUeF7tnT2W5DQQgLuPAgk3gHAZOAcZIZyAYJmAE0BIxjmA2RBuQAJHMa/cVq/aLUslq34l9XvzdnasllT1qX4k29L10tFnWZYvI3Hg93c78eLr4dLbrsyH7f9v1+t1f821tq6ee7/Bfb/JkAJJJR5AXwfB9Xr9kapS6XpcwRaEW+LgEr552BFgTsstwS1df71cLubdvlnYy7KAu4SYaxlyahC8WnX1pmA7seKSlYfr5qCbgN0Z5P1gABdvIrFThd055Cfo2u5dDfYWk8O0Cesaeyin5t7FYQ9mzbnBKQ5dFPayLH86zK45vYkocBHYmzUD6PlJa0AEOjvsgWNz7cBmB84Ge8bmWtZreViFezn1TcSXWGBPt43QfL7IC8cdN3LYE3Qz6FABOXBS2DM+k4FmWXIlgz1Bk4MmB04Ce4JmA00KvBn2BM0Omgx4E+yZjImBJknaTsOeoMVBNwNvgb2oiTsbPjUtOwXb6w2Nv/+7XH7+/TZSvvj0cvn8k9uPw8+plbZq2F4TMgD9za/PWH/71i3w6rX0KtheQQPiz35I2y9YNgB3+qly57WwXcbpI6sOgB1bNzzbhmaILujZqnuGXXOnDAXbM2iw3s5hg4god46F7dJ9Bzc9AGxUdl6E7d2qB7FsELOYnWNgu7bqgWAX3XkWdg9WPRjsrDs/hN0L6MFgZ617wr7cFlWcLpum1oIOrTsH232sHigb30NPTsWSsHty4QO6cRA5ad1HsLux6kFhJ5dRn2D3ZtWjwk7Nu1Owu7LqgWE/ufIH2L0+ajTAcunRHdqHRG0PGzat6e4F+YFhP1j3HnZ3LnxgN75ae3y/+w67x8Rs4Hl27NbvrnzC7m8FbR+/7648ht3tFhgDx+yHBZYYdpfxevSYHcftFXbP8XrCXr36Grcn7P5j9t2VB9jdxutp2atlr0lagG02XodXduDf77++JZrffXW0YJT+O0eCRtGvOinaSsN82zTsX/74+G5WLCpArwFODZuqX234qr/9crW8Hn70yg6IWQOcEvYR6KB6w0+9rLBNroeXANUAL9WFBVQCDX3C1lVtl+1f8A0bC5wCNga0cdivYNlmM3F4xRZAlT4ll94KGwsa+vnPT6Xeql1/Mw27BAmbtJXqybneGtClQaeG+dawbdjQQwpln4VN0bYy4Lh5+7ApgJ+B3Rnou2WbXVCJh2WL8mtht7RlyJKfugIx2wXsFguvgd0raNCfK9hngWNh9wzaJewzwOE9rtROSfGqV7xtVskVG8+6D7vvzrKDJDVWCLBz8/XSdewUrzRItK+bnmeXlFMDvFQX5rpXi95k8zH1yoGQAu4ctI9FFYzFcQPvAHQ/sGuTNswACmU6AX2HbfIWZw2QM0kbpv6OQIO4610vOIyc9TS9MK2BnYDhU/OUCQZKXIbKpXODltTJph9+2Cnlc28O2wqcG7SGTtbHiTktO6d0DYVivIRmvzjbZn/gMPfwAbd1n0naOJUdBpqWTmLYLE+raAl2JoZLgIZ+Kenk4bnxbmFjLFwKtCLsdV/T8Nw4S0auNIqTodnKs95KOvkIG7TDcV9bSbDDPAymO/Dz17+3ImDR0jsbaugkvAzC+n62hmCYjFuzjIJOZF7GVxBMkyOqbQWd3Pchjy2bPG4rCIZSuGYhBZ08w+aI2wqCaXJEtS2tk+RuSRts0imYtGAobSsXEtbJw1ESrDscCgumjBHXvLBOjnc4pLZuYcFw2lYuJamT/QFvrLsSSwqmzBDdvKBOnk4DYt1vXFAwtLK1C0rpJHVs4xFskkRNSjBtgDXtC+kkecbXEWySObeQYDW6Vi8roZOjw1hzB8I0W7eEYOr0KjuQ2yeG6B7/4cl9OdjN1p2DDToyvEtBJUJ8capNgTIt1sOmmIaVXqiTvI+Mx8FXsvRsHIE+sudxlo5nbLLuEmxQK4GAfHQIay6BhqZad1oqHZyOOXi16bnynNva61L63jIhy2xVmE2ACMJa+ym7re68FLelFG69nVYPV7JqkL9o2RvsJndeY93WoXD1rzFZLVo1GnardWNiN5cSPdTbGKtRoKtgb8BP77+CSVA8gKHuo4T7Dn1GufFQuPXtkWnhj0Ol0aKhMrRVV1v2Zt1N2TnUMbqVc6+UHXmfKsuOLLx5KRXqCo/2wu/h8V5qN2mlvrAxPtH08vBA9Jy8Z2E3ZedWAHjtB2aalZLtFGyK6ZhXRRvod/LUe0y/TsOewDHqJS9zGvSpBG3ffasnEZCrWb/Cqsyb1I3HlU3g7COhGTSJZUcZevOUjF1lPhsgAU0Km2oO7pMHW6/JQJPDnkkbKfSmZIwtZieStjkPb+NODprFsneJG8lKW5veXH37bVvvhn/JP03zbExvZqaO0dJahjQ+i7nxhFufmXqeOYvb3jfJbtlzPp6lfOqGBtpX7AqKwp7Ts7v2WWPz0WAQhx06MnAsZ4/N5mAPCF3FmmPwapadiOXwp/dn45Hh76lDDroxAbvTJM4MZLOwnbt3APwB9gm16GnMWXZijg5Lr/Bj2cWbs2K1RRWqUb5l8FDdu20AUFVdW09YzoTMmmVps7ZDmPLmLTsnhCB8l3BVV9Awo6+1zPYiA7j94AHiKsPf47/tLfMDnCJ/T2ocWW5Jd/8DJiFz78yw9QcAAAAASUVORK5CYII=",
      "Skip": "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",
      "Not Now": "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"
   }
}

〔4〕 Get Contents of URL https://routinehub.co/api/v1/shortcuts/〔3 Version Dictionary .RH ID〕/versions/latest 　➔ RH Server　» 6 8 11 16 20

〔5〕 Get File at Path 〔3 Version Dictionary .Name〕/Skip.txt from Folder　»
• File: {  "fileLocation": {
      "crossDeviceItemID": "docs.icloud.com:com.apple.CloudDocs/documents/95d6214c39557e3de40d802073a860c04f3aed5b",
      "fileProviderDomainID": "com.apple.CloudDocs.iCloudDriveFileProvider/38059A1C-DC76-4B89-B62F-250A61DBFC73",
      "appContainerBundleIdentifier": "com.apple.shortcuts",
      "relativeSubpath": "",
      "WFFileLocationType": "Shortcuts"
   },
   "filename": "Documents",
   "displayName": "Shortcuts"
}
• FileErrorIfNotFound: false
• ShowFilePicker: false
• GetFolderContents: true

〔6〕 If 〔5 File as Text〕 is not 〔4 RH Server as Dictionary.Version〕

〔7〕 Get Dictionary Value for Version in 〔3 Version Dictionary 〕　»

〔8〕 If 〔7 Dictionary Value as Text〕 is not 〔4 RH Server as Dictionary.Version〕

〔9〕 Base64 Decode 〔3 Version Dictionary .Icons.Update〕

〔10〕 Show Alert A new version of 〔3 Version Dictionary .Name〕 is available to download!

〔11〕 Text　» 14
⬆️ Update ⬆️

A new version of 〔3 Version Dictionary .Name〕 is available to download!

〔3 Version Dictionary .Version〕 ↗ 〔4 RH Server as Dictionary.Version〕   —   〔4 RH Server as Dictionary.Release〕

〔4 RH Server as Dictionary.Notes〕

〔12〕 Text　»
BEGIN:VCARD
VERSION:3.0
N;CHARSET=utf-8:Update;;;;
PHOTO;ENCODING=b:〔3 Version Dictionary .Icons.Update〕
END:VCARD

BEGIN:VCARD
VERSION:3.0
N;CHARSET=utf-8:Skip;;;;
PHOTO;ENCODING=b:〔3 Version Dictionary .Icons.Skip〕
END:VCARD

BEGIN:VCARD
VERSION:3.0
N;CHARSET=utf-8:Not Now;;;;
PHOTO;ENCODING=b:〔3 Version Dictionary .Icons.Not Now〕
END:VCARD

〔13〕 Set Name of 〔12 Text〕 to updateprompt.vcf　»

〔14〕 Choose from List 〔13 Renamed Item as Contact〕　» 15 19
• ChooseFromListActionPrompt: 〔11 Text〕

〔15〕 If 〔14 Chosen Item as Text〕 is Update

〔16〕 Open URL 〔4 RH Server as Dictionary.URL〕
• Show-WFInput: true

〔17〕 Stop This Shortcut

〔18〕 End If

〔19〕 If 〔14 Chosen Item as Text〕 is Skip

〔20〕 Save File 〔4 RH Server as Dictionary.Version〕
• AskWhereToSave: false
• SaveFileOverwrite: true
• FileDestinationPath: 〔3 Version Dictionary .Name〕/Skip.txt

〔21〕 Show Alert This version of 〔3 Version Dictionary .Name〕 has been skipped!
• AlertActionTitle: ✅ Done ✅
• AlertActionCancelButtonShown: false

〔22〕 End If

〔23〕 End If　▵8

〔24〕 End If　▵6

〔25〕 Get File at Path 〔3 Version Dictionary .Name〕/Welcome.pdf from Folder　»
• FileErrorIfNotFound: false

〔26〕 If 〔25 File’s File Size〕 does not have any value

〔27〕 Text　»
<html><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Smart Calendar Reminder: Your Intelligent Schedule Assistant</title><style>
    /* cspell:disable-file */
    /* webkit printing magic: print all background colors */
    html {
        -webkit-print-color-adjust: exact;
    }
    * {
        box-sizing: border-box;
        -webkit-print-color-adjust: exact;
    }
\u{space}\u{space}\u{space}\u{space}
    html,
    body {
        margin: 0;
        padding: 0;
    }
    @media only screen {
        body {
            margin: 2em auto;
            max-width: 900px;
            color: rgb(55, 53, 47);
        }
    }
\u{space}\u{space}\u{space}\u{space}
    body {
        line-height: 1.5;
        white-space: pre-wrap;
    }
\u{space}\u{space}\u{space}\u{space}
    a,
    a.visited {
        color: inherit;
        text-decoration: underline;
    }
\u{space}\u{space}\u{space}\u{space}
    .pdf-relative-link-path {
        font-size: 80%;
        color: #444;
    }
\u{space}\u{space}\u{space}\u{space}
    h1,
    h2,
    h3 {
        letter-spacing: -0.01em;
        line-height: 1.2;
        font-weight: 600;
        margin-bottom: 0;
    }
\u{space}\u{space}\u{space}\u{space}
    .page-title {
        font-size: 2.5rem;
        font-weight: 700;
        margin-top: 0;
        margin-bottom: 0.75em;
    }
\u{space}\u{space}\u{space}\u{space}
    h1 {
        font-size: 1.875rem;
        margin-top: 1.875rem;
    }
\u{space}\u{space}\u{space}\u{space}
    h2 {
        font-size: 1.5rem;
        margin-top: 1.5rem;
    }
\u{space}\u{space}\u{space}\u{space}
    h3 {
        font-size: 1.25rem;
        margin-top: 1.25rem;
    }
\u{space}\u{space}\u{space}\u{space}
    .source {
        border: 1px solid #ddd;
        border-radius: 3px;
        padding: 1.5em;
        word-break: break-all;
    }
\u{space}\u{space}\u{space}\u{space}
    .callout {
        border-radius: 3px;
        padding: 1rem;
    }
\u{space}\u{space}\u{space}\u{space}
    figure {
        margin: 1.25em 0;
        page-break-inside: avoid;
    }
\u{space}\u{space}\u{space}\u{space}
    figcaption {
        opacity: 0.5;
        font-size: 85%;
        margin-top: 0.5em;
    }
\u{space}\u{space}\u{space}\u{space}
    mark {
        background-color: transparent;
    }
\u{space}\u{space}\u{space}\u{space}
    .indented {
        padding-left: 1.5em;
    }
\u{space}\u{space}\u{space}\u{space}
    hr {
        background: transparent;
        display: block;
        width: 100%;
        height: 1px;
        visibility: visible;
        border: none;
        border-bottom: 1px solid rgba(55, 53, 47, 0.09);
    }
\u{space}\u{space}\u{space}\u{space}
    img {
        max-width: 100%;
    }
\u{space}\u{space}\u{space}\u{space}
    @media only print {
        img {
            max-height: 100vh;
            object-fit: contain;
        }
    }
\u{space}\u{space}\u{space}\u{space}
    @page {
        margin: 1in;
    }
\u{space}\u{space}\u{space}\u{space}
    .collection-content {
        font-size: 0.875rem;
    }
\u{space}\u{space}\u{space}\u{space}
    .column-list {
        display: flex;
        justify-content: space-between;
    }
\u{space}\u{space}\u{space}\u{space}
    .column {
        padding: 0 1em;
    }
\u{space}\u{space}\u{space}\u{space}
    .column:first-child {
        padding-left: 0;
    }
\u{space}\u{space}\u{space}\u{space}
    .column:last-child {
        padding-right: 0;
    }
\u{space}\u{space}\u{space}\u{space}
    .table_of_contents-item {
        display: block;
        font-size: 0.875rem;
        line-height: 1.3;
        padding: 0.125rem;
    }
\u{space}\u{space}\u{space}\u{space}
    .table_of_contents-indent-1 {
        margin-left: 1.5rem;
    }
\u{space}\u{space}\u{space}\u{space}
    .table_of_contents-indent-2 {
        margin-left: 3rem;
    }
\u{space}\u{space}\u{space}\u{space}
    .table_of_contents-indent-3 {
        margin-left: 4.5rem;
    }
\u{space}\u{space}\u{space}\u{space}
    .table_of_contents-link {
        text-decoration: none;
        opacity: 0.7;
        border-bottom: 1px solid rgba(55, 53, 47, 0.18);
    }
\u{space}\u{space}\u{space}\u{space}
    table,
    th,
    td {
        border: 1px solid rgba(55, 53, 47, 0.09);
        border-collapse: collapse;
    }
\u{space}\u{space}\u{space}\u{space}
    table {
        border-left: none;
        border-right: none;
    }
\u{space}\u{space}\u{space}\u{space}
    th,
    td {
        font-weight: normal;
        padding: 0.25em 0.5em;
        line-height: 1.5;
        min-height: 1.5em;
        text-align: left;
    }
\u{space}\u{space}\u{space}\u{space}
    th {
        color: rgba(55, 53, 47, 0.6);
    }
\u{space}\u{space}\u{space}\u{space}
    ol,
    ul {
        margin: 0;
        margin-block-start: 0.6em;
        margin-block-end: 0.6em;
    }
\u{space}\u{space}\u{space}\u{space}
    li > ol:first-child,
    li > ul:first-child {
        margin-block-start: 0.6em;
    }
\u{space}\u{space}\u{space}\u{space}
    ul > li {
        list-style: disc;
    }
\u{space}\u{space}\u{space}\u{space}
    ul.to-do-list {
        padding-inline-start: 0;
    }
\u{space}\u{space}\u{space}\u{space}
    ul.to-do-list > li {
        list-style: none;
    }
\u{space}\u{space}\u{space}\u{space}
    .to-do-children-checked {
        text-decoration: line-through;
        opacity: 0.375;
    }
\u{space}\u{space}\u{space}\u{space}
    ul.toggle > li {
        list-style: none;
    }
\u{space}\u{space}\u{space}\u{space}
    ul {
        padding-inline-start: 1.7em;
    }
\u{space}\u{space}\u{space}\u{space}
    ul > li {
        padding-left: 0.1em;
    }
\u{space}\u{space}\u{space}\u{space}
    ol {
        padding-inline-start: 1.6em;
    }
\u{space}\u{space}\u{space}\u{space}
    ol > li {
        padding-left: 0.2em;
    }
\u{space}\u{space}\u{space}\u{space}
    .mono ol {
        padding-inline-start: 2em;
    }
\u{space}\u{space}\u{space}\u{space}
    .mono ol > li {
        text-indent: -0.4em;
    }
\u{space}\u{space}\u{space}\u{space}
    .toggle {
        padding-inline-start: 0em;
        list-style-type: none;
    }
\u{space}\u{space}\u{space}\u{space}
    /* Indent toggle children */
    .toggle > li > details {
        padding-left: 1.7em;
    }
\u{space}\u{space}\u{space}\u{space}
    .toggle > li > details > summary {
        margin-left: -1.1em;
    }
\u{space}\u{space}\u{space}\u{space}
    .selected-value {
        display: inline-block;
        padding: 0 0.5em;
        background: rgba(206, 205, 202, 0.5);
        border-radius: 3px;
        margin-right: 0.5em;
        margin-top: 0.3em;
        margin-bottom: 0.3em;
        white-space: nowrap;
    }
\u{space}\u{space}\u{space}\u{space}
    .collection-title {
        display: inline-block;
        margin-right: 1em;
    }
\u{space}\u{space}\u{space}\u{space}
    .page-description {
        margin-bottom: 2em;
    }
\u{space}\u{space}\u{space}\u{space}
    .simple-table {
        margin-top: 1em;
        font-size: 0.875rem;
        empty-cells: show;
    }
    .simple-table td {
        height: 29px;
        min-width: 120px;
    }
\u{space}\u{space}\u{space}\u{space}
    .simple-table th {
        height: 29px;
        min-width: 120px;
    }
\u{space}\u{space}\u{space}\u{space}
    .simple-table-header-color {
        background: rgb(247, 246, 243);
        color: black;
    }
    .simple-table-header {
        font-weight: 500;
    }
\u{space}\u{space}\u{space}\u{space}
    time {
        opacity: 0.5;
    }
\u{space}\u{space}\u{space}\u{space}
    .icon {
        display: inline-block;
        max-width: 1.2em;
        max-height: 1.2em;
        text-decoration: none;
        vertical-align: text-bottom;
        margin-right: 0.5em;
    }
\u{space}\u{space}\u{space}\u{space}
    img.icon {
        border-radius: 3px;
    }
\u{space}\u{space}\u{space}\u{space}
    .user-icon {
        width: 1.5em;
        height: 1.5em;
        border-radius: 100%;
        margin-right: 0.5rem;
    }
\u{space}\u{space}\u{space}\u{space}
    .user-icon-inner {
        font-size: 0.8em;
    }
\u{space}\u{space}\u{space}\u{space}
    .text-icon {
        border: 1px solid #000;
        text-align: center;
    }
\u{space}\u{space}\u{space}\u{space}
    .page-cover-image {
        display: block;
        object-fit: cover;
        width: 100%;
        max-height: 30vh;
    }
\u{space}\u{space}\u{space}\u{space}
    .page-header-icon {
        font-size: 3rem;
        margin-bottom: 1rem;
    }
\u{space}\u{space}\u{space}\u{space}
    .page-header-icon-with-cover {
        margin-top: -0.72em;
        margin-left: 0.07em;
    }
\u{space}\u{space}\u{space}\u{space}
    .page-header-icon img {
        border-radius: 3px;
    }
\u{space}\u{space}\u{space}\u{space}
    .link-to-page {
        margin: 1em 0;
        padding: 0;
        border: none;
        font-weight: 500;
    }
\u{space}\u{space}\u{space}\u{space}
    p > .user {
        opacity: 0.5;
    }
\u{space}\u{space}\u{space}\u{space}
    td > .user,
    td > time {
        white-space: nowrap;
    }
\u{space}\u{space}\u{space}\u{space}
    input[type="checkbox"] {
        transform: scale(1.5);
        margin-right: 0.6em;
        vertical-align: middle;
    }
\u{space}\u{space}\u{space}\u{space}
    p {
        margin-top: 0.5em;
        margin-bottom: 0.5em;
    }
\u{space}\u{space}\u{space}\u{space}
    .image {
        border: none;
        margin: 1.5em 0;
        padding: 0;
        border-radius: 0;
        text-align: center;
    }
\u{space}\u{space}\u{space}\u{space}
    .code,
    code {
        background: rgba(135, 131, 120, 0.15);
        border-radius: 3px;
        padding: 0.2em 0.4em;
        border-radius: 3px;
        font-size: 85%;
        tab-size: 2;
    }
\u{space}\u{space}\u{space}\u{space}
    code {
        color: #eb5757;
    }
\u{space}\u{space}\u{space}\u{space}
    .code {
        padding: 1.5em 1em;
    }
\u{space}\u{space}\u{space}\u{space}
    .code-wrap {
        white-space: pre-wrap;
        word-break: break-all;
    }
\u{space}\u{space}\u{space}\u{space}
    .code > code {
        background: none;
        padding: 0;
        font-size: 100%;
        color: inherit;
    }
\u{space}\u{space}\u{space}\u{space}
    blockquote {
        font-size: 1.25em;
        margin: 1em 0;
        padding-left: 1em;
        border-left: 3px solid rgb(55, 53, 47);
    }
\u{space}\u{space}\u{space}\u{space}
    .bookmark {
        text-decoration: none;
        max-height: 8em;
        padding: 0;
        display: flex;
        width: 100%;
        align-items: stretch;
    }
\u{space}\u{space}\u{space}\u{space}
    .bookmark-title {
        font-size: 0.85em;
        overflow: hidden;
        text-overflow: ellipsis;
        height: 1.75em;
        white-space: nowrap;
    }
\u{space}\u{space}\u{space}\u{space}
    .bookmark-text {
        display: flex;
        flex-direction: column;
    }
\u{space}\u{space}\u{space}\u{space}
    .bookmark-info {
        flex: 4 1 180px;
        padding: 12px 14px 14px;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
    }
\u{space}\u{space}\u{space}\u{space}
    .bookmark-image {
        width: 33%;
        flex: 1 1 180px;
        display: block;
        position: relative;
        object-fit: cover;
        border-radius: 1px;
    }
\u{space}\u{space}\u{space}\u{space}
    .bookmark-description {
        color: rgba(55, 53, 47, 0.6);
        font-size: 0.75em;
        overflow: hidden;
        max-height: 4.5em;
        word-break: break-word;
    }
\u{space}\u{space}\u{space}\u{space}
    .bookmark-href {
        font-size: 0.75em;
        margin-top: 0.25em;
    }
\u{space}\u{space}\u{space}\u{space}
    .sans { font-family: ui-sans-serif, -apple-system, BlinkMacSystemFont, "Segoe UI Variable Display", "Segoe UI", Helvetica, "Apple Color Emoji", Arial, sans-serif, "Segoe UI Emoji", "Segoe UI Symbol"; }
    .code { font-family: "SFMono-Regular", Menlo, Consolas, "PT Mono", "Liberation Mono", Courier, monospace; }
    .serif { font-family: Lyon-Text, Georgia, ui-serif, serif; }
    .mono { font-family: iawriter-mono, Nitti, Menlo, Courier, monospace; }
    .pdf .sans { font-family: Inter, ui-sans-serif, -apple-system, BlinkMacSystemFont, "Segoe UI Variable Display", "Segoe UI", Helvetica, "Apple Color Emoji", Arial, sans-serif, "Segoe UI Emoji", "Segoe UI Symbol", 'Twemoji', 'Noto Color Emoji', 'Noto Sans CJK JP'; }
    .pdf:lang(zh-CN) .sans { font-family: Inter, ui-sans-serif, -apple-system, BlinkMacSystemFont, "Segoe UI Variable Display", "Segoe UI", Helvetica, "Apple Color Emoji", Arial, sans-serif, "Segoe UI Emoji", "Segoe UI Symbol", 'Twemoji', 'Noto Color Emoji', 'Noto Sans CJK SC'; }
    .pdf:lang(zh-TW) .sans { font-family: Inter, ui-sans-serif, -apple-system, BlinkMacSystemFont, "Segoe UI Variable Display", "Segoe UI", Helvetica, "Apple Color Emoji", Arial, sans-serif, "Segoe UI Emoji", "Segoe UI Symbol", 'Twemoji', 'Noto Color Emoji', 'Noto Sans CJK TC'; }
    .pdf:lang(ko-KR) .sans { font-family: Inter, ui-sans-serif, -apple-system, BlinkMacSystemFont, "Segoe UI Variable Display", "Segoe UI", Helvetica, "Apple Color Emoji", Arial, sans-serif, "Segoe UI Emoji", "Segoe UI Symbol", 'Twemoji', 'Noto Color Emoji', 'Noto Sans CJK KR'; }
    .pdf .code { font-family: Source Code Pro, "SFMono-Regular", Menlo, Consolas, "PT Mono", "Liberation Mono", Courier, monospace, 'Twemoji', 'Noto Color Emoji', 'Noto Sans Mono CJK JP'; }
    .pdf:lang(zh-CN) .code { font-family: Source Code Pro, "SFMono-Regular", Menlo, Consolas, "PT Mono", "Liberation Mono", Courier, monospace, 'Twemoji', 'Noto Color Emoji', 'Noto Sans Mono CJK SC'; }
    .pdf:lang(zh-TW) .code { font-family: Source Code Pro, "SFMono-Regular", Menlo, Consolas, "PT Mono", "Liberation Mono", Courier, monospace, 'Twemoji', 'Noto Color Emoji', 'Noto Sans Mono CJK TC'; }
    .pdf:lang(ko-KR) .code { font-family: Source Code Pro, "SFMono-Regular", Menlo, Consolas, "PT Mono", "Liberation Mono", Courier, monospace, 'Twemoji', 'Noto Color Emoji', 'Noto Sans Mono CJK KR'; }
    .pdf .serif { font-family: PT Serif, Lyon-Text, Georgia, ui-serif, serif, 'Twemoji', 'Noto Color Emoji', 'Noto Serif CJK JP'; }
    .pdf:lang(zh-CN) .serif { font-family: PT Serif, Lyon-Text, Georgia, ui-serif, serif, 'Twemoji', 'Noto Color Emoji', 'Noto Serif CJK SC'; }
    .pdf:lang(zh-TW) .serif { font-family: PT Serif, Lyon-Text, Georgia, ui-serif, serif, 'Twemoji', 'Noto Color Emoji', 'Noto Serif CJK TC'; }
    .pdf:lang(ko-KR) .serif { font-family: PT Serif, Lyon-Text, Georgia, ui-serif, serif, 'Twemoji', 'Noto Color Emoji', 'Noto Serif CJK KR'; }
    .pdf .mono { font-family: PT Mono, iawriter-mono, Nitti, Menlo, Courier, monospace, 'Twemoji', 'Noto Color Emoji', 'Noto Sans Mono CJK JP'; }
    .pdf:lang(zh-CN) .mono { font-family: PT Mono, iawriter-mono, Nitti, Menlo, Courier, monospace, 'Twemoji', 'Noto Color Emoji', 'Noto Sans Mono CJK SC'; }
    .pdf:lang(zh-TW) .mono { font-family: PT Mono, iawriter-mono, Nitti, Menlo, Courier, monospace, 'Twemoji', 'Noto Color Emoji', 'Noto Sans Mono CJK TC'; }
    .pdf:lang(ko-KR) .mono { font-family: PT Mono, iawriter-mono, Nitti, Menlo, Courier, monospace, 'Twemoji', 'Noto Color Emoji', 'Noto Sans Mono CJK KR'; }
    .highlight-default {
        color: rgba(55, 53, 47, 1);
    }
    .highlight-gray {
        color: rgba(120, 119, 116, 1);
        fill: rgba(120, 119, 116, 1);
    }
    .highlight-brown {
        color: rgba(159, 107, 83, 1);
        fill: rgba(159, 107, 83, 1);
    }
    .highlight-orange {
        color: rgba(217, 115, 13, 1);
        fill: rgba(217, 115, 13, 1);
    }
    .highlight-yellow {
        color: rgba(203, 145, 47, 1);
        fill: rgba(203, 145, 47, 1);
    }
    .highlight-teal {
        color: rgba(68, 131, 97, 1);
        fill: rgba(68, 131, 97, 1);
    }
    .highlight-blue {
        color: rgba(51, 126, 169, 1);
        fill: rgba(51, 126, 169, 1);
    }
    .highlight-purple {
        color: rgba(144, 101, 176, 1);
        fill: rgba(144, 101, 176, 1);
    }
    .highlight-pink {
        color: rgba(193, 76, 138, 1);
        fill: rgba(193, 76, 138, 1);
    }
    .highlight-red {
        color: rgba(212, 76, 71, 1);
        fill: rgba(212, 76, 71, 1);
    }
    .highlight-default_background {
        color: rgba(55, 53, 47, 1);
    }
    .highlight-gray_background {
        background: rgba(248, 248, 247, 1);
    }
    .highlight-brown_background {
        background: rgba(244, 238, 238, 1);
    }
    .highlight-orange_background {
        background: rgba(251, 236, 221, 1);
    }
    .highlight-yellow_background {
        background: rgba(251, 243, 219, 1);
    }
    .highlight-teal_background {
        background: rgba(237, 243, 236, 1);
    }
    .highlight-blue_background {
        background: rgba(231, 243, 248, 1);
    }
    .highlight-purple_background {
        background: rgba(248, 243, 252, 1);
    }
    .highlight-pink_background {
        background: rgba(252, 241, 246, 1);
    }
    .highlight-red_background {
        background: rgba(253, 235, 236, 1);
    }
    .block-color-default {
        color: inherit;
        fill: inherit;
    }
    .block-color-gray {
        color: rgba(120, 119, 116, 1);
        fill: rgba(120, 119, 116, 1);
    }
    .block-color-brown {
        color: rgba(159, 107, 83, 1);
        fill: rgba(159, 107, 83, 1);
    }
    .block-color-orange {
        color: rgba(217, 115, 13, 1);
        fill: rgba(217, 115, 13, 1);
    }
    .block-color-yellow {
        color: rgba(203, 145, 47, 1);
        fill: rgba(203, 145, 47, 1);
    }
    .block-color-teal {
        color: rgba(68, 131, 97, 1);
        fill: rgba(68, 131, 97, 1);
    }
    .block-color-blue {
        color: rgba(51, 126, 169, 1);
        fill: rgba(51, 126, 169, 1);
    }
    .block-color-purple {
        color: rgba(144, 101, 176, 1);
        fill: rgba(144, 101, 176, 1);
    }
    .block-color-pink {
        color: rgba(193, 76, 138, 1);
        fill: rgba(193, 76, 138, 1);
    }
    .block-color-red {
        color: rgba(212, 76, 71, 1);
        fill: rgba(212, 76, 71, 1);
    }
    .block-color-default_background {
        color: inherit;
        fill: inherit;
    }
    .block-color-gray_background {
        background: rgba(248, 248, 247, 1);
    }
    .block-color-brown_background {
        background: rgba(244, 238, 238, 1);
    }
    .block-color-orange_background {
        background: rgba(251, 236, 221, 1);
    }
    .block-color-yellow_background {
        background: rgba(251, 243, 219, 1);
    }
    .block-color-teal_background {
        background: rgba(237, 243, 236, 1);
    }
    .block-color-blue_background {
        background: rgba(231, 243, 248, 1);
    }
    .block-color-purple_background {
        background: rgba(248, 243, 252, 1);
    }
    .block-color-pink_background {
        background: rgba(252, 241, 246, 1);
    }
    .block-color-red_background {
        background: rgba(253, 235, 236, 1);
    }
    .select-value-color-uiBlue { background-color: undefined; }
    .select-value-color-pink { background-color: rgba(225, 136, 179, 0.27); }
    .select-value-color-purple { background-color: rgba(168, 129, 197, 0.27); }
    .select-value-color-green { background-color: rgba(123, 183, 129, 0.27); }
    .select-value-color-gray { background-color: rgba(84, 72, 49, 0.15); }
    .select-value-color-transparentGray { background-color: undefined; }
    .select-value-color-translucentGray { background-color: undefined; }
    .select-value-color-orange { background-color: rgba(224, 124, 57, 0.27); }
    .select-value-color-brown { background-color: rgba(210, 162, 141, 0.35); }
    .select-value-color-red { background-color: rgba(244, 171, 159, 0.4); }
    .select-value-color-yellow { background-color: rgba(236, 191, 66, 0.39); }
    .select-value-color-blue { background-color: rgba(93, 165, 206, 0.27); }
    .select-value-color-pageGlass { background-color: undefined; }
    .select-value-color-washGlass { background-color: undefined; }
\u{space}\u{space}\u{space}\u{space}
    .checkbox {
        display: inline-flex;
        vertical-align: text-bottom;
        width: 16;
        height: 16;
        background-size: 16px;
        margin-left: 2px;
        margin-right: 5px;
    }
\u{space}\u{space}\u{space}\u{space}
    .checkbox-on {
        background-image: url("data:image/svg+xml;charset=UTF-8,%3Csvg%20width%3D%2216%22%20height%3D%2216%22%20viewBox%3D%220%200%2016%2016%22%20fill%3D%22none%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%0A%3Crect%20width%3D%2216%22%20height%3D%2216%22%20fill%3D%22%2358A9D7%22%2F%3E%0A%3Cpath%20d%3D%22M6.71429%2012.2852L14%204.9995L12.7143%203.71436L6.71429%209.71378L3.28571%206.2831L2%207.57092L6.71429%2012.2852Z%22%20fill%3D%22white%22%2F%3E%0A%3C%2Fsvg%3E");
    }
\u{space}\u{space}\u{space}\u{space}
    .checkbox-off {
        background-image: url("data:image/svg+xml;charset=UTF-8,%3Csvg%20width%3D%2216%22%20height%3D%2216%22%20viewBox%3D%220%200%2016%2016%22%20fill%3D%22none%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%0A%3Crect%20x%3D%220.75%22%20y%3D%220.75%22%20width%3D%2214.5%22%20height%3D%2214.5%22%20fill%3D%22white%22%20stroke%3D%22%2336352F%22%20stroke-width%3D%221.5%22%2F%3E%0A%3C%2Fsvg%3E");
    }
\u{space}\u{space}\u{space}\u{space}\u{space}\u{space}\u{space}\u{space}
    </style></head><body><article id="1d1604ef-9b4b-8020-9a43-e475a43661a0" class="page sans"><header><h1 class="page-title">Smart Calendar Reminder: Your Intelligent Schedule Assistant</h1><p class="page-description"></p></header><div class="page-body"><figure class="block-color-blue_background callout" style="white-space:pre-wrap;display:flex" id="1d1604ef-9b4b-80b2-927b-ddb2d55d6032"><div style="width:100%">👋 Welcome to Smart Calendar Reminder! This welcome message appears only during your first use.</div></figure><h1 id="1d1604ef-9b4b-80c5-a289-d2aedc69317d" class="block-color-yellow_background">Transform Your Calendar Experience</h1><p id="1d1604ef-9b4b-80f7-ac48-d98bc2a805e6" class="">While iOS Calendar is fantastic for basic scheduling, we all know those built-in reminders can be easy to miss. Adding manual alarms, calculating travel times, and customizing notifications with event details can become tedious and time-consuming. That&#x27;s where Smart Calendar Reminder comes in - your automated solution for intelligent schedule management!</p><h2 id="1d1604ef-9b4b-800f-9752-cb68ca87b1cf" class="">Powerful Features at Your Fingertips</h2><ul id="0ecdba52-af59-410f-9efb-321f8e2d4ba6" class="bulleted-list"><li style="list-style-type:disc">Seamless Calendar Integration - No manual input needed</li></ul><ul id="1d1604ef-9b4b-80b9-8d0d-fe7b3c28115b" class="bulleted-list"><li style="list-style-type:disc">Intelligent Travel Time Calculations powered by Apple Maps</li></ul><ul id="4f6b7aca-7c92-458d-9996-e8f891a3775d" class="bulleted-list"><li style="list-style-type:disc">Spoken Event Details - Hear your schedule clearly</li></ul><ul id="1d1604ef-9b4b-80f5-9fe9-ee50fd3e7795" class="bulleted-list"><li style="list-style-type:disc">Smart Preparation Time Management</li></ul><h2 id="fa2195d7-f08f-4058-a00a-18e2b562b5b2" class="">Smart Location Intelligence</h2><p id="1d1604ef-9b4b-80d3-9799-dd97b27a3773" class="">Our advanced travel time calculation system uses three methods to determine your departure location, in order of priority:</p><ol type="1" id="667c5bbb-f94c-480b-bccd-c84948a3c40f" class="numbered-list" start="1"><li>Custom Departure Address - Add this JSON format in your calendar event notes for specific departure points:<script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/prism.min.js" integrity="sha512-7Z9J3l1+EYfeaPKcGXu3MS/7T+w19WtKQY/n+xzmw4hZhJ9tyYmcUS+4QqAlzhicE5LAfMQSF3iFTK9bQdTxXg==" crossorigin="anonymous" referrerPolicy="no-referrer"></script><link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism.min.css" integrity="sha512-tN7Ec6zAFaVSG3TpNAKtk4DOHNpSwKHxxrsiw4GHKESGPs5njn/0sMCUMl2svV4wo4BK/rCP7juYz+zx+l6oeQ==" crossorigin="anonymous" referrerPolicy="no-referrer"/><pre id="1d1604ef-9b4b-80d1-9d4b-dfb42d06c7b8" class="code"><code class="language-JSON">{
        &quot;Street&quot;: &quot;your departure street&quot;,
        &quot;City&quot;: &quot;your departure city&quot;,
        &quot;State&quot;: &quot;your departure state&quot;,
        &quot;Country&quot;: &quot;your departure country&quot;,
        &quot;Postcode&quot;: &quot;your departure postcode&quot;
    }</code></pre></li></ol><ol type="1" id="1d1604ef-9b4b-80c6-b468-d002dd94b75d" class="numbered-list" start="2"><li>Home Address - Uses your pre-configured home address - perfect for regular schedules</li></ol><ol type="1" id="aba3d861-a84a-48f6-a163-ac441f18b1b3" class="numbered-list" start="3"><li>Current Location - Automatically uses your current position as a fallback</li></ol><figure class="block-color-yellow_background callout" style="white-space:pre-wrap;display:flex" id="1d1604ef-9b4b-80ed-a48d-f0cad158ed60"><div style="width:100%">Smart Travel Planning: The system automatically calculates additional travel time if you&#x27;re not at your departure location!</div></figure><h2 id="efb3fa4e-d05f-4bd3-bd94-b9b991e29ce4" class="">Voice Announcements</h2><ul id="1d1604ef-9b4b-8076-9c50-fcefa4c4903c" class="bulleted-list"><li style="list-style-type:disc">Hourly Schedule Updates: Hear upcoming events at the start of each hour</li></ul><ul id="a0eb2cf6-1637-4d13-94c8-356fd19cd78a" class="bulleted-list"><li style="list-style-type:disc">Smart Reminders: Get spoken alerts at perfectly timed intervals</li></ul><h2 id="1d1604ef-9b4b-80dd-9df1-d8fae003cae6" class="">Intelligent Automation System</h2><p id="15ce45ed-b4fa-4b81-bbd0-2fa585b5c7ce" class="">Our sophisticated automation system ensures you never miss an important event:</p><ul id="1d1604ef-9b4b-80c5-a181-f10518e7e73d" class="bulleted-list"><li style="list-style-type:disc">Daily Planning: 12:00 AM check of your next 24 hours</li></ul><ul id="f54bf941-4703-4cc3-9f61-408f1eed72ee" class="bulleted-list"><li style="list-style-type:disc">Real-time Updates: Hourly recalculation of travel times</li></ul><ul id="1d1604ef-9b4b-800d-b8f8-e85831f4b0ee" class="bulleted-list"><li style="list-style-type:disc">Dynamic Adjustments: Automatic alarm optimization</li></ul><figure class="block-color-gray_background callout" style="white-space:pre-wrap;display:flex" id="1d1604ef-9b4b-8075-9657-ed6135b16d17"><div style="width:100%">Example: For a 10:30 AM meeting with 3 hours total travel time, the system ensures your 7:30 AM alarm is set and continuously optimized based on real-time conditions.</div></figure><h1 id="1d1604ef-9b4b-803a-8fbf-c89822dbca0a" class="block-color-blue">Setup Guide</h1><p id="1d1604ef-9b4b-80a7-ae75-c35724896e17" class="">Let&#x27;s get your Smart Calendar Reminder configured with four essential automations:</p><h2 id="1d1604ef-9b4b-8072-ab56-d0757b2435ef" class="block-color-gray_background">Automation 1: Daily 12:00 AM Check</h2><p id="1d1604ef-9b4b-80c9-9b4a-ee2712524a0d" class="block-color-blue">Step 1. Open Shortcuts and tap [Automation], then tap [+] at the top right corner</p><figure id="1d1604ef-9b4b-8043-b390-ff859889379f" class="image"><a href="gZWfH4Kler-left.png"><img style="width:709.984375px" src="https://i.imgur.com/za6VDMA.jpeg"/></a></figure><p id="1d1604ef-9b4b-804a-9cb1-f487991237c6" class="">Step 2. Tap [Time of Day]</p><figure id="1d1604ef-9b4b-8085-99bb-e3d90115d5dd" class="image"><a href="NDyjdrLrYZ-left.png"><img style="width:709.984375px" src="https://i.imgur.com/z7aJ0OB.jpeg"/></a></figure><p id="1d1604ef-9b4b-806d-a7eb-f652a480cbc6" class="">Step 3. Follow the sequence shown in the image</p><figure id="1d1604ef-9b4b-80cd-9ca5-fc076df31898" class="image"><a href="6KJEFinDm6-left.png"><img style="width:709.984375px" src="https://i.imgur.com/u6C2AR9.jpeg"/></a></figure><p id="1d1604ef-9b4b-8050-b817-f0e2368f43ca" class="block-color-gray_background">Step 4. Tap [New Blank Automation]</p><figure id="1d1604ef-9b4b-8028-b872-eed1a3f6701a" class="image"><a href="XblW6TFHek-left.png"><img style="width:709.984375px" src="https://i.imgur.com/nrTr7Np.jpeg"/></a></figure><p id="b8f8c3cf-7fdc-4a99-b2ba-60e18fef34c7" class="">Step 5. Search for the [Number] action</p><figure id="1d1604ef-9b4b-80d0-ad58-f7a1dc1d1c48" class="image"><a href="4XgUTG3h3E-left.png"><img style="width:709.984375px" src="https://i.imgur.com/F6jogMJ.jpeg"/></a></figure><p id="1d1604ef-9b4b-804e-9fe3-c5b6fc8701fa" class="">Step 6. Input number 1</p><figure id="1d1604ef-9b4b-8056-be0b-c4cfaebae0f7" class="image"><a href="n0XhfXtA03-left.png"><img style="width:709.984375px" src="https://i.imgur.com/HUMvkry.jpeg"/></a></figure><p id="1d1604ef-9b4b-8004-b82f-c5b6250d69c0" class="">Step 7. Search for [Run Shortcut] action</p><figure id="1d1604ef-9b4b-801d-a2d0-e444c55bbdb1" class="image"><a href="BUB7V9ITn8-left.png"><img style="width:709.984375px" src="https://i.imgur.com/IbHA9Jf.jpeg"/></a></figure><p id="1d1604ef-9b4b-8031-a595-d6b268bb5bfc" class="">Step 8. Search and select [Smart Calendar Reminder] in [Run Shortcut] action’s shortcut field.</p><figure id="1d1604ef-9b4b-804c-8be0-d6060e3b5a73" class="image"><a href="b50xsbc2QT-left.png"><img style="width:709.984375px" src="https://i.imgur.com/41WbF2A.png"/></a></figure><p id="1d1604ef-9b4b-805d-96d8-c871e0493bdb" class="block-color-default_background">Step 9. Tap [Done] in the top right corner to complete setup</p><figure id="1d1604ef-9b4b-8024-864a-d9002a94e719" class="image"><a href="LjO11dxjS3-left.png"><img style="width:709.984375px" src="https://i.imgur.com/tmrW6r8.jpeg"/></a></figure><h2 id="1d1604ef-9b4b-8045-9247-e3afd799f547" class="">Automation 2: Hourly Check</h2><p id="1d1604ef-9b4b-809c-900e-e425d52b7a0a" class="">Follow the same steps as Automation 1, with these modifications:</p><ul id="1d1604ef-9b4b-80a8-9819-cfd9961eb078" class="bulleted-list"><li style="list-style-type:disc">In step 3, select all <em><strong><span style="border-bottom:0.05em solid">24 hourly times</span></strong></em></li></ul><ul id="1d1604ef-9b4b-80b3-b766-ed9c851957a5" class="bulleted-list"><li style="list-style-type:disc">In step 6, input number <strong>2</strong> instead of 1</li></ul><h2 id="1d1604ef-9b4b-80ad-a1ea-e247f84f2063" class="">Automation 3: Alarm Trigger</h2><p id="1d1604ef-9b4b-8044-9254-f9d3912d6d6c" class="">Follow the same steps as Automation 1, with these changes:</p><ul id="1d1604ef-9b4b-802e-98b3-c8202e4f8765" class="bulleted-list"><li style="list-style-type:disc">In step 2, tap [<strong>Alarm</strong>] instead of [Time of Day]</li></ul><ul id="1d1604ef-9b4b-80a5-9ccc-d6a2906a3429" class="bulleted-list"><li style="list-style-type:disc">Configure settings as shown:</li></ul><figure id="1d1604ef-9b4b-8014-b883-f88df7a348e1" class="image"><a href="fIF3p3ttC0-left.png"><img style="width:709.984375px" src="https://i.imgur.com/MTyZ3km.png"/></a></figure><ul id="1d1604ef-9b4b-80dc-a6f8-edc73fc17118" class="bulleted-list"><li style="list-style-type:disc">In step 6, input number <strong>3</strong> instead of 1</li></ul><h2 id="1d1604ef-9b4b-8025-9db9-e83367a64cdb" class="">Automation 4: Alarm Stop</h2><p id="1d1604ef-9b4b-805f-afe2-f2de398e695a" class="">Follow the same steps as Automation 1, with these changes:</p><ul id="10aa2fe6-80f0-4850-93c0-4fe14b146190" class="bulleted-list"><li style="list-style-type:disc">In step 2, tap [<strong>Alarm</strong>] instead of [Time of Day]</li></ul><ul id="1d1604ef-9b4b-80aa-baad-e6dd7acf4ad9" class="bulleted-list"><li style="list-style-type:disc">Configure settings as shown:</li></ul><figure id="1d1604ef-9b4b-8068-a490-e601bfafcfe7" class="image"><a href="E24uC2vV2j-left.png"><img style="width:709.984375px" src="https://i.imgur.com/2LbJK9D.png"/></a></figure><ul id="1d1604ef-9b4b-804f-bcba-f64ec9bd67f1" class="bulleted-list"><li style="list-style-type:disc">In step 6, input number <strong>4</strong> instead of 1</li></ul><figure class="block-color-teal_background callout" style="white-space:pre-wrap;display:flex" id="1d1604ef-9b4b-8031-8b44-ddb00fab6dee"><div style="width:100%">🎉 Congratulations! Once you&#x27;ve completed these automations, your Smart Calendar Reminder is ready to revolutionize your schedule management!</div></figure></div></article><span class="sans" style="font-size:14px;padding-top:2em"></span></body></html>

〔28〕 Set Name of 〔27 Text〕 to Welcome.html　» 29 30

〔29〕 Show Web View at 〔28 Renamed Item〕

〔30〕 Make PDF from 〔28 Renamed Item〕　»

〔31〕 Save File 〔30 PDF〕
• AskWhereToSave: false
• SaveFileOverwrite: true
• FileDestinationPath: 〔3 Version Dictionary .Name〕/Welcome.pdf

〔32〕 End If　▵26

〔33〕 Dictionary 　➔ menus　»
{  "mainMenu": {
      "Setup": {
         "title": "Setup",
         "sub": "Set Personal Preferences",
         "icon": "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"
      },
      "Change": {
         "title": "Change",
         "sub": "Change Personal Preferences",
         "icon": "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"
      },
      "View": {
         "title": "View",
         "sub": "View Personal Preferences or Automations Setup Inctructions",
         "icon": "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"
      }
   }
}

〔34〕 Get Dictionary from 〔33 menus.mainMenu〕　»

〔35〕 Repeat with Each in 〔34 Dictionary〕

〔36〕 Get Dictionary All Values in 〔Repeat Item as Dictionary〕 　➔ Options　»
• DictionaryKey: 〔Repeat Item as Dictionary’s Keys〕.title

〔37〕 Repeat[2] with Each in 〔36 Options as Dictionary〕

〔38〕 Text
BEGIN:VCARD
VERSION:3.0
N;CHARSET=utf-8:〔Repeat Item 2 as Dictionary.title〕;
ORG:〔Repeat Item 2 as Dictionary.sub〕;
PHOTO;ENCODING=b:〔Repeat Item 2 as Dictionary.icon〕;
END:VCARD

〔39〕 End Repeat[2] with Each

〔40〕 End Repeat with Each　»

〔41〕 Text　»
〔40 Repeat Results〕

〔42〕 Set Name of 〔41 Text〕 to mainMenu.vcf　»

〔43〕 Get Contacts from 〔42 Renamed Item〕　»

〔44〕 Choose from List 〔43 Contacts〕　» 45 78 83
• ChooseFromListActionPrompt: ☀️Welcome to Smart Calendar Reminder☀️

〔45〕 If 〔44 Selected Item’s Name〕 is Setup

〔46〕 Get File at Path 〔3 Version Dictionary .Name〕/aboutme.txt from Folder　»
• FileErrorIfNotFound: false

〔47〕 If 〔46 File’s File Size〕 does not have any value

〔48〕 Comment
All the information is stored in iCloud. The shortcut isn’t collecting anything.

〔49〕 Text　»
Choose Travel Time Calculation Method

1️⃣ Notes 🗓️ / Current 📍\u000D
Uses the address in the Calendar event Notes if available (routing via Notes if you're not already there), otherwise calculates directly from your current location to the event.\u000D
\u000D
2️⃣ Notes 🗓️ / Home 🏡\u000D
Uses the Notes address if available (same as 1️⃣), but if Notes are empty, routes via your home address if you're not already there, or directly from home if you are.\u000D
\u000D

〔50〕 Choose from Menu
• MenuPrompt: 〔49 Text〕
• MenuItems: [1️⃣ Notes 🗓️ / Current 📍,
2️⃣ Notes 🗓️ / Home 🏡]

〔51〕 Menu Item 1️⃣ Notes 🗓️ / Current 📍

〔52〕 Dictionary　»
{  "state": "\"\"",
   "street": "\"\"",
   "city": "\"\"",
   "country": "\"\"",
   "postcode": "\"\""
}

〔53〕 Set Variable HomeAddress to 〔52 Dictionary〕

〔54〕 Menu Item 2️⃣ Notes 🗓️ / Home 🏡

〔55〕 Text　»
Please provide your home address for accurate travel time calculations via Apple Maps.

〔56〕 Text　»
<!DOCTYPE html>
<html>
<head>
    <title>Address Collector</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        /* Modern CSS styling */
        body {
            font-family: 'Segoe UI', sans-serif;
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            padding: 20px;
            min-height: 100vh;
        }

        .form-container {
            max-width: 500px;
            margin: 20px auto;
            background: white;
            padding: 25px;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        }

        h2 {
            color: #2c3e50;
            text-align: center;
            margin-bottom: 25px;
        }

        .form-group {
            margin-bottom: 20px;
        }

        label {
            display: block;
            margin-bottom: 8px;
            color: #34495e;
            font-weight: 500;
        }

        input {
            width: 100%;
            padding: 12px;
            margin: 0; /* Equal left/right margins */
            border: 2px solid #e0e0e0;
            border-radius: 8px;
            font-size: 16px;
            transition: border-color 0.3s ease;
            box-sizing: border-box; /* Ensures padding doesn't affect width */
        }

        input:focus {
            outline: none;
            border-color: #3498db;
            box-shadow: 0 0 8px rgba(52, 152, 219, 0.2);
        }

        button {
            background: #3498db;
            color: white;
            padding: 15px 30px;
            border: none;
            border-radius: 8px;
            font-size: 16px;
            cursor: pointer;
            width: 100%;
            transition: background 0.3s ease;
        }

        button:hover {
            background: #2980b9;
        }

        /* New success message styling */
        .success-message {
            display: none;
            background: #e8f5e9;
            color: #2e7d32;
            padding: 20px;
            border-radius: 8px;
            margin-top: 20px;
            text-align: center;
        }

        .success-message.show {
            display: block;
        }
    </style>
</head>
<body>
    <div class="form-container">
        <h2>〔55 Text〕</h2>
        <form id="addressForm">
            <div class="form-group">
                <label>Street Address</label>
                <input type="text" id="street" placeholder="" required>
            </div>

            <div class="form-group">
                <label>City</label>
                <input type="text" id="city" placeholder="" required>
            </div>

            <div class="form-group">
                <label>State/Province</label>
                <input type="text" id="state" placeholder="" required>
            </div>

            <div class="form-group">
                <label>Country/Region</label>
                <input type="text" id="country" placeholder="" required>
            </div>

            <div class="form-group">
                <label>Postal Code</label>
                <input type="text" id="postcode" placeholder="" required>
            </div>

            <button type="button" onclick="sendToShortcut()">Submit Address</button>
        </form>

        <!-- Success message container -->
        <div class="success-message" id="successMessage">
            <p>Data collected successfully!</p>
        </div>
    </div>

<script>
function sendToShortcut() {
  const addressData = {
    street: document.getElementById('street').value,
    city: document.getElementById('city').value,
    state: document.getElementById('state').value,
    country: document.getElementById('country').value,
    postcode: document.getElementById('postcode').value
  };
\u{space}\u{space}
  // Copy data to clipboard
  navigator.clipboard.writeText(JSON.stringify(addressData));
\u{space}\u{space}
  // Show success message and hide form
  document.getElementById('addressForm').style.display = 'none';
  document.getElementById('successMessage').classList.add('show');
}
</script>
</body>
</html>

〔57〕 Set Name of 〔56 Text〕 to Address.html　»

〔58〕 Show Web View at 〔57 Renamed Item〕

〔59〕 Get Clipboard　»

〔60〕 Get Dictionary from 〔59 Clipboard〕　»

〔61〕 Set Variable HomeAddress to 〔60 Dictionary〕

〔62〕 End Menu　▵54

〔63〕 List　» 65
[Driving,
Walking,
Transit,
Biking]

〔64〕 Text　»
Select Travel Method (It will apply to all the events)

〔65〕 Choose from List 〔63 List〕 　➔ Travel Method Selected　»
• ChooseFromListActionPrompt: 〔64 Text〕

〔66〕 Set Variable TravelMethod to 〔65 Travel Method Selected〕

〔67〕 Text　»
Besides travel time, how many Extra Minutes Needed (e.g., '15 mins buffer')

〔68〕 Ask for Number Input 　➔ Extra Time Needed　»
• AskActionPrompt: 〔67 Text〕
• AskActionAllowsNegativeNumbers: false
• AskActionAllowsDecimalNumbers: false

〔69〕 Set Variable ExtraTime to 〔68 Extra Time Needed〕

〔70〕 Dictionary　»
{  "HomeAddress": "〔HomeAddress as Dictionary〕",
   "TravelMethod": "〔TravelMethod〕",
   "ExtraTime": "〔ExtraTime〕"
}

〔71〕 Text　»
〔70 Dictionary〕

〔72〕 Save File 〔71 Text〕
• Folder: {  "fileLocation": {
      "crossDeviceItemID": "docs.icloud.com:iCloud.is.workflow.my.workflows/documents/e51c720424ec90d3260ccd6f241343baea15b7f3",
      "fileProviderDomainID": "com.apple.CloudDocs.iCloudDriveFileProvider/46CA22EA-49CD-4A1D-9512-F48B36AA64B5",
      "appContainerBundleIdentifier": "com.apple.shortcuts",
      "relativeSubpath": "",
      "WFFileLocationType": "Shortcuts"
   },
   "filename": "Documents",
   "displayName": "Shortcuts"
}
• AskWhereToSave: false
• SaveFileOverwrite: true
• FileDestinationPath: 〔3 Version Dictionary .Name〕/aboutme.txt

〔73〕 Otherwise　▵47

〔74〕 Show Alert You have set up. If you want to modify, please tap [Change] instead.
• AlertActionCancelButtonShown: false

〔75〕 Run Shortcut Smart Calendar Reminder
• Workflow: {  "workflowIdentifier": "5A2BC55E-C195-4C6C-93E9-725F782CDD1B",
   "isSelf": true,
   "workflowName": "Smart Calendar Reminder"
}

〔76〕 End If

〔77〕 End If　▵45

〔78〕 If 〔44 Selected Item’s Name〕 is Change

〔79〕 Delete Files {  "fileLocation": {
      "crossDeviceItemID": "docs.icloud.com:iCloud.is.workflow.my.workflows/9F38EF56-AD52-45E7-8B63-200CBFF0E713/a708662a11276f4b1fa48be3c50990fd13a4ccdf",
      "fileProviderDomainID": "com.apple.CloudDocs.iCloudDriveFileProvider/F1A50FD9-D64E-426C-8EB2-9C6216034396",
      "appContainerBundleIdentifier": "com.apple.systemactions",
      "relativeSubpath": "Smart Calendar Reminder/aboutme.txt",
      "WFFileLocationType": "Shortcuts"
   },
   "filename": "aboutme.txt",
   "displayName": "aboutme.txt"
}
• DeleteImmediatelyDelete: true

〔80〕 Show Alert Your preferences are deleted. Please choose [Setup] from main menu to set up again.
• AlertActionCancelButtonShown: false

〔81〕 Run Shortcut Smart Calendar Reminder
• Workflow: {  "workflowIdentifier": "5A2BC55E-C195-4C6C-93E9-725F782CDD1B",
   "isSelf": true,
   "workflowName": "Smart Calendar Reminder"
}

〔82〕 End If

〔83〕 If 〔44 Selected Item’s Name〕 is View

〔84〕 Choose from Menu
• MenuItems: [Automations Setup Instructions,
Personal Preferences]

〔85〕 Menu Item Automations Setup Instructions

〔86〕 Open File {  "fileLocation": {
      "crossDeviceItemID": "docs.icloud.com:iCloud.is.workflow.my.workflows/E4DA358A-5903-4CC2-BBC8-FD498ED6EDB3/d459a12be98fb7e83aed794c6d0dcf774ef5d814",
      "fileProviderDomainID": "com.apple.CloudDocs.iCloudDriveFileProvider/F1A50FD9-D64E-426C-8EB2-9C6216034396",
      "appContainerBundleIdentifier": "com.apple.systemactions",
      "relativeSubpath": "Smart Calendar Reminder/Welcome.pdf",
      "WFFileLocationType": "Shortcuts"
   },
   "filename": "Welcome.pdf",
   "displayName": "Welcome.pdf"
}

〔87〕 Menu Item Personal Preferences

〔88〕 Open File {  "fileLocation": {
      "crossDeviceItemID": "docs.icloud.com:iCloud.is.workflow.my.workflows/81672621-501F-4225-8CDA-11AAF2112D81/06302c85b44ba41f3258ff7d1669b31859a28556",
      "fileProviderDomainID": "com.apple.CloudDocs.iCloudDriveFileProvider/F1A50FD9-D64E-426C-8EB2-9C6216034396",
      "appContainerBundleIdentifier": "com.apple.systemactions",
      "relativeSubpath": "Smart Calendar Reminder/aboutme.txt",
      "WFFileLocationType": "Shortcuts"
   },
   "filename": "aboutme.txt",
   "displayName": "aboutme.txt"
}

〔89〕 End Menu

〔90〕 End If　▵83

〔91〕 Otherwise　▵0

〔92〕 If 〔Shortcut Input as Number〕 is 1

〔93〕 Comment
*Revolutionizing event management by integrating calendar data with intelligent automation:

Voice announcements for upcoming events

Dynamic alarm calculation (travel + prep time)

Calendar-driven scheduling system
Eliminates manual reminders and ensures perfect timing synchronization*

〔94〕 Get File at Path Smart Calendar Reminder/aboutme.txt from Folder　»
• FileErrorIfNotFound: false

〔95〕 Get Dictionary from 〔94 File〕　» 96 99 100

〔96〕 Get Dictionary from 〔95 Dictionary.HomeAddress〕　»

〔97〕 Text　»
〔96 Dictionary.street〕 〔96 Dictionary.city〕 〔96 Dictionary.state〕 〔96 Dictionary.postcode〕 〔96 Dictionary.country〕\u{space}

〔98〕 Set Variable HomeAddress to 〔97 Text〕

〔99〕 Set Variable TravelMethod to 〔95 Dictionary.TravelMethod〕

〔100〕 Get Dictionary Value for ExtraTime in 〔95 Dictionary〕　»

〔101〕 Get Numbers from 〔100 Dictionary Value〕　»

〔102〕 Set Variable ExtraTime to 〔101 Numbers〕

〔103〕 Find Calendar Events All Calendar Events where　» 104 105
• ContentItemSortProperty: Start Date
• ContentItemSortOrder: Oldest First
• ContentItemFilter: • All the following are true
Start Date is in the next 1 days
Is Not All Day
Canceled is {"Bool":false}

〔104〕 If 〔103 Calendar Events〕 has any value

〔105〕 Repeat with Each in 〔103 Calendar Events〕

〔106〕 If 〔Repeat Item’s Location〕 has any value

〔107〕 Get Current Location　» 119 125 211
• Accuracy: Best

〔108〕 Comment
*To specify event-specific departure locations:

1. Create calendar event notes with JSON structure:
{
“Street”: “your departure street”,
“City”: “your departure city”,
“State”: “your departure state”,
“Country”: “your departure country”,
“Postcode”: “your departure postcode”
}
2. System prioritizes these over default locations*

〔109〕 If All are true　〔Repeat Item’s Notes〕 has any value　〔Repeat Item’s Notes〕 begins with {　〔Repeat Item’s Notes〕 ends with }

〔110〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY

〔111〕 Get Dictionary from 〔Repeat Item’s Notes〕 　➔ Notes Address Dictionary　» 112 113 114 115 116

〔112〕 Set Variable Calendar_Notes_Street to 〔111 Notes Address Dictionary.Street〕

〔113〕 Set Variable Calendar_Notes_City to 〔111 Notes Address Dictionary.City〕

〔114〕 Set Variable Calendar_Notes_State to 〔111 Notes Address Dictionary.State〕

〔115〕 Set Variable Calendar_Notes_Region to 〔111 Notes Address Dictionary.Country〕

〔116〕 Set Variable Calendar_Notes_ZIP_Code to 〔111 Notes Address Dictionary.Postcode〕

〔117〕 Text　»
〔Calendar_Notes_Street〕 〔Calendar_Notes_City〕 〔Calendar_Notes_State〕 〔Calendar_Notes_ZIP_Code〕 〔Calendar_Notes_Region〕

〔118〕 Set Variable NotesAddressString to 〔117 Text〕

〔119〕 If All are true　〔107 Current Location’s Street〕 is 〔Calendar_Notes_Street〕　〔107 Current Location’s City〕 is 〔Calendar_Notes_City〕　〔107 Current Location’s State〕 is 〔Calendar_Notes_State〕　〔107 Current Location’s Country〕 is 〔Calendar_Notes_Region〕　〔107 Current Location’s ZIP Code〕 is 〔Calendar_Notes_ZIP_Code〕

〔120〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY -> CALENDAR EVENT ADDRESS IS THE SAME WITH CURRENT LOCATION

〔121〕 Number 0　»

〔122〕 Set Variable CurrentToDeparture to 〔121 Number〕

〔123〕 Otherwise

〔124〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY -> CALENDAR EVENT ADDRESS IS NOT THE SAME WITH CURRENT LOCATION

〔125〕 Get 〔TravelMethod〕 Time　»
• GetDirectionsCustomLocation: 〔107 Current Location〕
• Destination: 〔NotesAddressString〕

〔126〕 Set Variable TravelTimeString to 〔125 Travel Time〕

〔127〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔128〕 Set Variable MatchString to 〔127 Matches〕

〔129〕 Count Items in 〔MatchString〕　»

〔130〕 If 〔129 Count〕 is 1

〔131〕 Get First Item from List 〔MatchString〕　»

〔132〕 Set Variable TravelDays to 〔131 Item from List〕

〔133〕 Otherwise

〔134〕 Number 0　»

〔135〕 Set Variable TravelDays to 〔134 Number〕

〔136〕 End If

〔137〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔138〕 Set Variable MatchString to 〔137 Matches〕

〔139〕 Count Items in 〔MatchString〕　»

〔140〕 If 〔139 Count〕 is 1

〔141〕 Get First Item from List 〔MatchString〕　»

〔142〕 Set Variable TravelHours to 〔141 Item from List〕

〔143〕 Otherwise

〔144〕 Number 0　»

〔145〕 Set Variable TravelHours to 〔144 Number〕

〔146〕 End If

〔147〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔148〕 Set Variable MatchString to 〔147 Matches〕

〔149〕 Count Items in 〔MatchString〕　»

〔150〕 If 〔149 Count〕 is 1

〔151〕 Get First Item from List 〔MatchString〕　»

〔152〕 Set Variable TravelMinutes to 〔151 Item from List〕

〔153〕 Otherwise

〔154〕 Number 0　»

〔155〕 Set Variable TravelMinutes to 〔154 Number〕

〔156〕 End If

〔157〕 Calculate 〔TravelDays〕 × 1440　» 159

〔158〕 Calculate 〔TravelHours〕 × 60　»

〔159〕 Calculate 〔158 Calculation Result〕 + 〔157 Calculation Result〕　»

〔160〕 Calculate 〔159 Calculation Result〕 + 〔TravelMinutes〕　»

〔161〕 Set Variable CurrentToDeparture to 〔160 Calculation Result〕

〔162〕 End If　▵123

〔163〕 Get 〔TravelMethod〕 Time 　➔ DepartureToDestination　»
• GetDirectionsCustomLocation: 〔NotesAddressString〕
• Destination: 〔Repeat Item’s Location〕

〔164〕 Set Variable TravelTimeString to 〔163 DepartureToDestination〕

〔165〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔166〕 Set Variable MatchString to 〔165 Matches〕

〔167〕 Count Items in 〔MatchString〕　»

〔168〕 If 〔167 Count〕 is 1

〔169〕 Get First Item from List 〔MatchString〕　»

〔170〕 Set Variable TravelDays to 〔169 Item from List〕

〔171〕 Otherwise

〔172〕 Number 0　»

〔173〕 Set Variable TravelDays to 〔172 Number〕

〔174〕 End If

〔175〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔176〕 Set Variable MatchString to 〔175 Matches〕

〔177〕 Count Items in 〔MatchString〕　»

〔178〕 If 〔177 Count〕 is 1

〔179〕 Get First Item from List 〔MatchString〕　»

〔180〕 Set Variable TravelHours to 〔179 Item from List〕

〔181〕 Otherwise

〔182〕 Number 0　»

〔183〕 Set Variable TravelHours to 〔182 Number〕

〔184〕 End If

〔185〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔186〕 Set Variable MatchString to 〔185 Matches〕

〔187〕 Count Items in 〔MatchString〕　»

〔188〕 If 〔187 Count〕 is 1

〔189〕 Get First Item from List 〔MatchString〕　»

〔190〕 Set Variable TravelMinutes to 〔189 Item from List〕

〔191〕 Otherwise

〔192〕 Number 0　»

〔193〕 Set Variable TravelMinutes to 〔192 Number〕

〔194〕 End If

〔195〕 Calculate 〔TravelDays〕 × 1440　» 197

〔196〕 Calculate 〔TravelHours〕 × 60　»

〔197〕 Calculate 〔196 Calculation Result〕 + 〔195 Calculation Result〕　»

〔198〕 Calculate 〔197 Calculation Result〕 + 〔TravelMinutes〕　»

〔199〕 Calculate 〔198 Calculation Result〕 + 〔CurrentToDeparture〕　»

〔200〕 Set Variable TravelTime to 〔199 Calculation Result〕

〔201〕 Otherwise　▵109

〔202〕 Comment
CALENDER EVENT NOTES IS BLANK

〔203〕 Get Dictionary from 〔HomeAddress〕 　➔ Home Address Dictionary　» 204 205 206 207 208

〔204〕 Get Dictionary Value for street in 〔203 Home Address Dictionary〕 　➔ home_Street　» 209 211

〔205〕 Get Dictionary Value for city in 〔203 Home Address Dictionary〕 　➔ home_City　» 209 211

〔206〕 Get Dictionary Value for state in 〔203 Home Address Dictionary〕 　➔ home_State　» 209 211

〔207〕 Get Dictionary Value for country in 〔203 Home Address Dictionary〕 　➔ home_Country　» 209 211

〔208〕 Get Dictionary Value for postcode in 〔203 Home Address Dictionary〕 　➔ home_Postcode　» 209 211

〔209〕 If All are true　〔204 home_Street〕 has any value　〔205 home_City〕 has any value　〔206 home_State〕 has any value　〔207 home_Country〕 has any value　〔208 home_Postcode〕 has any value

〔210〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED

〔211〕 If All are true　〔107 Current Location’s Street〕 is 〔204 home_Street〕　〔107 Current Location’s City〕 is 〔205 home_City〕　〔107 Current Location’s State〕 is 〔206 home_State〕　〔107 Current Location’s Country〕 is 〔207 home_Country〕　〔107 Current Location’s ZIP Code〕 is 〔208 home_Postcode〕

〔212〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED -> HOME ADDRESS IS THE SAME WITH CURRENT LOCATION

〔213〕 Number 0　»

〔214〕 Set Variable CurrentToDeparture to 〔213 Number〕

〔215〕 Otherwise

〔216〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED -> HOME ADDRESS IS NOT THE SAME WITH CURRENT LOCATION

〔217〕 Get 〔TravelMethod〕 Time　»
• Destination: 〔HomeAddress〕

〔218〕 Set Variable TravelTimeString to 〔217 Travel Time〕

〔219〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔220〕 Set Variable MatchString to 〔219 Matches〕

〔221〕 Count Items in 〔MatchString〕　»

〔222〕 If 〔221 Count〕 is 1

〔223〕 Get First Item from List 〔MatchString〕　»

〔224〕 Set Variable TravelDays to 〔223 Item from List〕

〔225〕 Otherwise

〔226〕 Number 0　»

〔227〕 Set Variable TravelDays to 〔226 Number〕

〔228〕 End If

〔229〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔230〕 Set Variable MatchString to 〔229 Matches〕

〔231〕 Count Items in 〔MatchString〕　»

〔232〕 If 〔231 Count〕 is 1

〔233〕 Get First Item from List 〔MatchString〕　»

〔234〕 Set Variable TravelHours to 〔233 Item from List〕

〔235〕 Otherwise

〔236〕 Number 0　»

〔237〕 Set Variable TravelHours to 〔236 Number〕

〔238〕 End If

〔239〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔240〕 Set Variable MatchString to 〔239 Matches〕

〔241〕 Count Items in 〔MatchString〕　»

〔242〕 If 〔241 Count〕 is 1

〔243〕 Get First Item from List 〔MatchString〕　»

〔244〕 Set Variable TravelMinutes to 〔243 Item from List〕

〔245〕 Otherwise

〔246〕 Number 0　»

〔247〕 Set Variable TravelMinutes to 〔246 Number〕

〔248〕 End If

〔249〕 Calculate 〔TravelDays〕 × 1440　» 251

〔250〕 Calculate 〔TravelHours〕 × 60　»

〔251〕 Calculate 〔250 Calculation Result〕 + 〔249 Calculation Result〕　»

〔252〕 Calculate 〔251 Calculation Result〕 + 〔TravelMinutes〕

〔253〕 End If　▵215

〔254〕 Get 〔TravelMethod〕 Time 　➔ DepartureToDestination　»
• GetDirectionsCustomLocation: 〔HomeAddress〕
• Destination: 〔Repeat Item’s Location〕

〔255〕 Set Variable TravelTimeString to 〔254 DepartureToDestination〕

〔256〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔257〕 Set Variable MatchString to 〔256 Matches〕

〔258〕 Count Items in 〔MatchString〕　»

〔259〕 If 〔258 Count〕 is 1

〔260〕 Get First Item from List 〔MatchString〕　»

〔261〕 Set Variable TravelDays to 〔260 Item from List〕

〔262〕 Otherwise

〔263〕 Number 0　»

〔264〕 Set Variable TravelDays to 〔263 Number〕

〔265〕 End If

〔266〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔267〕 Set Variable MatchString to 〔266 Matches〕

〔268〕 Count Items in 〔MatchString〕　»

〔269〕 If 〔268 Count〕 is 1

〔270〕 Get First Item from List 〔MatchString〕　»

〔271〕 Set Variable TravelHours to 〔270 Item from List〕

〔272〕 Otherwise

〔273〕 Number 0　»

〔274〕 Set Variable TravelHours to 〔273 Number〕

〔275〕 End If

〔276〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔277〕 Set Variable MatchString to 〔276 Matches〕

〔278〕 Count Items in 〔MatchString〕　»

〔279〕 If 〔278 Count〕 is 1

〔280〕 Get First Item from List 〔MatchString〕　»

〔281〕 Set Variable TravelMinutes to 〔280 Item from List〕

〔282〕 Otherwise

〔283〕 Number 0　»

〔284〕 Set Variable TravelMinutes to 〔283 Number〕

〔285〕 End If

〔286〕 Calculate 〔TravelDays〕 × 1440　» 288

〔287〕 Calculate 〔TravelHours〕 × 60　»

〔288〕 Calculate 〔287 Calculation Result〕 + 〔286 Calculation Result〕　»

〔289〕 Calculate 〔288 Calculation Result〕 + 〔TravelMinutes〕　»

〔290〕 Calculate 〔289 Calculation Result〕 + 〔CurrentToDeparture〕　»

〔291〕 Set Variable TravelTime to 〔290 Calculation Result〕

〔292〕 Otherwise　▵209

〔293〕 Text
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS NOT MAINTAINED

〔294〕 Get 〔TravelMethod〕 Time　»
• Destination: 〔Repeat Item’s Location〕

〔295〕 Set Variable TravelTimeString to 〔294 Travel Time〕

〔296〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔297〕 Set Variable MatchString to 〔296 Matches〕

〔298〕 Count Items in 〔MatchString〕　»

〔299〕 If 〔298 Count〕 is 1

〔300〕 Get First Item from List 〔MatchString〕　»

〔301〕 Set Variable TravelDays to 〔300 Item from List〕

〔302〕 Otherwise

〔303〕 Number 0　»

〔304〕 Set Variable TravelDays to 〔303 Number〕

〔305〕 End If

〔306〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔307〕 Set Variable MatchString to 〔306 Matches〕

〔308〕 Count Items in 〔MatchString〕　»

〔309〕 If 〔308 Count〕 is 1

〔310〕 Get First Item from List 〔MatchString〕　»

〔311〕 Set Variable TravelHours to 〔310 Item from List〕

〔312〕 Otherwise

〔313〕 Number 0　»

〔314〕 Set Variable TravelHours to 〔313 Number〕

〔315〕 End If

〔316〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔317〕 Set Variable MatchString to 〔316 Matches〕

〔318〕 Count Items in 〔MatchString〕　»

〔319〕 If 〔318 Count〕 is 1

〔320〕 Get First Item from List 〔MatchString〕　»

〔321〕 Set Variable TravelMinutes to 〔320 Item from List〕

〔322〕 Otherwise

〔323〕 Number 0　»

〔324〕 Set Variable TravelMinutes to 〔323 Number〕

〔325〕 End If

〔326〕 Calculate 〔TravelDays〕 × 1440　» 328

〔327〕 Calculate 〔TravelHours〕 × 60　»

〔328〕 Calculate 〔327 Calculation Result〕 + 〔326 Calculation Result〕　»

〔329〕 Calculate 〔328 Calculation Result〕 + 〔TravelMinutes〕　»

〔330〕 Set Variable TravelTime to 〔329 Calculation Result〕

〔331〕 End If　▵292

〔332〕 End If　▵201

〔333〕 Otherwise　▵106

〔334〕 Number 0　»

〔335〕 Set Variable TravelTime to 〔334 Number〕

〔336〕 End If

〔337〕 Calculate 〔TravelTime〕 + 〔ExtraTime〕　»

〔338〕 Adjust Subtract Date 〔Repeat Item’s Start Date〕 　➔ Supposed Alarm Time　» 339 342 345 348 355 371 373 374 392 397 400
• Duration: 〔337 Calculation Result〕 min

〔339〕 Dictionary 　➔ Alarm Label Dictionary　» 371 376 392
{  "Event": "〔Repeat Item〕",
   "From": "〔Repeat Item’s Start Date〕",
   "To": "〔Repeat Item’s End Date〕",
   "Location": "〔Repeat Item’s Location〕",
   "AlarmTime": "〔338 Supposed Alarm Time〕"
}

〔340〕 Date Current Date 　➔ Current Date　» 341 342 373

〔341〕 Adjust Add Date 〔340 Current Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"dd MMM yyyy"}〕 　➔ 1 day after　» 355 374
• Duration: "1" days

〔342〕 If 〔338 Supposed Alarm Time〕 is 〔340 Current Date〕

〔343〕 Comment
supposed alarm time is exactly 12:00am

〔344〕 If 〔Repeat Item’s Location〕 has any value

〔345〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 at 〔Repeat Item’s Location〕 which  was supposed to get ready at 〔338 Supposed Alarm Time〕. Please check.

〔346〕 Set Variable Text to 〔345 Text〕

〔347〕 Otherwise

〔348〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 which  was supposed to get ready at 〔338 Supposed Alarm Time〕. Please check.

〔349〕 Set Variable Text to 〔348 Text〕

〔350〕 End If

〔351〕 Show Alert 〔Text〕

〔352〕 Show Notification 〔Text〕

〔353〕 Speak Text
• Text: 〔Text〕

〔354〕 Otherwise　▵342

〔355〕 If 〔338 Supposed Alarm Time〕 is 〔341 1 day after〕

〔356〕 Find Alarm All Alarm　» 357 358

〔357〕 If 〔356 Alarms〕 has any value

〔358〕 Repeat[2] with Each in 〔356 Alarms〕

〔359〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ AlarmLabelDictionary　» 360 361 363

〔360〕 Get Dictionary Value for Event in 〔359 AlarmLabelDictionary〕 　➔ Event　» 365

〔361〕 Get Dictionary Value for From in 〔359 AlarmLabelDictionary〕 　➔ From　»

〔362〕 Get Dates from 〔361 From〕 　➔ FromDate　» 365

〔363〕 Get Dictionary Value for To in 〔359 AlarmLabelDictionary〕 　➔ To　»

〔364〕 Get Dates from 〔363 To〕 　➔ ToDate　»

〔365〕 If All are true　〔360 Event’s Name〕 is 〔Repeat Item〕　〔362 FromDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔Repeat Item’s Start Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕　〔364 ToDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is • ConditionalActionString
〔Repeat Item’s End Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕• Date
〔Repeat Item’s End Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕

〔366〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔367〕 End If

〔368〕 End Repeat[2] with Each　▵358

〔369〕 End If　▵357

〔370〕 Comment
since this will be triggered at 12:00 am each day, when the supposed alarm time is 12:00 am in the next day, you can set alarm now

〔371〕 Add Alarm for 〔338 Supposed Alarm Time〕 called 〔339 Alarm Label Dictionary〕

〔372〕 Otherwise　▵355

〔373〕 If 〔338 Supposed Alarm Time〕 > 〔340 Current Date〕

〔374〕 If 〔338 Supposed Alarm Time〕 > 〔341 1 day after〕

〔375〕 Comment
when the time is other than 12:00 am of then next day, you cannot set alarm yet. If set, it will be today. For example, triggering time 2025-4-8 12:00 am, the supposed alarm time is 2025-4-9 08:00 am, if you set an alarm at 08:00 at 2025-4-8 12:00 am, it will alarm at 2025-4-8 08:00 am instead. So we need to record the supposed alarm time and trigger next day.

〔376〕 Set Variable Event to 〔339 Alarm Label Dictionary〕

〔377〕 Otherwise

〔378〕 Find Alarm All Alarm　» 379 380
• ContentItemFilter: {  "Value": {
      "WFActionParameterFilterPrefix": 1,
      "WFContentPredicateBoundedDate": false,
      "WFActionParameterFilterTemplates": []
   },
   "WFSerializationType": "WFContentPredicateTableTemplate"
}

〔379〕 If 〔378 Alarms〕 has any value

〔380〕 Repeat[2] with Each in 〔378 Alarms〕

〔381〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ AlarmLabelDictionary　» 382 383 385

〔382〕 Get Dictionary Value for Event in 〔381 AlarmLabelDictionary〕 　➔ Event　» 387

〔383〕 Get Dictionary Value for From in 〔381 AlarmLabelDictionary〕 　➔ From　»

〔384〕 Get Dates from 〔383 From〕 　➔ FromDate　» 387

〔385〕 Get Dictionary Value for To in 〔381 AlarmLabelDictionary〕 　➔ To　»

〔386〕 Get Dates from 〔385 To〕 　➔ ToDate　»

〔387〕 If All are true　〔382 Event’s Name〕 is 〔Repeat Item〕　〔384 FromDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔Repeat Item’s Start Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕　〔386 ToDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔Repeat Item’s End Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕

〔388〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔389〕 End If

〔390〕 End Repeat[2] with Each　▵380

〔391〕 End If　▵379

〔392〕 Add Alarm for 〔338 Supposed Alarm Time〕 called 〔339 Alarm Label Dictionary〕

〔393〕 End If　▵377

〔394〕 Otherwise　▵373

〔395〕 Comment
the supposed alarm time passed

〔396〕 If 〔Repeat Item’s Location〕 has any value

〔397〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 at 〔Repeat Item’s Location〕 which  was supposed to get ready at 〔338 Supposed Alarm Time〕. Please check.

〔398〕 Set Variable Text to 〔397 Text〕

〔399〕 Otherwise

〔400〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 which  was supposed to get ready at 〔338 Supposed Alarm Time〕. Please check.

〔401〕 Set Variable Text to 〔400 Text〕

〔402〕 End If

〔403〕 Show Alert 〔Text〕

〔404〕 Show Notification 〔Text〕

〔405〕 Speak Text
• Text: 〔Text〕

〔406〕 End If　▵394

〔407〕 End If　▵372

〔408〕 End If　▵354

〔409〕 If 〔Event〕 has any value

〔410〕 Get Dictionary from 〔Event〕　» 423

〔411〕 Text　»

〔412〕 Set Variable TextList to 〔411 Text〕

〔413〕 Add 〔Event〕 to Variable TextList

〔414〕 Get File at Path Smart Calendar Reminder/Future Alarms.txt from Folder　» 415 416
• FileErrorIfNotFound: false

〔415〕 If 〔414 File’s File Size〕 has any value

〔416〕 Split Text 〔414 File〕 by New Lines　»

〔417〕 Repeat[2] with Each in 〔416 Split Text〕

〔418〕 Get Dictionary from 〔Repeat Item 2〕　» 419 420 421 422

〔419〕 Get Dictionary Value for Event in 〔418 Dictionary〕 　➔ Event　» 423

〔420〕 Get Dictionary Value for From in 〔418 Dictionary〕 　➔ From　» 423

〔421〕 Get Dictionary Value for To in 〔418 Dictionary〕 　➔ To　» 423

〔422〕 Get Dictionary Value for Location in 〔418 Dictionary〕 　➔ Location　»

〔423〕 If Any are true　〔419 Event’s Name〕 is not 〔410 Dictionary.Event〕　〔420 From’s Name〕 is not 〔410 Dictionary.From〕　〔421 To’s Name〕 is not 〔410 Dictionary.To〕　〔422 Location’s Name〕 is not 〔410 Dictionary.Location〕

〔424〕 Add 〔Repeat Item 2〕 to Variable TextList

〔425〕 End If

〔426〕 End Repeat[2] with Each　▵417

〔427〕 Combine Text 〔TextList〕 with New Lines　»

〔428〕 Save File 〔427 Combined Text〕
• AskWhereToSave: false
• SaveFileOverwrite: true
• FileDestinationPath: Smart Calendar Reminder/Future Alarms.txt

〔429〕 Otherwise　▵415

〔430〕 Text　»

〔Event〕

〔431〕 Save File 〔430 Text〕
• AskWhereToSave: false
• FileDestinationPath: Smart Calendar Reminder/Future Alarms.txt

〔432〕 End If

〔433〕 End If　▵409

〔434〕 End Repeat with Each　▵105

〔435〕 End If　▵104

〔436〕 Get File at Path Smart Calendar Reminder/Future Alarms.txt from Folder　» 437 438
• FileErrorIfNotFound: false

〔437〕 If 〔436 File’s File Size〕 has any value

〔438〕 Split Text 〔436 File〕 by New Lines　»

〔439〕 Repeat with Each in 〔438 Split Text〕

〔440〕 Get Dictionary from 〔Repeat Item〕　» 441 442 452 463

〔441〕 If 〔440 Dictionary〕 has any value

〔442〕 Get Dates from 〔440 Dictionary.AlarmTime〕　» 443 463

〔443〕 If 〔442 Dates〕 is today

〔444〕 Find Alarm All Alarm　» 445 446
• ContentItemFilter: {  "Value": {
      "WFActionParameterFilterPrefix": 1,
      "WFContentPredicateBoundedDate": false,
      "WFActionParameterFilterTemplates": []
   },
   "WFSerializationType": "WFContentPredicateTableTemplate"
}

〔445〕 If 〔444 Alarms〕 has any value

〔446〕 Repeat[2] with Each in 〔444 Alarms〕

〔447〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ Alarm_Label_Dictionary　» 448 450 458

〔448〕 Get Dictionary Value for From in 〔447 Alarm_Label_Dictionary〕　»

〔449〕 Get Dates from 〔448 Dictionary Value〕 　➔ From_Date　» 458

〔450〕 Get Dictionary Value for To in 〔447 Alarm_Label_Dictionary〕　»

〔451〕 Get Dates from 〔450 Dictionary Value〕 　➔ To_Date　» 458

〔452〕 Get Dictionary from 〔440 Dictionary.Event〕 　➔ FutureAlarmLabelDictionary　» 453 454 456

〔453〕 Get Dictionary Value for Event in 〔452 FutureAlarmLabelDictionary〕 　➔ Event　» 458

〔454〕 Get Dictionary Value for From in 〔452 FutureAlarmLabelDictionary〕 　➔ From　»

〔455〕 Get Dates from 〔454 From〕 　➔ FromDate　» 458

〔456〕 Get Dictionary Value for To in 〔452 FutureAlarmLabelDictionary〕 　➔ To　»

〔457〕 Get Dates from 〔456 To〕 　➔ ToDate　»

〔458〕 If All are true　〔453 Event’s Name〕 is 〔447 Alarm_Label_Dictionary.Event〕　〔455 FromDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔449 From_Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕　〔457 ToDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔451 To_Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕

〔459〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔460〕 End If

〔461〕 End Repeat[2] with Each　▵446

〔462〕 End If　▵445

〔463〕 Add Alarm for 〔442 Dates〕 called 〔440 Dictionary.Event〕

〔464〕 End If　▵443

〔465〕 End If　▵441

〔466〕 End Repeat with Each　▵439

〔467〕 End If　▵437

〔468〕 End If　▵92

〔469〕 If 〔Shortcut Input as Number〕 is 2

〔470〕 Comment
1-Hour Event Processor
*Real-time event handler for immediate notifications:

Processes events within next 60 minutes

Provides most accurate travel estimates

Recommended for hourly automation*

〔471〕 Get File at Path Smart Calendar Reminder/aboutme.txt from Folder　»
• FileErrorIfNotFound: false

〔472〕 Get Dictionary from 〔471 File〕　» 473 476 477

〔473〕 Get Dictionary from 〔472 Dictionary.HomeAddress〕　»

〔474〕 Text　»
〔473 Dictionary.street〕 〔473 Dictionary.city〕 〔473 Dictionary.state〕 〔473 Dictionary.postcode〕 〔473 Dictionary.country〕

〔475〕 Set Variable Home_Address to 〔474 Text〕

〔476〕 Set Variable Travel_Method to 〔472 Dictionary.TravelMethod〕

〔477〕 Get Dictionary Value for ExtraTime in 〔472 Dictionary〕　»

〔478〕 Get Numbers from 〔477 Dictionary Value〕　»

〔479〕 Set Variable Extra_Time to 〔478 Numbers〕

〔480〕 Find Calendar Events All Calendar Events where　» 481 482 483 750
• ContentItemSortProperty: Start Date
• ContentItemSortOrder: Oldest First
• ContentItemFilter: • All the following are true
Start Date is in the next 1 hours
Is Not All Day
Canceled is {"Bool":false}

〔481〕 If 〔480 Calendar Events〕 has any value

〔482〕 Count Items in 〔480 Calendar Events〕　» 754 762

〔483〕 Repeat with Each in 〔480 Calendar Events〕

〔484〕 If 〔Repeat Item’s Location〕 has any value

〔485〕 Get Current Location　» 496 502 588
• Accuracy: Best

〔486〕 If All are true　〔Repeat Item’s Notes〕 has any value　〔Repeat Item’s Notes〕 begins with {　〔Repeat Item’s Notes〕 ends with }

〔487〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY

〔488〕 Get Dictionary from 〔Repeat Item’s Notes〕 　➔ NotesAddressDictionary　» 489 490 491 492 493

〔489〕 Set Variable CalendarNotesStreet to 〔488 NotesAddressDictionary.Street〕

〔490〕 Set Variable CalendarNotesCity to 〔488 NotesAddressDictionary.City〕

〔491〕 Set Variable CalendarNotesState to 〔488 NotesAddressDictionary.State〕

〔492〕 Set Variable CalendarNotesRegion to 〔488 NotesAddressDictionary.Country〕

〔493〕 Set Variable CalendarNotesZIPCode to 〔488 NotesAddressDictionary.Postcode〕

〔494〕 Text　»
〔CalendarNotesStreet〕 〔CalendarNotesCity〕 〔CalendarNotesState〕 〔CalendarNotesZIPCode〕 〔CalendarNotesRegion〕

〔495〕 Set Variable NotesAddressString to 〔494 Text〕

〔496〕 If All are true　〔485 Current Location’s Street〕 is 〔CalendarNotesStreet〕　〔485 Current Location’s City〕 is 〔CalendarNotesCity〕　〔485 Current Location’s State〕 is 〔CalendarNotesState〕　〔485 Current Location’s Country〕 is 〔CalendarNotesRegion〕　〔485 Current Location’s ZIP Code〕 is 〔CalendarNotesZIPCode〕

〔497〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY -> CALENDAR EVENT ADDRESS IS THE SAME WITH CURRENT LOCATION

〔498〕 Number 0　»

〔499〕 Set Variable CurrentToDeparture to 〔498 Number〕

〔500〕 Otherwise

〔501〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY -> CALENDAR EVENT ADDRESS IS NOT THE SAME WITH CURRENT LOCATION

〔502〕 Get 〔TravelMethod〕 Time　»
• GetDirectionsCustomLocation: 〔485 Current Location〕
• Destination: 〔NotesAddressString〕

〔503〕 Set Variable TravelTimeString to 〔502 Travel Time〕

〔504〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔505〕 Set Variable MatchString to 〔504 Matches〕

〔506〕 Count Items in 〔MatchString〕　»

〔507〕 If 〔506 Count〕 is 1

〔508〕 Get First Item from List 〔MatchString〕　»

〔509〕 Set Variable TravelDays to 〔508 Item from List〕

〔510〕 Otherwise

〔511〕 Number 0　»

〔512〕 Set Variable TravelDays to 〔511 Number〕

〔513〕 End If

〔514〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔515〕 Set Variable MatchString to 〔514 Matches〕

〔516〕 Count Items in 〔MatchString〕　»

〔517〕 If 〔516 Count〕 is 1

〔518〕 Get First Item from List 〔MatchString〕　»

〔519〕 Set Variable TravelHours to 〔518 Item from List〕

〔520〕 Otherwise

〔521〕 Number 0　»

〔522〕 Set Variable TravelHours to 〔521 Number〕

〔523〕 End If

〔524〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔525〕 Set Variable MatchString to 〔524 Matches〕

〔526〕 Count Items in 〔MatchString〕　»

〔527〕 If 〔526 Count〕 is 1

〔528〕 Get First Item from List 〔MatchString〕　»

〔529〕 Set Variable TravelMinutes to 〔528 Item from List〕

〔530〕 Otherwise

〔531〕 Number 0　»

〔532〕 Set Variable TravelMinutes to 〔531 Number〕

〔533〕 End If

〔534〕 Calculate 〔TravelDays〕 × 1440　» 536

〔535〕 Calculate 〔TravelHours〕 × 60　»

〔536〕 Calculate 〔535 Calculation Result〕 + 〔534 Calculation Result〕　»

〔537〕 Calculate 〔536 Calculation Result〕 + 〔TravelMinutes〕　»

〔538〕 Set Variable CurrentToDeparture to 〔537 Calculation Result〕

〔539〕 End If　▵500

〔540〕 Get 〔TravelMethod〕 Time 　➔ DepartureToDestination　»
• GetDirectionsCustomLocation: 〔NotesAddressString〕
• Destination: 〔Repeat Item’s Location〕

〔541〕 Set Variable TravelTimeString to 〔540 DepartureToDestination〕

〔542〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔543〕 Set Variable MatchString to 〔542 Matches〕

〔544〕 Count Items in 〔MatchString〕　»

〔545〕 If 〔544 Count〕 is 1

〔546〕 Get First Item from List 〔MatchString〕　»

〔547〕 Set Variable TravelDays to 〔546 Item from List〕

〔548〕 Otherwise

〔549〕 Number 0　»

〔550〕 Set Variable TravelDays to 〔549 Number〕

〔551〕 End If

〔552〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔553〕 Set Variable MatchString to 〔552 Matches〕

〔554〕 Count Items in 〔MatchString〕　»

〔555〕 If 〔554 Count〕 is 1

〔556〕 Get First Item from List 〔MatchString〕　»

〔557〕 Set Variable TravelHours to 〔556 Item from List〕

〔558〕 Otherwise

〔559〕 Number 0　»

〔560〕 Set Variable TravelHours to 〔559 Number〕

〔561〕 End If

〔562〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔563〕 Set Variable MatchString to 〔562 Matches〕

〔564〕 Count Items in 〔MatchString〕　»

〔565〕 If 〔564 Count〕 is 1

〔566〕 Get First Item from List 〔MatchString〕　»

〔567〕 Set Variable TravelMinutes to 〔566 Item from List〕

〔568〕 Otherwise

〔569〕 Number 0　»

〔570〕 Set Variable TravelMinutes to 〔569 Number〕

〔571〕 End If

〔572〕 Calculate 〔TravelDays〕 × 1440　» 574

〔573〕 Calculate 〔TravelHours〕 × 60　»

〔574〕 Calculate 〔573 Calculation Result〕 + 〔572 Calculation Result〕　»

〔575〕 Calculate 〔574 Calculation Result〕 + 〔TravelMinutes〕　»

〔576〕 Calculate 〔575 Calculation Result〕 + 〔CurrentToDeparture〕　»

〔577〕 Set Variable TravelTime to 〔576 Calculation Result〕

〔578〕 Otherwise　▵486

〔579〕 Comment
CALENDER EVENT NOTES IS BLANK

〔580〕 Get Dictionary from 〔HomeAddress〕 　➔ home_address_dictionary　» 581 582 583 584 585

〔581〕 Get Dictionary Value for street in 〔580 home_address_dictionary〕 　➔ HomeStreet　» 586 588

〔582〕 Get Dictionary Value for city in 〔580 home_address_dictionary〕 　➔ HomeCity　» 586 588

〔583〕 Get Dictionary Value for state in 〔580 home_address_dictionary〕 　➔ HomeState　» 586 588

〔584〕 Get Dictionary Value for country in 〔580 home_address_dictionary〕 　➔ HomeCountry　» 586 588

〔585〕 Get Dictionary Value for postcode in 〔580 home_address_dictionary〕 　➔ HomePostcode　» 586 588

〔586〕 If All are true　〔581 HomeStreet〕 has any value　〔582 HomeCity〕 has any value　〔583 HomeState〕 has any value　〔584 HomeCountry〕 has any value　〔585 HomePostcode〕 has any value

〔587〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED

〔588〕 If All are true　〔485 Current Location’s Street〕 is 〔581 HomeStreet〕　〔485 Current Location’s City〕 is 〔582 HomeCity〕　〔485 Current Location’s State〕 is 〔583 HomeState〕　〔485 Current Location’s Country〕 is 〔584 HomeCountry〕　〔485 Current Location’s ZIP Code〕 is 〔585 HomePostcode〕

〔589〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED -> HOME ADDRESS IS THE SAME WITH CURRENT LOCATION

〔590〕 Number 0　»

〔591〕 Set Variable CurrentToDeparture to 〔590 Number〕

〔592〕 Otherwise

〔593〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED -> HOME ADDRESS IS NOT THE SAME WITH CURRENT LOCATION

〔594〕 Get 〔TravelMethod〕 Time　»
• Destination: 〔HomeAddress〕

〔595〕 Set Variable TravelTimeString to 〔594 Travel Time〕

〔596〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔597〕 Set Variable MatchString to 〔596 Matches〕

〔598〕 Count Items in 〔MatchString〕　»

〔599〕 If 〔598 Count〕 is 1

〔600〕 Get First Item from List 〔MatchString〕　»

〔601〕 Set Variable TravelDays to 〔600 Item from List〕

〔602〕 Otherwise

〔603〕 Number 0　»

〔604〕 Set Variable TravelDays to 〔603 Number〕

〔605〕 End If

〔606〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔607〕 Set Variable MatchString to 〔606 Matches〕

〔608〕 Count Items in 〔MatchString〕　»

〔609〕 If 〔608 Count〕 is 1

〔610〕 Get First Item from List 〔MatchString〕　»

〔611〕 Set Variable TravelHours to 〔610 Item from List〕

〔612〕 Otherwise

〔613〕 Number 0　»

〔614〕 Set Variable TravelHours to 〔613 Number〕

〔615〕 End If

〔616〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔617〕 Set Variable MatchString to 〔616 Matches〕

〔618〕 Count Items in 〔MatchString〕　»

〔619〕 If 〔618 Count〕 is 1

〔620〕 Get First Item from List 〔MatchString〕　»

〔621〕 Set Variable TravelMinutes to 〔620 Item from List〕

〔622〕 Otherwise

〔623〕 Number 0　»

〔624〕 Set Variable TravelMinutes to 〔623 Number〕

〔625〕 End If

〔626〕 Calculate 〔TravelDays〕 × 1440　» 628

〔627〕 Calculate 〔TravelHours〕 × 60　»

〔628〕 Calculate 〔627 Calculation Result〕 + 〔626 Calculation Result〕　»

〔629〕 Calculate 〔628 Calculation Result〕 + 〔TravelMinutes〕　»

〔630〕 Set Variable CurrentToDeparture to 〔629 Calculation Result〕

〔631〕 End If　▵592

〔632〕 Get 〔TravelMethod〕 Time 　➔ DepartureToDestination　»
• GetDirectionsCustomLocation: 〔HomeAddress〕
• Destination: 〔Repeat Item’s Location〕

〔633〕 Set Variable TravelTimeString to 〔632 DepartureToDestination〕

〔634〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔635〕 Set Variable MatchString to 〔634 Matches〕

〔636〕 Count Items in 〔MatchString〕　»

〔637〕 If 〔636 Count〕 is 1

〔638〕 Get First Item from List 〔MatchString〕　»

〔639〕 Set Variable TravelDays to 〔638 Item from List〕

〔640〕 Otherwise

〔641〕 Number 0　»

〔642〕 Set Variable TravelDays to 〔641 Number〕

〔643〕 End If

〔644〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔645〕 Set Variable MatchString to 〔644 Matches〕

〔646〕 Count Items in 〔MatchString〕　»

〔647〕 If 〔646 Count〕 is 1

〔648〕 Get First Item from List 〔MatchString〕　»

〔649〕 Set Variable TravelHours to 〔648 Item from List〕

〔650〕 Otherwise

〔651〕 Number 0　»

〔652〕 Set Variable TravelHours to 〔651 Number〕

〔653〕 End If

〔654〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔655〕 Set Variable MatchString to 〔654 Matches〕

〔656〕 Count Items in 〔MatchString〕　»

〔657〕 If 〔656 Count〕 is 1

〔658〕 Get First Item from List 〔MatchString〕　»

〔659〕 Set Variable TravelMinutes to 〔658 Item from List〕

〔660〕 Otherwise

〔661〕 Number 0　»

〔662〕 Set Variable TravelMinutes to 〔661 Number〕

〔663〕 End If

〔664〕 Calculate 〔TravelDays〕 × 1440　» 666

〔665〕 Calculate 〔TravelHours〕 × 60　»

〔666〕 Calculate 〔665 Calculation Result〕 + 〔664 Calculation Result〕　»

〔667〕 Calculate 〔666 Calculation Result〕 + 〔TravelMinutes〕　»

〔668〕 Calculate 〔667 Calculation Result〕 + 〔CurrentToDeparture〕　»

〔669〕 Set Variable TravelTime to 〔668 Calculation Result〕

〔670〕 Otherwise　▵586

〔671〕 Text
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS NOT MAINTAINED

〔672〕 Get 〔TravelMethod〕 Time　»
• Destination: 〔Repeat Item’s Location〕

〔673〕 Set Variable TravelTimeString to 〔672 Travel Time〕

〔674〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔675〕 Set Variable MatchString to 〔674 Matches〕

〔676〕 Count Items in 〔MatchString〕　»

〔677〕 If 〔676 Count〕 is 1

〔678〕 Get First Item from List 〔MatchString〕　»

〔679〕 Set Variable TravelDays to 〔678 Item from List〕

〔680〕 Otherwise

〔681〕 Number 0　»

〔682〕 Set Variable TravelDays to 〔681 Number〕

〔683〕 End If

〔684〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔685〕 Set Variable MatchString to 〔684 Matches〕

〔686〕 Count Items in 〔MatchString〕　»

〔687〕 If 〔686 Count〕 is 1

〔688〕 Get First Item from List 〔MatchString〕　»

〔689〕 Set Variable TravelHours to 〔688 Item from List〕

〔690〕 Otherwise

〔691〕 Number 0　»

〔692〕 Set Variable TravelHours to 〔691 Number〕

〔693〕 End If

〔694〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔695〕 Set Variable MatchString to 〔694 Matches〕

〔696〕 Count Items in 〔MatchString〕　»

〔697〕 If 〔696 Count〕 is 1

〔698〕 Get First Item from List 〔MatchString〕　»

〔699〕 Set Variable TravelMinutes to 〔698 Item from List〕

〔700〕 Otherwise

〔701〕 Number 0　»

〔702〕 Set Variable TravelMinutes to 〔701 Number〕

〔703〕 End If

〔704〕 Calculate 〔TravelDays〕 × 1440　» 706

〔705〕 Calculate 〔TravelHours〕 × 60　»

〔706〕 Calculate 〔705 Calculation Result〕 + 〔704 Calculation Result〕　»

〔707〕 Calculate 〔706 Calculation Result〕 + 〔TravelMinutes〕　»

〔708〕 Set Variable TravelTime to 〔707 Calculation Result〕

〔709〕 End If　▵670

〔710〕 End If　▵578

〔711〕 Otherwise　▵484

〔712〕 Number 0　»

〔713〕 Set Variable TravelTime to 〔712 Number〕

〔714〕 End If

〔715〕 Find Alarm All Alarm　» 716 717
• ContentItemFilter: {  "Value": {
      "WFActionParameterFilterPrefix": 1,
      "WFContentPredicateBoundedDate": false,
      "WFActionParameterFilterTemplates": []
   },
   "WFSerializationType": "WFContentPredicateTableTemplate"
}

〔716〕 If 〔715 Alarms〕 has any value

〔717〕 Repeat[2] with Each in 〔715 Alarms〕

〔718〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ AlarmLabelDictionary　» 719 720 722

〔719〕 Get Dictionary Value for Event in 〔718 AlarmLabelDictionary〕 　➔ Event　» 724

〔720〕 Get Dictionary Value for From in 〔718 AlarmLabelDictionary〕 　➔ From　»

〔721〕 Get Dates from 〔720 From〕 　➔ FromDate　» 724

〔722〕 Get Dictionary Value for To in 〔718 AlarmLabelDictionary〕 　➔ To　»

〔723〕 Get Dates from 〔722 To〕 　➔ ToDate　»

〔724〕 If All are true　〔719 Event’s Name〕 is 〔Repeat Item〕　〔721 FromDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔Repeat Item’s Start Date{"Date Style":"Custom","WFDateFormat":"HH:mm","WFISO8601IncludeTime":false}〕　〔723 ToDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔Repeat Item’s End Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕

〔725〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔726〕 End If

〔727〕 End Repeat[2] with Each　▵717

〔728〕 End If　▵716

〔729〕 Calculate 〔TravelTime〕 + 〔Extra_Time〕　»

〔730〕 Adjust Subtract Date 〔Repeat Item’s Start Date〕 　➔ Supposed_Alarm_Time　» 732 734 737 744 745
• Duration: 〔729 Calculation Result〕 min

〔731〕 Date Current Date　»

〔732〕 If Any are true　〔730 Supposed_Alarm_Time〕 < 〔731 Date〕　〔730 Supposed_Alarm_Time〕 is 〔731 Date〕

〔733〕 If 〔Repeat Item’s Location〕 has any value

〔734〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 at 〔Repeat Item’s Location〕  which  was supposed to get ready at 〔730 Supposed_Alarm_Time〕. Please check.

〔735〕 Set Variable Text to 〔734 Text〕

〔736〕 Otherwise

〔737〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 which  was supposed to get ready at 〔730 Supposed_Alarm_Time〕. Please check.

〔738〕 Set Variable Text to 〔737 Text〕

〔739〕 End If

〔740〕 Show Alert 〔Text〕

〔741〕 Show Notification 〔Text〕

〔742〕 Speak Text
• Text: 〔Text〕

〔743〕 Otherwise　▵732

〔744〕 Dictionary　»
{  "Event": "〔Repeat Item〕",
   "From": "〔Repeat Item’s Start Date〕",
   "To": "〔Repeat Item’s End Date〕",
   "Location": "〔Repeat Item’s Location〕",
   "AlarmTime": "〔730 Supposed_Alarm_Time〕"
}

〔745〕 Add Alarm for 〔730 Supposed_Alarm_Time〕 called 〔744 Dictionary〕

〔746〕 End If

〔747〕 End Repeat with Each　▵483

〔748〕 Number 3　»

〔749〕 Repeat 〔748 Number〕 Times

〔750〕 Repeat[2] with Each in 〔480 Calendar Events〕

〔751〕 Format Date 〔Repeat Item 2’s Start Date〕　» 755 758 763 766
• DateFormatStyle: None

〔752〕 Format Date 〔Repeat Item 2’s End Date〕　» 755 758 763 766
• DateFormatStyle: None

〔753〕 If 〔Repeat Item 2’s Location〕 has any value

〔754〕 If 〔482 Count〕 > 1

〔755〕 Text　»
Event 〔Repeat Index 2〕 〔Repeat Item 2〕 from 〔751 Formatted Date〕 to 〔752 Formatted Date〕 at 〔Repeat Item 2’s Location〕

〔756〕 Set Variable Text to 〔755 Text〕

〔757〕 Otherwise

〔758〕 Text　»
Event  〔Repeat Item 2〕 from 〔751 Formatted Date〕 to 〔752 Formatted Date〕 at 〔Repeat Item 2’s Location〕

〔759〕 Set Variable Text to 〔758 Text〕

〔760〕 End If

〔761〕 Otherwise　▵753

〔762〕 If 〔482 Count〕 > 1

〔763〕 Text　»
Event 〔Repeat Index 2〕 〔Repeat Item 2〕 from 〔751 Formatted Date〕 to 〔752 Formatted Date〕

〔764〕 Set Variable Text to 〔763 Text〕

〔765〕 Otherwise

〔766〕 Text　»
Event  〔Repeat Item 2〕 from 〔751 Formatted Date〕 to 〔752 Formatted Date〕

〔767〕 Set Variable Text to 〔766 Text〕

〔768〕 End If

〔769〕 End If　▵761

〔770〕 Speak Text
• Text: 〔Text〕

〔771〕 Wait 1 seconds

〔772〕 End Repeat[2] with Each　▵750

〔773〕 End Repeat Times　▵749

〔774〕 End If　▵481

〔775〕 End If　▵469

〔776〕 If 〔Shortcut Input as Number〕 is 3

〔777〕 Comment
Alarm Activation Handler
Triggered by alarm events - manages notification flow

〔778〕 Dictionary　»
{  "stop": "no" }

〔779〕 Text　»
〔778 Dictionary〕

〔780〕 Save File 〔779 Text〕
• AskWhereToSave: false
• SaveFileOverwrite: true
• FileDestinationPath: Smart Calendar Reminder/stopflag.txt

〔781〕 Date Current Date　» 800

〔782〕 Find Alarm All Alarm　» 783 792
• ContentItemFilter: {  "Value": {
      "WFActionParameterFilterPrefix": 1,
      "WFContentPredicateBoundedDate": false,
      "WFActionParameterFilterTemplates": []
   },
   "WFSerializationType": "WFContentPredicateTableTemplate"
}

〔783〕 If 〔782 Alarms〕 has any value

〔784〕 Number 10000　» 785 786

〔785〕 Repeat 〔784 Number〕 Times

〔786〕 Get File at Path Smart Calendar Reminder/stopflag.txt from Folder　»
• FileErrorIfNotFound: false
• File: 〔784 Number〕

〔787〕 Get Dictionary from 〔786 File〕　»

〔788〕 Get Dictionary Value for stop in 〔787 Dictionary〕　»

〔789〕 If 〔788 Dictionary Value’s Name〕 is yes

〔790〕 Stop This Shortcut

〔791〕 End If

〔792〕 Repeat[2] with Each in 〔782 Alarms〕

〔793〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ alarm_label_dictionary　» 794 796 798 803 807 810

〔794〕 Get Dictionary Value for From in 〔793 alarm_label_dictionary〕　»

〔795〕 Get Dates from 〔794 Dictionary Value〕 　➔ From　» 801

〔796〕 Get Dictionary Value for To in 〔793 alarm_label_dictionary〕　»

〔797〕 Get Dates from 〔796 Dictionary Value〕 　➔ To　» 802

〔798〕 Get Dictionary Value for AlarmTime in 〔793 alarm_label_dictionary〕　»

〔799〕 Get Dates from 〔798 Dictionary Value〕 　➔ AlarmTime　»

〔800〕 If All are true　〔799 AlarmTime{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH"}〕 is 〔781 Date{"Date Style":"Custom","WFDateFormat":"HH","WFISO8601IncludeTime":false}〕　〔799 AlarmTime{"Date Style":"Custom","WFDateFormat":"mm","WFISO8601IncludeTime":false}〕 is 〔781 Date{"Date Style":"Custom","WFDateFormat":"mm","WFISO8601IncludeTime":false}〕

〔801〕 Format Date 〔795 From’s Time〕　» 807 810

〔802〕 Format Date 〔797 To’s Time〕　» 807 810

〔803〕 Get Dictionary Value for Location in 〔793 alarm_label_dictionary〕　»

〔804〕 Text　»
〔803 Dictionary Value〕

〔805〕 Count Characters in 〔804 Text〕　»

〔806〕 If 〔805 Count〕 > • ConditionalActionString
""• NumberValue
0

〔807〕 Text　»
Prepare for 〔793 alarm_label_dictionary.Event〕 from 〔801 Formatted Date〕 to 〔802 Formatted Date〕 at 〔793 alarm_label_dictionary.Location〕

〔808〕 Set Variable Text to 〔807 Text〕

〔809〕 Otherwise

〔810〕 Text　»
Prepare for 〔793 alarm_label_dictionary.Event〕 from 〔801 Formatted Date〕 to 〔802 Formatted Date〕

〔811〕 Set Variable Text to 〔810 Text〕

〔812〕 End If

〔813〕 Speak Text
• Text: 〔Text〕

〔814〕 End If　▵800

〔815〕 End Repeat[2] with Each　▵792

〔816〕 End Repeat Times　▵785

〔817〕 End If　▵783

〔818〕 End If　▵776

〔819〕 If 〔Shortcut Input as Number〕 is 4

〔820〕 Comment
input case 4:
Notification Interrupt System
Stop protocol for voice announcements when any alarm is stopped.

〔821〕 Dictionary　»
{  "stop": "yes" }

〔822〕 Text　»
〔821 Dictionary〕

〔823〕 Save File 〔822 Text〕
• AskWhereToSave: false
• SaveFileOverwrite: true
• FileDestinationPath: Smart Calendar Reminder/stopflag.txt

〔824〕 End If

〔825〕 If 〔Shortcut Input as Number〕 is 5

〔826〕 Comment
*Revolutionizing event management by integrating calendar data with intelligent automation:

Voice announcements for upcoming events

Dynamic alarm calculation (travel + prep time)

Calendar-driven scheduling system
Eliminates manual reminders and ensures perfect timing synchronization*

〔827〕 Get File at Path Smart Calendar Reminder/aboutme.txt from Folder　»
• FileErrorIfNotFound: false

〔828〕 Get Dictionary from 〔827 File〕　» 829 832 833

〔829〕 Get Dictionary from 〔828 Dictionary.HomeAddress〕　»

〔830〕 Text　»
〔829 Dictionary.street〕 〔829 Dictionary.city〕 〔829 Dictionary.state〕 〔829 Dictionary.postcode〕 〔829 Dictionary.country〕\u{space}

〔831〕 Set Variable HomeAddress to 〔830 Text〕

〔832〕 Set Variable TravelMethod to 〔828 Dictionary.TravelMethod〕

〔833〕 Get Dictionary Value for ExtraTime in 〔828 Dictionary〕　»

〔834〕 Get Numbers from 〔833 Dictionary Value〕　»

〔835〕 Set Variable ExtraTime to 〔834 Numbers〕

〔836〕 Find Calendar Events All Calendar Events where　» 837 838
• ContentItemSortProperty: Start Date
• ContentItemSortOrder: Oldest First
• ContentItemFilter: • All the following are true
Start Date is in the next 1 months
Is Not All Day
Canceled is {"Bool":false}

〔837〕 If 〔836 Calendar Events〕 has any value

〔838〕 Repeat with Each in 〔836 Calendar Events〕

〔839〕 If 〔Repeat Item’s Location〕 has any value

〔840〕 Get Current Location　» 852 858 944
• Accuracy: Best

〔841〕 Comment
*To specify event-specific departure locations:

1. Create calendar event notes with JSON structure:
{
“Street”: “your departure street”,
“City”: “your departure city”,
“State”: “your departure state”,
“Country”: “your departure country”,
“Postcode”: “your departure postcode”
}
2. System prioritizes these over default locations*

〔842〕 If All are true　〔Repeat Item’s Notes〕 has any value　〔Repeat Item’s Notes〕 begins with {　〔Repeat Item’s Notes〕 ends with }

〔843〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY

〔844〕 Get Dictionary from 〔Repeat Item’s Notes〕 　➔ Notes Address Dictionary　» 845 846 847 848 849

〔845〕 Set Variable Calendar_Notes_Street to 〔844 Notes Address Dictionary.Street〕

〔846〕 Set Variable Calendar_Notes_City to 〔844 Notes Address Dictionary.City〕

〔847〕 Set Variable Calendar_Notes_State to 〔844 Notes Address Dictionary.State〕

〔848〕 Set Variable Calendar_Notes_Region to 〔844 Notes Address Dictionary.Country〕

〔849〕 Set Variable Calendar_Notes_ZIP_Code to 〔844 Notes Address Dictionary.Postcode〕

〔850〕 Text　»
〔Calendar_Notes_Street〕 〔Calendar_Notes_City〕 〔Calendar_Notes_State〕 〔Calendar_Notes_ZIP_Code〕 〔Calendar_Notes_Region〕

〔851〕 Set Variable NotesAddressString to 〔850 Text〕

〔852〕 If All are true　〔840 Current Location’s Street〕 is 〔Calendar_Notes_Street〕　〔840 Current Location’s City〕 is 〔Calendar_Notes_City〕　〔840 Current Location’s State〕 is 〔Calendar_Notes_State〕　〔840 Current Location’s Country〕 is 〔Calendar_Notes_Region〕　〔840 Current Location’s ZIP Code〕 is 〔Calendar_Notes_ZIP_Code〕

〔853〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY -> CALENDAR EVENT ADDRESS IS THE SAME WITH CURRENT LOCATION

〔854〕 Number 0　»

〔855〕 Set Variable CurrentToDeparture to 〔854 Number〕

〔856〕 Otherwise

〔857〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY -> CALENDAR EVENT ADDRESS IS NOT THE SAME WITH CURRENT LOCATION

〔858〕 Get 〔TravelMethod〕 Time　»
• GetDirectionsCustomLocation: 〔840 Current Location〕
• Destination: 〔NotesAddressString〕

〔859〕 Set Variable TravelTimeString to 〔858 Travel Time〕

〔860〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔861〕 Set Variable MatchString to 〔860 Matches〕

〔862〕 Count Items in 〔MatchString〕　»

〔863〕 If 〔862 Count〕 is 1

〔864〕 Get First Item from List 〔MatchString〕　»

〔865〕 Set Variable TravelDays to 〔864 Item from List〕

〔866〕 Otherwise

〔867〕 Number 0　»

〔868〕 Set Variable TravelDays to 〔867 Number〕

〔869〕 End If

〔870〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔871〕 Set Variable MatchString to 〔870 Matches〕

〔872〕 Count Items in 〔MatchString〕　»

〔873〕 If 〔872 Count〕 is 1

〔874〕 Get First Item from List 〔MatchString〕　»

〔875〕 Set Variable TravelHours to 〔874 Item from List〕

〔876〕 Otherwise

〔877〕 Number 0　»

〔878〕 Set Variable TravelHours to 〔877 Number〕

〔879〕 End If

〔880〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔881〕 Set Variable MatchString to 〔880 Matches〕

〔882〕 Count Items in 〔MatchString〕　»

〔883〕 If 〔882 Count〕 is 1

〔884〕 Get First Item from List 〔MatchString〕　»

〔885〕 Set Variable TravelMinutes to 〔884 Item from List〕

〔886〕 Otherwise

〔887〕 Number 0　»

〔888〕 Set Variable TravelMinutes to 〔887 Number〕

〔889〕 End If

〔890〕 Calculate 〔TravelDays〕 × 1440　» 892

〔891〕 Calculate 〔TravelHours〕 × 60　»

〔892〕 Calculate 〔891 Calculation Result〕 + 〔890 Calculation Result〕　»

〔893〕 Calculate 〔892 Calculation Result〕 + 〔TravelMinutes〕　»

〔894〕 Set Variable CurrentToDeparture to 〔893 Calculation Result〕

〔895〕 End If　▵856

〔896〕 Get 〔TravelMethod〕 Time 　➔ DepartureToDestination　»
• GetDirectionsCustomLocation: 〔NotesAddressString〕
• Destination: 〔Repeat Item’s Location〕

〔897〕 Set Variable TravelTimeString to 〔896 DepartureToDestination〕

〔898〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔899〕 Set Variable MatchString to 〔898 Matches〕

〔900〕 Count Items in 〔MatchString〕　»

〔901〕 If 〔900 Count〕 is 1

〔902〕 Get First Item from List 〔MatchString〕　»

〔903〕 Set Variable TravelDays to 〔902 Item from List〕

〔904〕 Otherwise

〔905〕 Number 0　»

〔906〕 Set Variable TravelDays to 〔905 Number〕

〔907〕 End If

〔908〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔909〕 Set Variable MatchString to 〔908 Matches〕

〔910〕 Count Items in 〔MatchString〕　»

〔911〕 If 〔910 Count〕 is 1

〔912〕 Get First Item from List 〔MatchString〕　»

〔913〕 Set Variable TravelHours to 〔912 Item from List〕

〔914〕 Otherwise

〔915〕 Number 0　»

〔916〕 Set Variable TravelHours to 〔915 Number〕

〔917〕 End If

〔918〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔919〕 Set Variable MatchString to 〔918 Matches〕

〔920〕 Count Items in 〔MatchString〕　»

〔921〕 If 〔920 Count〕 is 1

〔922〕 Get First Item from List 〔MatchString〕　»

〔923〕 Set Variable TravelMinutes to 〔922 Item from List〕

〔924〕 Otherwise

〔925〕 Number 0　»

〔926〕 Set Variable TravelMinutes to 〔925 Number〕

〔927〕 End If

〔928〕 Calculate 〔TravelDays〕 × 1440　» 930

〔929〕 Calculate 〔TravelHours〕 × 60　»

〔930〕 Calculate 〔929 Calculation Result〕 + 〔928 Calculation Result〕　»

〔931〕 Calculate 〔930 Calculation Result〕 + 〔TravelMinutes〕　»

〔932〕 Calculate 〔931 Calculation Result〕 + 〔CurrentToDeparture〕　»

〔933〕 Set Variable TravelTime to 〔932 Calculation Result〕

〔934〕 Otherwise　▵842

〔935〕 Comment
CALENDER EVENT NOTES IS BLANK

〔936〕 Get Dictionary from 〔HomeAddress〕 　➔ Home Address Dictionary　» 937 938 939 940 941

〔937〕 Get Dictionary Value for street in 〔936 Home Address Dictionary〕 　➔ home_Street　» 942 944

〔938〕 Get Dictionary Value for city in 〔936 Home Address Dictionary〕 　➔ home_City　» 942 944

〔939〕 Get Dictionary Value for state in 〔936 Home Address Dictionary〕 　➔ home_State　» 942 944

〔940〕 Get Dictionary Value for country in 〔936 Home Address Dictionary〕 　➔ home_Country　» 942 944

〔941〕 Get Dictionary Value for postcode in 〔936 Home Address Dictionary〕 　➔ home_Postcode　» 942 944

〔942〕 If All are true　〔937 home_Street〕 has any value　〔938 home_City〕 has any value　〔939 home_State〕 has any value　〔940 home_Country〕 has any value　〔941 home_Postcode〕 has any value

〔943〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED

〔944〕 If All are true　〔840 Current Location’s Street〕 is 〔937 home_Street〕　〔840 Current Location’s City〕 is 〔938 home_City〕　〔840 Current Location’s State〕 is 〔939 home_State〕　〔840 Current Location’s Country〕 is 〔940 home_Country〕　〔840 Current Location’s ZIP Code〕 is 〔941 home_Postcode〕

〔945〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED -> HOME ADDRESS IS THE SAME WITH CURRENT LOCATION

〔946〕 Number 0　»

〔947〕 Set Variable CurrentToDeparture to 〔946 Number〕

〔948〕 Otherwise

〔949〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED -> HOME ADDRESS IS NOT THE SAME WITH CURRENT LOCATION

〔950〕 Get 〔TravelMethod〕 Time　»
• Destination: 〔HomeAddress〕

〔951〕 Set Variable TravelTimeString to 〔950 Travel Time〕

〔952〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔953〕 Set Variable MatchString to 〔952 Matches〕

〔954〕 Count Items in 〔MatchString〕　»

〔955〕 If 〔954 Count〕 is 1

〔956〕 Get First Item from List 〔MatchString〕　»

〔957〕 Set Variable TravelDays to 〔956 Item from List〕

〔958〕 Otherwise

〔959〕 Number 0　»

〔960〕 Set Variable TravelDays to 〔959 Number〕

〔961〕 End If

〔962〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔963〕 Set Variable MatchString to 〔962 Matches〕

〔964〕 Count Items in 〔MatchString〕　»

〔965〕 If 〔964 Count〕 is 1

〔966〕 Get First Item from List 〔MatchString〕　»

〔967〕 Set Variable TravelHours to 〔966 Item from List〕

〔968〕 Otherwise

〔969〕 Number 0　»

〔970〕 Set Variable TravelHours to 〔969 Number〕

〔971〕 End If

〔972〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔973〕 Set Variable MatchString to 〔972 Matches〕

〔974〕 Count Items in 〔MatchString〕　»

〔975〕 If 〔974 Count〕 is 1

〔976〕 Get First Item from List 〔MatchString〕　»

〔977〕 Set Variable TravelMinutes to 〔976 Item from List〕

〔978〕 Otherwise

〔979〕 Number 0　»

〔980〕 Set Variable TravelMinutes to 〔979 Number〕

〔981〕 End If

〔982〕 Calculate 〔TravelDays〕 × 1440　» 984

〔983〕 Calculate 〔TravelHours〕 × 60　»

〔984〕 Calculate 〔983 Calculation Result〕 + 〔982 Calculation Result〕　»

〔985〕 Calculate 〔984 Calculation Result〕 + 〔TravelMinutes〕　»

〔986〕 Set Variable CurrentToDeparture to 〔985 Calculation Result〕

〔987〕 End If　▵948

〔988〕 Get 〔TravelMethod〕 Time 　➔ DepartureToDestination　»
• GetDirectionsCustomLocation: 〔HomeAddress〕
• Destination: 〔Repeat Item’s Location〕

〔989〕 Set Variable TravelTimeString to 〔988 DepartureToDestination〕

〔990〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔991〕 Set Variable MatchString to 〔990 Matches〕

〔992〕 Count Items in 〔MatchString〕　»

〔993〕 If 〔992 Count〕 is 1

〔994〕 Get First Item from List 〔MatchString〕　»

〔995〕 Set Variable TravelDays to 〔994 Item from List〕

〔996〕 Otherwise

〔997〕 Number 0　»

〔998〕 Set Variable TravelDays to 〔997 Number〕

〔999〕 End If

〔1000〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1001〕 Set Variable MatchString to 〔1000 Matches〕

〔1002〕 Count Items in 〔MatchString〕　»

〔1003〕 If 〔1002 Count〕 is 1

〔1004〕 Get First Item from List 〔MatchString〕　»

〔1005〕 Set Variable TravelHours to 〔1004 Item from List〕

〔1006〕 Otherwise

〔1007〕 Number 0　»

〔1008〕 Set Variable TravelHours to 〔1007 Number〕

〔1009〕 End If

〔1010〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1011〕 Set Variable MatchString to 〔1010 Matches〕

〔1012〕 Count Items in 〔MatchString〕　»

〔1013〕 If 〔1012 Count〕 is 1

〔1014〕 Get First Item from List 〔MatchString〕　»

〔1015〕 Set Variable TravelMinutes to 〔1014 Item from List〕

〔1016〕 Otherwise

〔1017〕 Number 0　»

〔1018〕 Set Variable TravelMinutes to 〔1017 Number〕

〔1019〕 End If

〔1020〕 Calculate 〔TravelDays〕 × 1440　» 1022

〔1021〕 Calculate 〔TravelHours〕 × 60　»

〔1022〕 Calculate 〔1021 Calculation Result〕 + 〔1020 Calculation Result〕　»

〔1023〕 Calculate 〔1022 Calculation Result〕 + 〔TravelMinutes〕　»

〔1024〕 Calculate 〔1023 Calculation Result〕 + 〔CurrentToDeparture〕　»

〔1025〕 Set Variable TravelTime to 〔1024 Calculation Result〕

〔1026〕 Otherwise　▵942

〔1027〕 Text
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS NOT MAINTAINED

〔1028〕 Get 〔TravelMethod〕 Time　»
• Destination: 〔Repeat Item’s Location〕

〔1029〕 Set Variable TravelTimeString to 〔1028 Travel Time〕

〔1030〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1031〕 Set Variable MatchString to 〔1030 Matches〕

〔1032〕 Count Items in 〔MatchString〕　»

〔1033〕 If 〔1032 Count〕 is 1

〔1034〕 Get First Item from List 〔MatchString〕　»

〔1035〕 Set Variable TravelDays to 〔1034 Item from List〕

〔1036〕 Otherwise

〔1037〕 Number 0　»

〔1038〕 Set Variable TravelDays to 〔1037 Number〕

〔1039〕 End If

〔1040〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1041〕 Set Variable MatchString to 〔1040 Matches〕

〔1042〕 Count Items in 〔MatchString〕　»

〔1043〕 If 〔1042 Count〕 is 1

〔1044〕 Get First Item from List 〔MatchString〕　»

〔1045〕 Set Variable TravelHours to 〔1044 Item from List〕

〔1046〕 Otherwise

〔1047〕 Number 0　»

〔1048〕 Set Variable TravelHours to 〔1047 Number〕

〔1049〕 End If

〔1050〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1051〕 Set Variable MatchString to 〔1050 Matches〕

〔1052〕 Count Items in 〔MatchString〕　»

〔1053〕 If 〔1052 Count〕 is 1

〔1054〕 Get First Item from List 〔MatchString〕　»

〔1055〕 Set Variable TravelMinutes to 〔1054 Item from List〕

〔1056〕 Otherwise

〔1057〕 Number 0　»

〔1058〕 Set Variable TravelMinutes to 〔1057 Number〕

〔1059〕 End If

〔1060〕 Calculate 〔TravelDays〕 × 1440　» 1062

〔1061〕 Calculate 〔TravelHours〕 × 60　»

〔1062〕 Calculate 〔1061 Calculation Result〕 + 〔1060 Calculation Result〕　»

〔1063〕 Calculate 〔1062 Calculation Result〕 + 〔TravelMinutes〕　»

〔1064〕 Set Variable TravelTime to 〔1063 Calculation Result〕

〔1065〕 End If　▵1026

〔1066〕 End If　▵934

〔1067〕 Otherwise　▵839

〔1068〕 Number 0　»

〔1069〕 Set Variable TravelTime to 〔1068 Number〕

〔1070〕 End If

〔1071〕 Calculate 〔TravelTime〕 + 〔ExtraTime〕　»

〔1072〕 Adjust Subtract Date 〔Repeat Item’s Start Date〕 　➔ Supposed Alarm Time　» 1073 1076 1079 1082 1089 1105 1107 1108 1126 1131 1134
• Duration: 〔1071 Calculation Result〕 min

〔1073〕 Dictionary 　➔ Alarm Label Dictionary　» 1105 1110 1126
{  "Event": "〔Repeat Item〕",
   "From": "〔Repeat Item’s Start Date〕",
   "To": "〔Repeat Item’s End Date〕",
   "Location": "〔Repeat Item’s Location〕",
   "AlarmTime": "〔1072 Supposed Alarm Time〕"
}

〔1074〕 Date Current Date 　➔ Current Date　» 1075 1076 1107

〔1075〕 Adjust Add Date 〔1074 Current Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"dd MMM yyyy"}〕 　➔ 1 day after　» 1089 1108
• Duration: "1" days

〔1076〕 If 〔1072 Supposed Alarm Time〕 is 〔1074 Current Date〕

〔1077〕 Comment
supposed alarm time is exactly 12:00am

〔1078〕 If 〔Repeat Item’s Location〕 has any value

〔1079〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 at 〔Repeat Item’s Location〕 which  was supposed to get ready at 〔1072 Supposed Alarm Time〕. Please check.

〔1080〕 Set Variable Text to 〔1079 Text〕

〔1081〕 Otherwise

〔1082〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 which  was supposed to get ready at 〔1072 Supposed Alarm Time〕. Please check.

〔1083〕 Set Variable Text to 〔1082 Text〕

〔1084〕 End If

〔1085〕 Show Alert 〔Text〕

〔1086〕 Show Notification 〔Text〕

〔1087〕 Speak Text
• Text: 〔Text〕

〔1088〕 Otherwise　▵1076

〔1089〕 If 〔1072 Supposed Alarm Time〕 is 〔1075 1 day after〕

〔1090〕 Find Alarm All Alarm　» 1091 1092

〔1091〕 If 〔1090 Alarms〕 has any value

〔1092〕 Repeat[2] with Each in 〔1090 Alarms〕

〔1093〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ AlarmLabelDictionary　» 1094 1095 1097

〔1094〕 Get Dictionary Value for Event in 〔1093 AlarmLabelDictionary〕 　➔ Event　» 1099

〔1095〕 Get Dictionary Value for From in 〔1093 AlarmLabelDictionary〕 　➔ From　»

〔1096〕 Get Dates from 〔1095 From〕 　➔ FromDate　» 1099

〔1097〕 Get Dictionary Value for To in 〔1093 AlarmLabelDictionary〕 　➔ To　»

〔1098〕 Get Dates from 〔1097 To〕 　➔ ToDate　»

〔1099〕 If All are true　〔1094 Event’s Name〕 is 〔Repeat Item〕　〔1096 FromDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔Repeat Item’s Start Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕　〔1098 ToDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is • ConditionalActionString
〔Repeat Item’s End Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕• Date
〔Repeat Item’s End Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕

〔1100〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔1101〕 End If

〔1102〕 End Repeat[2] with Each　▵1092

〔1103〕 End If　▵1091

〔1104〕 Comment
since this will be triggered at 12:00 am each day, when the supposed alarm time is 12:00 am in the next day, you can set alarm now

〔1105〕 Add Alarm for 〔1072 Supposed Alarm Time〕 called 〔1073 Alarm Label Dictionary〕

〔1106〕 Otherwise　▵1089

〔1107〕 If 〔1072 Supposed Alarm Time〕 > 〔1074 Current Date〕

〔1108〕 If 〔1072 Supposed Alarm Time〕 > 〔1075 1 day after〕

〔1109〕 Comment
when the time is other than 12:00 am of then next day, you cannot set alarm yet. If set, it will be today. For example, triggering time 2025-4-8 12:00 am, the supposed alarm time is 2025-4-9 08:00 am, if you set an alarm at 08:00 at 2025-4-8 12:00 am, it will alarm at 2025-4-8 08:00 am instead. So we need to record the supposed alarm time and trigger next day.

〔1110〕 Set Variable Event to 〔1073 Alarm Label Dictionary〕

〔1111〕 Otherwise

〔1112〕 Find Alarm All Alarm　» 1113 1114
• ContentItemFilter: {  "Value": {
      "WFActionParameterFilterPrefix": 1,
      "WFActionParameterFilterTemplates": [],
      "WFContentPredicateBoundedDate": false
   },
   "WFSerializationType": "WFContentPredicateTableTemplate"
}

〔1113〕 If 〔1112 Alarms〕 has any value

〔1114〕 Repeat[2] with Each in 〔1112 Alarms〕

〔1115〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ AlarmLabelDictionary　» 1116 1117 1119

〔1116〕 Get Dictionary Value for Event in 〔1115 AlarmLabelDictionary〕 　➔ Event　» 1121

〔1117〕 Get Dictionary Value for From in 〔1115 AlarmLabelDictionary〕 　➔ From　»

〔1118〕 Get Dates from 〔1117 From〕 　➔ FromDate　» 1121

〔1119〕 Get Dictionary Value for To in 〔1115 AlarmLabelDictionary〕 　➔ To　»

〔1120〕 Get Dates from 〔1119 To〕 　➔ ToDate　»

〔1121〕 If All are true　〔1116 Event’s Name〕 is 〔Repeat Item〕　〔1118 FromDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔Repeat Item’s Start Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕　〔1120 ToDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔Repeat Item’s End Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕

〔1122〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔1123〕 End If

〔1124〕 End Repeat[2] with Each　▵1114

〔1125〕 End If　▵1113

〔1126〕 Add Alarm for 〔1072 Supposed Alarm Time〕 called 〔1073 Alarm Label Dictionary〕

〔1127〕 End If　▵1111

〔1128〕 Otherwise　▵1107

〔1129〕 Comment
the supposed alarm time passed

〔1130〕 If 〔Repeat Item’s Location〕 has any value

〔1131〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 at 〔Repeat Item’s Location〕 which  was supposed to get ready at 〔1072 Supposed Alarm Time〕. Please check.

〔1132〕 Set Variable Text to 〔1131 Text〕

〔1133〕 Otherwise

〔1134〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 which  was supposed to get ready at 〔1072 Supposed Alarm Time〕. Please check.

〔1135〕 Set Variable Text to 〔1134 Text〕

〔1136〕 End If

〔1137〕 Show Alert 〔Text〕

〔1138〕 Show Notification 〔Text〕

〔1139〕 Speak Text
• Text: 〔Text〕

〔1140〕 End If　▵1128

〔1141〕 End If　▵1106

〔1142〕 End If　▵1088

〔1143〕 If 〔Event〕 has any value

〔1144〕 Get Dictionary from 〔Event〕　» 1145 1146 1147 1148 1161

〔1145〕 Get Text from 〔1144 Dictionary.Event〕　» 1161

〔1146〕 Get Dates from 〔1144 Dictionary.From〕　» 1161

〔1147〕 Get Dates from 〔1144 Dictionary.To〕　» 1161

〔1148〕 Get Text from 〔1144 Dictionary.Location〕　» 1161

〔1149〕 Text　»

〔1150〕 Set Variable TextList to 〔1149 Text〕

〔1151〕 Add 〔Event〕 to Variable TextList

〔1152〕 Get File at Path Smart Calendar Reminder/Future Alarms.txt from Folder　» 1153 1154
• FileErrorIfNotFound: false

〔1153〕 If 〔1152 File’s File Size〕 has any value

〔1154〕 Split Text 〔1152 File〕 by New Lines　»

〔1155〕 Repeat[2] with Each in 〔1154 Split Text〕

〔1156〕 Get Dictionary from 〔Repeat Item 2〕　» 1157 1158 1159 1160

〔1157〕 Get Text from 〔1156 Dictionary.Event〕　» 1161

〔1158〕 Get Dates from 〔1156 Dictionary.From〕　» 1161

〔1159〕 Get Dates from 〔1156 Dictionary.To〕

〔1160〕 Get Text from 〔1156 Dictionary.Location〕　»

〔1161〕 If Any are true　〔1145 Text〕 is not 〔1157 Text〕　〔1146 Dates〕 is not • ConditionalActionString
〔1144 Dictionary.From〕• Date
〔1158 Dates〕　〔1147 Dates〕 is not • ConditionalActionString
〔1144 Dictionary.To〕• Date
〔1158 Dates〕　〔1148 Text〕 is not 〔1160 Text〕

〔1162〕 Add 〔Repeat Item 2〕 to Variable TextList

〔1163〕 End If

〔1164〕 End Repeat[2] with Each　▵1155

〔1165〕 Combine Text 〔TextList〕 with New Lines　»

〔1166〕 Save File 〔1165 Combined Text〕
• AskWhereToSave: false
• SaveFileOverwrite: true
• FileDestinationPath: Smart Calendar Reminder/Future Alarms.txt

〔1167〕 Otherwise　▵1153

〔1168〕 Text　»

〔Event〕

〔1169〕 Save File 〔1168 Text〕
• AskWhereToSave: false
• FileDestinationPath: Smart Calendar Reminder/Future Alarms.txt

〔1170〕 End If

〔1171〕 End If　▵1143

〔1172〕 End Repeat with Each　▵838

〔1173〕 End If　▵837

〔1174〕 Get File at Path Smart Calendar Reminder/Future Alarms.txt from Folder　» 1175 1176
• FileErrorIfNotFound: false

〔1175〕 If 〔1174 File’s File Size〕 has any value

〔1176〕 Split Text 〔1174 File〕 by New Lines　»

〔1177〕 Repeat with Each in 〔1176 Split Text〕

〔1178〕 Get Dictionary from 〔Repeat Item〕　» 1179 1180 1190 1201

〔1179〕 If 〔1178 Dictionary〕 has any value

〔1180〕 Get Dates from 〔1178 Dictionary.AlarmTime〕　» 1181 1182 1201

〔1181〕 If 〔1180 Dates〕 is today

〔1182〕 Find Alarm 〔1180 Dates〕　» 1183 1184
• ContentItemFilter: {  "Value": {
      "WFActionParameterFilterPrefix": 1,
      "WFActionParameterFilterTemplates": [],
      "WFContentPredicateBoundedDate": false
   },
   "WFSerializationType": "WFContentPredicateTableTemplate"
}

〔1183〕 If 〔1182 Alarms〕 has any value

〔1184〕 Repeat[2] with Each in 〔1182 Alarms〕

〔1185〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ Alarm_Label_Dictionary　» 1186 1188 1196

〔1186〕 Get Dictionary Value for From in 〔1185 Alarm_Label_Dictionary〕　»

〔1187〕 Get Dates from 〔1186 Dictionary Value〕 　➔ From_Date　» 1196

〔1188〕 Get Dictionary Value for To in 〔1185 Alarm_Label_Dictionary〕　»

〔1189〕 Get Dates from 〔1188 Dictionary Value〕 　➔ To_Date　» 1196

〔1190〕 Get Dictionary from 〔1178 Dictionary.Event〕 　➔ FutureAlarmLabelDictionary　» 1191 1192 1194

〔1191〕 Get Dictionary Value for Event in 〔1190 FutureAlarmLabelDictionary〕 　➔ Event　» 1196

〔1192〕 Get Dictionary Value for From in 〔1190 FutureAlarmLabelDictionary〕 　➔ From　»

〔1193〕 Get Dates from 〔1192 From〕 　➔ FromDate　» 1196

〔1194〕 Get Dictionary Value for To in 〔1190 FutureAlarmLabelDictionary〕 　➔ To　»

〔1195〕 Get Dates from 〔1194 To〕 　➔ ToDate　»

〔1196〕 If All are true　〔1191 Event’s Name〕 is 〔1185 Alarm_Label_Dictionary.Event〕　〔1193 FromDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔1187 From_Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕　〔1195 ToDate{"Date Style":"Custom","WFDateFormat":"HH:mm","WFISO8601IncludeTime":false}〕 is 〔1189 To_Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕

〔1197〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔1198〕 End If

〔1199〕 End Repeat[2] with Each　▵1184

〔1200〕 End If　▵1183

〔1201〕 Add Alarm for 〔1180 Dates〕 called 〔1178 Dictionary.Event〕

〔1202〕 End If　▵1181

〔1203〕 End If　▵1179

〔1204〕 End Repeat with Each　▵1177

〔1205〕 End If　▵1175

〔1206〕 End If　▵825

〔1207〕 If 〔Shortcut Input as Number〕 is 6

〔1208〕 Comment
*Revolutionizing event management by integrating calendar data with intelligent automation:

Voice announcements for upcoming events

Dynamic alarm calculation (travel + prep time)

Calendar-driven scheduling system
Eliminates manual reminders and ensures perfect timing synchronization*

〔1209〕 Get File at Path Smart Calendar Reminder/aboutme.txt from Folder　»
• FileErrorIfNotFound: false

〔1210〕 Get Dictionary from 〔1209 File〕　» 1211 1214 1215

〔1211〕 Get Dictionary from 〔1210 Dictionary.HomeAddress〕　»

〔1212〕 Text　»
〔1211 Dictionary.street〕 〔1211 Dictionary.city〕 〔1211 Dictionary.state〕 〔1211 Dictionary.postcode〕 〔1211 Dictionary.country〕\u{space}

〔1213〕 Set Variable HomeAddress to 〔1212 Text〕

〔1214〕 Set Variable TravelMethod to 〔1210 Dictionary.TravelMethod〕

〔1215〕 Get Dictionary Value for ExtraTime in 〔1210 Dictionary〕　»

〔1216〕 Get Numbers from 〔1215 Dictionary Value〕　»

〔1217〕 Set Variable ExtraTime to 〔1216 Numbers〕

〔1218〕 Find Calendar Events All Calendar Events where　» 1219 1220
• ContentItemSortProperty: Start Date
• ContentItemSortOrder: Oldest First
• ContentItemFilter: • All the following are true
Start Date is in the next 1 weeks
Is Not All Day
Canceled is {"Bool":false}

〔1219〕 If 〔1218 Calendar Events〕 has any value

〔1220〕 Repeat with Each in 〔1218 Calendar Events〕

〔1221〕 If 〔Repeat Item’s Location〕 has any value

〔1222〕 Get Current Location　» 1234 1240 1326
• Accuracy: Best

〔1223〕 Comment
*To specify event-specific departure locations:

1. Create calendar event notes with JSON structure:
{
“Street”: “your departure street”,
“City”: “your departure city”,
“State”: “your departure state”,
“Country”: “your departure country”,
“Postcode”: “your departure postcode”
}
2. System prioritizes these over default locations*

〔1224〕 If All are true　〔Repeat Item’s Notes〕 has any value　〔Repeat Item’s Notes〕 begins with {　〔Repeat Item’s Notes〕 ends with }

〔1225〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY

〔1226〕 Get Dictionary from 〔Repeat Item’s Notes〕 　➔ Notes Address Dictionary　» 1227 1228 1229 1230 1231

〔1227〕 Set Variable Calendar_Notes_Street to 〔1226 Notes Address Dictionary.Street〕

〔1228〕 Set Variable Calendar_Notes_City to 〔1226 Notes Address Dictionary.City〕

〔1229〕 Set Variable Calendar_Notes_State to 〔1226 Notes Address Dictionary.State〕

〔1230〕 Set Variable Calendar_Notes_Region to 〔1226 Notes Address Dictionary.Country〕

〔1231〕 Set Variable Calendar_Notes_ZIP_Code to 〔1226 Notes Address Dictionary.Postcode〕

〔1232〕 Text　»
〔Calendar_Notes_Street〕 〔Calendar_Notes_City〕 〔Calendar_Notes_State〕 〔Calendar_Notes_ZIP_Code〕 〔Calendar_Notes_Region〕

〔1233〕 Set Variable NotesAddressString to 〔1232 Text〕

〔1234〕 If All are true　〔1222 Current Location’s Street〕 is 〔Calendar_Notes_Street〕　〔1222 Current Location’s City〕 is 〔Calendar_Notes_City〕　〔1222 Current Location’s State〕 is 〔Calendar_Notes_State〕　〔1222 Current Location’s Country〕 is 〔Calendar_Notes_Region〕　〔1222 Current Location’s ZIP Code〕 is 〔Calendar_Notes_ZIP_Code〕

〔1235〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY -> CALENDAR EVENT ADDRESS IS THE SAME WITH CURRENT LOCATION

〔1236〕 Number 0　»

〔1237〕 Set Variable CurrentToDeparture to 〔1236 Number〕

〔1238〕 Otherwise

〔1239〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY -> CALENDAR EVENT ADDRESS IS NOT THE SAME WITH CURRENT LOCATION

〔1240〕 Get 〔TravelMethod〕 Time　»
• GetDirectionsCustomLocation: 〔1222 Current Location〕
• Destination: 〔NotesAddressString〕

〔1241〕 Set Variable TravelTimeString to 〔1240 Travel Time〕

〔1242〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1243〕 Set Variable MatchString to 〔1242 Matches〕

〔1244〕 Count Items in 〔MatchString〕　»

〔1245〕 If 〔1244 Count〕 is 1

〔1246〕 Get First Item from List 〔MatchString〕　»

〔1247〕 Set Variable TravelDays to 〔1246 Item from List〕

〔1248〕 Otherwise

〔1249〕 Number 0　»

〔1250〕 Set Variable TravelDays to 〔1249 Number〕

〔1251〕 End If

〔1252〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1253〕 Set Variable MatchString to 〔1252 Matches〕

〔1254〕 Count Items in 〔MatchString〕　»

〔1255〕 If 〔1254 Count〕 is 1

〔1256〕 Get First Item from List 〔MatchString〕　»

〔1257〕 Set Variable TravelHours to 〔1256 Item from List〕

〔1258〕 Otherwise

〔1259〕 Number 0　»

〔1260〕 Set Variable TravelHours to 〔1259 Number〕

〔1261〕 End If

〔1262〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1263〕 Set Variable MatchString to 〔1262 Matches〕

〔1264〕 Count Items in 〔MatchString〕　»

〔1265〕 If 〔1264 Count〕 is 1

〔1266〕 Get First Item from List 〔MatchString〕　»

〔1267〕 Set Variable TravelMinutes to 〔1266 Item from List〕

〔1268〕 Otherwise

〔1269〕 Number 0　»

〔1270〕 Set Variable TravelMinutes to 〔1269 Number〕

〔1271〕 End If

〔1272〕 Calculate 〔TravelDays〕 × 1440　» 1274

〔1273〕 Calculate 〔TravelHours〕 × 60　»

〔1274〕 Calculate 〔1273 Calculation Result〕 + 〔1272 Calculation Result〕　»

〔1275〕 Calculate 〔1274 Calculation Result〕 + 〔TravelMinutes〕　»

〔1276〕 Set Variable CurrentToDeparture to 〔1275 Calculation Result〕

〔1277〕 End If　▵1238

〔1278〕 Get 〔TravelMethod〕 Time 　➔ DepartureToDestination　»
• GetDirectionsCustomLocation: 〔NotesAddressString〕
• Destination: 〔Repeat Item’s Location〕

〔1279〕 Set Variable TravelTimeString to 〔1278 DepartureToDestination〕

〔1280〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1281〕 Set Variable MatchString to 〔1280 Matches〕

〔1282〕 Count Items in 〔MatchString〕　»

〔1283〕 If 〔1282 Count〕 is 1

〔1284〕 Get First Item from List 〔MatchString〕　»

〔1285〕 Set Variable TravelDays to 〔1284 Item from List〕

〔1286〕 Otherwise

〔1287〕 Number 0　»

〔1288〕 Set Variable TravelDays to 〔1287 Number〕

〔1289〕 End If

〔1290〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1291〕 Set Variable MatchString to 〔1290 Matches〕

〔1292〕 Count Items in 〔MatchString〕　»

〔1293〕 If 〔1292 Count〕 is 1

〔1294〕 Get First Item from List 〔MatchString〕　»

〔1295〕 Set Variable TravelHours to 〔1294 Item from List〕

〔1296〕 Otherwise

〔1297〕 Number 0　»

〔1298〕 Set Variable TravelHours to 〔1297 Number〕

〔1299〕 End If

〔1300〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1301〕 Set Variable MatchString to 〔1300 Matches〕

〔1302〕 Count Items in 〔MatchString〕　»

〔1303〕 If 〔1302 Count〕 is 1

〔1304〕 Get First Item from List 〔MatchString〕　»

〔1305〕 Set Variable TravelMinutes to 〔1304 Item from List〕

〔1306〕 Otherwise

〔1307〕 Number 0　»

〔1308〕 Set Variable TravelMinutes to 〔1307 Number〕

〔1309〕 End If

〔1310〕 Calculate 〔TravelDays〕 × 1440　» 1312

〔1311〕 Calculate 〔TravelHours〕 × 60　»

〔1312〕 Calculate 〔1311 Calculation Result〕 + 〔1310 Calculation Result〕　»

〔1313〕 Calculate 〔1312 Calculation Result〕 + 〔TravelMinutes〕　»

〔1314〕 Calculate 〔1313 Calculation Result〕 + 〔CurrentToDeparture〕　»

〔1315〕 Set Variable TravelTime to 〔1314 Calculation Result〕

〔1316〕 Otherwise　▵1224

〔1317〕 Comment
CALENDER EVENT NOTES IS BLANK

〔1318〕 Get Dictionary from 〔HomeAddress〕 　➔ Home Address Dictionary　» 1319 1320 1321 1322 1323

〔1319〕 Get Dictionary Value for street in 〔1318 Home Address Dictionary〕 　➔ home_Street　» 1324 1326

〔1320〕 Get Dictionary Value for city in 〔1318 Home Address Dictionary〕 　➔ home_City　» 1324 1326

〔1321〕 Get Dictionary Value for state in 〔1318 Home Address Dictionary〕 　➔ home_State　» 1324 1326

〔1322〕 Get Dictionary Value for country in 〔1318 Home Address Dictionary〕 　➔ home_Country　» 1324 1326

〔1323〕 Get Dictionary Value for postcode in 〔1318 Home Address Dictionary〕 　➔ home_Postcode　» 1324 1326

〔1324〕 If All are true　〔1319 home_Street〕 has any value　〔1320 home_City〕 has any value　〔1321 home_State〕 has any value　〔1322 home_Country〕 has any value　〔1323 home_Postcode〕 has any value

〔1325〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED

〔1326〕 If All are true　〔1222 Current Location’s Street〕 is 〔1319 home_Street〕　〔1222 Current Location’s City〕 is 〔1320 home_City〕　〔1222 Current Location’s State〕 is 〔1321 home_State〕　〔1222 Current Location’s Country〕 is 〔1322 home_Country〕　〔1222 Current Location’s ZIP Code〕 is 〔1323 home_Postcode〕

〔1327〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED -> HOME ADDRESS IS THE SAME WITH CURRENT LOCATION

〔1328〕 Number 0　»

〔1329〕 Set Variable CurrentToDeparture to 〔1328 Number〕

〔1330〕 Otherwise

〔1331〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED -> HOME ADDRESS IS NOT THE SAME WITH CURRENT LOCATION

〔1332〕 Get 〔TravelMethod〕 Time　»
• Destination: 〔HomeAddress〕

〔1333〕 Set Variable TravelTimeString to 〔1332 Travel Time〕

〔1334〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1335〕 Set Variable MatchString to 〔1334 Matches〕

〔1336〕 Count Items in 〔MatchString〕　»

〔1337〕 If 〔1336 Count〕 is 1

〔1338〕 Get First Item from List 〔MatchString〕　»

〔1339〕 Set Variable TravelDays to 〔1338 Item from List〕

〔1340〕 Otherwise

〔1341〕 Number 0　»

〔1342〕 Set Variable TravelDays to 〔1341 Number〕

〔1343〕 End If

〔1344〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1345〕 Set Variable MatchString to 〔1344 Matches〕

〔1346〕 Count Items in 〔MatchString〕　»

〔1347〕 If 〔1346 Count〕 is 1

〔1348〕 Get First Item from List 〔MatchString〕　»

〔1349〕 Set Variable TravelHours to 〔1348 Item from List〕

〔1350〕 Otherwise

〔1351〕 Number 0　»

〔1352〕 Set Variable TravelHours to 〔1351 Number〕

〔1353〕 End If

〔1354〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1355〕 Set Variable MatchString to 〔1354 Matches〕

〔1356〕 Count Items in 〔MatchString〕　»

〔1357〕 If 〔1356 Count〕 is 1

〔1358〕 Get First Item from List 〔MatchString〕　»

〔1359〕 Set Variable TravelMinutes to 〔1358 Item from List〕

〔1360〕 Otherwise

〔1361〕 Number 0　»

〔1362〕 Set Variable TravelMinutes to 〔1361 Number〕

〔1363〕 End If

〔1364〕 Calculate 〔TravelDays〕 × 1440　» 1366

〔1365〕 Calculate 〔TravelHours〕 × 60　»

〔1366〕 Calculate 〔1365 Calculation Result〕 + 〔1364 Calculation Result〕　»

〔1367〕 Calculate 〔1366 Calculation Result〕 + 〔TravelMinutes〕　»

〔1368〕 Set Variable CurrentToDeparture to 〔1367 Calculation Result〕

〔1369〕 End If　▵1330

〔1370〕 Get 〔TravelMethod〕 Time 　➔ DepartureToDestination　»
• GetDirectionsCustomLocation: 〔HomeAddress〕
• Destination: 〔Repeat Item’s Location〕

〔1371〕 Set Variable TravelTimeString to 〔1370 DepartureToDestination〕

〔1372〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1373〕 Set Variable MatchString to 〔1372 Matches〕

〔1374〕 Count Items in 〔MatchString〕　»

〔1375〕 If 〔1374 Count〕 is 1

〔1376〕 Get First Item from List 〔MatchString〕　»

〔1377〕 Set Variable TravelDays to 〔1376 Item from List〕

〔1378〕 Otherwise

〔1379〕 Number 0　»

〔1380〕 Set Variable TravelDays to 〔1379 Number〕

〔1381〕 End If

〔1382〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1383〕 Set Variable MatchString to 〔1382 Matches〕

〔1384〕 Count Items in 〔MatchString〕　»

〔1385〕 If 〔1384 Count〕 is 1

〔1386〕 Get First Item from List 〔MatchString〕　»

〔1387〕 Set Variable TravelHours to 〔1386 Item from List〕

〔1388〕 Otherwise

〔1389〕 Number 0　»

〔1390〕 Set Variable TravelHours to 〔1389 Number〕

〔1391〕 End If

〔1392〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1393〕 Set Variable MatchString to 〔1392 Matches〕

〔1394〕 Count Items in 〔MatchString〕　»

〔1395〕 If 〔1394 Count〕 is 1

〔1396〕 Get First Item from List 〔MatchString〕　»

〔1397〕 Set Variable TravelMinutes to 〔1396 Item from List〕

〔1398〕 Otherwise

〔1399〕 Number 0　»

〔1400〕 Set Variable TravelMinutes to 〔1399 Number〕

〔1401〕 End If

〔1402〕 Calculate 〔TravelDays〕 × 1440　» 1404

〔1403〕 Calculate 〔TravelHours〕 × 60　»

〔1404〕 Calculate 〔1403 Calculation Result〕 + 〔1402 Calculation Result〕　»

〔1405〕 Calculate 〔1404 Calculation Result〕 + 〔TravelMinutes〕　»

〔1406〕 Calculate 〔1405 Calculation Result〕 + 〔CurrentToDeparture〕　»

〔1407〕 Set Variable TravelTime to 〔1406 Calculation Result〕

〔1408〕 Otherwise　▵1324

〔1409〕 Text
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS NOT MAINTAINED

〔1410〕 Get 〔TravelMethod〕 Time　»
• Destination: 〔Repeat Item’s Location〕

〔1411〕 Set Variable TravelTimeString to 〔1410 Travel Time〕

〔1412〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1413〕 Set Variable MatchString to 〔1412 Matches〕

〔1414〕 Count Items in 〔MatchString〕　»

〔1415〕 If 〔1414 Count〕 is 1

〔1416〕 Get First Item from List 〔MatchString〕　»

〔1417〕 Set Variable TravelDays to 〔1416 Item from List〕

〔1418〕 Otherwise

〔1419〕 Number 0　»

〔1420〕 Set Variable TravelDays to 〔1419 Number〕

〔1421〕 End If

〔1422〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1423〕 Set Variable MatchString to 〔1422 Matches〕

〔1424〕 Count Items in 〔MatchString〕　»

〔1425〕 If 〔1424 Count〕 is 1

〔1426〕 Get First Item from List 〔MatchString〕　»

〔1427〕 Set Variable TravelHours to 〔1426 Item from List〕

〔1428〕 Otherwise

〔1429〕 Number 0　»

〔1430〕 Set Variable TravelHours to 〔1429 Number〕

〔1431〕 End If

〔1432〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1433〕 Set Variable MatchString to 〔1432 Matches〕

〔1434〕 Count Items in 〔MatchString〕　»

〔1435〕 If 〔1434 Count〕 is 1

〔1436〕 Get First Item from List 〔MatchString〕　»

〔1437〕 Set Variable TravelMinutes to 〔1436 Item from List〕

〔1438〕 Otherwise

〔1439〕 Number 0　»

〔1440〕 Set Variable TravelMinutes to 〔1439 Number〕

〔1441〕 End If

〔1442〕 Calculate 〔TravelDays〕 × 1440　» 1444

〔1443〕 Calculate 〔TravelHours〕 × 60　»

〔1444〕 Calculate 〔1443 Calculation Result〕 + 〔1442 Calculation Result〕　»

〔1445〕 Calculate 〔1444 Calculation Result〕 + 〔TravelMinutes〕　»

〔1446〕 Set Variable TravelTime to 〔1445 Calculation Result〕

〔1447〕 End If　▵1408

〔1448〕 End If　▵1316

〔1449〕 Otherwise　▵1221

〔1450〕 Number 0　»

〔1451〕 Set Variable TravelTime to 〔1450 Number〕

〔1452〕 End If

〔1453〕 Calculate 〔TravelTime〕 + 〔ExtraTime〕　»

〔1454〕 Adjust Subtract Date 〔Repeat Item’s Start Date〕 　➔ Supposed Alarm Time　» 1455 1458 1461 1464 1471 1487 1489 1490 1508 1513 1516
• Duration: 〔1453 Calculation Result〕 min

〔1455〕 Dictionary 　➔ Alarm Label Dictionary　» 1487 1492 1508
{  "Event": "〔Repeat Item〕",
   "From": "〔Repeat Item’s Start Date〕",
   "To": "〔Repeat Item’s End Date〕",
   "Location": "〔Repeat Item’s Location〕",
   "AlarmTime": "〔1454 Supposed Alarm Time〕"
}

〔1456〕 Date Current Date 　➔ Current Date　» 1457 1458 1489

〔1457〕 Adjust Add Date 〔1456 Current Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"dd MMM yyyy"}〕 　➔ 1 day after　» 1471 1472 1490 1494
• Duration: "1" days

〔1458〕 If 〔1454 Supposed Alarm Time〕 is 〔1456 Current Date〕

〔1459〕 Comment
supposed alarm time is exactly 12:00am

〔1460〕 If 〔Repeat Item’s Location〕 has any value

〔1461〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 at 〔Repeat Item’s Location〕 which  was supposed to get ready at 〔1454 Supposed Alarm Time〕. Please check.

〔1462〕 Set Variable Text to 〔1461 Text〕

〔1463〕 Otherwise

〔1464〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 which  was supposed to get ready at 〔1454 Supposed Alarm Time〕. Please check.

〔1465〕 Set Variable Text to 〔1464 Text〕

〔1466〕 End If

〔1467〕 Show Alert 〔Text〕

〔1468〕 Show Notification 〔Text〕

〔1469〕 Speak Text
• Text: 〔Text〕

〔1470〕 Otherwise　▵1458

〔1471〕 If 〔1454 Supposed Alarm Time〕 is 〔1457 1 day after〕

〔1472〕 Find Alarm 〔1457 1 day after〕　» 1473 1474

〔1473〕 If 〔1472 Alarms〕 has any value

〔1474〕 Repeat[2] with Each in 〔1472 Alarms〕

〔1475〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ AlarmLabelDictionary　» 1476 1477 1479

〔1476〕 Get Dictionary Value for Event in 〔1475 AlarmLabelDictionary〕 　➔ Event　» 1481

〔1477〕 Get Dictionary Value for From in 〔1475 AlarmLabelDictionary〕 　➔ From　»

〔1478〕 Get Dates from 〔1477 From〕 　➔ FromDate　» 1481

〔1479〕 Get Dictionary Value for To in 〔1475 AlarmLabelDictionary〕 　➔ To　»

〔1480〕 Get Dates from 〔1479 To〕 　➔ ToDate　»

〔1481〕 If All are true　〔1476 Event’s Name〕 is 〔Repeat Item〕　〔1478 FromDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔Repeat Item’s Start Date{"Date Style":"Custom","WFDateFormat":"HH:mm","WFISO8601IncludeTime":false}〕　〔1480 ToDate{"Date Style":"Custom","WFDateFormat":"HH:mm","WFISO8601IncludeTime":false}〕 is • ConditionalActionString
〔Repeat Item’s End Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕• Date
〔Repeat Item’s End Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕

〔1482〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔1483〕 End If

〔1484〕 End Repeat[2] with Each　▵1474

〔1485〕 End If　▵1473

〔1486〕 Comment
since this will be triggered at 12:00 am each day, when the supposed alarm time is 12:00 am in the next day, you can set alarm now

〔1487〕 Add Alarm for 〔1454 Supposed Alarm Time〕 called 〔1455 Alarm Label Dictionary〕

〔1488〕 Otherwise　▵1471

〔1489〕 If 〔1454 Supposed Alarm Time〕 > 〔1456 Current Date〕

〔1490〕 If 〔1454 Supposed Alarm Time〕 > 〔1457 1 day after〕

〔1491〕 Comment
when the time is other than 12:00 am of then next day, you cannot set alarm yet. If set, it will be today. For example, triggering time 2025-4-8 12:00 am, the supposed alarm time is 2025-4-9 08:00 am, if you set an alarm at 08:00 at 2025-4-8 12:00 am, it will alarm at 2025-4-8 08:00 am instead. So we need to record the supposed alarm time and trigger next day.

〔1492〕 Set Variable Event to 〔1455 Alarm Label Dictionary〕

〔1493〕 Otherwise

〔1494〕 Find Alarm 〔1457 1 day after〕　» 1495 1496
• ContentItemFilter: {  "Value": {
      "WFActionParameterFilterPrefix": 1,
      "WFContentPredicateBoundedDate": false,
      "WFActionParameterFilterTemplates": []
   },
   "WFSerializationType": "WFContentPredicateTableTemplate"
}

〔1495〕 If 〔1494 Alarms〕 has any value

〔1496〕 Repeat[2] with Each in 〔1494 Alarms〕

〔1497〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ AlarmLabelDictionary　» 1498 1499 1501

〔1498〕 Get Dictionary Value for Event in 〔1497 AlarmLabelDictionary〕 　➔ Event　» 1503

〔1499〕 Get Dictionary Value for From in 〔1497 AlarmLabelDictionary〕 　➔ From　»

〔1500〕 Get Dates from 〔1499 From〕 　➔ FromDate　» 1503

〔1501〕 Get Dictionary Value for To in 〔1497 AlarmLabelDictionary〕 　➔ To　»

〔1502〕 Get Dates from 〔1501 To〕 　➔ ToDate　»

〔1503〕 If All are true　〔1498 Event’s Name〕 is 〔Repeat Item〕　〔1500 FromDate{"Date Style":"Custom","WFDateFormat":"HH:mm","WFISO8601IncludeTime":false}〕 is 〔Repeat Item’s Start Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕　〔1502 ToDate{"Date Style":"Custom","WFDateFormat":"HH:mm","WFISO8601IncludeTime":false}〕 is 〔Repeat Item’s End Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕

〔1504〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔1505〕 End If

〔1506〕 End Repeat[2] with Each　▵1496

〔1507〕 End If　▵1495

〔1508〕 Add Alarm for 〔1454 Supposed Alarm Time〕 called 〔1455 Alarm Label Dictionary〕

〔1509〕 End If　▵1493

〔1510〕 Otherwise　▵1489

〔1511〕 Comment
the supposed alarm time passed

〔1512〕 If 〔Repeat Item’s Location〕 has any value

〔1513〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 at 〔Repeat Item’s Location〕 which  was supposed to get ready at 〔1454 Supposed Alarm Time〕. Please check.

〔1514〕 Set Variable Text to 〔1513 Text〕

〔1515〕 Otherwise

〔1516〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 which  was supposed to get ready at 〔1454 Supposed Alarm Time〕. Please check.

〔1517〕 Set Variable Text to 〔1516 Text〕

〔1518〕 End If

〔1519〕 Show Alert 〔Text〕

〔1520〕 Show Notification 〔Text〕

〔1521〕 Speak Text
• Text: 〔Text〕

〔1522〕 End If　▵1510

〔1523〕 End If　▵1488

〔1524〕 End If　▵1470

〔1525〕 If 〔Event〕 has any value

〔1526〕 Get Dictionary from 〔Event〕　» 1539

〔1527〕 Text　»

〔1528〕 Set Variable TextList to 〔1527 Text〕

〔1529〕 Add 〔Event〕 to Variable TextList

〔1530〕 Get File at Path Smart Calendar Reminder/Future Alarms.txt from Folder　» 1531 1532
• FileErrorIfNotFound: false

〔1531〕 If 〔1530 File’s File Size〕 has any value

〔1532〕 Split Text 〔1530 File〕 by New Lines　»

〔1533〕 Repeat[2] with Each in 〔1532 Split Text〕

〔1534〕 Get Dictionary from 〔Repeat Item 2〕　» 1535 1536 1537 1538

〔1535〕 Get Dictionary Value for Event in 〔1534 Dictionary〕 　➔ Event　» 1539

〔1536〕 Get Dictionary Value for From in 〔1534 Dictionary〕 　➔ From　» 1539

〔1537〕 Get Dictionary Value for To in 〔1534 Dictionary〕 　➔ To　» 1539

〔1538〕 Get Dictionary Value for Location in 〔1534 Dictionary〕 　➔ Location　»

〔1539〕 If Any are true　〔1535 Event’s Name〕 is not 〔1526 Dictionary.Event〕　〔1536 From’s Name〕 is not 〔1526 Dictionary.From〕　〔1537 To’s Name〕 is not 〔1526 Dictionary.To〕　〔1538 Location’s Name〕 is not 〔1526 Dictionary.Location〕

〔1540〕 Add 〔Repeat Item 2〕 to Variable TextList

〔1541〕 End If

〔1542〕 End Repeat[2] with Each　▵1533

〔1543〕 Combine Text 〔TextList〕 with New Lines　»

〔1544〕 Save File 〔1543 Combined Text〕
• AskWhereToSave: false
• SaveFileOverwrite: true
• FileDestinationPath: Smart Calendar Reminder/Future Alarms.txt

〔1545〕 Otherwise　▵1531

〔1546〕 Text　»

〔Event〕

〔1547〕 Save File 〔1546 Text〕
• AskWhereToSave: false
• FileDestinationPath: Smart Calendar Reminder/Future Alarms.txt

〔1548〕 End If

〔1549〕 End If　▵1525

〔1550〕 End Repeat with Each　▵1220

〔1551〕 End If　▵1219

〔1552〕 Get File at Path Smart Calendar Reminder/Future Alarms.txt from Folder　» 1553 1554
• FileErrorIfNotFound: false

〔1553〕 If 〔1552 File’s File Size〕 has any value

〔1554〕 Split Text 〔1552 File〕 by New Lines　»

〔1555〕 Repeat with Each in 〔1554 Split Text〕

〔1556〕 Get Dictionary from 〔Repeat Item〕　» 1557 1558 1568 1579

〔1557〕 If 〔1556 Dictionary〕 has any value

〔1558〕 Get Dates from 〔1556 Dictionary.AlarmTime〕　» 1559 1560 1579

〔1559〕 If 〔1558 Dates〕 is today

〔1560〕 Find Alarm 〔1558 Dates〕　» 1561 1562
• ContentItemFilter: {  "Value": {
      "WFActionParameterFilterPrefix": 1,
      "WFContentPredicateBoundedDate": false,
      "WFActionParameterFilterTemplates": []
   },
   "WFSerializationType": "WFContentPredicateTableTemplate"
}

〔1561〕 If 〔1560 Alarms〕 has any value

〔1562〕 Repeat[2] with Each in 〔1560 Alarms〕

〔1563〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ Alarm_Label_Dictionary　» 1564 1566 1574

〔1564〕 Get Dictionary Value for From in 〔1563 Alarm_Label_Dictionary〕　»

〔1565〕 Get Dates from 〔1564 Dictionary Value〕 　➔ From_Date　» 1574

〔1566〕 Get Dictionary Value for To in 〔1563 Alarm_Label_Dictionary〕　»

〔1567〕 Get Dates from 〔1566 Dictionary Value〕 　➔ To_Date　» 1574

〔1568〕 Get Dictionary from 〔1556 Dictionary.Event〕 　➔ FutureAlarmLabelDictionary　» 1569 1570 1572

〔1569〕 Get Dictionary Value for Event in 〔1568 FutureAlarmLabelDictionary〕 　➔ Event　» 1574

〔1570〕 Get Dictionary Value for From in 〔1568 FutureAlarmLabelDictionary〕 　➔ From　»

〔1571〕 Get Dates from 〔1570 From〕 　➔ FromDate　» 1574

〔1572〕 Get Dictionary Value for To in 〔1568 FutureAlarmLabelDictionary〕 　➔ To　»

〔1573〕 Get Dates from 〔1572 To〕 　➔ ToDate　»

〔1574〕 If All are true　〔1569 Event’s Name〕 is 〔1563 Alarm_Label_Dictionary.Event〕　〔1571 FromDate{"Date Style":"Custom","WFDateFormat":"HH:mm","WFISO8601IncludeTime":false}〕 is 〔1565 From_Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕　〔1573 ToDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔1567 To_Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕

〔1575〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔1576〕 End If

〔1577〕 End Repeat[2] with Each　▵1562

〔1578〕 End If　▵1561

〔1579〕 Add Alarm for 〔1558 Dates〕 called 〔1556 Dictionary.Event〕

〔1580〕 End If　▵1559

〔1581〕 End If　▵1557

〔1582〕 End Repeat with Each　▵1555

〔1583〕 End If　▵1553

〔1584〕 End If　▵1207

〔1585〕 If 〔Shortcut Input as Number〕 is 7

〔1586〕 Comment
1-Hour Event Processor
*Real-time event handler for immediate notifications:

Processes events within next 60 minutes

Provides most accurate travel estimates

Recommended for hourly automation*

〔1587〕 Get File at Path Smart Calendar Reminder/aboutme.txt from Folder　»
• FileErrorIfNotFound: false

〔1588〕 Get Dictionary from 〔1587 File〕　» 1589 1592 1593

〔1589〕 Get Dictionary from 〔1588 Dictionary.HomeAddress〕　»

〔1590〕 Text　»
〔1589 Dictionary.street〕 〔1589 Dictionary.city〕 〔1589 Dictionary.state〕 〔1589 Dictionary.postcode〕 〔1589 Dictionary.country〕

〔1591〕 Set Variable Home_Address to 〔1590 Text〕

〔1592〕 Set Variable Travel_Method to 〔1588 Dictionary.TravelMethod〕

〔1593〕 Get Dictionary Value for ExtraTime in 〔1588 Dictionary〕　»

〔1594〕 Get Numbers from 〔1593 Dictionary Value〕　»

〔1595〕 Set Variable Extra_Time to 〔1594 Numbers〕

〔1596〕 Find Calendar Events All Calendar Events where　» 1597 1598 1599 1866
• ContentItemSortProperty: Start Date
• ContentItemSortOrder: Oldest First
• ContentItemFilter: • All the following are true
Start Date is in the next 30 minutes
Is Not All Day
Canceled is {"Bool":false}

〔1597〕 If 〔1596 Calendar Events〕 has any value

〔1598〕 Count Items in 〔1596 Calendar Events〕　» 1870 1878

〔1599〕 Repeat with Each in 〔1596 Calendar Events〕

〔1600〕 If 〔Repeat Item’s Location〕 has any value

〔1601〕 Get Current Location　» 1612 1618 1704
• Accuracy: Best

〔1602〕 If All are true　〔Repeat Item’s Notes〕 has any value　〔Repeat Item’s Notes〕 begins with {　〔Repeat Item’s Notes〕 ends with }

〔1603〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY

〔1604〕 Get Dictionary from 〔Repeat Item’s Notes〕 　➔ NotesAddressDictionary　» 1605 1606 1607 1608 1609

〔1605〕 Set Variable CalendarNotesStreet to 〔1604 NotesAddressDictionary.Street〕

〔1606〕 Set Variable CalendarNotesCity to 〔1604 NotesAddressDictionary.City〕

〔1607〕 Set Variable CalendarNotesState to 〔1604 NotesAddressDictionary.State〕

〔1608〕 Set Variable CalendarNotesRegion to 〔1604 NotesAddressDictionary.Country〕

〔1609〕 Set Variable CalendarNotesZIPCode to 〔1604 NotesAddressDictionary.Postcode〕

〔1610〕 Text　»
〔CalendarNotesStreet〕 〔CalendarNotesCity〕 〔CalendarNotesState〕 〔CalendarNotesZIPCode〕 〔CalendarNotesRegion〕

〔1611〕 Set Variable NotesAddressString to 〔1610 Text〕

〔1612〕 If All are true　〔1601 Current Location’s Street〕 is 〔CalendarNotesStreet〕　〔1601 Current Location’s City〕 is 〔CalendarNotesCity〕　〔1601 Current Location’s State〕 is 〔CalendarNotesState〕　〔1601 Current Location’s Country〕 is 〔CalendarNotesRegion〕　〔1601 Current Location’s ZIP Code〕 is 〔CalendarNotesZIPCode〕

〔1613〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY -> CALENDAR EVENT ADDRESS IS THE SAME WITH CURRENT LOCATION

〔1614〕 Number 0　»

〔1615〕 Set Variable CurrentToDeparture to 〔1614 Number〕

〔1616〕 Otherwise

〔1617〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY -> CALENDAR EVENT ADDRESS IS NOT THE SAME WITH CURRENT LOCATION

〔1618〕 Get 〔TravelMethod〕 Time　»
• GetDirectionsCustomLocation: 〔1601 Current Location〕
• Destination: 〔NotesAddressString〕

〔1619〕 Set Variable TravelTimeString to 〔1618 Travel Time〕

〔1620〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1621〕 Set Variable MatchString to 〔1620 Matches〕

〔1622〕 Count Items in 〔MatchString〕　»

〔1623〕 If 〔1622 Count〕 is 1

〔1624〕 Get First Item from List 〔MatchString〕　»

〔1625〕 Set Variable TravelDays to 〔1624 Item from List〕

〔1626〕 Otherwise

〔1627〕 Number 0　»

〔1628〕 Set Variable TravelDays to 〔1627 Number〕

〔1629〕 End If

〔1630〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1631〕 Set Variable MatchString to 〔1630 Matches〕

〔1632〕 Count Items in 〔MatchString〕　»

〔1633〕 If 〔1632 Count〕 is 1

〔1634〕 Get First Item from List 〔MatchString〕　»

〔1635〕 Set Variable TravelHours to 〔1634 Item from List〕

〔1636〕 Otherwise

〔1637〕 Number 0　»

〔1638〕 Set Variable TravelHours to 〔1637 Number〕

〔1639〕 End If

〔1640〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1641〕 Set Variable MatchString to 〔1640 Matches〕

〔1642〕 Count Items in 〔MatchString〕　»

〔1643〕 If 〔1642 Count〕 is 1

〔1644〕 Get First Item from List 〔MatchString〕　»

〔1645〕 Set Variable TravelMinutes to 〔1644 Item from List〕

〔1646〕 Otherwise

〔1647〕 Number 0　»

〔1648〕 Set Variable TravelMinutes to 〔1647 Number〕

〔1649〕 End If

〔1650〕 Calculate 〔TravelDays〕 × 1440　» 1652

〔1651〕 Calculate 〔TravelHours〕 × 60　»

〔1652〕 Calculate 〔1651 Calculation Result〕 + 〔1650 Calculation Result〕　»

〔1653〕 Calculate 〔1652 Calculation Result〕 + 〔TravelMinutes〕　»

〔1654〕 Set Variable CurrentToDeparture to 〔1653 Calculation Result〕

〔1655〕 End If　▵1616

〔1656〕 Get 〔TravelMethod〕 Time 　➔ DepartureToDestination　»
• GetDirectionsCustomLocation: 〔NotesAddressString〕
• Destination: 〔Repeat Item’s Location〕

〔1657〕 Set Variable TravelTimeString to 〔1656 DepartureToDestination〕

〔1658〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1659〕 Set Variable MatchString to 〔1658 Matches〕

〔1660〕 Count Items in 〔MatchString〕　»

〔1661〕 If 〔1660 Count〕 is 1

〔1662〕 Get First Item from List 〔MatchString〕　»

〔1663〕 Set Variable TravelDays to 〔1662 Item from List〕

〔1664〕 Otherwise

〔1665〕 Number 0　»

〔1666〕 Set Variable TravelDays to 〔1665 Number〕

〔1667〕 End If

〔1668〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1669〕 Set Variable MatchString to 〔1668 Matches〕

〔1670〕 Count Items in 〔MatchString〕　»

〔1671〕 If 〔1670 Count〕 is 1

〔1672〕 Get First Item from List 〔MatchString〕　»

〔1673〕 Set Variable TravelHours to 〔1672 Item from List〕

〔1674〕 Otherwise

〔1675〕 Number 0　»

〔1676〕 Set Variable TravelHours to 〔1675 Number〕

〔1677〕 End If

〔1678〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1679〕 Set Variable MatchString to 〔1678 Matches〕

〔1680〕 Count Items in 〔MatchString〕　»

〔1681〕 If 〔1680 Count〕 is 1

〔1682〕 Get First Item from List 〔MatchString〕　»

〔1683〕 Set Variable TravelMinutes to 〔1682 Item from List〕

〔1684〕 Otherwise

〔1685〕 Number 0　»

〔1686〕 Set Variable TravelMinutes to 〔1685 Number〕

〔1687〕 End If

〔1688〕 Calculate 〔TravelDays〕 × 1440　» 1690

〔1689〕 Calculate 〔TravelHours〕 × 60　»

〔1690〕 Calculate 〔1689 Calculation Result〕 + 〔1688 Calculation Result〕　»

〔1691〕 Calculate 〔1690 Calculation Result〕 + 〔TravelMinutes〕　»

〔1692〕 Calculate 〔1691 Calculation Result〕 + 〔CurrentToDeparture〕　»

〔1693〕 Set Variable TravelTime to 〔1692 Calculation Result〕

〔1694〕 Otherwise　▵1602

〔1695〕 Comment
CALENDER EVENT NOTES IS BLANK

〔1696〕 Get Dictionary from 〔HomeAddress〕 　➔ home_address_dictionary　» 1697 1698 1699 1700 1701

〔1697〕 Get Dictionary Value for street in 〔1696 home_address_dictionary〕 　➔ HomeStreet　» 1702 1704

〔1698〕 Get Dictionary Value for city in 〔1696 home_address_dictionary〕 　➔ HomeCity　» 1702 1704

〔1699〕 Get Dictionary Value for state in 〔1696 home_address_dictionary〕 　➔ HomeState　» 1702 1704

〔1700〕 Get Dictionary Value for country in 〔1696 home_address_dictionary〕 　➔ HomeCountry　» 1702 1704

〔1701〕 Get Dictionary Value for postcode in 〔1696 home_address_dictionary〕 　➔ HomePostcode　» 1702 1704

〔1702〕 If All are true　〔1697 HomeStreet〕 has any value　〔1698 HomeCity〕 has any value　〔1699 HomeState〕 has any value　〔1700 HomeCountry〕 has any value　〔1701 HomePostcode〕 has any value

〔1703〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED

〔1704〕 If All are true　〔1601 Current Location’s Street〕 is 〔1697 HomeStreet〕　〔1601 Current Location’s City〕 is 〔1698 HomeCity〕　〔1601 Current Location’s State〕 is 〔1699 HomeState〕　〔1601 Current Location’s Country〕 is 〔1700 HomeCountry〕　〔1601 Current Location’s ZIP Code〕 is 〔1701 HomePostcode〕

〔1705〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED -> HOME ADDRESS IS THE SAME WITH CURRENT LOCATION

〔1706〕 Number 0　»

〔1707〕 Set Variable CurrentToDeparture to 〔1706 Number〕

〔1708〕 Otherwise

〔1709〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED -> HOME ADDRESS IS NOT THE SAME WITH CURRENT LOCATION

〔1710〕 Get 〔TravelMethod〕 Time　»
• Destination: 〔HomeAddress〕

〔1711〕 Set Variable TravelTimeString to 〔1710 Travel Time〕

〔1712〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1713〕 Set Variable MatchString to 〔1712 Matches〕

〔1714〕 Count Items in 〔MatchString〕　»

〔1715〕 If 〔1714 Count〕 is 1

〔1716〕 Get First Item from List 〔MatchString〕　»

〔1717〕 Set Variable TravelDays to 〔1716 Item from List〕

〔1718〕 Otherwise

〔1719〕 Number 0　»

〔1720〕 Set Variable TravelDays to 〔1719 Number〕

〔1721〕 End If

〔1722〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1723〕 Set Variable MatchString to 〔1722 Matches〕

〔1724〕 Count Items in 〔MatchString〕　»

〔1725〕 If 〔1724 Count〕 is 1

〔1726〕 Get First Item from List 〔MatchString〕　»

〔1727〕 Set Variable TravelHours to 〔1726 Item from List〕

〔1728〕 Otherwise

〔1729〕 Number 0　»

〔1730〕 Set Variable TravelHours to 〔1729 Number〕

〔1731〕 End If

〔1732〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1733〕 Set Variable MatchString to 〔1732 Matches〕

〔1734〕 Count Items in 〔MatchString〕　»

〔1735〕 If 〔1734 Count〕 is 1

〔1736〕 Get First Item from List 〔MatchString〕　»

〔1737〕 Set Variable TravelMinutes to 〔1736 Item from List〕

〔1738〕 Otherwise

〔1739〕 Number 0　»

〔1740〕 Set Variable TravelMinutes to 〔1739 Number〕

〔1741〕 End If

〔1742〕 Calculate 〔TravelDays〕 × 1440　» 1744

〔1743〕 Calculate 〔TravelHours〕 × 60　»

〔1744〕 Calculate 〔1743 Calculation Result〕 + 〔1742 Calculation Result〕　»

〔1745〕 Calculate 〔1744 Calculation Result〕 + 〔TravelMinutes〕　»

〔1746〕 Set Variable CurrentToDeparture to 〔1745 Calculation Result〕

〔1747〕 End If　▵1708

〔1748〕 Get 〔TravelMethod〕 Time 　➔ DepartureToDestination　»
• GetDirectionsCustomLocation: 〔HomeAddress〕
• Destination: 〔Repeat Item’s Location〕

〔1749〕 Set Variable TravelTimeString to 〔1748 DepartureToDestination〕

〔1750〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1751〕 Set Variable MatchString to 〔1750 Matches〕

〔1752〕 Count Items in 〔MatchString〕　»

〔1753〕 If 〔1752 Count〕 is 1

〔1754〕 Get First Item from List 〔MatchString〕　»

〔1755〕 Set Variable TravelDays to 〔1754 Item from List〕

〔1756〕 Otherwise

〔1757〕 Number 0　»

〔1758〕 Set Variable TravelDays to 〔1757 Number〕

〔1759〕 End If

〔1760〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1761〕 Set Variable MatchString to 〔1760 Matches〕

〔1762〕 Count Items in 〔MatchString〕　»

〔1763〕 If 〔1762 Count〕 is 1

〔1764〕 Get First Item from List 〔MatchString〕　»

〔1765〕 Set Variable TravelHours to 〔1764 Item from List〕

〔1766〕 Otherwise

〔1767〕 Number 0　»

〔1768〕 Set Variable TravelHours to 〔1767 Number〕

〔1769〕 End If

〔1770〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1771〕 Set Variable MatchString to 〔1770 Matches〕

〔1772〕 Count Items in 〔MatchString〕　»

〔1773〕 If 〔1772 Count〕 is 1

〔1774〕 Get First Item from List 〔MatchString〕　»

〔1775〕 Set Variable TravelMinutes to 〔1774 Item from List〕

〔1776〕 Otherwise

〔1777〕 Number 0　»

〔1778〕 Set Variable TravelMinutes to 〔1777 Number〕

〔1779〕 End If

〔1780〕 Calculate 〔TravelDays〕 × 1440　» 1782

〔1781〕 Calculate 〔TravelHours〕 × 60　»

〔1782〕 Calculate 〔1781 Calculation Result〕 + 〔1780 Calculation Result〕　»

〔1783〕 Calculate 〔1782 Calculation Result〕 + 〔TravelMinutes〕　»

〔1784〕 Calculate 〔1783 Calculation Result〕 + 〔CurrentToDeparture〕　»

〔1785〕 Set Variable TravelTime to 〔1784 Calculation Result〕

〔1786〕 Otherwise　▵1702

〔1787〕 Text
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS NOT MAINTAINED

〔1788〕 Get 〔TravelMethod〕 Time　»
• Destination: 〔Repeat Item’s Location〕

〔1789〕 Set Variable TravelTimeString to 〔1788 Travel Time〕

〔1790〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1791〕 Set Variable MatchString to 〔1790 Matches〕

〔1792〕 Count Items in 〔MatchString〕　»

〔1793〕 If 〔1792 Count〕 is 1

〔1794〕 Get First Item from List 〔MatchString〕　»

〔1795〕 Set Variable TravelDays to 〔1794 Item from List〕

〔1796〕 Otherwise

〔1797〕 Number 0　»

〔1798〕 Set Variable TravelDays to 〔1797 Number〕

〔1799〕 End If

〔1800〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1801〕 Set Variable MatchString to 〔1800 Matches〕

〔1802〕 Count Items in 〔MatchString〕　»

〔1803〕 If 〔1802 Count〕 is 1

〔1804〕 Get First Item from List 〔MatchString〕　»

〔1805〕 Set Variable TravelHours to 〔1804 Item from List〕

〔1806〕 Otherwise

〔1807〕 Number 0　»

〔1808〕 Set Variable TravelHours to 〔1807 Number〕

〔1809〕 End If

〔1810〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1811〕 Set Variable MatchString to 〔1810 Matches〕

〔1812〕 Count Items in 〔MatchString〕　»

〔1813〕 If 〔1812 Count〕 is 1

〔1814〕 Get First Item from List 〔MatchString〕　»

〔1815〕 Set Variable TravelMinutes to 〔1814 Item from List〕

〔1816〕 Otherwise

〔1817〕 Number 0　»

〔1818〕 Set Variable TravelMinutes to 〔1817 Number〕

〔1819〕 End If

〔1820〕 Calculate 〔TravelDays〕 × 1440　» 1822

〔1821〕 Calculate 〔TravelHours〕 × 60　»

〔1822〕 Calculate 〔1821 Calculation Result〕 + 〔1820 Calculation Result〕　»

〔1823〕 Calculate 〔1822 Calculation Result〕 + 〔TravelMinutes〕　»

〔1824〕 Set Variable TravelTime to 〔1823 Calculation Result〕

〔1825〕 End If　▵1786

〔1826〕 End If　▵1694

〔1827〕 Otherwise　▵1600

〔1828〕 Number 0　»

〔1829〕 Set Variable TravelTime to 〔1828 Number〕

〔1830〕 End If

〔1831〕 Find Alarm All Alarm　» 1832 1833
• ContentItemFilter: {  "Value": {
      "WFActionParameterFilterPrefix": 1,
      "WFActionParameterFilterTemplates": [],
      "WFContentPredicateBoundedDate": false
   },
   "WFSerializationType": "WFContentPredicateTableTemplate"
}

〔1832〕 If 〔1831 Alarms〕 has any value

〔1833〕 Repeat[2] with Each in 〔1831 Alarms〕

〔1834〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ AlarmLabelDictionary　» 1835 1836 1838

〔1835〕 Get Dictionary Value for Event in 〔1834 AlarmLabelDictionary〕 　➔ Event　» 1840

〔1836〕 Get Dictionary Value for From in 〔1834 AlarmLabelDictionary〕 　➔ From　»

〔1837〕 Get Dates from 〔1836 From〕 　➔ FromDate　» 1840

〔1838〕 Get Dictionary Value for To in 〔1834 AlarmLabelDictionary〕 　➔ To　»

〔1839〕 Get Dates from 〔1838 To〕 　➔ ToDate　»

〔1840〕 If All are true　〔1835 Event’s Name〕 is 〔Repeat Item〕　〔1837 FromDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔Repeat Item’s Start Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕　〔1839 ToDate{"Date Style":"Custom","WFDateFormat":"HH:mm","WFISO8601IncludeTime":false}〕 is 〔Repeat Item’s End Date{"Date Style":"Custom","WFDateFormat":"HH:mm","WFISO8601IncludeTime":false}〕

〔1841〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔1842〕 End If

〔1843〕 End Repeat[2] with Each　▵1833

〔1844〕 End If　▵1832

〔1845〕 Calculate 〔TravelTime〕 + 〔Extra_Time〕　»

〔1846〕 Adjust Subtract Date 〔Repeat Item’s Start Date〕 　➔ Supposed_Alarm_Time　» 1848 1850 1853 1860 1861
• Duration: 〔1845 Calculation Result〕 min

〔1847〕 Date Current Date　»

〔1848〕 If Any are true　〔1846 Supposed_Alarm_Time〕 < 〔1847 Date〕　〔1846 Supposed_Alarm_Time〕 is 〔1847 Date〕

〔1849〕 If 〔Repeat Item’s Location〕 has any value

〔1850〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 at 〔Repeat Item’s Location〕  which  was supposed to get ready at 〔1846 Supposed_Alarm_Time〕. Please check.

〔1851〕 Set Variable Text to 〔1850 Text〕

〔1852〕 Otherwise

〔1853〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 which  was supposed to get ready at 〔1846 Supposed_Alarm_Time〕. Please check.

〔1854〕 Set Variable Text to 〔1853 Text〕

〔1855〕 End If

〔1856〕 Show Alert 〔Text〕

〔1857〕 Show Notification 〔Text〕

〔1858〕 Speak Text
• Text: 〔Text〕

〔1859〕 Otherwise　▵1848

〔1860〕 Dictionary　»
{  "Event": "〔Repeat Item〕",
   "From": "〔Repeat Item’s Start Date〕",
   "To": "〔Repeat Item’s End Date〕",
   "Location": "〔Repeat Item’s Location〕",
   "AlarmTime": "〔1846 Supposed_Alarm_Time〕"
}

〔1861〕 Add Alarm for 〔1846 Supposed_Alarm_Time〕 called 〔1860 Dictionary〕

〔1862〕 End If

〔1863〕 End Repeat with Each　▵1599

〔1864〕 Number 3　»

〔1865〕 Repeat 〔1864 Number〕 Times

〔1866〕 Repeat[2] with Each in 〔1596 Calendar Events〕

〔1867〕 Format Date 〔Repeat Item 2’s Start Date〕　» 1871 1874 1879 1882
• DateFormatStyle: None

〔1868〕 Format Date 〔Repeat Item 2’s End Date〕　» 1871 1874 1879 1882
• DateFormatStyle: None

〔1869〕 If 〔Repeat Item 2’s Location〕 has any value

〔1870〕 If 〔1598 Count〕 > 1

〔1871〕 Text　»
Event 〔Repeat Index 2〕 〔Repeat Item 2〕 from 〔1867 Formatted Date〕 to 〔1868 Formatted Date〕 at 〔Repeat Item 2’s Location〕

〔1872〕 Set Variable Text to 〔1871 Text〕

〔1873〕 Otherwise

〔1874〕 Text　»
Event  〔Repeat Item 2〕 from 〔1867 Formatted Date〕 to 〔1868 Formatted Date〕 at 〔Repeat Item 2’s Location〕

〔1875〕 Set Variable Text to 〔1874 Text〕

〔1876〕 End If

〔1877〕 Otherwise　▵1869

〔1878〕 If 〔1598 Count〕 > 1

〔1879〕 Text　»
Event 〔Repeat Index 2〕 〔Repeat Item 2〕 from 〔1867 Formatted Date〕 to 〔1868 Formatted Date〕

〔1880〕 Set Variable Text to 〔1879 Text〕

〔1881〕 Otherwise

〔1882〕 Text　»
Event  〔Repeat Item 2〕 from 〔1867 Formatted Date〕 to 〔1868 Formatted Date〕

〔1883〕 Set Variable Text to 〔1882 Text〕

〔1884〕 End If

〔1885〕 End If　▵1877

〔1886〕 Speak Text
• Text: 〔Text〕

〔1887〕 Wait 1 seconds

〔1888〕 End Repeat[2] with Each　▵1866

〔1889〕 End Repeat Times　▵1865

〔1890〕 End If　▵1597

〔1891〕 End If　▵1585

〔1892〕 End If　▵91