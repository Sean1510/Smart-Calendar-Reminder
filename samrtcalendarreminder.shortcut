Smart Calendar Reminder V1 (1593 actions, 513 KB)
"WFQuickActionSurfaces": [],
"WFWorkflowClientVersion": "3303.0.5",
"WFWorkflowHasOutputFallback": false,
"WFWorkflowHasShortcutInputVariables": true,
"WFWorkflowIcon": {
   "WFWorkflowIconStartColor": 431817727,
   "WFWorkflowIconGlyphNumber": 61701
},
"WFWorkflowImportQuestions": [],
"WFWorkflowInputContentItemClasses": [],
"WFWorkflowMinimumClientVersion": 3010,
"WFWorkflowMinimumClientVersionString": "3010",
"WFWorkflowOutputContentItemClasses": [],
"WFWorkflowTypes": []


〔0〕 If 〔Shortcut Input〕 does not have any value

〔1〕 Comment
Initial setup and version update check when no input is provided

〔2〕 Comment
Inspired by [Schedule Shortcut or Alarm] but designed to work smarter for my needs! Instead of manually inputting each trigger or alarm, this shortcut leverages my Calendar as the ultimate data source. It automatically scans for upcoming events, then:

• Speaks out the event details
• Sets a tailored alarm—accounting for travel and prep time—right when you need it

No more early, forgettable reminders. It keeps your schedule perfectly in sync. Give it a try and let your Calendar do the heavy lifting!

〔3〕 Dictionary 　➔ Version Dictionary 　» 4 5 7 9 10 11 12 20 21 25 31 46 72
{  "Name": "Smart Calendar Reminder",
   "Version": "2.6",
   "RH ID": "21959",
   "Icons": {
      "Update": "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",
      "Skip": "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",
      "Not Now": "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"
   }
}

〔4〕 Get Contents of URL https://routinehub.co/api/v1/shortcuts/〔3 Version Dictionary .RH ID〕/versions/latest 　➔ RH Server　» 6 8 11 16 20

〔5〕 Get File at Path 〔3 Version Dictionary .Name〕/Skip.txt from Folder　»
• File: {  "fileLocation": {
      "crossDeviceItemID": "docs.icloud.com:com.apple.CloudDocs/documents/95d6214c39557e3de40d802073a860c04f3aed5b",
      "fileProviderDomainID": "com.apple.CloudDocs.iCloudDriveFileProvider/38059A1C-DC76-4B89-B62F-250A61DBFC73",
      "appContainerBundleIdentifier": "com.apple.shortcuts",
      "relativeSubpath": "",
      "WFFileLocationType": "Shortcuts"
   },
   "filename": "Documents",
   "displayName": "Shortcuts"
}
• FileErrorIfNotFound: false
• ShowFilePicker: false
• GetFolderContents: true

〔6〕 If 〔5 File as Text〕 is not 〔4 RH Server as Dictionary.Version〕

〔7〕 Get Dictionary Value for Version in 〔3 Version Dictionary 〕　»

〔8〕 If 〔7 Dictionary Value as Text〕 is not 〔4 RH Server as Dictionary.Version〕

〔9〕 Base64 Decode 〔3 Version Dictionary .Icons.Update〕

〔10〕 Show Alert A new version of 〔3 Version Dictionary .Name〕 is available to download!

〔11〕 Text　» 14
⬆️ Update ⬆️

A new version of 〔3 Version Dictionary .Name〕 is available to download!

〔3 Version Dictionary .Version〕 ↗ 〔4 RH Server as Dictionary.Version〕   —   〔4 RH Server as Dictionary.Release〕

〔4 RH Server as Dictionary.Notes〕

〔12〕 Text　»
BEGIN:VCARD
VERSION:3.0
N;CHARSET=utf-8:Update;;;;
PHOTO;ENCODING=b:〔3 Version Dictionary .Icons.Update〕
END:VCARD

BEGIN:VCARD
VERSION:3.0
N;CHARSET=utf-8:Skip;;;;
PHOTO;ENCODING=b:〔3 Version Dictionary .Icons.Skip〕
END:VCARD

BEGIN:VCARD
VERSION:3.0
N;CHARSET=utf-8:Not Now;;;;
PHOTO;ENCODING=b:〔3 Version Dictionary .Icons.Not Now〕
END:VCARD

〔13〕 Set Name of 〔12 Text〕 to updateprompt.vcf　»

〔14〕 Choose from List 〔13 Renamed Item as Contact〕　» 15 19
• ChooseFromListActionPrompt: 〔11 Text〕

〔15〕 If 〔14 Chosen Item as Text〕 is Update

〔16〕 Open URL 〔4 RH Server as Dictionary.URL〕
• Show-WFInput: true

〔17〕 Stop This Shortcut

〔18〕 End If

〔19〕 If 〔14 Chosen Item as Text〕 is Skip

〔20〕 Save File 〔4 RH Server as Dictionary.Version〕
• AskWhereToSave: false
• SaveFileOverwrite: true
• FileDestinationPath: 〔3 Version Dictionary .Name〕/Skip.txt

〔21〕 Show Alert This version of 〔3 Version Dictionary .Name〕 has been skipped!
• AlertActionTitle: ✅ Done ✅
• AlertActionCancelButtonShown: false

〔22〕 End If

〔23〕 End If　▵8

〔24〕 End If　▵6

〔25〕 Get File at Path 〔3 Version Dictionary .Name〕/Welcome.pdf from Folder　»
• FileErrorIfNotFound: false

〔26〕 If 〔25 File’s File Size〕 does not have any value

〔27〕 Text　»
<html><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Smart Calendar Reminder: Your Intelligent Schedule Assistant</title><style>
    /* cspell:disable-file */
    /* webkit printing magic: print all background colors */
    html {
        -webkit-print-color-adjust: exact;
    }
    * {
        box-sizing: border-box;
        -webkit-print-color-adjust: exact;
    }
\u{space}\u{space}\u{space}\u{space}
    html,
    body {
        margin: 0;
        padding: 0;
    }
    @media only screen {
        body {
            margin: 2em auto;
            max-width: 900px;
            color: rgb(55, 53, 47);
        }
    }
\u{space}\u{space}\u{space}\u{space}
    body {
        line-height: 1.5;
        white-space: pre-wrap;
    }
\u{space}\u{space}\u{space}\u{space}
    a,
    a.visited {
        color: inherit;
        text-decoration: underline;
    }
\u{space}\u{space}\u{space}\u{space}
    .pdf-relative-link-path {
        font-size: 80%;
        color: #444;
    }
\u{space}\u{space}\u{space}\u{space}
    h1,
    h2,
    h3 {
        letter-spacing: -0.01em;
        line-height: 1.2;
        font-weight: 600;
        margin-bottom: 0;
    }
\u{space}\u{space}\u{space}\u{space}
    .page-title {
        font-size: 2.5rem;
        font-weight: 700;
        margin-top: 0;
        margin-bottom: 0.75em;
    }
\u{space}\u{space}\u{space}\u{space}
    h1 {
        font-size: 1.875rem;
        margin-top: 1.875rem;
    }
\u{space}\u{space}\u{space}\u{space}
    h2 {
        font-size: 1.5rem;
        margin-top: 1.5rem;
    }
\u{space}\u{space}\u{space}\u{space}
    h3 {
        font-size: 1.25rem;
        margin-top: 1.25rem;
    }
\u{space}\u{space}\u{space}\u{space}
    .source {
        border: 1px solid #ddd;
        border-radius: 3px;
        padding: 1.5em;
        word-break: break-all;
    }
\u{space}\u{space}\u{space}\u{space}
    .callout {
        border-radius: 3px;
        padding: 1rem;
    }
\u{space}\u{space}\u{space}\u{space}
    figure {
        margin: 1.25em 0;
        page-break-inside: avoid;
    }
\u{space}\u{space}\u{space}\u{space}
    figcaption {
        opacity: 0.5;
        font-size: 85%;
        margin-top: 0.5em;
    }
\u{space}\u{space}\u{space}\u{space}
    mark {
        background-color: transparent;
    }
\u{space}\u{space}\u{space}\u{space}
    .indented {
        padding-left: 1.5em;
    }
\u{space}\u{space}\u{space}\u{space}
    hr {
        background: transparent;
        display: block;
        width: 100%;
        height: 1px;
        visibility: visible;
        border: none;
        border-bottom: 1px solid rgba(55, 53, 47, 0.09);
    }
\u{space}\u{space}\u{space}\u{space}
    img {
        max-width: 100%;
    }
\u{space}\u{space}\u{space}\u{space}
    @media only print {
        img {
            max-height: 100vh;
            object-fit: contain;
        }
    }
\u{space}\u{space}\u{space}\u{space}
    @page {
        margin: 1in;
    }
\u{space}\u{space}\u{space}\u{space}
    .collection-content {
        font-size: 0.875rem;
    }
\u{space}\u{space}\u{space}\u{space}
    .column-list {
        display: flex;
        justify-content: space-between;
    }
\u{space}\u{space}\u{space}\u{space}
    .column {
        padding: 0 1em;
    }
\u{space}\u{space}\u{space}\u{space}
    .column:first-child {
        padding-left: 0;
    }
\u{space}\u{space}\u{space}\u{space}
    .column:last-child {
        padding-right: 0;
    }
\u{space}\u{space}\u{space}\u{space}
    .table_of_contents-item {
        display: block;
        font-size: 0.875rem;
        line-height: 1.3;
        padding: 0.125rem;
    }
\u{space}\u{space}\u{space}\u{space}
    .table_of_contents-indent-1 {
        margin-left: 1.5rem;
    }
\u{space}\u{space}\u{space}\u{space}
    .table_of_contents-indent-2 {
        margin-left: 3rem;
    }
\u{space}\u{space}\u{space}\u{space}
    .table_of_contents-indent-3 {
        margin-left: 4.5rem;
    }
\u{space}\u{space}\u{space}\u{space}
    .table_of_contents-link {
        text-decoration: none;
        opacity: 0.7;
        border-bottom: 1px solid rgba(55, 53, 47, 0.18);
    }
\u{space}\u{space}\u{space}\u{space}
    table,
    th,
    td {
        border: 1px solid rgba(55, 53, 47, 0.09);
        border-collapse: collapse;
    }
\u{space}\u{space}\u{space}\u{space}
    table {
        border-left: none;
        border-right: none;
    }
\u{space}\u{space}\u{space}\u{space}
    th,
    td {
        font-weight: normal;
        padding: 0.25em 0.5em;
        line-height: 1.5;
        min-height: 1.5em;
        text-align: left;
    }
\u{space}\u{space}\u{space}\u{space}
    th {
        color: rgba(55, 53, 47, 0.6);
    }
\u{space}\u{space}\u{space}\u{space}
    ol,
    ul {
        margin: 0;
        margin-block-start: 0.6em;
        margin-block-end: 0.6em;
    }
\u{space}\u{space}\u{space}\u{space}
    li > ol:first-child,
    li > ul:first-child {
        margin-block-start: 0.6em;
    }
\u{space}\u{space}\u{space}\u{space}
    ul > li {
        list-style: disc;
    }
\u{space}\u{space}\u{space}\u{space}
    ul.to-do-list {
        padding-inline-start: 0;
    }
\u{space}\u{space}\u{space}\u{space}
    ul.to-do-list > li {
        list-style: none;
    }
\u{space}\u{space}\u{space}\u{space}
    .to-do-children-checked {
        text-decoration: line-through;
        opacity: 0.375;
    }
\u{space}\u{space}\u{space}\u{space}
    ul.toggle > li {
        list-style: none;
    }
\u{space}\u{space}\u{space}\u{space}
    ul {
        padding-inline-start: 1.7em;
    }
\u{space}\u{space}\u{space}\u{space}
    ul > li {
        padding-left: 0.1em;
    }
\u{space}\u{space}\u{space}\u{space}
    ol {
        padding-inline-start: 1.6em;
    }
\u{space}\u{space}\u{space}\u{space}
    ol > li {
        padding-left: 0.2em;
    }
\u{space}\u{space}\u{space}\u{space}
    .mono ol {
        padding-inline-start: 2em;
    }
\u{space}\u{space}\u{space}\u{space}
    .mono ol > li {
        text-indent: -0.4em;
    }
\u{space}\u{space}\u{space}\u{space}
    .toggle {
        padding-inline-start: 0em;
        list-style-type: none;
    }
\u{space}\u{space}\u{space}\u{space}
    /* Indent toggle children */
    .toggle > li > details {
        padding-left: 1.7em;
    }
\u{space}\u{space}\u{space}\u{space}
    .toggle > li > details > summary {
        margin-left: -1.1em;
    }
\u{space}\u{space}\u{space}\u{space}
    .selected-value {
        display: inline-block;
        padding: 0 0.5em;
        background: rgba(206, 205, 202, 0.5);
        border-radius: 3px;
        margin-right: 0.5em;
        margin-top: 0.3em;
        margin-bottom: 0.3em;
        white-space: nowrap;
    }
\u{space}\u{space}\u{space}\u{space}
    .collection-title {
        display: inline-block;
        margin-right: 1em;
    }
\u{space}\u{space}\u{space}\u{space}
    .page-description {
        margin-bottom: 2em;
    }
\u{space}\u{space}\u{space}\u{space}
    .simple-table {
        margin-top: 1em;
        font-size: 0.875rem;
        empty-cells: show;
    }
    .simple-table td {
        height: 29px;
        min-width: 120px;
    }
\u{space}\u{space}\u{space}\u{space}
    .simple-table th {
        height: 29px;
        min-width: 120px;
    }
\u{space}\u{space}\u{space}\u{space}
    .simple-table-header-color {
        background: rgb(247, 246, 243);
        color: black;
    }
    .simple-table-header {
        font-weight: 500;
    }
\u{space}\u{space}\u{space}\u{space}
    time {
        opacity: 0.5;
    }
\u{space}\u{space}\u{space}\u{space}
    .icon {
        display: inline-block;
        max-width: 1.2em;
        max-height: 1.2em;
        text-decoration: none;
        vertical-align: text-bottom;
        margin-right: 0.5em;
    }
\u{space}\u{space}\u{space}\u{space}
    img.icon {
        border-radius: 3px;
    }
\u{space}\u{space}\u{space}\u{space}
    .user-icon {
        width: 1.5em;
        height: 1.5em;
        border-radius: 100%;
        margin-right: 0.5rem;
    }
\u{space}\u{space}\u{space}\u{space}
    .user-icon-inner {
        font-size: 0.8em;
    }
\u{space}\u{space}\u{space}\u{space}
    .text-icon {
        border: 1px solid #000;
        text-align: center;
    }
\u{space}\u{space}\u{space}\u{space}
    .page-cover-image {
        display: block;
        object-fit: cover;
        width: 100%;
        max-height: 30vh;
    }
\u{space}\u{space}\u{space}\u{space}
    .page-header-icon {
        font-size: 3rem;
        margin-bottom: 1rem;
    }
\u{space}\u{space}\u{space}\u{space}
    .page-header-icon-with-cover {
        margin-top: -0.72em;
        margin-left: 0.07em;
    }
\u{space}\u{space}\u{space}\u{space}
    .page-header-icon img {
        border-radius: 3px;
    }
\u{space}\u{space}\u{space}\u{space}
    .link-to-page {
        margin: 1em 0;
        padding: 0;
        border: none;
        font-weight: 500;
    }
\u{space}\u{space}\u{space}\u{space}
    p > .user {
        opacity: 0.5;
    }
\u{space}\u{space}\u{space}\u{space}
    td > .user,
    td > time {
        white-space: nowrap;
    }
\u{space}\u{space}\u{space}\u{space}
    input[type="checkbox"] {
        transform: scale(1.5);
        margin-right: 0.6em;
        vertical-align: middle;
    }
\u{space}\u{space}\u{space}\u{space}
    p {
        margin-top: 0.5em;
        margin-bottom: 0.5em;
    }
\u{space}\u{space}\u{space}\u{space}
    .image {
        border: none;
        margin: 1.5em 0;
        padding: 0;
        border-radius: 0;
        text-align: center;
    }
\u{space}\u{space}\u{space}\u{space}
    .code,
    code {
        background: rgba(135, 131, 120, 0.15);
        border-radius: 3px;
        padding: 0.2em 0.4em;
        border-radius: 3px;
        font-size: 85%;
        tab-size: 2;
    }
\u{space}\u{space}\u{space}\u{space}
    code {
        color: #eb5757;
    }
\u{space}\u{space}\u{space}\u{space}
    .code {
        padding: 1.5em 1em;
    }
\u{space}\u{space}\u{space}\u{space}
    .code-wrap {
        white-space: pre-wrap;
        word-break: break-all;
    }
\u{space}\u{space}\u{space}\u{space}
    .code > code {
        background: none;
        padding: 0;
        font-size: 100%;
        color: inherit;
    }
\u{space}\u{space}\u{space}\u{space}
    blockquote {
        font-size: 1.25em;
        margin: 1em 0;
        padding-left: 1em;
        border-left: 3px solid rgb(55, 53, 47);
    }
\u{space}\u{space}\u{space}\u{space}
    .bookmark {
        text-decoration: none;
        max-height: 8em;
        padding: 0;
        display: flex;
        width: 100%;
        align-items: stretch;
    }
\u{space}\u{space}\u{space}\u{space}
    .bookmark-title {
        font-size: 0.85em;
        overflow: hidden;
        text-overflow: ellipsis;
        height: 1.75em;
        white-space: nowrap;
    }
\u{space}\u{space}\u{space}\u{space}
    .bookmark-text {
        display: flex;
        flex-direction: column;
    }
\u{space}\u{space}\u{space}\u{space}
    .bookmark-info {
        flex: 4 1 180px;
        padding: 12px 14px 14px;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
    }
\u{space}\u{space}\u{space}\u{space}
    .bookmark-image {
        width: 33%;
        flex: 1 1 180px;
        display: block;
        position: relative;
        object-fit: cover;
        border-radius: 1px;
    }
\u{space}\u{space}\u{space}\u{space}
    .bookmark-description {
        color: rgba(55, 53, 47, 0.6);
        font-size: 0.75em;
        overflow: hidden;
        max-height: 4.5em;
        word-break: break-word;
    }
\u{space}\u{space}\u{space}\u{space}
    .bookmark-href {
        font-size: 0.75em;
        margin-top: 0.25em;
    }
\u{space}\u{space}\u{space}\u{space}
    .sans { font-family: ui-sans-serif, -apple-system, BlinkMacSystemFont, "Segoe UI Variable Display", "Segoe UI", Helvetica, "Apple Color Emoji", Arial, sans-serif, "Segoe UI Emoji", "Segoe UI Symbol"; }
    .code { font-family: "SFMono-Regular", Menlo, Consolas, "PT Mono", "Liberation Mono", Courier, monospace; }
    .serif { font-family: Lyon-Text, Georgia, ui-serif, serif; }
    .mono { font-family: iawriter-mono, Nitti, Menlo, Courier, monospace; }
    .pdf .sans { font-family: Inter, ui-sans-serif, -apple-system, BlinkMacSystemFont, "Segoe UI Variable Display", "Segoe UI", Helvetica, "Apple Color Emoji", Arial, sans-serif, "Segoe UI Emoji", "Segoe UI Symbol", 'Twemoji', 'Noto Color Emoji', 'Noto Sans CJK JP'; }
    .pdf:lang(zh-CN) .sans { font-family: Inter, ui-sans-serif, -apple-system, BlinkMacSystemFont, "Segoe UI Variable Display", "Segoe UI", Helvetica, "Apple Color Emoji", Arial, sans-serif, "Segoe UI Emoji", "Segoe UI Symbol", 'Twemoji', 'Noto Color Emoji', 'Noto Sans CJK SC'; }
    .pdf:lang(zh-TW) .sans { font-family: Inter, ui-sans-serif, -apple-system, BlinkMacSystemFont, "Segoe UI Variable Display", "Segoe UI", Helvetica, "Apple Color Emoji", Arial, sans-serif, "Segoe UI Emoji", "Segoe UI Symbol", 'Twemoji', 'Noto Color Emoji', 'Noto Sans CJK TC'; }
    .pdf:lang(ko-KR) .sans { font-family: Inter, ui-sans-serif, -apple-system, BlinkMacSystemFont, "Segoe UI Variable Display", "Segoe UI", Helvetica, "Apple Color Emoji", Arial, sans-serif, "Segoe UI Emoji", "Segoe UI Symbol", 'Twemoji', 'Noto Color Emoji', 'Noto Sans CJK KR'; }
    .pdf .code { font-family: Source Code Pro, "SFMono-Regular", Menlo, Consolas, "PT Mono", "Liberation Mono", Courier, monospace, 'Twemoji', 'Noto Color Emoji', 'Noto Sans Mono CJK JP'; }
    .pdf:lang(zh-CN) .code { font-family: Source Code Pro, "SFMono-Regular", Menlo, Consolas, "PT Mono", "Liberation Mono", Courier, monospace, 'Twemoji', 'Noto Color Emoji', 'Noto Sans Mono CJK SC'; }
    .pdf:lang(zh-TW) .code { font-family: Source Code Pro, "SFMono-Regular", Menlo, Consolas, "PT Mono", "Liberation Mono", Courier, monospace, 'Twemoji', 'Noto Color Emoji', 'Noto Sans Mono CJK TC'; }
    .pdf:lang(ko-KR) .code { font-family: Source Code Pro, "SFMono-Regular", Menlo, Consolas, "PT Mono", "Liberation Mono", Courier, monospace, 'Twemoji', 'Noto Color Emoji', 'Noto Sans Mono CJK KR'; }
    .pdf .serif { font-family: PT Serif, Lyon-Text, Georgia, ui-serif, serif, 'Twemoji', 'Noto Color Emoji', 'Noto Serif CJK JP'; }
    .pdf:lang(zh-CN) .serif { font-family: PT Serif, Lyon-Text, Georgia, ui-serif, serif, 'Twemoji', 'Noto Color Emoji', 'Noto Serif CJK SC'; }
    .pdf:lang(zh-TW) .serif { font-family: PT Serif, Lyon-Text, Georgia, ui-serif, serif, 'Twemoji', 'Noto Color Emoji', 'Noto Serif CJK TC'; }
    .pdf:lang(ko-KR) .serif { font-family: PT Serif, Lyon-Text, Georgia, ui-serif, serif, 'Twemoji', 'Noto Color Emoji', 'Noto Serif CJK KR'; }
    .pdf .mono { font-family: PT Mono, iawriter-mono, Nitti, Menlo, Courier, monospace, 'Twemoji', 'Noto Color Emoji', 'Noto Sans Mono CJK JP'; }
    .pdf:lang(zh-CN) .mono { font-family: PT Mono, iawriter-mono, Nitti, Menlo, Courier, monospace, 'Twemoji', 'Noto Color Emoji', 'Noto Sans Mono CJK SC'; }
    .pdf:lang(zh-TW) .mono { font-family: PT Mono, iawriter-mono, Nitti, Menlo, Courier, monospace, 'Twemoji', 'Noto Color Emoji', 'Noto Sans Mono CJK TC'; }
    .pdf:lang(ko-KR) .mono { font-family: PT Mono, iawriter-mono, Nitti, Menlo, Courier, monospace, 'Twemoji', 'Noto Color Emoji', 'Noto Sans Mono CJK KR'; }
    .highlight-default {
        color: rgba(55, 53, 47, 1);
    }
    .highlight-gray {
        color: rgba(120, 119, 116, 1);
        fill: rgba(120, 119, 116, 1);
    }
    .highlight-brown {
        color: rgba(159, 107, 83, 1);
        fill: rgba(159, 107, 83, 1);
    }
    .highlight-orange {
        color: rgba(217, 115, 13, 1);
        fill: rgba(217, 115, 13, 1);
    }
    .highlight-yellow {
        color: rgba(203, 145, 47, 1);
        fill: rgba(203, 145, 47, 1);
    }
    .highlight-teal {
        color: rgba(68, 131, 97, 1);
        fill: rgba(68, 131, 97, 1);
    }
    .highlight-blue {
        color: rgba(51, 126, 169, 1);
        fill: rgba(51, 126, 169, 1);
    }
    .highlight-purple {
        color: rgba(144, 101, 176, 1);
        fill: rgba(144, 101, 176, 1);
    }
    .highlight-pink {
        color: rgba(193, 76, 138, 1);
        fill: rgba(193, 76, 138, 1);
    }
    .highlight-red {
        color: rgba(212, 76, 71, 1);
        fill: rgba(212, 76, 71, 1);
    }
    .highlight-default_background {
        color: rgba(55, 53, 47, 1);
    }
    .highlight-gray_background {
        background: rgba(248, 248, 247, 1);
    }
    .highlight-brown_background {
        background: rgba(244, 238, 238, 1);
    }
    .highlight-orange_background {
        background: rgba(251, 236, 221, 1);
    }
    .highlight-yellow_background {
        background: rgba(251, 243, 219, 1);
    }
    .highlight-teal_background {
        background: rgba(237, 243, 236, 1);
    }
    .highlight-blue_background {
        background: rgba(231, 243, 248, 1);
    }
    .highlight-purple_background {
        background: rgba(248, 243, 252, 1);
    }
    .highlight-pink_background {
        background: rgba(252, 241, 246, 1);
    }
    .highlight-red_background {
        background: rgba(253, 235, 236, 1);
    }
    .block-color-default {
        color: inherit;
        fill: inherit;
    }
    .block-color-gray {
        color: rgba(120, 119, 116, 1);
        fill: rgba(120, 119, 116, 1);
    }
    .block-color-brown {
        color: rgba(159, 107, 83, 1);
        fill: rgba(159, 107, 83, 1);
    }
    .block-color-orange {
        color: rgba(217, 115, 13, 1);
        fill: rgba(217, 115, 13, 1);
    }
    .block-color-yellow {
        color: rgba(203, 145, 47, 1);
        fill: rgba(203, 145, 47, 1);
    }
    .block-color-teal {
        color: rgba(68, 131, 97, 1);
        fill: rgba(68, 131, 97, 1);
    }
    .block-color-blue {
        color: rgba(51, 126, 169, 1);
        fill: rgba(51, 126, 169, 1);
    }
    .block-color-purple {
        color: rgba(144, 101, 176, 1);
        fill: rgba(144, 101, 176, 1);
    }
    .block-color-pink {
        color: rgba(193, 76, 138, 1);
        fill: rgba(193, 76, 138, 1);
    }
    .block-color-red {
        color: rgba(212, 76, 71, 1);
        fill: rgba(212, 76, 71, 1);
    }
    .block-color-default_background {
        color: inherit;
        fill: inherit;
    }
    .block-color-gray_background {
        background: rgba(248, 248, 247, 1);
    }
    .block-color-brown_background {
        background: rgba(244, 238, 238, 1);
    }
    .block-color-orange_background {
        background: rgba(251, 236, 221, 1);
    }
    .block-color-yellow_background {
        background: rgba(251, 243, 219, 1);
    }
    .block-color-teal_background {
        background: rgba(237, 243, 236, 1);
    }
    .block-color-blue_background {
        background: rgba(231, 243, 248, 1);
    }
    .block-color-purple_background {
        background: rgba(248, 243, 252, 1);
    }
    .block-color-pink_background {
        background: rgba(252, 241, 246, 1);
    }
    .block-color-red_background {
        background: rgba(253, 235, 236, 1);
    }
    .select-value-color-uiBlue { background-color: undefined; }
    .select-value-color-pink { background-color: rgba(225, 136, 179, 0.27); }
    .select-value-color-purple { background-color: rgba(168, 129, 197, 0.27); }
    .select-value-color-green { background-color: rgba(123, 183, 129, 0.27); }
    .select-value-color-gray { background-color: rgba(84, 72, 49, 0.15); }
    .select-value-color-transparentGray { background-color: undefined; }
    .select-value-color-translucentGray { background-color: undefined; }
    .select-value-color-orange { background-color: rgba(224, 124, 57, 0.27); }
    .select-value-color-brown { background-color: rgba(210, 162, 141, 0.35); }
    .select-value-color-red { background-color: rgba(244, 171, 159, 0.4); }
    .select-value-color-yellow { background-color: rgba(236, 191, 66, 0.39); }
    .select-value-color-blue { background-color: rgba(93, 165, 206, 0.27); }
    .select-value-color-pageGlass { background-color: undefined; }
    .select-value-color-washGlass { background-color: undefined; }
\u{space}\u{space}\u{space}\u{space}
    .checkbox {
        display: inline-flex;
        vertical-align: text-bottom;
        width: 16;
        height: 16;
        background-size: 16px;
        margin-left: 2px;
        margin-right: 5px;
    }
\u{space}\u{space}\u{space}\u{space}
    .checkbox-on {
        background-image: url("data:image/svg+xml;charset=UTF-8,%3Csvg%20width%3D%2216%22%20height%3D%2216%22%20viewBox%3D%220%200%2016%2016%22%20fill%3D%22none%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%0A%3Crect%20width%3D%2216%22%20height%3D%2216%22%20fill%3D%22%2358A9D7%22%2F%3E%0A%3Cpath%20d%3D%22M6.71429%2012.2852L14%204.9995L12.7143%203.71436L6.71429%209.71378L3.28571%206.2831L2%207.57092L6.71429%2012.2852Z%22%20fill%3D%22white%22%2F%3E%0A%3C%2Fsvg%3E");
    }
\u{space}\u{space}\u{space}\u{space}
    .checkbox-off {
        background-image: url("data:image/svg+xml;charset=UTF-8,%3Csvg%20width%3D%2216%22%20height%3D%2216%22%20viewBox%3D%220%200%2016%2016%22%20fill%3D%22none%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%0A%3Crect%20x%3D%220.75%22%20y%3D%220.75%22%20width%3D%2214.5%22%20height%3D%2214.5%22%20fill%3D%22white%22%20stroke%3D%22%2336352F%22%20stroke-width%3D%221.5%22%2F%3E%0A%3C%2Fsvg%3E");
    }
\u{space}\u{space}\u{space}\u{space}\u{space}\u{space}\u{space}\u{space}
    </style></head><body><article id="1d1604ef-9b4b-8020-9a43-e475a43661a0" class="page sans"><header><h1 class="page-title">Smart Calendar Reminder: Your Intelligent Schedule Assistant</h1><p class="page-description"></p></header><div class="page-body"><figure class="block-color-blue_background callout" style="white-space:pre-wrap;display:flex" id="1d1604ef-9b4b-80b2-927b-ddb2d55d6032"><div style="width:100%">👋 Welcome to Smart Calendar Reminder! This welcome message appears only during your first use.</div></figure><h1 id="1d1604ef-9b4b-80c5-a289-d2aedc69317d" class="block-color-yellow_background">Transform Your Calendar Experience</h1><p id="1d1604ef-9b4b-80f7-ac48-d98bc2a805e6" class="">While iOS Calendar is fantastic for basic scheduling, we all know those built-in reminders can be easy to miss. Adding manual alarms, calculating travel times, and customizing notifications with event details can become tedious and time-consuming. That&#x27;s where Smart Calendar Reminder comes in - your automated solution for intelligent schedule management!</p><h2 id="1d1604ef-9b4b-800f-9752-cb68ca87b1cf" class="">Powerful Features at Your Fingertips</h2><ul id="0ecdba52-af59-410f-9efb-321f8e2d4ba6" class="bulleted-list"><li style="list-style-type:disc">Seamless Calendar Integration - No manual input needed</li></ul><ul id="1d1604ef-9b4b-80b9-8d0d-fe7b3c28115b" class="bulleted-list"><li style="list-style-type:disc">Intelligent Travel Time Calculations powered by Apple Maps</li></ul><ul id="4f6b7aca-7c92-458d-9996-e8f891a3775d" class="bulleted-list"><li style="list-style-type:disc">Spoken Event Details - Hear your schedule clearly</li></ul><ul id="1d1604ef-9b4b-80f5-9fe9-ee50fd3e7795" class="bulleted-list"><li style="list-style-type:disc">Smart Preparation Time Management</li></ul><h2 id="fa2195d7-f08f-4058-a00a-18e2b562b5b2" class="">Smart Location Intelligence</h2><p id="1d1604ef-9b4b-80d3-9799-dd97b27a3773" class="">Our advanced travel time calculation system uses three methods to determine your departure location, in order of priority:</p><ol type="1" id="667c5bbb-f94c-480b-bccd-c84948a3c40f" class="numbered-list" start="1"><li>Custom Departure Address - Add this JSON format in your calendar event notes for specific departure points:<script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/prism.min.js" integrity="sha512-7Z9J3l1+EYfeaPKcGXu3MS/7T+w19WtKQY/n+xzmw4hZhJ9tyYmcUS+4QqAlzhicE5LAfMQSF3iFTK9bQdTxXg==" crossorigin="anonymous" referrerPolicy="no-referrer"></script><link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism.min.css" integrity="sha512-tN7Ec6zAFaVSG3TpNAKtk4DOHNpSwKHxxrsiw4GHKESGPs5njn/0sMCUMl2svV4wo4BK/rCP7juYz+zx+l6oeQ==" crossorigin="anonymous" referrerPolicy="no-referrer"/><pre id="1d1604ef-9b4b-80d1-9d4b-dfb42d06c7b8" class="code"><code class="language-JSON">{
        &quot;Street&quot;: &quot;your departure street&quot;,
        &quot;City&quot;: &quot;your departure city&quot;,
        &quot;State&quot;: &quot;your departure state&quot;,
        &quot;Country&quot;: &quot;your departure country&quot;,
        &quot;Postcode&quot;: &quot;your departure postcode&quot;
    }</code></pre></li></ol><ol type="1" id="1d1604ef-9b4b-80c6-b468-d002dd94b75d" class="numbered-list" start="2"><li>Home Address - Uses your pre-configured home address - perfect for regular schedules</li></ol><ol type="1" id="aba3d861-a84a-48f6-a163-ac441f18b1b3" class="numbered-list" start="3"><li>Current Location - Automatically uses your current position as a fallback</li></ol><figure class="block-color-yellow_background callout" style="white-space:pre-wrap;display:flex" id="1d1604ef-9b4b-80ed-a48d-f0cad158ed60"><div style="width:100%">Smart Travel Planning: The system automatically calculates additional travel time if you&#x27;re not at your departure location!</div></figure><h2 id="efb3fa4e-d05f-4bd3-bd94-b9b991e29ce4" class="">Voice Announcements</h2><ul id="1d1604ef-9b4b-8076-9c50-fcefa4c4903c" class="bulleted-list"><li style="list-style-type:disc">Hourly Schedule Updates: Hear upcoming events at the start of each hour</li></ul><ul id="a0eb2cf6-1637-4d13-94c8-356fd19cd78a" class="bulleted-list"><li style="list-style-type:disc">Smart Reminders: Get spoken alerts at perfectly timed intervals</li></ul><h2 id="1d1604ef-9b4b-80dd-9df1-d8fae003cae6" class="">Intelligent Automation System</h2><p id="15ce45ed-b4fa-4b81-bbd0-2fa585b5c7ce" class="">Our sophisticated automation system ensures you never miss an important event:</p><ul id="1d1604ef-9b4b-80c5-a181-f10518e7e73d" class="bulleted-list"><li style="list-style-type:disc">Daily Planning: 12:00 AM check of your next 24 hours</li></ul><ul id="f54bf941-4703-4cc3-9f61-408f1eed72ee" class="bulleted-list"><li style="list-style-type:disc">Real-time Updates: Hourly recalculation of travel times</li></ul><ul id="1d1604ef-9b4b-800d-b8f8-e85831f4b0ee" class="bulleted-list"><li style="list-style-type:disc">Dynamic Adjustments: Automatic alarm optimization</li></ul><figure class="block-color-gray_background callout" style="white-space:pre-wrap;display:flex" id="1d1604ef-9b4b-8075-9657-ed6135b16d17"><div style="width:100%">Example: For a 10:30 AM meeting with 3 hours total travel time, the system ensures your 7:30 AM alarm is set and continuously optimized based on real-time conditions.</div></figure><h1 id="1d1604ef-9b4b-803a-8fbf-c89822dbca0a" class="block-color-blue">Setup Guide</h1><p id="1d1604ef-9b4b-80a7-ae75-c35724896e17" class="">Let&#x27;s get your Smart Calendar Reminder configured with four essential automations:</p><h2 id="1d1604ef-9b4b-8072-ab56-d0757b2435ef" class="block-color-gray_background">Automation 1: Daily 12:00 AM Check</h2><p id="1d1604ef-9b4b-80c9-9b4a-ee2712524a0d" class="block-color-blue">Step 1. Open Shortcuts and tap [Automation], then tap [+] at the top right corner</p><figure id="1d1604ef-9b4b-8043-b390-ff859889379f" class="image"><a href="gZWfH4Kler-left.png"><img style="width:709.984375px" src="https://i.imgur.com/za6VDMA.jpeg"/></a></figure><p id="1d1604ef-9b4b-804a-9cb1-f487991237c6" class="">Step 2. Tap [Time of Day]</p><figure id="1d1604ef-9b4b-8085-99bb-e3d90115d5dd" class="image"><a href="NDyjdrLrYZ-left.png"><img style="width:709.984375px" src="https://i.imgur.com/z7aJ0OB.jpeg"/></a></figure><p id="1d1604ef-9b4b-806d-a7eb-f652a480cbc6" class="">Step 3. Follow the sequence shown in the image</p><figure id="1d1604ef-9b4b-80cd-9ca5-fc076df31898" class="image"><a href="6KJEFinDm6-left.png"><img style="width:709.984375px" src="https://i.imgur.com/u6C2AR9.jpeg"/></a></figure><p id="1d1604ef-9b4b-8050-b817-f0e2368f43ca" class="block-color-gray_background">Step 4. Tap [New Blank Automation]</p><figure id="1d1604ef-9b4b-8028-b872-eed1a3f6701a" class="image"><a href="XblW6TFHek-left.png"><img style="width:709.984375px" src="https://i.imgur.com/nrTr7Np.jpeg"/></a></figure><p id="b8f8c3cf-7fdc-4a99-b2ba-60e18fef34c7" class="">Step 5. Search for the [Number] action</p><figure id="1d1604ef-9b4b-80d0-ad58-f7a1dc1d1c48" class="image"><a href="4XgUTG3h3E-left.png"><img style="width:709.984375px" src="https://i.imgur.com/F6jogMJ.jpeg"/></a></figure><p id="1d1604ef-9b4b-804e-9fe3-c5b6fc8701fa" class="">Step 6. Input number 1</p><figure id="1d1604ef-9b4b-8056-be0b-c4cfaebae0f7" class="image"><a href="n0XhfXtA03-left.png"><img style="width:709.984375px" src="https://i.imgur.com/HUMvkry.jpeg"/></a></figure><p id="1d1604ef-9b4b-8004-b82f-c5b6250d69c0" class="">Step 7. Search for [Run Shortcut] action</p><figure id="1d1604ef-9b4b-801d-a2d0-e444c55bbdb1" class="image"><a href="BUB7V9ITn8-left.png"><img style="width:709.984375px" src="https://i.imgur.com/IbHA9Jf.jpeg"/></a></figure><p id="1d1604ef-9b4b-8031-a595-d6b268bb5bfc" class="">Step 8. Search and select [Smart Calendar Reminder] in [Run Shortcut] action’s shortcut field.</p><figure id="1d1604ef-9b4b-804c-8be0-d6060e3b5a73" class="image"><a href="b50xsbc2QT-left.png"><img style="width:709.984375px" src="https://i.imgur.com/41WbF2A.png"/></a></figure><p id="1d1604ef-9b4b-805d-96d8-c871e0493bdb" class="block-color-default_background">Step 9. Tap [Done] in the top right corner to complete setup</p><figure id="1d1604ef-9b4b-8024-864a-d9002a94e719" class="image"><a href="LjO11dxjS3-left.png"><img style="width:709.984375px" src="https://i.imgur.com/tmrW6r8.jpeg"/></a></figure><h2 id="1d1604ef-9b4b-8045-9247-e3afd799f547" class="">Automation 2: Hourly Check</h2><p id="1d1604ef-9b4b-809c-900e-e425d52b7a0a" class="">Follow the same steps as Automation 1, with these modifications:</p><ul id="1d1604ef-9b4b-80a8-9819-cfd9961eb078" class="bulleted-list"><li style="list-style-type:disc">In step 3, select all <em><strong><span style="border-bottom:0.05em solid">24 hourly times</span></strong></em></li></ul><ul id="1d1604ef-9b4b-80b3-b766-ed9c851957a5" class="bulleted-list"><li style="list-style-type:disc">In step 6, input number <strong>2</strong> instead of 1</li></ul><h2 id="1d1604ef-9b4b-80ad-a1ea-e247f84f2063" class="">Automation 3: Alarm Trigger</h2><p id="1d1604ef-9b4b-8044-9254-f9d3912d6d6c" class="">Follow the same steps as Automation 1, with these changes:</p><ul id="1d1604ef-9b4b-802e-98b3-c8202e4f8765" class="bulleted-list"><li style="list-style-type:disc">In step 2, tap [<strong>Alarm</strong>] instead of [Time of Day]</li></ul><ul id="1d1604ef-9b4b-80a5-9ccc-d6a2906a3429" class="bulleted-list"><li style="list-style-type:disc">Configure settings as shown:</li></ul><figure id="1d1604ef-9b4b-8014-b883-f88df7a348e1" class="image"><a href="fIF3p3ttC0-left.png"><img style="width:709.984375px" src="https://i.imgur.com/MTyZ3km.png"/></a></figure><ul id="1d1604ef-9b4b-80dc-a6f8-edc73fc17118" class="bulleted-list"><li style="list-style-type:disc">In step 6, input number <strong>3</strong> instead of 1</li></ul><h2 id="1d1604ef-9b4b-8025-9db9-e83367a64cdb" class="">Automation 4: Alarm Stop</h2><p id="1d1604ef-9b4b-805f-afe2-f2de398e695a" class="">Follow the same steps as Automation 1, with these changes:</p><ul id="10aa2fe6-80f0-4850-93c0-4fe14b146190" class="bulleted-list"><li style="list-style-type:disc">In step 2, tap [<strong>Alarm</strong>] instead of [Time of Day]</li></ul><ul id="1d1604ef-9b4b-80aa-baad-e6dd7acf4ad9" class="bulleted-list"><li style="list-style-type:disc">Configure settings as shown:</li></ul><figure id="1d1604ef-9b4b-8068-a490-e601bfafcfe7" class="image"><a href="E24uC2vV2j-left.png"><img style="width:709.984375px" src="https://i.imgur.com/2LbJK9D.png"/></a></figure><ul id="1d1604ef-9b4b-804f-bcba-f64ec9bd67f1" class="bulleted-list"><li style="list-style-type:disc">In step 6, input number <strong>4</strong> instead of 1</li></ul><figure class="block-color-teal_background callout" style="white-space:pre-wrap;display:flex" id="1d1604ef-9b4b-8031-8b44-ddb00fab6dee"><div style="width:100%">🎉 Congratulations! Once you&#x27;ve completed these automations, your Smart Calendar Reminder is ready to revolutionize your schedule management!</div></figure></div></article><span class="sans" style="font-size:14px;padding-top:2em"></span></body></html>

〔28〕 Set Name of 〔27 Text〕 to Welcome.html　» 29 30

〔29〕 Show Web View at 〔28 Renamed Item〕

〔30〕 Make PDF from 〔28 Renamed Item〕　»

〔31〕 Save File 〔30 PDF〕
• AskWhereToSave: false
• SaveFileOverwrite: true
• FileDestinationPath: 〔3 Version Dictionary .Name〕/Welcome.pdf

〔32〕 End If　▵26

〔33〕 Dictionary 　➔ menus　»
{  "mainMenu": {
      "Setup": {
         "title": "Setup",
         "sub": "Set Personal Preferences",
         "icon": "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"
      },
      "Change": {
         "title": "Change",
         "sub": "Change Personal Preferences",
         "icon": "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"
      },
      "View": {
         "title": "View",
         "sub": "View Personal Preferences or Automations Setup Inctructions",
         "icon": "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"
      }
   }
}

〔34〕 Get Dictionary from 〔33 menus.mainMenu〕　»

〔35〕 Repeat with Each in 〔34 Dictionary〕

〔36〕 Get Dictionary All Values in 〔Repeat Item as Dictionary〕 　➔ Options　»
• DictionaryKey: 〔Repeat Item as Dictionary’s Keys〕.title

〔37〕 Repeat[2] with Each in 〔36 Options as Dictionary〕

〔38〕 Text
BEGIN:VCARD
VERSION:3.0
N;CHARSET=utf-8:〔Repeat Item 2 as Dictionary.title〕;
ORG:〔Repeat Item 2 as Dictionary.sub〕;
PHOTO;ENCODING=b:〔Repeat Item 2 as Dictionary.icon〕;
END:VCARD

〔39〕 End Repeat[2] with Each

〔40〕 End Repeat with Each　»

〔41〕 Text　»
〔40 Repeat Results〕

〔42〕 Set Name of 〔41 Text〕 to mainMenu.vcf　»

〔43〕 Get Contacts from 〔42 Renamed Item〕　»

〔44〕 Choose from List 〔43 Contacts〕　» 45 78 83
• ChooseFromListActionPrompt: ☀️Welcome to Smart Calendar Reminder☀️

〔45〕 If 〔44 Selected Item’s Name〕 is Setup

〔46〕 Get File at Path 〔3 Version Dictionary .Name〕/aboutme.txt from Folder　»
• FileErrorIfNotFound: false

〔47〕 If 〔46 File’s File Size〕 does not have any value

〔48〕 Comment
All the information is stored in iCloud. The shortcut isn’t collecting anything.

〔49〕 Text　»
Choose Travel Time Calculation Method

1️⃣ Notes 🗓️ / Current 📍\u000D
Uses the address in the Calendar event Notes if available (routing via Notes if you're not already there), otherwise calculates directly from your current location to the event.\u000D
\u000D
2️⃣ Notes 🗓️ / Home 🏡\u000D
Uses the Notes address if available (same as 1️⃣), but if Notes are empty, routes via your home address if you're not already there, or directly from home if you are.\u000D
\u000D

〔50〕 Choose from Menu
• MenuPrompt: 〔49 Text〕
• MenuItems: [1️⃣ Notes 🗓️ / Current 📍,
2️⃣ Notes 🗓️ / Home 🏡]

〔51〕 Menu Item 1️⃣ Notes 🗓️ / Current 📍

〔52〕 Dictionary　»
{  "state": "\"\"",
   "street": "\"\"",
   "city": "\"\"",
   "country": "\"\"",
   "postcode": "\"\""
}

〔53〕 Set Variable HomeAddress to 〔52 Dictionary〕

〔54〕 Menu Item 2️⃣ Notes 🗓️ / Home 🏡

〔55〕 Text　»
Please provide your home address for accurate travel time calculations via Apple Maps.

〔56〕 Text　»
<!DOCTYPE html>
<html>
<head>
    <title>Address Collector</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        /* Modern CSS styling */
        body {
            font-family: 'Segoe UI', sans-serif;
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            padding: 20px;
            min-height: 100vh;
        }

        .form-container {
            max-width: 500px;
            margin: 20px auto;
            background: white;
            padding: 25px;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        }

        h2 {
            color: #2c3e50;
            text-align: center;
            margin-bottom: 25px;
        }

        .form-group {
            margin-bottom: 20px;
        }

        label {
            display: block;
            margin-bottom: 8px;
            color: #34495e;
            font-weight: 500;
        }

        input {
            width: 100%;
            padding: 12px;
            margin: 0; /* Equal left/right margins */
            border: 2px solid #e0e0e0;
            border-radius: 8px;
            font-size: 16px;
            transition: border-color 0.3s ease;
            box-sizing: border-box; /* Ensures padding doesn't affect width */
        }

        input:focus {
            outline: none;
            border-color: #3498db;
            box-shadow: 0 0 8px rgba(52, 152, 219, 0.2);
        }

        button {
            background: #3498db;
            color: white;
            padding: 15px 30px;
            border: none;
            border-radius: 8px;
            font-size: 16px;
            cursor: pointer;
            width: 100%;
            transition: background 0.3s ease;
        }

        button:hover {
            background: #2980b9;
        }

        /* New success message styling */
        .success-message {
            display: none;
            background: #e8f5e9;
            color: #2e7d32;
            padding: 20px;
            border-radius: 8px;
            margin-top: 20px;
            text-align: center;
        }

        .success-message.show {
            display: block;
        }
    </style>
</head>
<body>
    <div class="form-container">
        <h2>〔55 Text〕</h2>
        <form id="addressForm">
            <div class="form-group">
                <label>Street Address</label>
                <input type="text" id="street" placeholder="" required>
            </div>

            <div class="form-group">
                <label>City</label>
                <input type="text" id="city" placeholder="" required>
            </div>

            <div class="form-group">
                <label>State/Province</label>
                <input type="text" id="state" placeholder="" required>
            </div>

            <div class="form-group">
                <label>Country/Region</label>
                <input type="text" id="country" placeholder="" required>
            </div>

            <div class="form-group">
                <label>Postal Code</label>
                <input type="text" id="postcode" placeholder="" required>
            </div>

            <button type="button" onclick="sendToShortcut()">Submit Address</button>
        </form>

        <!-- Success message container -->
        <div class="success-message" id="successMessage">
            <p>Data collected successfully!</p>
        </div>
    </div>

<script>
function sendToShortcut() {
  const addressData = {
    street: document.getElementById('street').value,
    city: document.getElementById('city').value,
    state: document.getElementById('state').value,
    country: document.getElementById('country').value,
    postcode: document.getElementById('postcode').value
  };
\u{space}\u{space}
  // Copy data to clipboard
  navigator.clipboard.writeText(JSON.stringify(addressData));
\u{space}\u{space}
  // Show success message and hide form
  document.getElementById('addressForm').style.display = 'none';
  document.getElementById('successMessage').classList.add('show');
}
</script>
</body>
</html>

〔57〕 Set Name of 〔56 Text〕 to Address.html　»

〔58〕 Show Web View at 〔57 Renamed Item〕

〔59〕 Get Clipboard　»

〔60〕 Get Dictionary from 〔59 Clipboard〕　»

〔61〕 Set Variable HomeAddress to 〔60 Dictionary〕

〔62〕 End Menu　▵54

〔63〕 List　» 65
[Driving,
Walking,
Transit,
Biking]

〔64〕 Text　»
Select Travel Method (It will apply to all the events)

〔65〕 Choose from List 〔63 List〕 　➔ Travel Method Selected　»
• ChooseFromListActionPrompt: 〔64 Text〕

〔66〕 Set Variable TravelMethod to 〔65 Travel Method Selected〕

〔67〕 Text　»
Besides travel time, how many Extra Minutes Needed (e.g., '15 mins buffer')

〔68〕 Ask for Number Input 　➔ Extra Time Needed　»
• AskActionPrompt: 〔67 Text〕
• AskActionAllowsNegativeNumbers: false
• AskActionAllowsDecimalNumbers: false

〔69〕 Set Variable ExtraTime to 〔68 Extra Time Needed〕

〔70〕 Dictionary　»
{  "HomeAddress": "〔HomeAddress as Dictionary〕",
   "TravelMethod": "〔TravelMethod〕",
   "ExtraTime": "〔ExtraTime〕"
}

〔71〕 Text　»
〔70 Dictionary〕

〔72〕 Save File 〔71 Text〕
• Folder: {  "fileLocation": {
      "crossDeviceItemID": "docs.icloud.com:iCloud.is.workflow.my.workflows/documents/e51c720424ec90d3260ccd6f241343baea15b7f3",
      "fileProviderDomainID": "com.apple.CloudDocs.iCloudDriveFileProvider/46CA22EA-49CD-4A1D-9512-F48B36AA64B5",
      "appContainerBundleIdentifier": "com.apple.shortcuts",
      "relativeSubpath": "",
      "WFFileLocationType": "Shortcuts"
   },
   "filename": "Documents",
   "displayName": "Shortcuts"
}
• AskWhereToSave: false
• SaveFileOverwrite: true
• FileDestinationPath: 〔3 Version Dictionary .Name〕/aboutme.txt

〔73〕 Otherwise　▵47

〔74〕 Show Alert You have set up. If you want to modify, please tap [Change] instead.
• AlertActionCancelButtonShown: false

〔75〕 Run Shortcut Smart Calendar Reminder
• Workflow: {  "workflowIdentifier": "5A2BC55E-C195-4C6C-93E9-725F782CDD1B",
   "isSelf": true,
   "workflowName": "Smart Calendar Reminder"
}

〔76〕 End If

〔77〕 End If　▵45

〔78〕 If 〔44 Selected Item’s Name〕 is Change

〔79〕 Delete Files {  "fileLocation": {
      "crossDeviceItemID": "docs.icloud.com:iCloud.is.workflow.my.workflows/9F38EF56-AD52-45E7-8B63-200CBFF0E713/a708662a11276f4b1fa48be3c50990fd13a4ccdf",
      "fileProviderDomainID": "com.apple.CloudDocs.iCloudDriveFileProvider/F1A50FD9-D64E-426C-8EB2-9C6216034396",
      "appContainerBundleIdentifier": "com.apple.systemactions",
      "relativeSubpath": "Smart Calendar Reminder/aboutme.txt",
      "WFFileLocationType": "Shortcuts"
   },
   "filename": "aboutme.txt",
   "displayName": "aboutme.txt"
}
• DeleteImmediatelyDelete: true

〔80〕 Show Alert Your preferences are deleted. Please choose [Setup] from main menu to set up again.
• AlertActionCancelButtonShown: false

〔81〕 Run Shortcut Smart Calendar Reminder
• Workflow: {  "workflowIdentifier": "5A2BC55E-C195-4C6C-93E9-725F782CDD1B",
   "isSelf": true,
   "workflowName": "Smart Calendar Reminder"
}

〔82〕 End If

〔83〕 If 〔44 Selected Item’s Name〕 is View

〔84〕 Choose from Menu
• MenuItems: [Automations Setup Instructions,
Personal Preferences]

〔85〕 Menu Item Automations Setup Instructions

〔86〕 Open File {  "fileLocation": {
      "crossDeviceItemID": "docs.icloud.com:iCloud.is.workflow.my.workflows/E4DA358A-5903-4CC2-BBC8-FD498ED6EDB3/d459a12be98fb7e83aed794c6d0dcf774ef5d814",
      "fileProviderDomainID": "com.apple.CloudDocs.iCloudDriveFileProvider/F1A50FD9-D64E-426C-8EB2-9C6216034396",
      "appContainerBundleIdentifier": "com.apple.systemactions",
      "relativeSubpath": "Smart Calendar Reminder/Welcome.pdf",
      "WFFileLocationType": "Shortcuts"
   },
   "filename": "Welcome.pdf",
   "displayName": "Welcome.pdf"
}

〔87〕 Menu Item Personal Preferences

〔88〕 Open File {  "fileLocation": {
      "crossDeviceItemID": "docs.icloud.com:iCloud.is.workflow.my.workflows/81672621-501F-4225-8CDA-11AAF2112D81/06302c85b44ba41f3258ff7d1669b31859a28556",
      "fileProviderDomainID": "com.apple.CloudDocs.iCloudDriveFileProvider/F1A50FD9-D64E-426C-8EB2-9C6216034396",
      "appContainerBundleIdentifier": "com.apple.systemactions",
      "relativeSubpath": "Smart Calendar Reminder/aboutme.txt",
      "WFFileLocationType": "Shortcuts"
   },
   "filename": "aboutme.txt",
   "displayName": "aboutme.txt"
}

〔89〕 End Menu

〔90〕 End If　▵83

〔91〕 Otherwise　▵0

〔92〕 If 〔Shortcut Input as Number〕 is 1

〔93〕 Comment
*Revolutionizing event management by integrating calendar data with intelligent automation:

Voice announcements for upcoming events

Dynamic alarm calculation (travel + prep time)

Calendar-driven scheduling system
Eliminates manual reminders and ensures perfect timing synchronization*

〔94〕 Get File at Path Smart Calendar Reminder/aboutme.txt from Folder　»
• FileErrorIfNotFound: false

〔95〕 Get Dictionary from 〔94 File〕　» 96 99 100

〔96〕 Get Dictionary from 〔95 Dictionary.HomeAddress〕　»

〔97〕 Text　»
〔96 Dictionary.street〕 〔96 Dictionary.city〕 〔96 Dictionary.state〕 〔96 Dictionary.postcode〕 〔96 Dictionary.country〕\u{space}

〔98〕 Set Variable HomeAddress to 〔97 Text〕

〔99〕 Set Variable TravelMethod to 〔95 Dictionary.TravelMethod〕

〔100〕 Get Dictionary Value for ExtraTime in 〔95 Dictionary〕　»

〔101〕 Get Numbers from 〔100 Dictionary Value〕　»

〔102〕 Set Variable ExtraTime to 〔101 Numbers〕

〔103〕 Find Calendar Events All Calendar Events where　» 104 105
• ContentItemSortProperty: Start Date
• ContentItemSortOrder: Oldest First
• ContentItemFilter: • All the following are true
Start Date is in the next 1 days
Is All Day
Canceled is {"Bool":{"Value":false,"WFSerializationType":"WFBooleanSubstitutableState"}}

〔104〕 If 〔103 Calendar Events〕 has any value

〔105〕 Repeat with Each in 〔103 Calendar Events〕

〔106〕 If 〔Repeat Item’s Location〕 has any value

〔107〕 Get Current Location　» 119 125 187
• Accuracy: Best

〔108〕 Comment
*To specify event-specific departure locations:

1. Create calendar event notes with JSON structure:
{
“Street”: “your departure street”,
“City”: “your departure city”,
“State”: “your departure state”,
“Country”: “your departure country”,
“Postcode”: “your departure postcode”
}
2. System prioritizes these over default locations*

〔109〕 If All are true　〔Repeat Item’s Notes〕 has any value　〔Repeat Item’s Notes〕 begins with {　〔Repeat Item’s Notes〕 ends with }

〔110〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY

〔111〕 Get Dictionary from 〔Repeat Item’s Notes〕 　➔ Notes Address Dictionary　» 112 113 114 115 116

〔112〕 Set Variable Calendar_Notes_Street to 〔111 Notes Address Dictionary.Street〕

〔113〕 Set Variable Calendar_Notes_City to 〔111 Notes Address Dictionary.City〕

〔114〕 Set Variable Calendar_Notes_State to 〔111 Notes Address Dictionary.State〕

〔115〕 Set Variable Calendar_Notes_Region to 〔111 Notes Address Dictionary.Country〕

〔116〕 Set Variable Calendar_Notes_ZIP_Code to 〔111 Notes Address Dictionary.Postcode〕

〔117〕 Text　»
〔Calendar_Notes_Street〕 〔Calendar_Notes_City〕 〔Calendar_Notes_State〕 〔Calendar_Notes_ZIP_Code〕 〔Calendar_Notes_Region〕

〔118〕 Set Variable NotesAddressString to 〔117 Text〕

〔119〕 If All are true　〔107 Current Location’s Street〕 is 〔Calendar_Notes_Street〕　〔107 Current Location’s City〕 is 〔Calendar_Notes_City〕　〔107 Current Location’s State〕 is 〔Calendar_Notes_State〕　〔107 Current Location’s Country〕 is 〔Calendar_Notes_Region〕　〔107 Current Location’s ZIP Code〕 is 〔Calendar_Notes_ZIP_Code〕

〔120〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY -> CALENDAR EVENT ADDRESS IS THE SAME WITH CURRENT LOCATION

〔121〕 Number 0　»

〔122〕 Set Variable CurrentToDeparture to 〔121 Number〕

〔123〕 Otherwise

〔124〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY -> CALENDAR EVENT ADDRESS IS NOT THE SAME WITH CURRENT LOCATION

〔125〕 Get 〔TravelMethod〕 Time　» 126 134
• GetDirectionsCustomLocation: 〔107 Current Location〕
• Destination: 〔NotesAddressString〕

〔126〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔125 Travel Time〕 　➔ C2DMatches　» 127 129 131 136 143
• MatchTextCaseSensitive: false

〔127〕 Count Items in 〔126 C2DMatches〕　»

〔128〕 If 〔127 Count〕 > 1

〔129〕 Get First Item from List 〔126 C2DMatches〕　»

〔130〕 Set Variable C2DHours to 〔129 Item from List〕

〔131〕 Get Last Item from List 〔126 C2DMatches〕　»

〔132〕 Set Variable C2DMinutes to 〔131 Item from List〕

〔133〕 Otherwise

〔134〕 Match Text hour(?:s)? in 〔125 Travel Time〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔135〕 If 〔134 C2DMatches’s text〕 has any value

〔136〕 Get First Item from List 〔126 C2DMatches〕　»

〔137〕 Set Variable C2DHours to 〔136 Item from List〕

〔138〕 Number 0　»

〔139〕 Set Variable C2DMinutes to 〔138 Number〕

〔140〕 Otherwise

〔141〕 Number 0　»

〔142〕 Set Variable C2DHours to 〔141 Number〕

〔143〕 Get First Item from List 〔126 C2DMatches〕　»

〔144〕 Set Variable C2DMinutes to 〔143 Item from List〕

〔145〕 End If

〔146〕 End If　▵133

〔147〕 Calculate 〔C2DHours〕 × 60　»

〔148〕 Calculate 〔147 Calculation Result〕 + 〔C2DMinutes〕　»

〔149〕 Set Variable CurrentToDeparture to 〔148 Calculation Result〕

〔150〕 End If　▵123

〔151〕 Get 〔TravelMethod〕 Time 　➔ DepartureToDestination　» 152 160 547 1481
• GetDirectionsCustomLocation: 〔NotesAddressString〕
• Destination: 〔Repeat Item’s Location〕

〔152〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔151 DepartureToDestination〕 　➔ C2DMatches　» 153 155 157 162 169
• MatchTextCaseSensitive: false

〔153〕 Count Items in 〔152 C2DMatches〕　»

〔154〕 If 〔153 Count〕 > 1

〔155〕 Get First Item from List 〔152 C2DMatches〕　»

〔156〕 Set Variable C2DHours to 〔155 Item from List〕

〔157〕 Get Last Item from List 〔152 C2DMatches〕　»

〔158〕 Set Variable C2DMinutes to 〔157 Item from List〕

〔159〕 Otherwise

〔160〕 Match Text hour(?:s)? in 〔151 DepartureToDestination〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔161〕 If 〔160 C2DMatches’s text〕 has any value

〔162〕 Get First Item from List 〔152 C2DMatches〕　»

〔163〕 Set Variable C2DHours to 〔162 Item from List〕

〔164〕 Number 0　»

〔165〕 Set Variable C2DMinutes to 〔164 Number〕

〔166〕 Otherwise

〔167〕 Number 0　»

〔168〕 Set Variable C2DHours to 〔167 Number〕

〔169〕 Get First Item from List 〔152 C2DMatches〕　»

〔170〕 Set Variable C2DMinutes to 〔169 Item from List〕

〔171〕 End If

〔172〕 End If　▵159

〔173〕 Calculate 〔C2DHours〕 × 60　»

〔174〕 Calculate 〔173 Calculation Result〕 + 〔C2DMinutes〕　»

〔175〕 Calculate 〔174 Calculation Result〕 + 〔CurrentToDeparture〕　»

〔176〕 Set Variable TravelTime to 〔175 Calculation Result〕

〔177〕 Otherwise　▵109

〔178〕 Comment
CALENDER EVENT NOTES IS BLANK

〔179〕 Get Dictionary from 〔HomeAddress〕 　➔ Home Address Dictionary　» 180 181 182 183 184

〔180〕 Get Dictionary Value for street in 〔179 Home Address Dictionary〕 　➔ home_Street　» 185 187

〔181〕 Get Dictionary Value for city in 〔179 Home Address Dictionary〕 　➔ home_City　» 185 187

〔182〕 Get Dictionary Value for state in 〔179 Home Address Dictionary〕 　➔ home_State　» 185 187

〔183〕 Get Dictionary Value for country in 〔179 Home Address Dictionary〕 　➔ home_Country　» 185 187

〔184〕 Get Dictionary Value for postcode in 〔179 Home Address Dictionary〕 　➔ home_Postcode　» 185 187

〔185〕 If All are true　〔180 home_Street〕 has any value　〔181 home_City〕 has any value　〔182 home_State〕 has any value　〔183 home_Country〕 has any value　〔184 home_Postcode〕 has any value

〔186〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED

〔187〕 If All are true　〔107 Current Location’s Street〕 is 〔180 home_Street〕　〔107 Current Location’s City〕 is 〔181 home_City〕　〔107 Current Location’s State〕 is 〔182 home_State〕　〔107 Current Location’s Country〕 is 〔183 home_Country〕　〔107 Current Location’s ZIP Code〕 is 〔184 home_Postcode〕

〔188〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED -> HOME ADDRESS IS THE SAME WITH CURRENT LOCATION

〔189〕 Number 0　»

〔190〕 Set Variable CurrentToDeparture to 〔189 Number〕

〔191〕 Otherwise

〔192〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED -> HOME ADDRESS IS NOT THE SAME WITH CURRENT LOCATION

〔193〕 Get 〔TravelMethod〕 Time　» 194 202
• Destination: 〔HomeAddress〕

〔194〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔193 Travel Time〕 　➔ C2DMatches　» 195 197 199 204 211
• MatchTextCaseSensitive: false

〔195〕 Count Items in 〔194 C2DMatches〕　»

〔196〕 If 〔195 Count〕 > 1

〔197〕 Get First Item from List 〔194 C2DMatches〕　»

〔198〕 Set Variable C2DHours to 〔197 Item from List〕

〔199〕 Get Last Item from List 〔194 C2DMatches〕　»

〔200〕 Set Variable C2DMinutes to 〔199 Item from List〕

〔201〕 Otherwise

〔202〕 Match Text hour(?:s)? in 〔193 Travel Time〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔203〕 If 〔202 C2DMatches’s text〕 has any value

〔204〕 Get First Item from List 〔194 C2DMatches〕　»

〔205〕 Set Variable C2DHours to 〔204 Item from List〕

〔206〕 Number 0　»

〔207〕 Set Variable C2DMinutes to 〔206 Number〕

〔208〕 Otherwise

〔209〕 Number 0　»

〔210〕 Set Variable C2DHours to 〔209 Number〕

〔211〕 Get First Item from List 〔194 C2DMatches〕　»

〔212〕 Set Variable C2DMinutes to 〔211 Item from List〕

〔213〕 End If

〔214〕 End If　▵201

〔215〕 Calculate 〔C2DHours〕 × 60　»

〔216〕 Calculate 〔215 Calculation Result〕 + 〔C2DMinutes〕　»

〔217〕 Set Variable CurrentToDeparture to 〔216 Calculation Result〕

〔218〕 End If　▵191

〔219〕 Get 〔TravelMethod〕 Time 　➔ DepartureToDestination　» 220 228
• GetDirectionsCustomLocation: 〔HomeAddress〕
• Destination: 〔Repeat Item’s Location〕

〔220〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔219 DepartureToDestination〕 　➔ C2DMatches　» 221 223 225 230 237
• MatchTextCaseSensitive: false

〔221〕 Count Items in 〔220 C2DMatches〕　»

〔222〕 If 〔221 Count〕 > 1

〔223〕 Get First Item from List 〔220 C2DMatches〕　»

〔224〕 Set Variable C2DHours to 〔223 Item from List〕

〔225〕 Get Last Item from List 〔220 C2DMatches〕　»

〔226〕 Set Variable C2DMinutes to 〔225 Item from List〕

〔227〕 Otherwise

〔228〕 Match Text hour(?:s)? in 〔219 DepartureToDestination〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔229〕 If 〔228 C2DMatches’s text〕 has any value

〔230〕 Get First Item from List 〔220 C2DMatches〕　»

〔231〕 Set Variable C2DHours to 〔230 Item from List〕

〔232〕 Number 0　»

〔233〕 Set Variable C2DMinutes to 〔232 Number〕

〔234〕 Otherwise

〔235〕 Number 0　»

〔236〕 Set Variable C2DHours to 〔235 Number〕

〔237〕 Get First Item from List 〔220 C2DMatches〕　»

〔238〕 Set Variable C2DMinutes to 〔237 Item from List〕

〔239〕 End If

〔240〕 End If　▵227

〔241〕 Calculate 〔C2DHours〕 × 60　»

〔242〕 Calculate 〔241 Calculation Result〕 + 〔C2DMinutes〕　»

〔243〕 Calculate 〔242 Calculation Result〕 + 〔CurrentToDeparture〕　»

〔244〕 Set Variable TravelTime to 〔243 Calculation Result〕

〔245〕 Otherwise　▵185

〔246〕 Text
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS NOT MAINTAINED

〔247〕 Get 〔TravelMethod〕 Time　» 248 256
• Destination: 〔Repeat Item’s Location〕

〔248〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔247 Travel Time〕 　➔ C2DMatches　» 249 251 253 258 265
• MatchTextCaseSensitive: false

〔249〕 Count Items in 〔248 C2DMatches〕　»

〔250〕 If 〔249 Count〕 > 1

〔251〕 Get First Item from List 〔248 C2DMatches〕　»

〔252〕 Set Variable C2DHours to 〔251 Item from List〕

〔253〕 Get Last Item from List 〔248 C2DMatches〕　»

〔254〕 Set Variable C2DMinutes to 〔253 Item from List〕

〔255〕 Otherwise

〔256〕 Match Text hour(?:s)? in 〔247 Travel Time〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔257〕 If 〔256 C2DMatches’s text〕 has any value

〔258〕 Get First Item from List 〔248 C2DMatches〕　»

〔259〕 Set Variable C2DHours to 〔258 Item from List〕

〔260〕 Number 0　»

〔261〕 Set Variable C2DMinutes to 〔260 Number〕

〔262〕 Otherwise

〔263〕 Number 0　»

〔264〕 Set Variable C2DHours to 〔263 Number〕

〔265〕 Get First Item from List 〔248 C2DMatches〕　»

〔266〕 Set Variable C2DMinutes to 〔265 Item from List〕

〔267〕 End If

〔268〕 End If　▵255

〔269〕 Calculate 〔C2DHours〕 × 60　»

〔270〕 Calculate 〔269 Calculation Result〕 + 〔C2DMinutes〕　»

〔271〕 Set Variable TravelTime to 〔270 Calculation Result〕

〔272〕 End If　▵245

〔273〕 End If　▵177

〔274〕 Otherwise　▵106

〔275〕 Number 0　»

〔276〕 Set Variable TravelTime to 〔275 Number〕

〔277〕 End If

〔278〕 Calculate 〔TravelTime〕 + 〔ExtraTime〕　»

〔279〕 Adjust Subtract Date 〔Repeat Item’s Start Date〕 　➔ Supposed Alarm Time　» 280 283 286 289 296 312 314 315 333 338 341
• Duration: 〔278 Calculation Result〕 min

〔280〕 Dictionary 　➔ Alarm Label Dictionary　» 312 317 333
{  "Event": "〔Repeat Item〕",
   "From": "〔Repeat Item’s Start Date〕",
   "To": "〔Repeat Item’s End Date〕",
   "Location": "〔Repeat Item’s Location〕",
   "AlarmTime": "〔279 Supposed Alarm Time〕"
}

〔281〕 Date Current Date 　➔ Current Date　» 282 283 314

〔282〕 Adjust Add Date 〔281 Current Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"dd MMM yyyy"}〕 　➔ 1 day after　» 296 315
• Duration: "1" days

〔283〕 If 〔279 Supposed Alarm Time〕 is 〔281 Current Date〕

〔284〕 Comment
supposed alarm time is exactly 12:00am

〔285〕 If 〔Repeat Item’s Location〕 has any value

〔286〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 at 〔Repeat Item’s Location〕 which  was supposed to get ready at 〔279 Supposed Alarm Time〕. Please check.

〔287〕 Set Variable Text to 〔286 Text〕

〔288〕 Otherwise

〔289〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 which  was supposed to get ready at 〔279 Supposed Alarm Time〕. Please check.

〔290〕 Set Variable Text to 〔289 Text〕

〔291〕 End If

〔292〕 Show Alert 〔Text〕

〔293〕 Show Notification 〔Text〕

〔294〕 Speak Text
• Text: 〔Text〕

〔295〕 Otherwise　▵283

〔296〕 If 〔279 Supposed Alarm Time〕 is 〔282 1 day after〕

〔297〕 Find Alarm All Alarm　» 298 299

〔298〕 If 〔297 Alarms〕 has any value

〔299〕 Repeat[2] with Each in 〔297 Alarms〕

〔300〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ AlarmLabelDictionary　» 301 302 304

〔301〕 Get Dictionary Value for Event in 〔300 AlarmLabelDictionary〕 　➔ Event　» 306

〔302〕 Get Dictionary Value for From in 〔300 AlarmLabelDictionary〕 　➔ From　»

〔303〕 Get Dates from 〔302 From〕 　➔ FromDate　» 306

〔304〕 Get Dictionary Value for To in 〔300 AlarmLabelDictionary〕 　➔ To　»

〔305〕 Get Dates from 〔304 To〕 　➔ ToDate　»

〔306〕 If All are true　〔301 Event’s Name〕 is 〔Repeat Item〕　〔303 FromDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔Repeat Item’s Start Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕　〔305 ToDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is • ConditionalActionString
〔Repeat Item’s End Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕• Date
〔Repeat Item’s End Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕

〔307〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔308〕 End If

〔309〕 End Repeat[2] with Each　▵299

〔310〕 End If　▵298

〔311〕 Comment
since this will be triggered at 12:00 am each day, when the supposed alarm time is 12:00 am in the next day, you can set alarm now

〔312〕 Add Alarm for 〔279 Supposed Alarm Time〕 called 〔280 Alarm Label Dictionary〕

〔313〕 Otherwise　▵296

〔314〕 If 〔279 Supposed Alarm Time〕 > 〔281 Current Date〕

〔315〕 If 〔279 Supposed Alarm Time〕 > 〔282 1 day after〕

〔316〕 Comment
when the time is other than 12:00 am of then next day, you cannot set alarm yet. If set, it will be today. For example, triggering time 2025-4-8 12:00 am, the supposed alarm time is 2025-4-9 08:00 am, if you set an alarm at 08:00 at 2025-4-8 12:00 am, it will alarm at 2025-4-8 08:00 am instead. So we need to record the supposed alarm time and trigger next day.

〔317〕 Set Variable Event to 〔280 Alarm Label Dictionary〕

〔318〕 Otherwise

〔319〕 Find Alarm All Alarm　» 320 321
• ContentItemFilter: {  "Value": {
      "WFActionParameterFilterPrefix": 1,
      "WFActionParameterFilterTemplates": [],
      "WFContentPredicateBoundedDate": false
   },
   "WFSerializationType": "WFContentPredicateTableTemplate"
}

〔320〕 If 〔319 Alarms〕 has any value

〔321〕 Repeat[2] with Each in 〔319 Alarms〕

〔322〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ AlarmLabelDictionary　» 323 324 326

〔323〕 Get Dictionary Value for Event in 〔322 AlarmLabelDictionary〕 　➔ Event　» 328

〔324〕 Get Dictionary Value for From in 〔322 AlarmLabelDictionary〕 　➔ From　»

〔325〕 Get Dates from 〔324 From〕 　➔ FromDate　» 328

〔326〕 Get Dictionary Value for To in 〔322 AlarmLabelDictionary〕 　➔ To　»

〔327〕 Get Dates from 〔326 To〕 　➔ ToDate　»

〔328〕 If All are true　〔323 Event’s Name〕 is 〔Repeat Item〕　〔325 FromDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔Repeat Item’s Start Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕　〔327 ToDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔Repeat Item’s End Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕

〔329〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔330〕 End If

〔331〕 End Repeat[2] with Each　▵321

〔332〕 End If　▵320

〔333〕 Add Alarm for 〔279 Supposed Alarm Time〕 called 〔280 Alarm Label Dictionary〕

〔334〕 End If　▵318

〔335〕 Otherwise　▵314

〔336〕 Comment
the supposed alarm time passed

〔337〕 If 〔Repeat Item’s Location〕 has any value

〔338〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 at 〔Repeat Item’s Location〕 which  was supposed to get ready at 〔279 Supposed Alarm Time〕. Please check.

〔339〕 Set Variable Text to 〔338 Text〕

〔340〕 Otherwise

〔341〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 which  was supposed to get ready at 〔279 Supposed Alarm Time〕. Please check.

〔342〕 Set Variable Text to 〔341 Text〕

〔343〕 End If

〔344〕 Show Alert 〔Text〕

〔345〕 Show Notification 〔Text〕

〔346〕 Speak Text
• Text: 〔Text〕

〔347〕 End If　▵335

〔348〕 End If　▵313

〔349〕 End If　▵295

〔350〕 Text
〔Event〕

〔351〕 If 〔Event〕 has any value

〔352〕 Get Dictionary from 〔Event〕　» 365

〔353〕 Text　»

〔354〕 Set Variable TextList to 〔353 Text〕

〔355〕 Add 〔Event〕 to Variable TextList

〔356〕 Get File at Path Smart Calendar Reminder/Future Alarms.txt from Folder　» 357 358
• FileErrorIfNotFound: false

〔357〕 If 〔356 File’s File Size〕 has any value

〔358〕 Split Text 〔356 File〕 by New Lines　»

〔359〕 Repeat[2] with Each in 〔358 Split Text〕

〔360〕 Get Dictionary from 〔Repeat Item 2〕　» 361 362 363 364

〔361〕 Get Dictionary Value for Event in 〔360 Dictionary〕 　➔ Event　» 365

〔362〕 Get Dictionary Value for From in 〔360 Dictionary〕 　➔ From　» 365

〔363〕 Get Dictionary Value for To in 〔360 Dictionary〕 　➔ To　» 365

〔364〕 Get Dictionary Value for Location in 〔360 Dictionary〕 　➔ Location　»

〔365〕 If Any are true　〔361 Event’s Name〕 is not 〔352 Dictionary.Event〕　〔362 From’s Name〕 is not 〔352 Dictionary.From〕　〔363 To’s Name〕 is not 〔352 Dictionary.To〕　〔364 Location’s Name〕 is not 〔352 Dictionary.Location〕

〔366〕 Add 〔Repeat Item 2〕 to Variable TextList

〔367〕 End If

〔368〕 End Repeat[2] with Each　▵359

〔369〕 Combine Text 〔TextList〕 with New Lines　»

〔370〕 Save File 〔369 Combined Text〕
• AskWhereToSave: false
• SaveFileOverwrite: true
• FileDestinationPath: Smart Calendar Reminder/Future Alarms.txt

〔371〕 Otherwise　▵357

〔372〕 Text　»

〔Event〕

〔373〕 Save File 〔372 Text〕
• AskWhereToSave: false
• FileDestinationPath: Smart Calendar Reminder/Future Alarms.txt

〔374〕 End If

〔375〕 End If　▵351

〔376〕 End Repeat with Each　▵105

〔377〕 End If　▵104

〔378〕 Get File at Path Smart Calendar Reminder/Future Alarms.txt from Folder　» 379 380
• FileErrorIfNotFound: false

〔379〕 If 〔378 File’s File Size〕 has any value

〔380〕 Split Text 〔378 File〕 by New Lines　»

〔381〕 Repeat with Each in 〔380 Split Text〕

〔382〕 Get Dictionary from 〔Repeat Item〕　» 383 384 394 405

〔383〕 If 〔382 Dictionary〕 has any value

〔384〕 Get Dates from 〔382 Dictionary.AlarmTime〕　» 385 405

〔385〕 If 〔384 Dates〕 is today

〔386〕 Find Alarm All Alarm　» 387 388
• ContentItemFilter: {  "Value": {
      "WFActionParameterFilterPrefix": 1,
      "WFContentPredicateBoundedDate": false,
      "WFActionParameterFilterTemplates": []
   },
   "WFSerializationType": "WFContentPredicateTableTemplate"
}

〔387〕 If 〔386 Alarms〕 has any value

〔388〕 Repeat[2] with Each in 〔386 Alarms〕

〔389〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ Alarm_Label_Dictionary　» 390 392 400

〔390〕 Get Dictionary Value for From in 〔389 Alarm_Label_Dictionary〕　»

〔391〕 Get Dates from 〔390 Dictionary Value〕 　➔ From_Date　» 400

〔392〕 Get Dictionary Value for To in 〔389 Alarm_Label_Dictionary〕　»

〔393〕 Get Dates from 〔392 Dictionary Value〕 　➔ To_Date　» 400

〔394〕 Get Dictionary from 〔382 Dictionary.Event〕 　➔ FutureAlarmLabelDictionary　» 395 396 398

〔395〕 Get Dictionary Value for Event in 〔394 FutureAlarmLabelDictionary〕 　➔ Event　» 400

〔396〕 Get Dictionary Value for From in 〔394 FutureAlarmLabelDictionary〕 　➔ From　»

〔397〕 Get Dates from 〔396 From〕 　➔ FromDate　» 400

〔398〕 Get Dictionary Value for To in 〔394 FutureAlarmLabelDictionary〕 　➔ To　»

〔399〕 Get Dates from 〔398 To〕 　➔ ToDate　»

〔400〕 If All are true　〔395 Event’s Name〕 is 〔389 Alarm_Label_Dictionary.Event〕　〔397 FromDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔391 From_Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕　〔399 ToDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔393 To_Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕

〔401〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔402〕 End If

〔403〕 End Repeat[2] with Each　▵388

〔404〕 End If　▵387

〔405〕 Add Alarm for 〔384 Dates〕 called 〔382 Dictionary.Event〕

〔406〕 End If　▵385

〔407〕 End If　▵383

〔408〕 End Repeat with Each　▵381

〔409〕 End If　▵379

〔410〕 End If　▵92

〔411〕 If 〔Shortcut Input as Number〕 is 2

〔412〕 Comment
1-Hour Event Processor
*Real-time event handler for immediate notifications:

Processes events within next 60 minutes

Provides most accurate travel estimates

Recommended for hourly automation*

〔413〕 Get File at Path Smart Calendar Reminder/aboutme.txt from Folder　»
• FileErrorIfNotFound: false

〔414〕 Get Dictionary from 〔413 File〕　» 415 418 419

〔415〕 Get Dictionary from 〔414 Dictionary.HomeAddress〕　»

〔416〕 Text　»
〔415 Dictionary.street〕 〔415 Dictionary.city〕 〔415 Dictionary.state〕 〔415 Dictionary.postcode〕 〔415 Dictionary.country〕

〔417〕 Set Variable Home_Address to 〔416 Text〕

〔418〕 Set Variable Travel_Method to 〔414 Dictionary.TravelMethod〕

〔419〕 Get Dictionary Value for ExtraTime in 〔414 Dictionary〕　»

〔420〕 Get Numbers from 〔419 Dictionary Value〕　»

〔421〕 Set Variable Extra_Time to 〔420 Numbers〕

〔422〕 Find Calendar Events All Calendar Events where　» 423 424 425 632
• ContentItemSortProperty: Start Date
• ContentItemSortOrder: Oldest First
• ContentItemFilter: • All the following are true
Start Date is in the next 1 hours
Is All Day
Canceled is {"Bool":{"Value":false,"WFSerializationType":"WFBooleanSubstitutableState"}}

〔423〕 If 〔422 Calendar Events〕 has any value

〔424〕 Count Items in 〔422 Calendar Events〕　» 636 644

〔425〕 Repeat with Each in 〔422 Calendar Events〕

〔426〕 If 〔Repeat Item’s Location〕 has any value

〔427〕 Get Current Location　» 438 444 506
• Accuracy: Best

〔428〕 If All are true　〔Repeat Item’s Notes〕 has any value　〔Repeat Item’s Notes〕 begins with {　〔Repeat Item’s Notes〕 ends with }

〔429〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY

〔430〕 Get Dictionary from 〔Repeat Item’s Notes〕 　➔ NotesAddressDictionary　» 431 432 433 434 435

〔431〕 Set Variable CalendarNotesStreet to 〔430 NotesAddressDictionary.Street〕

〔432〕 Set Variable CalendarNotesCity to 〔430 NotesAddressDictionary.City〕

〔433〕 Set Variable CalendarNotesState to 〔430 NotesAddressDictionary.State〕

〔434〕 Set Variable CalendarNotesRegion to 〔430 NotesAddressDictionary.Country〕

〔435〕 Set Variable CalendarNotesZIPCode to 〔430 NotesAddressDictionary.Postcode〕

〔436〕 Text　»
〔CalendarNotesStreet〕 〔CalendarNotesCity〕 〔CalendarNotesState〕 〔CalendarNotesZIPCode〕 〔CalendarNotesRegion〕

〔437〕 Set Variable NotesAddressString to 〔436 Text〕

〔438〕 If All are true　〔427 Current Location’s Street〕 is 〔CalendarNotesStreet〕　〔427 Current Location’s City〕 is 〔CalendarNotesCity〕　〔427 Current Location’s State〕 is 〔CalendarNotesState〕　〔427 Current Location’s Country〕 is 〔CalendarNotesRegion〕　〔427 Current Location’s ZIP Code〕 is 〔CalendarNotesZIPCode〕

〔439〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY -> CALENDAR EVENT ADDRESS IS THE SAME WITH CURRENT LOCATION

〔440〕 Number 0　»

〔441〕 Set Variable CurrentToDeparture to 〔440 Number〕

〔442〕 Otherwise

〔443〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY -> CALENDAR EVENT ADDRESS IS NOT THE SAME WITH CURRENT LOCATION

〔444〕 Get 〔TravelMethod〕 Time　» 445 453
• GetDirectionsCustomLocation: 〔427 Current Location〕
• Destination: 〔NotesAddressString〕

〔445〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔444 Travel Time〕 　➔ C2DMatches　» 446 448 450 455 462
• MatchTextCaseSensitive: false

〔446〕 Count Items in 〔445 C2DMatches〕　»

〔447〕 If 〔446 Count〕 > 1

〔448〕 Get First Item from List 〔445 C2DMatches〕　»

〔449〕 Set Variable C2DHours to 〔448 Item from List〕

〔450〕 Get Last Item from List 〔445 C2DMatches〕　»

〔451〕 Set Variable C2DMinutes to 〔450 Item from List〕

〔452〕 Otherwise

〔453〕 Match Text hour(?:s)? in 〔444 Travel Time〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔454〕 If 〔453 C2DMatches’s text〕 has any value

〔455〕 Get First Item from List 〔445 C2DMatches〕　»

〔456〕 Set Variable C2DHours to 〔455 Item from List〕

〔457〕 Number 0　»

〔458〕 Set Variable C2DMinutes to 〔457 Number〕

〔459〕 Otherwise

〔460〕 Number 0　»

〔461〕 Set Variable C2DHours to 〔460 Number〕

〔462〕 Get First Item from List 〔445 C2DMatches〕　»

〔463〕 Set Variable C2DMinutes to 〔462 Item from List〕

〔464〕 End If

〔465〕 End If　▵452

〔466〕 Calculate 〔C2DHours〕 × 60　»

〔467〕 Calculate 〔466 Calculation Result〕 + 〔C2DMinutes〕　»

〔468〕 Set Variable CurrentToDeparture to 〔467 Calculation Result〕

〔469〕 End If　▵442

〔470〕 Get 〔TravelMethod〕 Time 　➔ DepartureToDestination　» 471 479
• GetDirectionsCustomLocation: 〔NotesAddressString〕
• Destination: 〔Repeat Item’s Location〕

〔471〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔470 DepartureToDestination〕 　➔ C2DMatches　» 472 474 476 481 488
• MatchTextCaseSensitive: false

〔472〕 Count Items in 〔471 C2DMatches〕　»

〔473〕 If 〔472 Count〕 > 1

〔474〕 Get First Item from List 〔471 C2DMatches〕　»

〔475〕 Set Variable C2DHours to 〔474 Item from List〕

〔476〕 Get Last Item from List 〔471 C2DMatches〕　»

〔477〕 Set Variable C2DMinutes to 〔476 Item from List〕

〔478〕 Otherwise

〔479〕 Match Text hour(?:s)? in 〔470 DepartureToDestination〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔480〕 If 〔479 C2DMatches’s text〕 has any value

〔481〕 Get First Item from List 〔471 C2DMatches〕　»

〔482〕 Set Variable C2DHours to 〔481 Item from List〕

〔483〕 Number 0　»

〔484〕 Set Variable C2DMinutes to 〔483 Number〕

〔485〕 Otherwise

〔486〕 Number 0　»

〔487〕 Set Variable C2DHours to 〔486 Number〕

〔488〕 Get First Item from List 〔471 C2DMatches〕　»

〔489〕 Set Variable C2DMinutes to 〔488 Item from List〕

〔490〕 End If

〔491〕 End If　▵478

〔492〕 Calculate 〔C2DHours〕 × 60　»

〔493〕 Calculate 〔492 Calculation Result〕 + 〔C2DMinutes〕　»

〔494〕 Calculate 〔493 Calculation Result〕 + 〔CurrentToDeparture〕　»

〔495〕 Set Variable TravelTime to 〔494 Calculation Result〕

〔496〕 Otherwise　▵428

〔497〕 Comment
CALENDER EVENT NOTES IS BLANK

〔498〕 Get Dictionary from 〔HomeAddress〕 　➔ home_address_dictionary　» 499 500 501 502 503

〔499〕 Get Dictionary Value for street in 〔498 home_address_dictionary〕 　➔ HomeStreet　» 504 506

〔500〕 Get Dictionary Value for city in 〔498 home_address_dictionary〕 　➔ HomeCity　» 504 506

〔501〕 Get Dictionary Value for state in 〔498 home_address_dictionary〕 　➔ HomeState　» 504 506

〔502〕 Get Dictionary Value for country in 〔498 home_address_dictionary〕 　➔ HomeCountry　» 504 506

〔503〕 Get Dictionary Value for postcode in 〔498 home_address_dictionary〕 　➔ HomePostcode　» 504 506

〔504〕 If All are true　〔499 HomeStreet〕 has any value　〔500 HomeCity〕 has any value　〔501 HomeState〕 has any value　〔502 HomeCountry〕 has any value　〔503 HomePostcode〕 has any value

〔505〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED

〔506〕 If All are true　〔427 Current Location’s Street〕 is 〔499 HomeStreet〕　〔427 Current Location’s City〕 is 〔500 HomeCity〕　〔427 Current Location’s State〕 is 〔501 HomeState〕　〔427 Current Location’s Country〕 is 〔502 HomeCountry〕　〔427 Current Location’s ZIP Code〕 is 〔503 HomePostcode〕

〔507〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED -> HOME ADDRESS IS THE SAME WITH CURRENT LOCATION

〔508〕 Number 0　»

〔509〕 Set Variable CurrentToDeparture to 〔508 Number〕

〔510〕 Otherwise

〔511〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED -> HOME ADDRESS IS NOT THE SAME WITH CURRENT LOCATION

〔512〕 Get 〔TravelMethod〕 Time　» 513 521
• Destination: 〔HomeAddress〕

〔513〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔512 Travel Time〕 　➔ C2DMatches　» 514 516 518 523 530
• MatchTextCaseSensitive: false

〔514〕 Count Items in 〔513 C2DMatches〕　»

〔515〕 If 〔514 Count〕 > 1

〔516〕 Get First Item from List 〔513 C2DMatches〕　»

〔517〕 Set Variable C2DHours to 〔516 Item from List〕

〔518〕 Get Last Item from List 〔513 C2DMatches〕　»

〔519〕 Set Variable C2DMinutes to 〔518 Item from List〕

〔520〕 Otherwise

〔521〕 Match Text hour(?:s)? in 〔512 Travel Time〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔522〕 If 〔521 C2DMatches’s text〕 has any value

〔523〕 Get First Item from List 〔513 C2DMatches〕　»

〔524〕 Set Variable C2DHours to 〔523 Item from List〕

〔525〕 Number 0　»

〔526〕 Set Variable C2DMinutes to 〔525 Number〕

〔527〕 Otherwise

〔528〕 Number 0　»

〔529〕 Set Variable C2DHours to 〔528 Number〕

〔530〕 Get First Item from List 〔513 C2DMatches〕　»

〔531〕 Set Variable C2DMinutes to 〔530 Item from List〕

〔532〕 End If

〔533〕 End If　▵520

〔534〕 Calculate 〔C2DHours〕 × 60　»

〔535〕 Calculate 〔534 Calculation Result〕 + 〔C2DMinutes〕　»

〔536〕 Set Variable CurrentToDeparture to 〔535 Calculation Result〕

〔537〕 End If　▵510

〔538〕 Get 〔TravelMethod〕 Time 　➔ DepartureToDestination　»
• GetDirectionsCustomLocation: 〔HomeAddress〕
• Destination: 〔Repeat Item’s Location〕

〔539〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔538 DepartureToDestination〕 　➔ C2DMatches　» 540 542 544 549 556
• MatchTextCaseSensitive: false

〔540〕 Count Items in 〔539 C2DMatches〕　»

〔541〕 If 〔540 Count〕 > 1

〔542〕 Get First Item from List 〔539 C2DMatches〕　»

〔543〕 Set Variable C2DHours to 〔542 Item from List〕

〔544〕 Get Last Item from List 〔539 C2DMatches〕　»

〔545〕 Set Variable C2DMinutes to 〔544 Item from List〕

〔546〕 Otherwise

〔547〕 Match Text hour(?:s)? in 〔151 DepartureToDestination〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔548〕 If 〔547 C2DMatches’s text〕 has any value

〔549〕 Get First Item from List 〔539 C2DMatches〕　»

〔550〕 Set Variable C2DHours to 〔549 Item from List〕

〔551〕 Number 0　»

〔552〕 Set Variable C2DMinutes to 〔551 Number〕

〔553〕 Otherwise

〔554〕 Number 0　»

〔555〕 Set Variable C2DHours to 〔554 Number〕

〔556〕 Get First Item from List 〔539 C2DMatches〕　»

〔557〕 Set Variable C2DMinutes to 〔556 Item from List〕

〔558〕 End If

〔559〕 End If　▵546

〔560〕 Calculate 〔C2DHours〕 × 60　»

〔561〕 Calculate 〔560 Calculation Result〕 + 〔C2DMinutes〕　»

〔562〕 Calculate 〔561 Calculation Result〕 + 〔CurrentToDeparture〕　»

〔563〕 Set Variable TravelTime to 〔562 Calculation Result〕

〔564〕 Otherwise　▵504

〔565〕 Text
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS NOT MAINTAINED

〔566〕 Get 〔TravelMethod〕 Time　» 567 575
• Destination: 〔Repeat Item’s Location〕

〔567〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔566 Travel Time〕 　➔ C2DMatches　» 568 570 572 577 584
• MatchTextCaseSensitive: false

〔568〕 Count Items in 〔567 C2DMatches〕　»

〔569〕 If 〔568 Count〕 > 1

〔570〕 Get First Item from List 〔567 C2DMatches〕　»

〔571〕 Set Variable C2DHours to 〔570 Item from List〕

〔572〕 Get Last Item from List 〔567 C2DMatches〕　»

〔573〕 Set Variable C2DMinutes to 〔572 Item from List〕

〔574〕 Otherwise

〔575〕 Match Text hour(?:s)? in 〔566 Travel Time〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔576〕 If 〔575 C2DMatches’s text〕 has any value

〔577〕 Get First Item from List 〔567 C2DMatches〕　»

〔578〕 Set Variable C2DHours to 〔577 Item from List〕

〔579〕 Number 0　»

〔580〕 Set Variable C2DMinutes to 〔579 Number〕

〔581〕 Otherwise

〔582〕 Number 0　»

〔583〕 Set Variable C2DHours to 〔582 Number〕

〔584〕 Get First Item from List 〔567 C2DMatches〕　»

〔585〕 Set Variable C2DMinutes to 〔584 Item from List〕

〔586〕 End If

〔587〕 End If　▵574

〔588〕 Calculate 〔C2DHours〕 × 60　»

〔589〕 Calculate 〔588 Calculation Result〕 + 〔C2DMinutes〕　»

〔590〕 Set Variable TravelTime to 〔589 Calculation Result〕

〔591〕 End If　▵564

〔592〕 End If　▵496

〔593〕 Otherwise　▵426

〔594〕 Number 0　»

〔595〕 Set Variable TravelTime to 〔594 Number〕

〔596〕 End If

〔597〕 Find Alarm All Alarm　» 598 599
• ContentItemFilter: {  "Value": {
      "WFActionParameterFilterPrefix": 1,
      "WFContentPredicateBoundedDate": false,
      "WFActionParameterFilterTemplates": []
   },
   "WFSerializationType": "WFContentPredicateTableTemplate"
}

〔598〕 If 〔597 Alarms〕 has any value

〔599〕 Repeat[2] with Each in 〔597 Alarms〕

〔600〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ AlarmLabelDictionary　» 601 602 604

〔601〕 Get Dictionary Value for Event in 〔600 AlarmLabelDictionary〕 　➔ Event　» 606

〔602〕 Get Dictionary Value for From in 〔600 AlarmLabelDictionary〕 　➔ From　»

〔603〕 Get Dates from 〔602 From〕 　➔ FromDate　» 606

〔604〕 Get Dictionary Value for To in 〔600 AlarmLabelDictionary〕 　➔ To　»

〔605〕 Get Dates from 〔604 To〕 　➔ ToDate　»

〔606〕 If All are true　〔601 Event’s Name〕 is 〔Repeat Item〕　〔603 FromDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔Repeat Item’s Start Date{"Date Style":"Custom","WFDateFormat":"HH:mm","WFISO8601IncludeTime":false}〕　〔605 ToDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔Repeat Item’s End Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕

〔607〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔608〕 End If

〔609〕 End Repeat[2] with Each　▵599

〔610〕 End If　▵598

〔611〕 Calculate 〔TravelTime〕 + 〔Extra_Time〕　»

〔612〕 Adjust Subtract Date 〔Repeat Item’s Start Date〕 　➔ Supposed_Alarm_Time　» 614 616 619 626 627
• Duration: 〔611 Calculation Result〕 min

〔613〕 Date Current Date　»

〔614〕 If Any are true　〔612 Supposed_Alarm_Time〕 < 〔613 Date〕　〔612 Supposed_Alarm_Time〕 is 〔613 Date〕

〔615〕 If 〔Repeat Item’s Location〕 has any value

〔616〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 at 〔Repeat Item’s Location〕  which  was supposed to get ready at 〔612 Supposed_Alarm_Time〕. Please check.

〔617〕 Set Variable Text to 〔616 Text〕

〔618〕 Otherwise

〔619〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 which  was supposed to get ready at 〔612 Supposed_Alarm_Time〕. Please check.

〔620〕 Set Variable Text to 〔619 Text〕

〔621〕 End If

〔622〕 Show Alert 〔Text〕

〔623〕 Show Notification 〔Text〕

〔624〕 Speak Text
• Text: 〔Text〕

〔625〕 Otherwise　▵614

〔626〕 Dictionary　»
{  "Event": "〔Repeat Item〕",
   "From": "〔Repeat Item’s Start Date〕",
   "To": "〔Repeat Item’s End Date〕",
   "Location": "〔Repeat Item’s Location〕",
   "AlarmTime": "〔612 Supposed_Alarm_Time〕"
}

〔627〕 Add Alarm for 〔612 Supposed_Alarm_Time〕 called 〔626 Dictionary〕

〔628〕 End If

〔629〕 End Repeat with Each　▵425

〔630〕 Number 3　»

〔631〕 Repeat 〔630 Number〕 Times

〔632〕 Repeat[2] with Each in 〔422 Calendar Events〕

〔633〕 Format Date 〔Repeat Item 2’s Start Date〕　» 637 640 645 648
• DateFormatStyle: None

〔634〕 Format Date 〔Repeat Item 2’s End Date〕　» 637 640 645 648
• DateFormatStyle: None

〔635〕 If 〔Repeat Item 2’s Location〕 has any value

〔636〕 If 〔424 Count〕 > 1

〔637〕 Text　»
Event 〔Repeat Index 2〕 〔Repeat Item 2〕 from 〔633 Formatted Date〕 to 〔634 Formatted Date〕 at 〔Repeat Item 2’s Location〕

〔638〕 Set Variable Text to 〔637 Text〕

〔639〕 Otherwise

〔640〕 Text　»
Event  〔Repeat Item 2〕 from 〔633 Formatted Date〕 to 〔634 Formatted Date〕 at 〔Repeat Item 2’s Location〕

〔641〕 Set Variable Text to 〔640 Text〕

〔642〕 End If

〔643〕 Otherwise　▵635

〔644〕 If 〔424 Count〕 > 1

〔645〕 Text　»
Event 〔Repeat Index 2〕 〔Repeat Item 2〕 from 〔633 Formatted Date〕 to 〔634 Formatted Date〕

〔646〕 Set Variable Text to 〔645 Text〕

〔647〕 Otherwise

〔648〕 Text　»
Event  〔Repeat Item 2〕 from 〔633 Formatted Date〕 to 〔634 Formatted Date〕

〔649〕 Set Variable Text to 〔648 Text〕

〔650〕 End If

〔651〕 End If　▵643

〔652〕 Speak Text
• Text: 〔Text〕

〔653〕 Wait 1 seconds

〔654〕 End Repeat[2] with Each　▵632

〔655〕 End Repeat Times　▵631

〔656〕 End If　▵423

〔657〕 End If　▵411

〔658〕 If 〔Shortcut Input as Number〕 is 3

〔659〕 Comment
Alarm Activation Handler
Triggered by alarm events - manages notification flow

〔660〕 Dictionary　»
{  "stop": "no" }

〔661〕 Text　»
〔660 Dictionary〕

〔662〕 Save File 〔661 Text〕
• AskWhereToSave: false
• SaveFileOverwrite: true
• FileDestinationPath: Smart Calendar Reminder/stopflag.txt

〔663〕 Date Current Date　» 682

〔664〕 Find Alarm All Alarm　» 665 674
• ContentItemFilter: {  "Value": {
      "WFActionParameterFilterPrefix": 1,
      "WFContentPredicateBoundedDate": false,
      "WFActionParameterFilterTemplates": []
   },
   "WFSerializationType": "WFContentPredicateTableTemplate"
}

〔665〕 If 〔664 Alarms〕 has any value

〔666〕 Number 10000　» 667 668

〔667〕 Repeat 〔666 Number〕 Times

〔668〕 Get File at Path Smart Calendar Reminder/stopflag.txt from Folder　»
• FileErrorIfNotFound: false
• File: 〔666 Number〕

〔669〕 Get Dictionary from 〔668 File〕　»

〔670〕 Get Dictionary Value for stop in 〔669 Dictionary〕　»

〔671〕 If 〔670 Dictionary Value’s Name〕 is yes

〔672〕 Stop This Shortcut

〔673〕 End If

〔674〕 Repeat[2] with Each in 〔664 Alarms〕

〔675〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ alarm_label_dictionary　» 676 678 680 685 689 692

〔676〕 Get Dictionary Value for From in 〔675 alarm_label_dictionary〕　»

〔677〕 Get Dates from 〔676 Dictionary Value〕 　➔ From　» 683

〔678〕 Get Dictionary Value for To in 〔675 alarm_label_dictionary〕　»

〔679〕 Get Dates from 〔678 Dictionary Value〕 　➔ To　» 684

〔680〕 Get Dictionary Value for AlarmTime in 〔675 alarm_label_dictionary〕　»

〔681〕 Get Dates from 〔680 Dictionary Value〕 　➔ AlarmTime　»

〔682〕 If All are true　〔681 AlarmTime{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH"}〕 is 〔663 Date{"Date Style":"Custom","WFDateFormat":"HH","WFISO8601IncludeTime":false}〕　〔681 AlarmTime{"Date Style":"Custom","WFDateFormat":"mm","WFISO8601IncludeTime":false}〕 is 〔663 Date{"Date Style":"Custom","WFDateFormat":"mm","WFISO8601IncludeTime":false}〕

〔683〕 Format Date 〔677 From’s Time〕　» 689 692

〔684〕 Format Date 〔679 To’s Time〕　» 689 692

〔685〕 Get Dictionary Value for Location in 〔675 alarm_label_dictionary〕　»

〔686〕 Text　»
〔685 Dictionary Value〕

〔687〕 Count Characters in 〔686 Text〕　»

〔688〕 If 〔687 Count〕 > • ConditionalActionString
""• NumberValue
0

〔689〕 Text　»
Prepare for 〔675 alarm_label_dictionary.Event〕 from 〔683 Formatted Date〕 to 〔684 Formatted Date〕 at 〔675 alarm_label_dictionary.Location〕

〔690〕 Set Variable Text to 〔689 Text〕

〔691〕 Otherwise

〔692〕 Text　»
Prepare for 〔675 alarm_label_dictionary.Event〕 from 〔683 Formatted Date〕 to 〔684 Formatted Date〕

〔693〕 Set Variable Text to 〔692 Text〕

〔694〕 End If

〔695〕 Speak Text
• Text: 〔Text〕

〔696〕 End If　▵682

〔697〕 End Repeat[2] with Each　▵674

〔698〕 End Repeat Times　▵667

〔699〕 End If　▵665

〔700〕 End If　▵658

〔701〕 If 〔Shortcut Input as Number〕 is 4

〔702〕 Comment
input case 4:
Notification Interrupt System
Stop protocol for voice announcements when any alarm is stopped.

〔703〕 Dictionary　»
{  "stop": "yes" }

〔704〕 Text　»
〔703 Dictionary〕

〔705〕 Save File 〔704 Text〕
• AskWhereToSave: false
• SaveFileOverwrite: true
• FileDestinationPath: Smart Calendar Reminder/stopflag.txt

〔706〕 End If

〔707〕 If 〔Shortcut Input as Number〕 is 5

〔708〕 Comment
*Revolutionizing event management by integrating calendar data with intelligent automation:

Voice announcements for upcoming events

Dynamic alarm calculation (travel + prep time)

Calendar-driven scheduling system
Eliminates manual reminders and ensures perfect timing synchronization*

〔709〕 Get File at Path Smart Calendar Reminder/aboutme.txt from Folder　»
• FileErrorIfNotFound: false

〔710〕 Get Dictionary from 〔709 File〕　» 711 714 715

〔711〕 Get Dictionary from 〔710 Dictionary.HomeAddress〕　»

〔712〕 Text　»
〔711 Dictionary.street〕 〔711 Dictionary.city〕 〔711 Dictionary.state〕 〔711 Dictionary.postcode〕 〔711 Dictionary.country〕\u{space}

〔713〕 Set Variable HomeAddress to 〔712 Text〕

〔714〕 Set Variable TravelMethod to 〔710 Dictionary.TravelMethod〕

〔715〕 Get Dictionary Value for ExtraTime in 〔710 Dictionary〕　»

〔716〕 Get Numbers from 〔715 Dictionary Value〕　»

〔717〕 Set Variable ExtraTime to 〔716 Numbers〕

〔718〕 Find Calendar Events All Calendar Events where　» 719 720
• ContentItemSortProperty: Start Date
• ContentItemSortOrder: Oldest First
• ContentItemFilter: • All the following are true
Start Date is in the next 1 months
Is All Day
Canceled is {"Bool":{"Value":false,"WFSerializationType":"WFBooleanSubstitutableState"}}

〔719〕 If 〔718 Calendar Events〕 has any value

〔720〕 Repeat with Each in 〔718 Calendar Events〕

〔721〕 If 〔Repeat Item’s Location〕 has any value

〔722〕 Get Current Location　» 734 740 802
• Accuracy: Best

〔723〕 Comment
*To specify event-specific departure locations:

1. Create calendar event notes with JSON structure:
{
“Street”: “your departure street”,
“City”: “your departure city”,
“State”: “your departure state”,
“Country”: “your departure country”,
“Postcode”: “your departure postcode”
}
2. System prioritizes these over default locations*

〔724〕 If All are true　〔Repeat Item’s Notes〕 has any value　〔Repeat Item’s Notes〕 begins with {　〔Repeat Item’s Notes〕 ends with }

〔725〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY

〔726〕 Get Dictionary from 〔Repeat Item’s Notes〕 　➔ Notes Address Dictionary　» 727 728 729 730 731

〔727〕 Set Variable Calendar_Notes_Street to 〔726 Notes Address Dictionary.Street〕

〔728〕 Set Variable Calendar_Notes_City to 〔726 Notes Address Dictionary.City〕

〔729〕 Set Variable Calendar_Notes_State to 〔726 Notes Address Dictionary.State〕

〔730〕 Set Variable Calendar_Notes_Region to 〔726 Notes Address Dictionary.Country〕

〔731〕 Set Variable Calendar_Notes_ZIP_Code to 〔726 Notes Address Dictionary.Postcode〕

〔732〕 Text　»
〔Calendar_Notes_Street〕 〔Calendar_Notes_City〕 〔Calendar_Notes_State〕 〔Calendar_Notes_ZIP_Code〕 〔Calendar_Notes_Region〕

〔733〕 Set Variable NotesAddressString to 〔732 Text〕

〔734〕 If All are true　〔722 Current Location’s Street〕 is 〔Calendar_Notes_Street〕　〔722 Current Location’s City〕 is 〔Calendar_Notes_City〕　〔722 Current Location’s State〕 is 〔Calendar_Notes_State〕　〔722 Current Location’s Country〕 is 〔Calendar_Notes_Region〕　〔722 Current Location’s ZIP Code〕 is 〔Calendar_Notes_ZIP_Code〕

〔735〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY -> CALENDAR EVENT ADDRESS IS THE SAME WITH CURRENT LOCATION

〔736〕 Number 0　»

〔737〕 Set Variable CurrentToDeparture to 〔736 Number〕

〔738〕 Otherwise

〔739〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY -> CALENDAR EVENT ADDRESS IS NOT THE SAME WITH CURRENT LOCATION

〔740〕 Get 〔TravelMethod〕 Time　» 741 749
• GetDirectionsCustomLocation: 〔722 Current Location〕
• Destination: 〔NotesAddressString〕

〔741〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔740 Travel Time〕 　➔ C2DMatches　» 742 744 746 751 758
• MatchTextCaseSensitive: false

〔742〕 Count Items in 〔741 C2DMatches〕　»

〔743〕 If 〔742 Count〕 > 1

〔744〕 Get First Item from List 〔741 C2DMatches〕　»

〔745〕 Set Variable C2DHours to 〔744 Item from List〕

〔746〕 Get Last Item from List 〔741 C2DMatches〕　»

〔747〕 Set Variable C2DMinutes to 〔746 Item from List〕

〔748〕 Otherwise

〔749〕 Match Text hour(?:s)? in 〔740 Travel Time〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔750〕 If 〔749 C2DMatches’s text〕 has any value

〔751〕 Get First Item from List 〔741 C2DMatches〕　»

〔752〕 Set Variable C2DHours to 〔751 Item from List〕

〔753〕 Number 0　»

〔754〕 Set Variable C2DMinutes to 〔753 Number〕

〔755〕 Otherwise

〔756〕 Number 0　»

〔757〕 Set Variable C2DHours to 〔756 Number〕

〔758〕 Get First Item from List 〔741 C2DMatches〕　»

〔759〕 Set Variable C2DMinutes to 〔758 Item from List〕

〔760〕 End If

〔761〕 End If　▵748

〔762〕 Calculate 〔C2DHours〕 × 60　»

〔763〕 Calculate 〔762 Calculation Result〕 + 〔C2DMinutes〕　»

〔764〕 Set Variable CurrentToDeparture to 〔763 Calculation Result〕

〔765〕 End If　▵738

〔766〕 Get 〔TravelMethod〕 Time 　➔ DepartureToDestination　» 767 775 843
• GetDirectionsCustomLocation: 〔NotesAddressString〕
• Destination: 〔Repeat Item’s Location〕

〔767〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔766 DepartureToDestination〕 　➔ C2DMatches　» 768 770 772 777 784
• MatchTextCaseSensitive: false

〔768〕 Count Items in 〔767 C2DMatches〕　»

〔769〕 If 〔768 Count〕 > 1

〔770〕 Get First Item from List 〔767 C2DMatches〕　»

〔771〕 Set Variable C2DHours to 〔770 Item from List〕

〔772〕 Get Last Item from List 〔767 C2DMatches〕　»

〔773〕 Set Variable C2DMinutes to 〔772 Item from List〕

〔774〕 Otherwise

〔775〕 Match Text hour(?:s)? in 〔766 DepartureToDestination〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔776〕 If 〔775 C2DMatches’s text〕 has any value

〔777〕 Get First Item from List 〔767 C2DMatches〕　»

〔778〕 Set Variable C2DHours to 〔777 Item from List〕

〔779〕 Number 0　»

〔780〕 Set Variable C2DMinutes to 〔779 Number〕

〔781〕 Otherwise

〔782〕 Number 0　»

〔783〕 Set Variable C2DHours to 〔782 Number〕

〔784〕 Get First Item from List 〔767 C2DMatches〕　»

〔785〕 Set Variable C2DMinutes to 〔784 Item from List〕

〔786〕 End If

〔787〕 End If　▵774

〔788〕 Calculate 〔C2DHours〕 × 60　»

〔789〕 Calculate 〔788 Calculation Result〕 + 〔C2DMinutes〕　»

〔790〕 Calculate 〔789 Calculation Result〕 + 〔CurrentToDeparture〕　»

〔791〕 Set Variable TravelTime to 〔790 Calculation Result〕

〔792〕 Otherwise　▵724

〔793〕 Comment
CALENDER EVENT NOTES IS BLANK

〔794〕 Get Dictionary from 〔HomeAddress〕 　➔ Home Address Dictionary　» 795 796 797 798 799

〔795〕 Get Dictionary Value for street in 〔794 Home Address Dictionary〕 　➔ home_Street　» 800 802

〔796〕 Get Dictionary Value for city in 〔794 Home Address Dictionary〕 　➔ home_City　» 800 802

〔797〕 Get Dictionary Value for state in 〔794 Home Address Dictionary〕 　➔ home_State　» 800 802

〔798〕 Get Dictionary Value for country in 〔794 Home Address Dictionary〕 　➔ home_Country　» 800 802

〔799〕 Get Dictionary Value for postcode in 〔794 Home Address Dictionary〕 　➔ home_Postcode　» 800 802

〔800〕 If All are true　〔795 home_Street〕 has any value　〔796 home_City〕 has any value　〔797 home_State〕 has any value　〔798 home_Country〕 has any value　〔799 home_Postcode〕 has any value

〔801〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED

〔802〕 If All are true　〔722 Current Location’s Street〕 is 〔795 home_Street〕　〔722 Current Location’s City〕 is 〔796 home_City〕　〔722 Current Location’s State〕 is 〔797 home_State〕　〔722 Current Location’s Country〕 is 〔798 home_Country〕　〔722 Current Location’s ZIP Code〕 is 〔799 home_Postcode〕

〔803〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED -> HOME ADDRESS IS THE SAME WITH CURRENT LOCATION

〔804〕 Number 0　»

〔805〕 Set Variable CurrentToDeparture to 〔804 Number〕

〔806〕 Otherwise

〔807〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED -> HOME ADDRESS IS NOT THE SAME WITH CURRENT LOCATION

〔808〕 Get 〔TravelMethod〕 Time　» 809 817
• Destination: 〔HomeAddress〕

〔809〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔808 Travel Time〕 　➔ C2DMatches　» 810 812 814 819 826
• MatchTextCaseSensitive: false

〔810〕 Count Items in 〔809 C2DMatches〕　»

〔811〕 If 〔810 Count〕 > 1

〔812〕 Get First Item from List 〔809 C2DMatches〕　»

〔813〕 Set Variable C2DHours to 〔812 Item from List〕

〔814〕 Get Last Item from List 〔809 C2DMatches〕　»

〔815〕 Set Variable C2DMinutes to 〔814 Item from List〕

〔816〕 Otherwise

〔817〕 Match Text hour(?:s)? in 〔808 Travel Time〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔818〕 If 〔817 C2DMatches’s text〕 has any value

〔819〕 Get First Item from List 〔809 C2DMatches〕　»

〔820〕 Set Variable C2DHours to 〔819 Item from List〕

〔821〕 Number 0　»

〔822〕 Set Variable C2DMinutes to 〔821 Number〕

〔823〕 Otherwise

〔824〕 Number 0　»

〔825〕 Set Variable C2DHours to 〔824 Number〕

〔826〕 Get First Item from List 〔809 C2DMatches〕　»

〔827〕 Set Variable C2DMinutes to 〔826 Item from List〕

〔828〕 End If

〔829〕 End If　▵816

〔830〕 Calculate 〔C2DHours〕 × 60　»

〔831〕 Calculate 〔830 Calculation Result〕 + 〔C2DMinutes〕　»

〔832〕 Set Variable CurrentToDeparture to 〔831 Calculation Result〕

〔833〕 End If　▵806

〔834〕 Get 〔TravelMethod〕 Time 　➔ DepartureToDestination　»
• GetDirectionsCustomLocation: 〔HomeAddress〕
• Destination: 〔Repeat Item’s Location〕

〔835〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔834 DepartureToDestination〕 　➔ C2DMatches　» 836 838 840 845 852
• MatchTextCaseSensitive: false

〔836〕 Count Items in 〔835 C2DMatches〕　»

〔837〕 If 〔836 Count〕 > 1

〔838〕 Get First Item from List 〔835 C2DMatches〕　»

〔839〕 Set Variable C2DHours to 〔838 Item from List〕

〔840〕 Get Last Item from List 〔835 C2DMatches〕　»

〔841〕 Set Variable C2DMinutes to 〔840 Item from List〕

〔842〕 Otherwise

〔843〕 Match Text hour(?:s)? in 〔766 DepartureToDestination〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔844〕 If 〔843 C2DMatches’s text〕 has any value

〔845〕 Get First Item from List 〔835 C2DMatches〕　»

〔846〕 Set Variable C2DHours to 〔845 Item from List〕

〔847〕 Number 0　»

〔848〕 Set Variable C2DMinutes to 〔847 Number〕

〔849〕 Otherwise

〔850〕 Number 0　»

〔851〕 Set Variable C2DHours to 〔850 Number〕

〔852〕 Get First Item from List 〔835 C2DMatches〕　»

〔853〕 Set Variable C2DMinutes to 〔852 Item from List〕

〔854〕 End If

〔855〕 End If　▵842

〔856〕 Calculate 〔C2DHours〕 × 60　»

〔857〕 Calculate 〔856 Calculation Result〕 + 〔C2DMinutes〕　»

〔858〕 Calculate 〔857 Calculation Result〕 + 〔CurrentToDeparture〕　»

〔859〕 Set Variable TravelTime to 〔858 Calculation Result〕

〔860〕 Otherwise　▵800

〔861〕 Text
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS NOT MAINTAINED

〔862〕 Get 〔TravelMethod〕 Time　» 863 871
• Destination: 〔Repeat Item’s Location〕

〔863〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔862 Travel Time〕 　➔ C2DMatches　» 864 866 868 873 880
• MatchTextCaseSensitive: false

〔864〕 Count Items in 〔863 C2DMatches〕　»

〔865〕 If 〔864 Count〕 > 1

〔866〕 Get First Item from List 〔863 C2DMatches〕　»

〔867〕 Set Variable C2DHours to 〔866 Item from List〕

〔868〕 Get Last Item from List 〔863 C2DMatches〕　»

〔869〕 Set Variable C2DMinutes to 〔868 Item from List〕

〔870〕 Otherwise

〔871〕 Match Text hour(?:s)? in 〔862 Travel Time〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔872〕 If 〔871 C2DMatches’s text〕 has any value

〔873〕 Get First Item from List 〔863 C2DMatches〕　»

〔874〕 Set Variable C2DHours to 〔873 Item from List〕

〔875〕 Number 0　»

〔876〕 Set Variable C2DMinutes to 〔875 Number〕

〔877〕 Otherwise

〔878〕 Number 0　»

〔879〕 Set Variable C2DHours to 〔878 Number〕

〔880〕 Get First Item from List 〔863 C2DMatches〕　»

〔881〕 Set Variable C2DMinutes to 〔880 Item from List〕

〔882〕 End If

〔883〕 End If　▵870

〔884〕 Calculate 〔C2DHours〕 × 60　»

〔885〕 Calculate 〔884 Calculation Result〕 + 〔C2DMinutes〕　»

〔886〕 Set Variable TravelTime to 〔885 Calculation Result〕

〔887〕 End If　▵860

〔888〕 End If　▵792

〔889〕 Otherwise　▵721

〔890〕 Number 0　»

〔891〕 Set Variable TravelTime to 〔890 Number〕

〔892〕 End If

〔893〕 Calculate 〔TravelTime〕 + 〔ExtraTime〕　»

〔894〕 Adjust Subtract Date 〔Repeat Item’s Start Date〕 　➔ Supposed Alarm Time　» 895 898 901 904 911 927 929 930 948 953 956
• Duration: 〔893 Calculation Result〕 min

〔895〕 Dictionary 　➔ Alarm Label Dictionary　» 927 932 948
{  "Event": "〔Repeat Item〕",
   "From": "〔Repeat Item’s Start Date〕",
   "To": "〔Repeat Item’s End Date〕",
   "Location": "〔Repeat Item’s Location〕",
   "AlarmTime": "〔894 Supposed Alarm Time〕"
}

〔896〕 Date Current Date 　➔ Current Date　» 897 898 929

〔897〕 Adjust Add Date 〔896 Current Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"dd MMM yyyy"}〕 　➔ 1 day after　» 911 912 930 934
• Duration: "1" days

〔898〕 If 〔894 Supposed Alarm Time〕 is 〔896 Current Date〕

〔899〕 Comment
supposed alarm time is exactly 12:00am

〔900〕 If 〔Repeat Item’s Location〕 has any value

〔901〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 at 〔Repeat Item’s Location〕 which  was supposed to get ready at 〔894 Supposed Alarm Time〕. Please check.

〔902〕 Set Variable Text to 〔901 Text〕

〔903〕 Otherwise

〔904〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 which  was supposed to get ready at 〔894 Supposed Alarm Time〕. Please check.

〔905〕 Set Variable Text to 〔904 Text〕

〔906〕 End If

〔907〕 Show Alert 〔Text〕

〔908〕 Show Notification 〔Text〕

〔909〕 Speak Text
• Text: 〔Text〕

〔910〕 Otherwise　▵898

〔911〕 If 〔894 Supposed Alarm Time〕 is 〔897 1 day after〕

〔912〕 Find Alarm 〔897 1 day after〕　» 913 914

〔913〕 If 〔912 Alarms〕 has any value

〔914〕 Repeat[2] with Each in 〔912 Alarms〕

〔915〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ AlarmLabelDictionary　» 916 917 919

〔916〕 Get Dictionary Value for Event in 〔915 AlarmLabelDictionary〕 　➔ Event　» 921

〔917〕 Get Dictionary Value for From in 〔915 AlarmLabelDictionary〕 　➔ From　»

〔918〕 Get Dates from 〔917 From〕 　➔ FromDate　» 921

〔919〕 Get Dictionary Value for To in 〔915 AlarmLabelDictionary〕 　➔ To　»

〔920〕 Get Dates from 〔919 To〕 　➔ ToDate　»

〔921〕 If All are true　〔916 Event’s Name〕 is 〔Repeat Item〕　〔918 FromDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔Repeat Item’s Start Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕　〔920 ToDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is • ConditionalActionString
〔Repeat Item’s End Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕• Date
〔Repeat Item’s End Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕

〔922〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔923〕 End If

〔924〕 End Repeat[2] with Each　▵914

〔925〕 End If　▵913

〔926〕 Comment
since this will be triggered at 12:00 am each day, when the supposed alarm time is 12:00 am in the next day, you can set alarm now

〔927〕 Add Alarm for 〔894 Supposed Alarm Time〕 called 〔895 Alarm Label Dictionary〕

〔928〕 Otherwise　▵911

〔929〕 If 〔894 Supposed Alarm Time〕 > 〔896 Current Date〕

〔930〕 If 〔894 Supposed Alarm Time〕 > 〔897 1 day after〕

〔931〕 Comment
when the time is other than 12:00 am of then next day, you cannot set alarm yet. If set, it will be today. For example, triggering time 2025-4-8 12:00 am, the supposed alarm time is 2025-4-9 08:00 am, if you set an alarm at 08:00 at 2025-4-8 12:00 am, it will alarm at 2025-4-8 08:00 am instead. So we need to record the supposed alarm time and trigger next day.

〔932〕 Set Variable Event to 〔895 Alarm Label Dictionary〕

〔933〕 Otherwise

〔934〕 Find Alarm 〔897 1 day after〕　» 935 936
• ContentItemFilter: {  "Value": {
      "WFActionParameterFilterPrefix": 1,
      "WFActionParameterFilterTemplates": [],
      "WFContentPredicateBoundedDate": false
   },
   "WFSerializationType": "WFContentPredicateTableTemplate"
}

〔935〕 If 〔934 Alarms〕 has any value

〔936〕 Repeat[2] with Each in 〔934 Alarms〕

〔937〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ AlarmLabelDictionary　» 938 939 941

〔938〕 Get Dictionary Value for Event in 〔937 AlarmLabelDictionary〕 　➔ Event　» 943

〔939〕 Get Dictionary Value for From in 〔937 AlarmLabelDictionary〕 　➔ From　»

〔940〕 Get Dates from 〔939 From〕 　➔ FromDate　» 943

〔941〕 Get Dictionary Value for To in 〔937 AlarmLabelDictionary〕 　➔ To　»

〔942〕 Get Dates from 〔941 To〕 　➔ ToDate　»

〔943〕 If All are true　〔938 Event’s Name〕 is 〔Repeat Item〕　〔940 FromDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔Repeat Item’s Start Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕　〔942 ToDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔Repeat Item’s End Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕

〔944〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔945〕 End If

〔946〕 End Repeat[2] with Each　▵936

〔947〕 End If　▵935

〔948〕 Add Alarm for 〔894 Supposed Alarm Time〕 called 〔895 Alarm Label Dictionary〕

〔949〕 End If　▵933

〔950〕 Otherwise　▵929

〔951〕 Comment
the supposed alarm time passed

〔952〕 If 〔Repeat Item’s Location〕 has any value

〔953〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 at 〔Repeat Item’s Location〕 which  was supposed to get ready at 〔894 Supposed Alarm Time〕. Please check.

〔954〕 Set Variable Text to 〔953 Text〕

〔955〕 Otherwise

〔956〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 which  was supposed to get ready at 〔894 Supposed Alarm Time〕. Please check.

〔957〕 Set Variable Text to 〔956 Text〕

〔958〕 End If

〔959〕 Show Alert 〔Text〕

〔960〕 Show Notification 〔Text〕

〔961〕 Speak Text
• Text: 〔Text〕

〔962〕 End If　▵950

〔963〕 End If　▵928

〔964〕 End If　▵910

〔965〕 Text
〔Event〕

〔966〕 If 〔Event〕 has any value

〔967〕 Get Dictionary from 〔Event〕　» 980

〔968〕 Text　»

〔969〕 Set Variable TextList to 〔968 Text〕

〔970〕 Add 〔Event〕 to Variable TextList

〔971〕 Get File at Path Smart Calendar Reminder/Future Alarms.txt from Folder　» 972 973
• FileErrorIfNotFound: false

〔972〕 If 〔971 File’s File Size〕 has any value

〔973〕 Split Text 〔971 File〕 by New Lines　»

〔974〕 Repeat[2] with Each in 〔973 Split Text〕

〔975〕 Get Dictionary from 〔Repeat Item 2〕　» 976 977 978 979

〔976〕 Get Dictionary Value for Event in 〔975 Dictionary〕 　➔ Event　» 980

〔977〕 Get Dictionary Value for From in 〔975 Dictionary〕 　➔ From　» 980

〔978〕 Get Dictionary Value for To in 〔975 Dictionary〕 　➔ To　» 980

〔979〕 Get Dictionary Value for Location in 〔975 Dictionary〕 　➔ Location　»

〔980〕 If Any are true　〔976 Event’s Name〕 is not 〔967 Dictionary.Event〕　〔977 From’s Name〕 is not 〔967 Dictionary.From〕　〔978 To’s Name〕 is not 〔967 Dictionary.To〕　〔979 Location’s Name〕 is not 〔967 Dictionary.Location〕

〔981〕 Add 〔Repeat Item 2〕 to Variable TextList

〔982〕 End If

〔983〕 End Repeat[2] with Each　▵974

〔984〕 Combine Text 〔TextList〕 with New Lines　»

〔985〕 Save File 〔984 Combined Text〕
• AskWhereToSave: false
• SaveFileOverwrite: true
• FileDestinationPath: Smart Calendar Reminder/Future Alarms.txt

〔986〕 Otherwise　▵972

〔987〕 Text　»

〔Event〕

〔988〕 Save File 〔987 Text〕
• AskWhereToSave: false
• FileDestinationPath: Smart Calendar Reminder/Future Alarms.txt

〔989〕 End If

〔990〕 End If　▵966

〔991〕 End Repeat with Each　▵720

〔992〕 End If　▵719

〔993〕 Get File at Path Smart Calendar Reminder/Future Alarms.txt from Folder　» 994 995
• FileErrorIfNotFound: false

〔994〕 If 〔993 File’s File Size〕 has any value

〔995〕 Split Text 〔993 File〕 by New Lines　»

〔996〕 Repeat with Each in 〔995 Split Text〕

〔997〕 Get Dictionary from 〔Repeat Item〕　» 998 999 1009 1020

〔998〕 If 〔997 Dictionary〕 has any value

〔999〕 Get Dates from 〔997 Dictionary.AlarmTime〕　» 1000 1001 1020

〔1000〕 If 〔999 Dates〕 is today

〔1001〕 Find Alarm 〔999 Dates〕　» 1002 1003
• ContentItemFilter: {  "Value": {
      "WFActionParameterFilterPrefix": 1,
      "WFContentPredicateBoundedDate": false,
      "WFActionParameterFilterTemplates": []
   },
   "WFSerializationType": "WFContentPredicateTableTemplate"
}

〔1002〕 If 〔1001 Alarms〕 has any value

〔1003〕 Repeat[2] with Each in 〔1001 Alarms〕

〔1004〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ Alarm_Label_Dictionary　» 1005 1007 1015

〔1005〕 Get Dictionary Value for From in 〔1004 Alarm_Label_Dictionary〕　»

〔1006〕 Get Dates from 〔1005 Dictionary Value〕 　➔ From_Date　» 1015

〔1007〕 Get Dictionary Value for To in 〔1004 Alarm_Label_Dictionary〕　»

〔1008〕 Get Dates from 〔1007 Dictionary Value〕 　➔ To_Date　» 1015

〔1009〕 Get Dictionary from 〔997 Dictionary.Event〕 　➔ FutureAlarmLabelDictionary　» 1010 1011 1013

〔1010〕 Get Dictionary Value for Event in 〔1009 FutureAlarmLabelDictionary〕 　➔ Event　» 1015

〔1011〕 Get Dictionary Value for From in 〔1009 FutureAlarmLabelDictionary〕 　➔ From　»

〔1012〕 Get Dates from 〔1011 From〕 　➔ FromDate　» 1015

〔1013〕 Get Dictionary Value for To in 〔1009 FutureAlarmLabelDictionary〕 　➔ To　»

〔1014〕 Get Dates from 〔1013 To〕 　➔ ToDate　»

〔1015〕 If All are true　〔1010 Event’s Name〕 is 〔1004 Alarm_Label_Dictionary.Event〕　〔1012 FromDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔1006 From_Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕　〔1014 ToDate{"Date Style":"Custom","WFDateFormat":"HH:mm","WFISO8601IncludeTime":false}〕 is 〔1008 To_Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕

〔1016〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔1017〕 End If

〔1018〕 End Repeat[2] with Each　▵1003

〔1019〕 End If　▵1002

〔1020〕 Add Alarm for 〔999 Dates〕 called 〔997 Dictionary.Event〕

〔1021〕 End If　▵1000

〔1022〕 End If　▵998

〔1023〕 End Repeat with Each　▵996

〔1024〕 End If　▵994

〔1025〕 End If　▵707

〔1026〕 If 〔Shortcut Input as Number〕 is 6

〔1027〕 Comment
*Revolutionizing event management by integrating calendar data with intelligent automation:

Voice announcements for upcoming events

Dynamic alarm calculation (travel + prep time)

Calendar-driven scheduling system
Eliminates manual reminders and ensures perfect timing synchronization*

〔1028〕 Get File at Path Smart Calendar Reminder/aboutme.txt from Folder　»
• FileErrorIfNotFound: false

〔1029〕 Get Dictionary from 〔1028 File〕　» 1030 1033 1034

〔1030〕 Get Dictionary from 〔1029 Dictionary.HomeAddress〕　»

〔1031〕 Text　»
〔1030 Dictionary.street〕 〔1030 Dictionary.city〕 〔1030 Dictionary.state〕 〔1030 Dictionary.postcode〕 〔1030 Dictionary.country〕\u{space}

〔1032〕 Set Variable HomeAddress to 〔1031 Text〕

〔1033〕 Set Variable TravelMethod to 〔1029 Dictionary.TravelMethod〕

〔1034〕 Get Dictionary Value for ExtraTime in 〔1029 Dictionary〕　»

〔1035〕 Get Numbers from 〔1034 Dictionary Value〕　»

〔1036〕 Set Variable ExtraTime to 〔1035 Numbers〕

〔1037〕 Find Calendar Events All Calendar Events where　» 1038 1039
• ContentItemSortProperty: Start Date
• ContentItemSortOrder: Oldest First
• ContentItemFilter: • All the following are true
Start Date is in the next 1 weeks
Is All Day
Canceled is {"Bool":{"Value":false,"WFSerializationType":"WFBooleanSubstitutableState"}}

〔1038〕 If 〔1037 Calendar Events〕 has any value

〔1039〕 Repeat with Each in 〔1037 Calendar Events〕

〔1040〕 If 〔Repeat Item’s Location〕 has any value

〔1041〕 Get Current Location　» 1053 1059 1121
• Accuracy: Best

〔1042〕 Comment
*To specify event-specific departure locations:

1. Create calendar event notes with JSON structure:
{
“Street”: “your departure street”,
“City”: “your departure city”,
“State”: “your departure state”,
“Country”: “your departure country”,
“Postcode”: “your departure postcode”
}
2. System prioritizes these over default locations*

〔1043〕 If All are true　〔Repeat Item’s Notes〕 has any value　〔Repeat Item’s Notes〕 begins with {　〔Repeat Item’s Notes〕 ends with }

〔1044〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY

〔1045〕 Get Dictionary from 〔Repeat Item’s Notes〕 　➔ Notes Address Dictionary　» 1046 1047 1048 1049 1050

〔1046〕 Set Variable Calendar_Notes_Street to 〔1045 Notes Address Dictionary.Street〕

〔1047〕 Set Variable Calendar_Notes_City to 〔1045 Notes Address Dictionary.City〕

〔1048〕 Set Variable Calendar_Notes_State to 〔1045 Notes Address Dictionary.State〕

〔1049〕 Set Variable Calendar_Notes_Region to 〔1045 Notes Address Dictionary.Country〕

〔1050〕 Set Variable Calendar_Notes_ZIP_Code to 〔1045 Notes Address Dictionary.Postcode〕

〔1051〕 Text　»
〔Calendar_Notes_Street〕 〔Calendar_Notes_City〕 〔Calendar_Notes_State〕 〔Calendar_Notes_ZIP_Code〕 〔Calendar_Notes_Region〕

〔1052〕 Set Variable NotesAddressString to 〔1051 Text〕

〔1053〕 If All are true　〔1041 Current Location’s Street〕 is 〔Calendar_Notes_Street〕　〔1041 Current Location’s City〕 is 〔Calendar_Notes_City〕　〔1041 Current Location’s State〕 is 〔Calendar_Notes_State〕　〔1041 Current Location’s Country〕 is 〔Calendar_Notes_Region〕　〔1041 Current Location’s ZIP Code〕 is 〔Calendar_Notes_ZIP_Code〕

〔1054〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY -> CALENDAR EVENT ADDRESS IS THE SAME WITH CURRENT LOCATION

〔1055〕 Number 0　»

〔1056〕 Set Variable CurrentToDeparture to 〔1055 Number〕

〔1057〕 Otherwise

〔1058〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY -> CALENDAR EVENT ADDRESS IS NOT THE SAME WITH CURRENT LOCATION

〔1059〕 Get 〔TravelMethod〕 Time　» 1060 1068
• GetDirectionsCustomLocation: 〔1041 Current Location〕
• Destination: 〔NotesAddressString〕

〔1060〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔1059 Travel Time〕 　➔ C2DMatches　» 1061 1063 1065 1070 1077
• MatchTextCaseSensitive: false

〔1061〕 Count Items in 〔1060 C2DMatches〕　»

〔1062〕 If 〔1061 Count〕 > 1

〔1063〕 Get First Item from List 〔1060 C2DMatches〕　»

〔1064〕 Set Variable C2DHours to 〔1063 Item from List〕

〔1065〕 Get Last Item from List 〔1060 C2DMatches〕　»

〔1066〕 Set Variable C2DMinutes to 〔1065 Item from List〕

〔1067〕 Otherwise

〔1068〕 Match Text hour(?:s)? in 〔1059 Travel Time〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔1069〕 If 〔1068 C2DMatches’s text〕 has any value

〔1070〕 Get First Item from List 〔1060 C2DMatches〕　»

〔1071〕 Set Variable C2DHours to 〔1070 Item from List〕

〔1072〕 Number 0　»

〔1073〕 Set Variable C2DMinutes to 〔1072 Number〕

〔1074〕 Otherwise

〔1075〕 Number 0　»

〔1076〕 Set Variable C2DHours to 〔1075 Number〕

〔1077〕 Get First Item from List 〔1060 C2DMatches〕　»

〔1078〕 Set Variable C2DMinutes to 〔1077 Item from List〕

〔1079〕 End If

〔1080〕 End If　▵1067

〔1081〕 Calculate 〔C2DHours〕 × 60　»

〔1082〕 Calculate 〔1081 Calculation Result〕 + 〔C2DMinutes〕　»

〔1083〕 Set Variable CurrentToDeparture to 〔1082 Calculation Result〕

〔1084〕 End If　▵1057

〔1085〕 Get 〔TravelMethod〕 Time 　➔ DepartureToDestination　» 1086 1094 1162
• GetDirectionsCustomLocation: 〔NotesAddressString〕
• Destination: 〔Repeat Item’s Location〕

〔1086〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔1085 DepartureToDestination〕 　➔ C2DMatches　» 1087 1089 1091 1096 1103
• MatchTextCaseSensitive: false

〔1087〕 Count Items in 〔1086 C2DMatches〕　»

〔1088〕 If 〔1087 Count〕 > 1

〔1089〕 Get First Item from List 〔1086 C2DMatches〕　»

〔1090〕 Set Variable C2DHours to 〔1089 Item from List〕

〔1091〕 Get Last Item from List 〔1086 C2DMatches〕　»

〔1092〕 Set Variable C2DMinutes to 〔1091 Item from List〕

〔1093〕 Otherwise

〔1094〕 Match Text hour(?:s)? in 〔1085 DepartureToDestination〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔1095〕 If 〔1094 C2DMatches’s text〕 has any value

〔1096〕 Get First Item from List 〔1086 C2DMatches〕　»

〔1097〕 Set Variable C2DHours to 〔1096 Item from List〕

〔1098〕 Number 0　»

〔1099〕 Set Variable C2DMinutes to 〔1098 Number〕

〔1100〕 Otherwise

〔1101〕 Number 0　»

〔1102〕 Set Variable C2DHours to 〔1101 Number〕

〔1103〕 Get First Item from List 〔1086 C2DMatches〕　»

〔1104〕 Set Variable C2DMinutes to 〔1103 Item from List〕

〔1105〕 End If

〔1106〕 End If　▵1093

〔1107〕 Calculate 〔C2DHours〕 × 60　»

〔1108〕 Calculate 〔1107 Calculation Result〕 + 〔C2DMinutes〕　»

〔1109〕 Calculate 〔1108 Calculation Result〕 + 〔CurrentToDeparture〕　»

〔1110〕 Set Variable TravelTime to 〔1109 Calculation Result〕

〔1111〕 Otherwise　▵1043

〔1112〕 Comment
CALENDER EVENT NOTES IS BLANK

〔1113〕 Get Dictionary from 〔HomeAddress〕 　➔ Home Address Dictionary　» 1114 1115 1116 1117 1118

〔1114〕 Get Dictionary Value for street in 〔1113 Home Address Dictionary〕 　➔ home_Street　» 1119 1121

〔1115〕 Get Dictionary Value for city in 〔1113 Home Address Dictionary〕 　➔ home_City　» 1119 1121

〔1116〕 Get Dictionary Value for state in 〔1113 Home Address Dictionary〕 　➔ home_State　» 1119 1121

〔1117〕 Get Dictionary Value for country in 〔1113 Home Address Dictionary〕 　➔ home_Country　» 1119 1121

〔1118〕 Get Dictionary Value for postcode in 〔1113 Home Address Dictionary〕 　➔ home_Postcode　» 1119 1121

〔1119〕 If All are true　〔1114 home_Street〕 has any value　〔1115 home_City〕 has any value　〔1116 home_State〕 has any value　〔1117 home_Country〕 has any value　〔1118 home_Postcode〕 has any value

〔1120〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED

〔1121〕 If All are true　〔1041 Current Location’s Street〕 is 〔1114 home_Street〕　〔1041 Current Location’s City〕 is 〔1115 home_City〕　〔1041 Current Location’s State〕 is 〔1116 home_State〕　〔1041 Current Location’s Country〕 is 〔1117 home_Country〕　〔1041 Current Location’s ZIP Code〕 is 〔1118 home_Postcode〕

〔1122〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED -> HOME ADDRESS IS THE SAME WITH CURRENT LOCATION

〔1123〕 Number 0　»

〔1124〕 Set Variable CurrentToDeparture to 〔1123 Number〕

〔1125〕 Otherwise

〔1126〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED -> HOME ADDRESS IS NOT THE SAME WITH CURRENT LOCATION

〔1127〕 Get 〔TravelMethod〕 Time　» 1128 1136
• Destination: 〔HomeAddress〕

〔1128〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔1127 Travel Time〕 　➔ C2DMatches　» 1129 1131 1133 1138 1145
• MatchTextCaseSensitive: false

〔1129〕 Count Items in 〔1128 C2DMatches〕　»

〔1130〕 If 〔1129 Count〕 > 1

〔1131〕 Get First Item from List 〔1128 C2DMatches〕　»

〔1132〕 Set Variable C2DHours to 〔1131 Item from List〕

〔1133〕 Get Last Item from List 〔1128 C2DMatches〕　»

〔1134〕 Set Variable C2DMinutes to 〔1133 Item from List〕

〔1135〕 Otherwise

〔1136〕 Match Text hour(?:s)? in 〔1127 Travel Time〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔1137〕 If 〔1136 C2DMatches’s text〕 has any value

〔1138〕 Get First Item from List 〔1128 C2DMatches〕　»

〔1139〕 Set Variable C2DHours to 〔1138 Item from List〕

〔1140〕 Number 0　»

〔1141〕 Set Variable C2DMinutes to 〔1140 Number〕

〔1142〕 Otherwise

〔1143〕 Number 0　»

〔1144〕 Set Variable C2DHours to 〔1143 Number〕

〔1145〕 Get First Item from List 〔1128 C2DMatches〕　»

〔1146〕 Set Variable C2DMinutes to 〔1145 Item from List〕

〔1147〕 End If

〔1148〕 End If　▵1135

〔1149〕 Calculate 〔C2DHours〕 × 60　»

〔1150〕 Calculate 〔1149 Calculation Result〕 + 〔C2DMinutes〕　»

〔1151〕 Set Variable CurrentToDeparture to 〔1150 Calculation Result〕

〔1152〕 End If　▵1125

〔1153〕 Get 〔TravelMethod〕 Time 　➔ DepartureToDestination　»
• GetDirectionsCustomLocation: 〔HomeAddress〕
• Destination: 〔Repeat Item’s Location〕

〔1154〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔1153 DepartureToDestination〕 　➔ C2DMatches　» 1155 1157 1159 1164 1171
• MatchTextCaseSensitive: false

〔1155〕 Count Items in 〔1154 C2DMatches〕　»

〔1156〕 If 〔1155 Count〕 > 1

〔1157〕 Get First Item from List 〔1154 C2DMatches〕　»

〔1158〕 Set Variable C2DHours to 〔1157 Item from List〕

〔1159〕 Get Last Item from List 〔1154 C2DMatches〕　»

〔1160〕 Set Variable C2DMinutes to 〔1159 Item from List〕

〔1161〕 Otherwise

〔1162〕 Match Text hour(?:s)? in 〔1085 DepartureToDestination〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔1163〕 If 〔1162 C2DMatches’s text〕 has any value

〔1164〕 Get First Item from List 〔1154 C2DMatches〕　»

〔1165〕 Set Variable C2DHours to 〔1164 Item from List〕

〔1166〕 Number 0　»

〔1167〕 Set Variable C2DMinutes to 〔1166 Number〕

〔1168〕 Otherwise

〔1169〕 Number 0　»

〔1170〕 Set Variable C2DHours to 〔1169 Number〕

〔1171〕 Get First Item from List 〔1154 C2DMatches〕　»

〔1172〕 Set Variable C2DMinutes to 〔1171 Item from List〕

〔1173〕 End If

〔1174〕 End If　▵1161

〔1175〕 Calculate 〔C2DHours〕 × 60　»

〔1176〕 Calculate 〔1175 Calculation Result〕 + 〔C2DMinutes〕　»

〔1177〕 Calculate 〔1176 Calculation Result〕 + 〔CurrentToDeparture〕　»

〔1178〕 Set Variable TravelTime to 〔1177 Calculation Result〕

〔1179〕 Otherwise　▵1119

〔1180〕 Text
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS NOT MAINTAINED

〔1181〕 Get 〔TravelMethod〕 Time　» 1182 1190
• Destination: 〔Repeat Item’s Location〕

〔1182〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔1181 Travel Time〕 　➔ C2DMatches　» 1183 1185 1187 1192 1199
• MatchTextCaseSensitive: false

〔1183〕 Count Items in 〔1182 C2DMatches〕　»

〔1184〕 If 〔1183 Count〕 > 1

〔1185〕 Get First Item from List 〔1182 C2DMatches〕　»

〔1186〕 Set Variable C2DHours to 〔1185 Item from List〕

〔1187〕 Get Last Item from List 〔1182 C2DMatches〕　»

〔1188〕 Set Variable C2DMinutes to 〔1187 Item from List〕

〔1189〕 Otherwise

〔1190〕 Match Text hour(?:s)? in 〔1181 Travel Time〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔1191〕 If 〔1190 C2DMatches’s text〕 has any value

〔1192〕 Get First Item from List 〔1182 C2DMatches〕　»

〔1193〕 Set Variable C2DHours to 〔1192 Item from List〕

〔1194〕 Number 0　»

〔1195〕 Set Variable C2DMinutes to 〔1194 Number〕

〔1196〕 Otherwise

〔1197〕 Number 0　»

〔1198〕 Set Variable C2DHours to 〔1197 Number〕

〔1199〕 Get First Item from List 〔1182 C2DMatches〕　»

〔1200〕 Set Variable C2DMinutes to 〔1199 Item from List〕

〔1201〕 End If

〔1202〕 End If　▵1189

〔1203〕 Calculate 〔C2DHours〕 × 60　»

〔1204〕 Calculate 〔1203 Calculation Result〕 + 〔C2DMinutes〕　»

〔1205〕 Set Variable TravelTime to 〔1204 Calculation Result〕

〔1206〕 End If　▵1179

〔1207〕 End If　▵1111

〔1208〕 Otherwise　▵1040

〔1209〕 Number 0　»

〔1210〕 Set Variable TravelTime to 〔1209 Number〕

〔1211〕 End If

〔1212〕 Calculate 〔TravelTime〕 + 〔ExtraTime〕　»

〔1213〕 Adjust Subtract Date 〔Repeat Item’s Start Date〕 　➔ Supposed Alarm Time　» 1214 1217 1220 1223 1230 1246 1248 1249 1267 1272 1275
• Duration: 〔1212 Calculation Result〕 min

〔1214〕 Dictionary 　➔ Alarm Label Dictionary　» 1246 1251 1267
{  "Event": "〔Repeat Item〕",
   "From": "〔Repeat Item’s Start Date〕",
   "To": "〔Repeat Item’s End Date〕",
   "Location": "〔Repeat Item’s Location〕",
   "AlarmTime": "〔1213 Supposed Alarm Time〕"
}

〔1215〕 Date Current Date 　➔ Current Date　» 1216 1217 1248

〔1216〕 Adjust Add Date 〔1215 Current Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"dd MMM yyyy"}〕 　➔ 1 day after　» 1230 1231 1249 1253
• Duration: "1" days

〔1217〕 If 〔1213 Supposed Alarm Time〕 is 〔1215 Current Date〕

〔1218〕 Comment
supposed alarm time is exactly 12:00am

〔1219〕 If 〔Repeat Item’s Location〕 has any value

〔1220〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 at 〔Repeat Item’s Location〕 which  was supposed to get ready at 〔1213 Supposed Alarm Time〕. Please check.

〔1221〕 Set Variable Text to 〔1220 Text〕

〔1222〕 Otherwise

〔1223〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 which  was supposed to get ready at 〔1213 Supposed Alarm Time〕. Please check.

〔1224〕 Set Variable Text to 〔1223 Text〕

〔1225〕 End If

〔1226〕 Show Alert 〔Text〕

〔1227〕 Show Notification 〔Text〕

〔1228〕 Speak Text
• Text: 〔Text〕

〔1229〕 Otherwise　▵1217

〔1230〕 If 〔1213 Supposed Alarm Time〕 is 〔1216 1 day after〕

〔1231〕 Find Alarm 〔1216 1 day after〕　» 1232 1233

〔1232〕 If 〔1231 Alarms〕 has any value

〔1233〕 Repeat[2] with Each in 〔1231 Alarms〕

〔1234〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ AlarmLabelDictionary　» 1235 1236 1238

〔1235〕 Get Dictionary Value for Event in 〔1234 AlarmLabelDictionary〕 　➔ Event　» 1240

〔1236〕 Get Dictionary Value for From in 〔1234 AlarmLabelDictionary〕 　➔ From　»

〔1237〕 Get Dates from 〔1236 From〕 　➔ FromDate　» 1240

〔1238〕 Get Dictionary Value for To in 〔1234 AlarmLabelDictionary〕 　➔ To　»

〔1239〕 Get Dates from 〔1238 To〕 　➔ ToDate　»

〔1240〕 If All are true　〔1235 Event’s Name〕 is 〔Repeat Item〕　〔1237 FromDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔Repeat Item’s Start Date{"Date Style":"Custom","WFDateFormat":"HH:mm","WFISO8601IncludeTime":false}〕　〔1239 ToDate{"Date Style":"Custom","WFDateFormat":"HH:mm","WFISO8601IncludeTime":false}〕 is • ConditionalActionString
〔Repeat Item’s End Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕• Date
〔Repeat Item’s End Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕

〔1241〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔1242〕 End If

〔1243〕 End Repeat[2] with Each　▵1233

〔1244〕 End If　▵1232

〔1245〕 Comment
since this will be triggered at 12:00 am each day, when the supposed alarm time is 12:00 am in the next day, you can set alarm now

〔1246〕 Add Alarm for 〔1213 Supposed Alarm Time〕 called 〔1214 Alarm Label Dictionary〕

〔1247〕 Otherwise　▵1230

〔1248〕 If 〔1213 Supposed Alarm Time〕 > 〔1215 Current Date〕

〔1249〕 If 〔1213 Supposed Alarm Time〕 > 〔1216 1 day after〕

〔1250〕 Comment
when the time is other than 12:00 am of then next day, you cannot set alarm yet. If set, it will be today. For example, triggering time 2025-4-8 12:00 am, the supposed alarm time is 2025-4-9 08:00 am, if you set an alarm at 08:00 at 2025-4-8 12:00 am, it will alarm at 2025-4-8 08:00 am instead. So we need to record the supposed alarm time and trigger next day.

〔1251〕 Set Variable Event to 〔1214 Alarm Label Dictionary〕

〔1252〕 Otherwise

〔1253〕 Find Alarm 〔1216 1 day after〕　» 1254 1255
• ContentItemFilter: {  "Value": {
      "WFActionParameterFilterPrefix": 1,
      "WFContentPredicateBoundedDate": false,
      "WFActionParameterFilterTemplates": []
   },
   "WFSerializationType": "WFContentPredicateTableTemplate"
}

〔1254〕 If 〔1253 Alarms〕 has any value

〔1255〕 Repeat[2] with Each in 〔1253 Alarms〕

〔1256〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ AlarmLabelDictionary　» 1257 1258 1260

〔1257〕 Get Dictionary Value for Event in 〔1256 AlarmLabelDictionary〕 　➔ Event　» 1262

〔1258〕 Get Dictionary Value for From in 〔1256 AlarmLabelDictionary〕 　➔ From　»

〔1259〕 Get Dates from 〔1258 From〕 　➔ FromDate　» 1262

〔1260〕 Get Dictionary Value for To in 〔1256 AlarmLabelDictionary〕 　➔ To　»

〔1261〕 Get Dates from 〔1260 To〕 　➔ ToDate　»

〔1262〕 If All are true　〔1257 Event’s Name〕 is 〔Repeat Item〕　〔1259 FromDate{"Date Style":"Custom","WFDateFormat":"HH:mm","WFISO8601IncludeTime":false}〕 is 〔Repeat Item’s Start Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕　〔1261 ToDate{"Date Style":"Custom","WFDateFormat":"HH:mm","WFISO8601IncludeTime":false}〕 is 〔Repeat Item’s End Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕

〔1263〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔1264〕 End If

〔1265〕 End Repeat[2] with Each　▵1255

〔1266〕 End If　▵1254

〔1267〕 Add Alarm for 〔1213 Supposed Alarm Time〕 called 〔1214 Alarm Label Dictionary〕

〔1268〕 End If　▵1252

〔1269〕 Otherwise　▵1248

〔1270〕 Comment
the supposed alarm time passed

〔1271〕 If 〔Repeat Item’s Location〕 has any value

〔1272〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 at 〔Repeat Item’s Location〕 which  was supposed to get ready at 〔1213 Supposed Alarm Time〕. Please check.

〔1273〕 Set Variable Text to 〔1272 Text〕

〔1274〕 Otherwise

〔1275〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 which  was supposed to get ready at 〔1213 Supposed Alarm Time〕. Please check.

〔1276〕 Set Variable Text to 〔1275 Text〕

〔1277〕 End If

〔1278〕 Show Alert 〔Text〕

〔1279〕 Show Notification 〔Text〕

〔1280〕 Speak Text
• Text: 〔Text〕

〔1281〕 End If　▵1269

〔1282〕 End If　▵1247

〔1283〕 End If　▵1229

〔1284〕 Text
〔Event〕

〔1285〕 If 〔Event〕 has any value

〔1286〕 Get Dictionary from 〔Event〕　» 1299

〔1287〕 Text　»

〔1288〕 Set Variable TextList to 〔1287 Text〕

〔1289〕 Add 〔Event〕 to Variable TextList

〔1290〕 Get File at Path Smart Calendar Reminder/Future Alarms.txt from Folder　» 1291 1292
• FileErrorIfNotFound: false

〔1291〕 If 〔1290 File’s File Size〕 has any value

〔1292〕 Split Text 〔1290 File〕 by New Lines　»

〔1293〕 Repeat[2] with Each in 〔1292 Split Text〕

〔1294〕 Get Dictionary from 〔Repeat Item 2〕　» 1295 1296 1297 1298

〔1295〕 Get Dictionary Value for Event in 〔1294 Dictionary〕 　➔ Event　» 1299

〔1296〕 Get Dictionary Value for From in 〔1294 Dictionary〕 　➔ From　» 1299

〔1297〕 Get Dictionary Value for To in 〔1294 Dictionary〕 　➔ To　» 1299

〔1298〕 Get Dictionary Value for Location in 〔1294 Dictionary〕 　➔ Location　»

〔1299〕 If Any are true　〔1295 Event’s Name〕 is not 〔1286 Dictionary.Event〕　〔1296 From’s Name〕 is not 〔1286 Dictionary.From〕　〔1297 To’s Name〕 is not 〔1286 Dictionary.To〕　〔1298 Location’s Name〕 is not 〔1286 Dictionary.Location〕

〔1300〕 Add 〔Repeat Item 2〕 to Variable TextList

〔1301〕 End If

〔1302〕 End Repeat[2] with Each　▵1293

〔1303〕 Combine Text 〔TextList〕 with New Lines　»

〔1304〕 Save File 〔1303 Combined Text〕
• AskWhereToSave: false
• SaveFileOverwrite: true
• FileDestinationPath: Smart Calendar Reminder/Future Alarms.txt

〔1305〕 Otherwise　▵1291

〔1306〕 Text　»

〔Event〕

〔1307〕 Save File 〔1306 Text〕
• AskWhereToSave: false
• FileDestinationPath: Smart Calendar Reminder/Future Alarms.txt

〔1308〕 End If

〔1309〕 End If　▵1285

〔1310〕 End Repeat with Each　▵1039

〔1311〕 End If　▵1038

〔1312〕 Get File at Path Smart Calendar Reminder/Future Alarms.txt from Folder　» 1313 1314
• FileErrorIfNotFound: false

〔1313〕 If 〔1312 File’s File Size〕 has any value

〔1314〕 Split Text 〔1312 File〕 by New Lines　»

〔1315〕 Repeat with Each in 〔1314 Split Text〕

〔1316〕 Get Dictionary from 〔Repeat Item〕　» 1317 1318 1328 1339

〔1317〕 If 〔1316 Dictionary〕 has any value

〔1318〕 Get Dates from 〔1316 Dictionary.AlarmTime〕　» 1319 1320 1339

〔1319〕 If 〔1318 Dates〕 is today

〔1320〕 Find Alarm 〔1318 Dates〕　» 1321 1322
• ContentItemFilter: {  "Value": {
      "WFActionParameterFilterPrefix": 1,
      "WFContentPredicateBoundedDate": false,
      "WFActionParameterFilterTemplates": []
   },
   "WFSerializationType": "WFContentPredicateTableTemplate"
}

〔1321〕 If 〔1320 Alarms〕 has any value

〔1322〕 Repeat[2] with Each in 〔1320 Alarms〕

〔1323〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ Alarm_Label_Dictionary　» 1324 1326 1334

〔1324〕 Get Dictionary Value for From in 〔1323 Alarm_Label_Dictionary〕　»

〔1325〕 Get Dates from 〔1324 Dictionary Value〕 　➔ From_Date　» 1334

〔1326〕 Get Dictionary Value for To in 〔1323 Alarm_Label_Dictionary〕　»

〔1327〕 Get Dates from 〔1326 Dictionary Value〕 　➔ To_Date　» 1334

〔1328〕 Get Dictionary from 〔1316 Dictionary.Event〕 　➔ FutureAlarmLabelDictionary　» 1329 1330 1332

〔1329〕 Get Dictionary Value for Event in 〔1328 FutureAlarmLabelDictionary〕 　➔ Event　» 1334

〔1330〕 Get Dictionary Value for From in 〔1328 FutureAlarmLabelDictionary〕 　➔ From　»

〔1331〕 Get Dates from 〔1330 From〕 　➔ FromDate　» 1334

〔1332〕 Get Dictionary Value for To in 〔1328 FutureAlarmLabelDictionary〕 　➔ To　»

〔1333〕 Get Dates from 〔1332 To〕 　➔ ToDate　»

〔1334〕 If All are true　〔1329 Event’s Name〕 is 〔1323 Alarm_Label_Dictionary.Event〕　〔1331 FromDate{"Date Style":"Custom","WFDateFormat":"HH:mm","WFISO8601IncludeTime":false}〕 is 〔1325 From_Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕　〔1333 ToDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔1327 To_Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕

〔1335〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔1336〕 End If

〔1337〕 End Repeat[2] with Each　▵1322

〔1338〕 End If　▵1321

〔1339〕 Add Alarm for 〔1318 Dates〕 called 〔1316 Dictionary.Event〕

〔1340〕 End If　▵1319

〔1341〕 End If　▵1317

〔1342〕 End Repeat with Each　▵1315

〔1343〕 End If　▵1313

〔1344〕 End If　▵1026

〔1345〕 If 〔Shortcut Input as Number〕 is 7

〔1346〕 Comment
1-Hour Event Processor
*Real-time event handler for immediate notifications:

Processes events within next 60 minutes

Provides most accurate travel estimates

Recommended for hourly automation*

〔1347〕 Get File at Path Smart Calendar Reminder/aboutme.txt from Folder　»
• FileErrorIfNotFound: false

〔1348〕 Get Dictionary from 〔1347 File〕　» 1349 1352 1353

〔1349〕 Get Dictionary from 〔1348 Dictionary.HomeAddress〕　»

〔1350〕 Text　»
〔1349 Dictionary.street〕 〔1349 Dictionary.city〕 〔1349 Dictionary.state〕 〔1349 Dictionary.postcode〕 〔1349 Dictionary.country〕

〔1351〕 Set Variable Home_Address to 〔1350 Text〕

〔1352〕 Set Variable Travel_Method to 〔1348 Dictionary.TravelMethod〕

〔1353〕 Get Dictionary Value for ExtraTime in 〔1348 Dictionary〕　»

〔1354〕 Get Numbers from 〔1353 Dictionary Value〕　»

〔1355〕 Set Variable Extra_Time to 〔1354 Numbers〕

〔1356〕 Find Calendar Events All Calendar Events where　» 1357 1358 1359 1566
• ContentItemSortProperty: Start Date
• ContentItemSortOrder: Oldest First
• ContentItemFilter: • All the following are true
Start Date is in the next 30 minutes
Is All Day
Canceled is {"Bool":{"Value":false,"WFSerializationType":"WFBooleanSubstitutableState"}}

〔1357〕 If 〔1356 Calendar Events〕 has any value

〔1358〕 Count Items in 〔1356 Calendar Events〕　» 1570 1578

〔1359〕 Repeat with Each in 〔1356 Calendar Events〕

〔1360〕 If 〔Repeat Item’s Location〕 has any value

〔1361〕 Get Current Location　» 1372 1378 1440
• Accuracy: Best

〔1362〕 If All are true　〔Repeat Item’s Notes〕 has any value　〔Repeat Item’s Notes〕 begins with {　〔Repeat Item’s Notes〕 ends with }

〔1363〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY

〔1364〕 Get Dictionary from 〔Repeat Item’s Notes〕 　➔ NotesAddressDictionary　» 1365 1366 1367 1368 1369

〔1365〕 Set Variable CalendarNotesStreet to 〔1364 NotesAddressDictionary.Street〕

〔1366〕 Set Variable CalendarNotesCity to 〔1364 NotesAddressDictionary.City〕

〔1367〕 Set Variable CalendarNotesState to 〔1364 NotesAddressDictionary.State〕

〔1368〕 Set Variable CalendarNotesRegion to 〔1364 NotesAddressDictionary.Country〕

〔1369〕 Set Variable CalendarNotesZIPCode to 〔1364 NotesAddressDictionary.Postcode〕

〔1370〕 Text　»
〔CalendarNotesStreet〕 〔CalendarNotesCity〕 〔CalendarNotesState〕 〔CalendarNotesZIPCode〕 〔CalendarNotesRegion〕

〔1371〕 Set Variable NotesAddressString to 〔1370 Text〕

〔1372〕 If All are true　〔1361 Current Location’s Street〕 is 〔CalendarNotesStreet〕　〔1361 Current Location’s City〕 is 〔CalendarNotesCity〕　〔1361 Current Location’s State〕 is 〔CalendarNotesState〕　〔1361 Current Location’s Country〕 is 〔CalendarNotesRegion〕　〔1361 Current Location’s ZIP Code〕 is 〔CalendarNotesZIPCode〕

〔1373〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY -> CALENDAR EVENT ADDRESS IS THE SAME WITH CURRENT LOCATION

〔1374〕 Number 0　»

〔1375〕 Set Variable CurrentToDeparture to 〔1374 Number〕

〔1376〕 Otherwise

〔1377〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY -> CALENDAR EVENT ADDRESS IS NOT THE SAME WITH CURRENT LOCATION

〔1378〕 Get 〔TravelMethod〕 Time　» 1379 1387
• GetDirectionsCustomLocation: 〔1361 Current Location〕
• Destination: 〔NotesAddressString〕

〔1379〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔1378 Travel Time〕 　➔ C2DMatches　» 1380 1382 1384 1389 1396
• MatchTextCaseSensitive: false

〔1380〕 Count Items in 〔1379 C2DMatches〕　»

〔1381〕 If 〔1380 Count〕 > 1

〔1382〕 Get First Item from List 〔1379 C2DMatches〕　»

〔1383〕 Set Variable C2DHours to 〔1382 Item from List〕

〔1384〕 Get Last Item from List 〔1379 C2DMatches〕　»

〔1385〕 Set Variable C2DMinutes to 〔1384 Item from List〕

〔1386〕 Otherwise

〔1387〕 Match Text hour(?:s)? in 〔1378 Travel Time〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔1388〕 If 〔1387 C2DMatches’s text〕 has any value

〔1389〕 Get First Item from List 〔1379 C2DMatches〕　»

〔1390〕 Set Variable C2DHours to 〔1389 Item from List〕

〔1391〕 Number 0　»

〔1392〕 Set Variable C2DMinutes to 〔1391 Number〕

〔1393〕 Otherwise

〔1394〕 Number 0　»

〔1395〕 Set Variable C2DHours to 〔1394 Number〕

〔1396〕 Get First Item from List 〔1379 C2DMatches〕　»

〔1397〕 Set Variable C2DMinutes to 〔1396 Item from List〕

〔1398〕 End If

〔1399〕 End If　▵1386

〔1400〕 Calculate 〔C2DHours〕 × 60　»

〔1401〕 Calculate 〔1400 Calculation Result〕 + 〔C2DMinutes〕　»

〔1402〕 Set Variable CurrentToDeparture to 〔1401 Calculation Result〕

〔1403〕 End If　▵1376

〔1404〕 Get 〔TravelMethod〕 Time 　➔ DepartureToDestination　» 1405 1413
• GetDirectionsCustomLocation: 〔NotesAddressString〕
• Destination: 〔Repeat Item’s Location〕

〔1405〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔1404 DepartureToDestination〕 　➔ C2DMatches　» 1406 1408 1410 1415 1422
• MatchTextCaseSensitive: false

〔1406〕 Count Items in 〔1405 C2DMatches〕　»

〔1407〕 If 〔1406 Count〕 > 1

〔1408〕 Get First Item from List 〔1405 C2DMatches〕　»

〔1409〕 Set Variable C2DHours to 〔1408 Item from List〕

〔1410〕 Get Last Item from List 〔1405 C2DMatches〕　»

〔1411〕 Set Variable C2DMinutes to 〔1410 Item from List〕

〔1412〕 Otherwise

〔1413〕 Match Text hour(?:s)? in 〔1404 DepartureToDestination〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔1414〕 If 〔1413 C2DMatches’s text〕 has any value

〔1415〕 Get First Item from List 〔1405 C2DMatches〕　»

〔1416〕 Set Variable C2DHours to 〔1415 Item from List〕

〔1417〕 Number 0　»

〔1418〕 Set Variable C2DMinutes to 〔1417 Number〕

〔1419〕 Otherwise

〔1420〕 Number 0　»

〔1421〕 Set Variable C2DHours to 〔1420 Number〕

〔1422〕 Get First Item from List 〔1405 C2DMatches〕　»

〔1423〕 Set Variable C2DMinutes to 〔1422 Item from List〕

〔1424〕 End If

〔1425〕 End If　▵1412

〔1426〕 Calculate 〔C2DHours〕 × 60　»

〔1427〕 Calculate 〔1426 Calculation Result〕 + 〔C2DMinutes〕　»

〔1428〕 Calculate 〔1427 Calculation Result〕 + 〔CurrentToDeparture〕　»

〔1429〕 Set Variable TravelTime to 〔1428 Calculation Result〕

〔1430〕 Otherwise　▵1362

〔1431〕 Comment
CALENDER EVENT NOTES IS BLANK

〔1432〕 Get Dictionary from 〔HomeAddress〕 　➔ home_address_dictionary　» 1433 1434 1435 1436 1437

〔1433〕 Get Dictionary Value for street in 〔1432 home_address_dictionary〕 　➔ HomeStreet　» 1438 1440

〔1434〕 Get Dictionary Value for city in 〔1432 home_address_dictionary〕 　➔ HomeCity　» 1438 1440

〔1435〕 Get Dictionary Value for state in 〔1432 home_address_dictionary〕 　➔ HomeState　» 1438 1440

〔1436〕 Get Dictionary Value for country in 〔1432 home_address_dictionary〕 　➔ HomeCountry　» 1438 1440

〔1437〕 Get Dictionary Value for postcode in 〔1432 home_address_dictionary〕 　➔ HomePostcode　» 1438 1440

〔1438〕 If All are true　〔1433 HomeStreet〕 has any value　〔1434 HomeCity〕 has any value　〔1435 HomeState〕 has any value　〔1436 HomeCountry〕 has any value　〔1437 HomePostcode〕 has any value

〔1439〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED

〔1440〕 If All are true　〔1361 Current Location’s Street〕 is 〔1433 HomeStreet〕　〔1361 Current Location’s City〕 is 〔1434 HomeCity〕　〔1361 Current Location’s State〕 is 〔1435 HomeState〕　〔1361 Current Location’s Country〕 is 〔1436 HomeCountry〕　〔1361 Current Location’s ZIP Code〕 is 〔1437 HomePostcode〕

〔1441〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED -> HOME ADDRESS IS THE SAME WITH CURRENT LOCATION

〔1442〕 Number 0　»

〔1443〕 Set Variable CurrentToDeparture to 〔1442 Number〕

〔1444〕 Otherwise

〔1445〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED -> HOME ADDRESS IS NOT THE SAME WITH CURRENT LOCATION

〔1446〕 Get 〔TravelMethod〕 Time　» 1447 1455
• Destination: 〔HomeAddress〕

〔1447〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔1446 Travel Time〕 　➔ C2DMatches　» 1448 1450 1452 1457 1464
• MatchTextCaseSensitive: false

〔1448〕 Count Items in 〔1447 C2DMatches〕　»

〔1449〕 If 〔1448 Count〕 > 1

〔1450〕 Get First Item from List 〔1447 C2DMatches〕　»

〔1451〕 Set Variable C2DHours to 〔1450 Item from List〕

〔1452〕 Get Last Item from List 〔1447 C2DMatches〕　»

〔1453〕 Set Variable C2DMinutes to 〔1452 Item from List〕

〔1454〕 Otherwise

〔1455〕 Match Text hour(?:s)? in 〔1446 Travel Time〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔1456〕 If 〔1455 C2DMatches’s text〕 has any value

〔1457〕 Get First Item from List 〔1447 C2DMatches〕　»

〔1458〕 Set Variable C2DHours to 〔1457 Item from List〕

〔1459〕 Number 0　»

〔1460〕 Set Variable C2DMinutes to 〔1459 Number〕

〔1461〕 Otherwise

〔1462〕 Number 0　»

〔1463〕 Set Variable C2DHours to 〔1462 Number〕

〔1464〕 Get First Item from List 〔1447 C2DMatches〕　»

〔1465〕 Set Variable C2DMinutes to 〔1464 Item from List〕

〔1466〕 End If

〔1467〕 End If　▵1454

〔1468〕 Calculate 〔C2DHours〕 × 60　»

〔1469〕 Calculate 〔1468 Calculation Result〕 + 〔C2DMinutes〕　»

〔1470〕 Set Variable CurrentToDeparture to 〔1469 Calculation Result〕

〔1471〕 End If　▵1444

〔1472〕 Get 〔TravelMethod〕 Time 　➔ DepartureToDestination　»
• GetDirectionsCustomLocation: 〔HomeAddress〕
• Destination: 〔Repeat Item’s Location〕

〔1473〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔1472 DepartureToDestination〕 　➔ C2DMatches　» 1474 1476 1478 1483 1490
• MatchTextCaseSensitive: false

〔1474〕 Count Items in 〔1473 C2DMatches〕　»

〔1475〕 If 〔1474 Count〕 > 1

〔1476〕 Get First Item from List 〔1473 C2DMatches〕　»

〔1477〕 Set Variable C2DHours to 〔1476 Item from List〕

〔1478〕 Get Last Item from List 〔1473 C2DMatches〕　»

〔1479〕 Set Variable C2DMinutes to 〔1478 Item from List〕

〔1480〕 Otherwise

〔1481〕 Match Text hour(?:s)? in 〔151 DepartureToDestination〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔1482〕 If 〔1481 C2DMatches’s text〕 has any value

〔1483〕 Get First Item from List 〔1473 C2DMatches〕　»

〔1484〕 Set Variable C2DHours to 〔1483 Item from List〕

〔1485〕 Number 0　»

〔1486〕 Set Variable C2DMinutes to 〔1485 Number〕

〔1487〕 Otherwise

〔1488〕 Number 0　»

〔1489〕 Set Variable C2DHours to 〔1488 Number〕

〔1490〕 Get First Item from List 〔1473 C2DMatches〕　»

〔1491〕 Set Variable C2DMinutes to 〔1490 Item from List〕

〔1492〕 End If

〔1493〕 End If　▵1480

〔1494〕 Calculate 〔C2DHours〕 × 60　»

〔1495〕 Calculate 〔1494 Calculation Result〕 + 〔C2DMinutes〕　»

〔1496〕 Calculate 〔1495 Calculation Result〕 + 〔CurrentToDeparture〕　»

〔1497〕 Set Variable TravelTime to 〔1496 Calculation Result〕

〔1498〕 Otherwise　▵1438

〔1499〕 Text
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS NOT MAINTAINED

〔1500〕 Get 〔TravelMethod〕 Time　» 1501 1509
• Destination: 〔Repeat Item’s Location〕

〔1501〕 Match Text (\d+)\s*hour(?:s)?(?:\s*(\d+)\s*minute(?:s)?)?|(\d+)\s*minute(?:s)? in 〔1500 Travel Time〕 　➔ C2DMatches　» 1502 1504 1506 1511 1518
• MatchTextCaseSensitive: false

〔1502〕 Count Items in 〔1501 C2DMatches〕　»

〔1503〕 If 〔1502 Count〕 > 1

〔1504〕 Get First Item from List 〔1501 C2DMatches〕　»

〔1505〕 Set Variable C2DHours to 〔1504 Item from List〕

〔1506〕 Get Last Item from List 〔1501 C2DMatches〕　»

〔1507〕 Set Variable C2DMinutes to 〔1506 Item from List〕

〔1508〕 Otherwise

〔1509〕 Match Text hour(?:s)? in 〔1500 Travel Time〕 　➔ C2DMatches　»
• MatchTextCaseSensitive: true

〔1510〕 If 〔1509 C2DMatches’s text〕 has any value

〔1511〕 Get First Item from List 〔1501 C2DMatches〕　»

〔1512〕 Set Variable C2DHours to 〔1511 Item from List〕

〔1513〕 Number 0　»

〔1514〕 Set Variable C2DMinutes to 〔1513 Number〕

〔1515〕 Otherwise

〔1516〕 Number 0　»

〔1517〕 Set Variable C2DHours to 〔1516 Number〕

〔1518〕 Get First Item from List 〔1501 C2DMatches〕　»

〔1519〕 Set Variable C2DMinutes to 〔1518 Item from List〕

〔1520〕 End If

〔1521〕 End If　▵1508

〔1522〕 Calculate 〔C2DHours〕 × 60　»

〔1523〕 Calculate 〔1522 Calculation Result〕 + 〔C2DMinutes〕　»

〔1524〕 Set Variable TravelTime to 〔1523 Calculation Result〕

〔1525〕 End If　▵1498

〔1526〕 End If　▵1430

〔1527〕 Otherwise　▵1360

〔1528〕 Number 0　»

〔1529〕 Set Variable TravelTime to 〔1528 Number〕

〔1530〕 End If

〔1531〕 Find Alarm All Alarm　» 1532 1533
• ContentItemFilter: {  "Value": {
      "WFActionParameterFilterPrefix": 1,
      "WFActionParameterFilterTemplates": [],
      "WFContentPredicateBoundedDate": false
   },
   "WFSerializationType": "WFContentPredicateTableTemplate"
}

〔1532〕 If 〔1531 Alarms〕 has any value

〔1533〕 Repeat[2] with Each in 〔1531 Alarms〕

〔1534〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ AlarmLabelDictionary　» 1535 1536 1538

〔1535〕 Get Dictionary Value for Event in 〔1534 AlarmLabelDictionary〕 　➔ Event　» 1540

〔1536〕 Get Dictionary Value for From in 〔1534 AlarmLabelDictionary〕 　➔ From　»

〔1537〕 Get Dates from 〔1536 From〕 　➔ FromDate　» 1540

〔1538〕 Get Dictionary Value for To in 〔1534 AlarmLabelDictionary〕 　➔ To　»

〔1539〕 Get Dates from 〔1538 To〕 　➔ ToDate　»

〔1540〕 If All are true　〔1535 Event’s Name〕 is 〔Repeat Item〕　〔1537 FromDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔Repeat Item’s Start Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕　〔1539 ToDate{"Date Style":"Custom","WFDateFormat":"HH:mm","WFISO8601IncludeTime":false}〕 is 〔Repeat Item’s End Date{"Date Style":"Custom","WFDateFormat":"HH:mm","WFISO8601IncludeTime":false}〕

〔1541〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔1542〕 End If

〔1543〕 End Repeat[2] with Each　▵1533

〔1544〕 End If　▵1532

〔1545〕 Calculate 〔TravelTime〕 + 〔Extra_Time〕　»

〔1546〕 Adjust Subtract Date 〔Repeat Item’s Start Date〕 　➔ Supposed_Alarm_Time　» 1548 1550 1553 1560 1561
• Duration: 〔1545 Calculation Result〕 min

〔1547〕 Date Current Date　»

〔1548〕 If Any are true　〔1546 Supposed_Alarm_Time〕 < 〔1547 Date〕　〔1546 Supposed_Alarm_Time〕 is 〔1547 Date〕

〔1549〕 If 〔Repeat Item’s Location〕 has any value

〔1550〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 at 〔Repeat Item’s Location〕  which  was supposed to get ready at 〔1546 Supposed_Alarm_Time〕. Please check.

〔1551〕 Set Variable Text to 〔1550 Text〕

〔1552〕 Otherwise

〔1553〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 which  was supposed to get ready at 〔1546 Supposed_Alarm_Time〕. Please check.

〔1554〕 Set Variable Text to 〔1553 Text〕

〔1555〕 End If

〔1556〕 Show Alert 〔Text〕

〔1557〕 Show Notification 〔Text〕

〔1558〕 Speak Text
• Text: 〔Text〕

〔1559〕 Otherwise　▵1548

〔1560〕 Dictionary　»
{  "Event": "〔Repeat Item〕",
   "From": "〔Repeat Item’s Start Date〕",
   "To": "〔Repeat Item’s End Date〕",
   "Location": "〔Repeat Item’s Location〕",
   "AlarmTime": "〔1546 Supposed_Alarm_Time〕"
}

〔1561〕 Add Alarm for 〔1546 Supposed_Alarm_Time〕 called 〔1560 Dictionary〕

〔1562〕 End If

〔1563〕 End Repeat with Each　▵1359

〔1564〕 Number 3　»

〔1565〕 Repeat 〔1564 Number〕 Times

〔1566〕 Repeat[2] with Each in 〔1356 Calendar Events〕

〔1567〕 Format Date 〔Repeat Item 2’s Start Date〕　» 1571 1574 1579 1582
• DateFormatStyle: None

〔1568〕 Format Date 〔Repeat Item 2’s End Date〕　» 1571 1574 1579 1582
• DateFormatStyle: None

〔1569〕 If 〔Repeat Item 2’s Location〕 has any value

〔1570〕 If 〔1358 Count〕 > 1

〔1571〕 Text　»
Event 〔Repeat Index 2〕 〔Repeat Item 2〕 from 〔1567 Formatted Date〕 to 〔1568 Formatted Date〕 at 〔Repeat Item 2’s Location〕

〔1572〕 Set Variable Text to 〔1571 Text〕

〔1573〕 Otherwise

〔1574〕 Text　»
Event  〔Repeat Item 2〕 from 〔1567 Formatted Date〕 to 〔1568 Formatted Date〕 at 〔Repeat Item 2’s Location〕

〔1575〕 Set Variable Text to 〔1574 Text〕

〔1576〕 End If

〔1577〕 Otherwise　▵1569

〔1578〕 If 〔1358 Count〕 > 1

〔1579〕 Text　»
Event 〔Repeat Index 2〕 〔Repeat Item 2〕 from 〔1567 Formatted Date〕 to 〔1568 Formatted Date〕

〔1580〕 Set Variable Text to 〔1579 Text〕

〔1581〕 Otherwise

〔1582〕 Text　»
Event  〔Repeat Item 2〕 from 〔1567 Formatted Date〕 to 〔1568 Formatted Date〕

〔1583〕 Set Variable Text to 〔1582 Text〕

〔1584〕 End If

〔1585〕 End If　▵1577

〔1586〕 Speak Text
• Text: 〔Text〕

〔1587〕 Wait 1 seconds

〔1588〕 End Repeat[2] with Each　▵1566

〔1589〕 End Repeat Times　▵1565

〔1590〕 End If　▵1357

〔1591〕 End If　▵1345

〔1592〕 End If　▵91