Smart Calendar Reminder V1 (1893 actions, 561 KB)
"WFQuickActionSurfaces": [],
"WFWorkflowClientVersion": "3303.0.5",
"WFWorkflowHasOutputFallback": false,
"WFWorkflowHasShortcutInputVariables": true,
"WFWorkflowIcon": {
   "WFWorkflowIconStartColor": 431817727,
   "WFWorkflowIconGlyphNumber": 61701
},
"WFWorkflowImportQuestions": [],
"WFWorkflowInputContentItemClasses": [],
"WFWorkflowMinimumClientVersion": 3010,
"WFWorkflowMinimumClientVersionString": "3010",
"WFWorkflowOutputContentItemClasses": [],
"WFWorkflowTypes": []


〔0〕 If 〔Shortcut Input〕 does not have any value

〔1〕 Comment
Initial setup and version update check when no input is provided

〔2〕 Comment
Inspired by [Schedule Shortcut or Alarm] but designed to work smarter for my needs! Instead of manually inputting each trigger or alarm, this shortcut leverages my Calendar as the ultimate data source. It automatically scans for upcoming events, then:

• Speaks out the event details
• Sets a tailored alarm—accounting for travel and prep time—right when you need it

No more early, forgettable reminders. It keeps your schedule perfectly in sync. Give it a try and let your Calendar do the heavy lifting!

〔3〕 Dictionary 　➔ Version Dictionary 　» 4 5 7 9 10 11 12 20 21 25 31 46 72
{  "Name": "Smart Calendar Reminder",
   "Version": "2.6",
   "RH ID": "21959",
   "Icons": {
      "Update": "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",
      "Skip": "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",
      "Not Now": "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"
   }
}

〔4〕 Get Contents of URL https://routinehub.co/api/v1/shortcuts/〔3 Version Dictionary .RH ID〕/versions/latest 　➔ RH Server　» 6 8 11 16 20

〔5〕 Get File at Path 〔3 Version Dictionary .Name〕/Skip.txt from Folder　»
• File: {  "fileLocation": {
      "crossDeviceItemID": "docs.icloud.com:com.apple.CloudDocs/documents/95d6214c39557e3de40d802073a860c04f3aed5b",
      "fileProviderDomainID": "com.apple.CloudDocs.iCloudDriveFileProvider/38059A1C-DC76-4B89-B62F-250A61DBFC73",
      "appContainerBundleIdentifier": "com.apple.shortcuts",
      "relativeSubpath": "",
      "WFFileLocationType": "Shortcuts"
   },
   "filename": "Documents",
   "displayName": "Shortcuts"
}
• FileErrorIfNotFound: false
• ShowFilePicker: false
• GetFolderContents: true

〔6〕 If 〔5 File as Text〕 is not 〔4 RH Server as Dictionary.Version〕

〔7〕 Get Dictionary Value for Version in 〔3 Version Dictionary 〕　»

〔8〕 If 〔7 Dictionary Value as Text〕 is not 〔4 RH Server as Dictionary.Version〕

〔9〕 Base64 Decode 〔3 Version Dictionary .Icons.Update〕

〔10〕 Show Alert A new version of 〔3 Version Dictionary .Name〕 is available to download!

〔11〕 Text　» 14
⬆️ Update ⬆️

A new version of 〔3 Version Dictionary .Name〕 is available to download!

〔3 Version Dictionary .Version〕 ↗ 〔4 RH Server as Dictionary.Version〕   —   〔4 RH Server as Dictionary.Release〕

〔4 RH Server as Dictionary.Notes〕

〔12〕 Text　»
BEGIN:VCARD
VERSION:3.0
N;CHARSET=utf-8:Update;;;;
PHOTO;ENCODING=b:〔3 Version Dictionary .Icons.Update〕
END:VCARD

BEGIN:VCARD
VERSION:3.0
N;CHARSET=utf-8:Skip;;;;
PHOTO;ENCODING=b:〔3 Version Dictionary .Icons.Skip〕
END:VCARD

BEGIN:VCARD
VERSION:3.0
N;CHARSET=utf-8:Not Now;;;;
PHOTO;ENCODING=b:〔3 Version Dictionary .Icons.Not Now〕
END:VCARD

〔13〕 Set Name of 〔12 Text〕 to updateprompt.vcf　»

〔14〕 Choose from List 〔13 Renamed Item as Contact〕　» 15 19
• ChooseFromListActionPrompt: 〔11 Text〕

〔15〕 If 〔14 Chosen Item as Text〕 is Update

〔16〕 Open URL 〔4 RH Server as Dictionary.URL〕
• Show-WFInput: true

〔17〕 Stop This Shortcut

〔18〕 End If

〔19〕 If 〔14 Chosen Item as Text〕 is Skip

〔20〕 Save File 〔4 RH Server as Dictionary.Version〕
• AskWhereToSave: false
• SaveFileOverwrite: true
• FileDestinationPath: 〔3 Version Dictionary .Name〕/Skip.txt

〔21〕 Show Alert This version of 〔3 Version Dictionary .Name〕 has been skipped!
• AlertActionTitle: ✅ Done ✅
• AlertActionCancelButtonShown: false

〔22〕 End If

〔23〕 End If　▵8

〔24〕 End If　▵6

〔25〕 Get File at Path 〔3 Version Dictionary .Name〕/Welcome.pdf from Folder　»
• FileErrorIfNotFound: false

〔26〕 If 〔25 File’s File Size〕 does not have any value

〔27〕 Text　»
<html><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Smart Calendar Reminder: Your Intelligent Schedule Assistant</title><style>
    /* cspell:disable-file */
    /* webkit printing magic: print all background colors */
    html {
        -webkit-print-color-adjust: exact;
    }
    * {
        box-sizing: border-box;
        -webkit-print-color-adjust: exact;
    }
\u{space}\u{space}\u{space}\u{space}
    html,
    body {
        margin: 0;
        padding: 0;
    }
    @media only screen {
        body {
            margin: 2em auto;
            max-width: 900px;
            color: rgb(55, 53, 47);
        }
    }
\u{space}\u{space}\u{space}\u{space}
    body {
        line-height: 1.5;
        white-space: pre-wrap;
    }
\u{space}\u{space}\u{space}\u{space}
    a,
    a.visited {
        color: inherit;
        text-decoration: underline;
    }
\u{space}\u{space}\u{space}\u{space}
    .pdf-relative-link-path {
        font-size: 80%;
        color: #444;
    }
\u{space}\u{space}\u{space}\u{space}
    h1,
    h2,
    h3 {
        letter-spacing: -0.01em;
        line-height: 1.2;
        font-weight: 600;
        margin-bottom: 0;
    }
\u{space}\u{space}\u{space}\u{space}
    .page-title {
        font-size: 2.5rem;
        font-weight: 700;
        margin-top: 0;
        margin-bottom: 0.75em;
    }
\u{space}\u{space}\u{space}\u{space}
    h1 {
        font-size: 1.875rem;
        margin-top: 1.875rem;
    }
\u{space}\u{space}\u{space}\u{space}
    h2 {
        font-size: 1.5rem;
        margin-top: 1.5rem;
    }
\u{space}\u{space}\u{space}\u{space}
    h3 {
        font-size: 1.25rem;
        margin-top: 1.25rem;
    }
\u{space}\u{space}\u{space}\u{space}
    .source {
        border: 1px solid #ddd;
        border-radius: 3px;
        padding: 1.5em;
        word-break: break-all;
    }
\u{space}\u{space}\u{space}\u{space}
    .callout {
        border-radius: 3px;
        padding: 1rem;
    }
\u{space}\u{space}\u{space}\u{space}
    figure {
        margin: 1.25em 0;
        page-break-inside: avoid;
    }
\u{space}\u{space}\u{space}\u{space}
    figcaption {
        opacity: 0.5;
        font-size: 85%;
        margin-top: 0.5em;
    }
\u{space}\u{space}\u{space}\u{space}
    mark {
        background-color: transparent;
    }
\u{space}\u{space}\u{space}\u{space}
    .indented {
        padding-left: 1.5em;
    }
\u{space}\u{space}\u{space}\u{space}
    hr {
        background: transparent;
        display: block;
        width: 100%;
        height: 1px;
        visibility: visible;
        border: none;
        border-bottom: 1px solid rgba(55, 53, 47, 0.09);
    }
\u{space}\u{space}\u{space}\u{space}
    img {
        max-width: 100%;
    }
\u{space}\u{space}\u{space}\u{space}
    @media only print {
        img {
            max-height: 100vh;
            object-fit: contain;
        }
    }
\u{space}\u{space}\u{space}\u{space}
    @page {
        margin: 1in;
    }
\u{space}\u{space}\u{space}\u{space}
    .collection-content {
        font-size: 0.875rem;
    }
\u{space}\u{space}\u{space}\u{space}
    .column-list {
        display: flex;
        justify-content: space-between;
    }
\u{space}\u{space}\u{space}\u{space}
    .column {
        padding: 0 1em;
    }
\u{space}\u{space}\u{space}\u{space}
    .column:first-child {
        padding-left: 0;
    }
\u{space}\u{space}\u{space}\u{space}
    .column:last-child {
        padding-right: 0;
    }
\u{space}\u{space}\u{space}\u{space}
    .table_of_contents-item {
        display: block;
        font-size: 0.875rem;
        line-height: 1.3;
        padding: 0.125rem;
    }
\u{space}\u{space}\u{space}\u{space}
    .table_of_contents-indent-1 {
        margin-left: 1.5rem;
    }
\u{space}\u{space}\u{space}\u{space}
    .table_of_contents-indent-2 {
        margin-left: 3rem;
    }
\u{space}\u{space}\u{space}\u{space}
    .table_of_contents-indent-3 {
        margin-left: 4.5rem;
    }
\u{space}\u{space}\u{space}\u{space}
    .table_of_contents-link {
        text-decoration: none;
        opacity: 0.7;
        border-bottom: 1px solid rgba(55, 53, 47, 0.18);
    }
\u{space}\u{space}\u{space}\u{space}
    table,
    th,
    td {
        border: 1px solid rgba(55, 53, 47, 0.09);
        border-collapse: collapse;
    }
\u{space}\u{space}\u{space}\u{space}
    table {
        border-left: none;
        border-right: none;
    }
\u{space}\u{space}\u{space}\u{space}
    th,
    td {
        font-weight: normal;
        padding: 0.25em 0.5em;
        line-height: 1.5;
        min-height: 1.5em;
        text-align: left;
    }
\u{space}\u{space}\u{space}\u{space}
    th {
        color: rgba(55, 53, 47, 0.6);
    }
\u{space}\u{space}\u{space}\u{space}
    ol,
    ul {
        margin: 0;
        margin-block-start: 0.6em;
        margin-block-end: 0.6em;
    }
\u{space}\u{space}\u{space}\u{space}
    li > ol:first-child,
    li > ul:first-child {
        margin-block-start: 0.6em;
    }
\u{space}\u{space}\u{space}\u{space}
    ul > li {
        list-style: disc;
    }
\u{space}\u{space}\u{space}\u{space}
    ul.to-do-list {
        padding-inline-start: 0;
    }
\u{space}\u{space}\u{space}\u{space}
    ul.to-do-list > li {
        list-style: none;
    }
\u{space}\u{space}\u{space}\u{space}
    .to-do-children-checked {
        text-decoration: line-through;
        opacity: 0.375;
    }
\u{space}\u{space}\u{space}\u{space}
    ul.toggle > li {
        list-style: none;
    }
\u{space}\u{space}\u{space}\u{space}
    ul {
        padding-inline-start: 1.7em;
    }
\u{space}\u{space}\u{space}\u{space}
    ul > li {
        padding-left: 0.1em;
    }
\u{space}\u{space}\u{space}\u{space}
    ol {
        padding-inline-start: 1.6em;
    }
\u{space}\u{space}\u{space}\u{space}
    ol > li {
        padding-left: 0.2em;
    }
\u{space}\u{space}\u{space}\u{space}
    .mono ol {
        padding-inline-start: 2em;
    }
\u{space}\u{space}\u{space}\u{space}
    .mono ol > li {
        text-indent: -0.4em;
    }
\u{space}\u{space}\u{space}\u{space}
    .toggle {
        padding-inline-start: 0em;
        list-style-type: none;
    }
\u{space}\u{space}\u{space}\u{space}
    /* Indent toggle children */
    .toggle > li > details {
        padding-left: 1.7em;
    }
\u{space}\u{space}\u{space}\u{space}
    .toggle > li > details > summary {
        margin-left: -1.1em;
    }
\u{space}\u{space}\u{space}\u{space}
    .selected-value {
        display: inline-block;
        padding: 0 0.5em;
        background: rgba(206, 205, 202, 0.5);
        border-radius: 3px;
        margin-right: 0.5em;
        margin-top: 0.3em;
        margin-bottom: 0.3em;
        white-space: nowrap;
    }
\u{space}\u{space}\u{space}\u{space}
    .collection-title {
        display: inline-block;
        margin-right: 1em;
    }
\u{space}\u{space}\u{space}\u{space}
    .page-description {
        margin-bottom: 2em;
    }
\u{space}\u{space}\u{space}\u{space}
    .simple-table {
        margin-top: 1em;
        font-size: 0.875rem;
        empty-cells: show;
    }
    .simple-table td {
        height: 29px;
        min-width: 120px;
    }
\u{space}\u{space}\u{space}\u{space}
    .simple-table th {
        height: 29px;
        min-width: 120px;
    }
\u{space}\u{space}\u{space}\u{space}
    .simple-table-header-color {
        background: rgb(247, 246, 243);
        color: black;
    }
    .simple-table-header {
        font-weight: 500;
    }
\u{space}\u{space}\u{space}\u{space}
    time {
        opacity: 0.5;
    }
\u{space}\u{space}\u{space}\u{space}
    .icon {
        display: inline-block;
        max-width: 1.2em;
        max-height: 1.2em;
        text-decoration: none;
        vertical-align: text-bottom;
        margin-right: 0.5em;
    }
\u{space}\u{space}\u{space}\u{space}
    img.icon {
        border-radius: 3px;
    }
\u{space}\u{space}\u{space}\u{space}
    .user-icon {
        width: 1.5em;
        height: 1.5em;
        border-radius: 100%;
        margin-right: 0.5rem;
    }
\u{space}\u{space}\u{space}\u{space}
    .user-icon-inner {
        font-size: 0.8em;
    }
\u{space}\u{space}\u{space}\u{space}
    .text-icon {
        border: 1px solid #000;
        text-align: center;
    }
\u{space}\u{space}\u{space}\u{space}
    .page-cover-image {
        display: block;
        object-fit: cover;
        width: 100%;
        max-height: 30vh;
    }
\u{space}\u{space}\u{space}\u{space}
    .page-header-icon {
        font-size: 3rem;
        margin-bottom: 1rem;
    }
\u{space}\u{space}\u{space}\u{space}
    .page-header-icon-with-cover {
        margin-top: -0.72em;
        margin-left: 0.07em;
    }
\u{space}\u{space}\u{space}\u{space}
    .page-header-icon img {
        border-radius: 3px;
    }
\u{space}\u{space}\u{space}\u{space}
    .link-to-page {
        margin: 1em 0;
        padding: 0;
        border: none;
        font-weight: 500;
    }
\u{space}\u{space}\u{space}\u{space}
    p > .user {
        opacity: 0.5;
    }
\u{space}\u{space}\u{space}\u{space}
    td > .user,
    td > time {
        white-space: nowrap;
    }
\u{space}\u{space}\u{space}\u{space}
    input[type="checkbox"] {
        transform: scale(1.5);
        margin-right: 0.6em;
        vertical-align: middle;
    }
\u{space}\u{space}\u{space}\u{space}
    p {
        margin-top: 0.5em;
        margin-bottom: 0.5em;
    }
\u{space}\u{space}\u{space}\u{space}
    .image {
        border: none;
        margin: 1.5em 0;
        padding: 0;
        border-radius: 0;
        text-align: center;
    }
\u{space}\u{space}\u{space}\u{space}
    .code,
    code {
        background: rgba(135, 131, 120, 0.15);
        border-radius: 3px;
        padding: 0.2em 0.4em;
        border-radius: 3px;
        font-size: 85%;
        tab-size: 2;
    }
\u{space}\u{space}\u{space}\u{space}
    code {
        color: #eb5757;
    }
\u{space}\u{space}\u{space}\u{space}
    .code {
        padding: 1.5em 1em;
    }
\u{space}\u{space}\u{space}\u{space}
    .code-wrap {
        white-space: pre-wrap;
        word-break: break-all;
    }
\u{space}\u{space}\u{space}\u{space}
    .code > code {
        background: none;
        padding: 0;
        font-size: 100%;
        color: inherit;
    }
\u{space}\u{space}\u{space}\u{space}
    blockquote {
        font-size: 1.25em;
        margin: 1em 0;
        padding-left: 1em;
        border-left: 3px solid rgb(55, 53, 47);
    }
\u{space}\u{space}\u{space}\u{space}
    .bookmark {
        text-decoration: none;
        max-height: 8em;
        padding: 0;
        display: flex;
        width: 100%;
        align-items: stretch;
    }
\u{space}\u{space}\u{space}\u{space}
    .bookmark-title {
        font-size: 0.85em;
        overflow: hidden;
        text-overflow: ellipsis;
        height: 1.75em;
        white-space: nowrap;
    }
\u{space}\u{space}\u{space}\u{space}
    .bookmark-text {
        display: flex;
        flex-direction: column;
    }
\u{space}\u{space}\u{space}\u{space}
    .bookmark-info {
        flex: 4 1 180px;
        padding: 12px 14px 14px;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
    }
\u{space}\u{space}\u{space}\u{space}
    .bookmark-image {
        width: 33%;
        flex: 1 1 180px;
        display: block;
        position: relative;
        object-fit: cover;
        border-radius: 1px;
    }
\u{space}\u{space}\u{space}\u{space}
    .bookmark-description {
        color: rgba(55, 53, 47, 0.6);
        font-size: 0.75em;
        overflow: hidden;
        max-height: 4.5em;
        word-break: break-word;
    }
\u{space}\u{space}\u{space}\u{space}
    .bookmark-href {
        font-size: 0.75em;
        margin-top: 0.25em;
    }
\u{space}\u{space}\u{space}\u{space}
    .sans { font-family: ui-sans-serif, -apple-system, BlinkMacSystemFont, "Segoe UI Variable Display", "Segoe UI", Helvetica, "Apple Color Emoji", Arial, sans-serif, "Segoe UI Emoji", "Segoe UI Symbol"; }
    .code { font-family: "SFMono-Regular", Menlo, Consolas, "PT Mono", "Liberation Mono", Courier, monospace; }
    .serif { font-family: Lyon-Text, Georgia, ui-serif, serif; }
    .mono { font-family: iawriter-mono, Nitti, Menlo, Courier, monospace; }
    .pdf .sans { font-family: Inter, ui-sans-serif, -apple-system, BlinkMacSystemFont, "Segoe UI Variable Display", "Segoe UI", Helvetica, "Apple Color Emoji", Arial, sans-serif, "Segoe UI Emoji", "Segoe UI Symbol", 'Twemoji', 'Noto Color Emoji', 'Noto Sans CJK JP'; }
    .pdf:lang(zh-CN) .sans { font-family: Inter, ui-sans-serif, -apple-system, BlinkMacSystemFont, "Segoe UI Variable Display", "Segoe UI", Helvetica, "Apple Color Emoji", Arial, sans-serif, "Segoe UI Emoji", "Segoe UI Symbol", 'Twemoji', 'Noto Color Emoji', 'Noto Sans CJK SC'; }
    .pdf:lang(zh-TW) .sans { font-family: Inter, ui-sans-serif, -apple-system, BlinkMacSystemFont, "Segoe UI Variable Display", "Segoe UI", Helvetica, "Apple Color Emoji", Arial, sans-serif, "Segoe UI Emoji", "Segoe UI Symbol", 'Twemoji', 'Noto Color Emoji', 'Noto Sans CJK TC'; }
    .pdf:lang(ko-KR) .sans { font-family: Inter, ui-sans-serif, -apple-system, BlinkMacSystemFont, "Segoe UI Variable Display", "Segoe UI", Helvetica, "Apple Color Emoji", Arial, sans-serif, "Segoe UI Emoji", "Segoe UI Symbol", 'Twemoji', 'Noto Color Emoji', 'Noto Sans CJK KR'; }
    .pdf .code { font-family: Source Code Pro, "SFMono-Regular", Menlo, Consolas, "PT Mono", "Liberation Mono", Courier, monospace, 'Twemoji', 'Noto Color Emoji', 'Noto Sans Mono CJK JP'; }
    .pdf:lang(zh-CN) .code { font-family: Source Code Pro, "SFMono-Regular", Menlo, Consolas, "PT Mono", "Liberation Mono", Courier, monospace, 'Twemoji', 'Noto Color Emoji', 'Noto Sans Mono CJK SC'; }
    .pdf:lang(zh-TW) .code { font-family: Source Code Pro, "SFMono-Regular", Menlo, Consolas, "PT Mono", "Liberation Mono", Courier, monospace, 'Twemoji', 'Noto Color Emoji', 'Noto Sans Mono CJK TC'; }
    .pdf:lang(ko-KR) .code { font-family: Source Code Pro, "SFMono-Regular", Menlo, Consolas, "PT Mono", "Liberation Mono", Courier, monospace, 'Twemoji', 'Noto Color Emoji', 'Noto Sans Mono CJK KR'; }
    .pdf .serif { font-family: PT Serif, Lyon-Text, Georgia, ui-serif, serif, 'Twemoji', 'Noto Color Emoji', 'Noto Serif CJK JP'; }
    .pdf:lang(zh-CN) .serif { font-family: PT Serif, Lyon-Text, Georgia, ui-serif, serif, 'Twemoji', 'Noto Color Emoji', 'Noto Serif CJK SC'; }
    .pdf:lang(zh-TW) .serif { font-family: PT Serif, Lyon-Text, Georgia, ui-serif, serif, 'Twemoji', 'Noto Color Emoji', 'Noto Serif CJK TC'; }
    .pdf:lang(ko-KR) .serif { font-family: PT Serif, Lyon-Text, Georgia, ui-serif, serif, 'Twemoji', 'Noto Color Emoji', 'Noto Serif CJK KR'; }
    .pdf .mono { font-family: PT Mono, iawriter-mono, Nitti, Menlo, Courier, monospace, 'Twemoji', 'Noto Color Emoji', 'Noto Sans Mono CJK JP'; }
    .pdf:lang(zh-CN) .mono { font-family: PT Mono, iawriter-mono, Nitti, Menlo, Courier, monospace, 'Twemoji', 'Noto Color Emoji', 'Noto Sans Mono CJK SC'; }
    .pdf:lang(zh-TW) .mono { font-family: PT Mono, iawriter-mono, Nitti, Menlo, Courier, monospace, 'Twemoji', 'Noto Color Emoji', 'Noto Sans Mono CJK TC'; }
    .pdf:lang(ko-KR) .mono { font-family: PT Mono, iawriter-mono, Nitti, Menlo, Courier, monospace, 'Twemoji', 'Noto Color Emoji', 'Noto Sans Mono CJK KR'; }
    .highlight-default {
        color: rgba(55, 53, 47, 1);
    }
    .highlight-gray {
        color: rgba(120, 119, 116, 1);
        fill: rgba(120, 119, 116, 1);
    }
    .highlight-brown {
        color: rgba(159, 107, 83, 1);
        fill: rgba(159, 107, 83, 1);
    }
    .highlight-orange {
        color: rgba(217, 115, 13, 1);
        fill: rgba(217, 115, 13, 1);
    }
    .highlight-yellow {
        color: rgba(203, 145, 47, 1);
        fill: rgba(203, 145, 47, 1);
    }
    .highlight-teal {
        color: rgba(68, 131, 97, 1);
        fill: rgba(68, 131, 97, 1);
    }
    .highlight-blue {
        color: rgba(51, 126, 169, 1);
        fill: rgba(51, 126, 169, 1);
    }
    .highlight-purple {
        color: rgba(144, 101, 176, 1);
        fill: rgba(144, 101, 176, 1);
    }
    .highlight-pink {
        color: rgba(193, 76, 138, 1);
        fill: rgba(193, 76, 138, 1);
    }
    .highlight-red {
        color: rgba(212, 76, 71, 1);
        fill: rgba(212, 76, 71, 1);
    }
    .highlight-default_background {
        color: rgba(55, 53, 47, 1);
    }
    .highlight-gray_background {
        background: rgba(248, 248, 247, 1);
    }
    .highlight-brown_background {
        background: rgba(244, 238, 238, 1);
    }
    .highlight-orange_background {
        background: rgba(251, 236, 221, 1);
    }
    .highlight-yellow_background {
        background: rgba(251, 243, 219, 1);
    }
    .highlight-teal_background {
        background: rgba(237, 243, 236, 1);
    }
    .highlight-blue_background {
        background: rgba(231, 243, 248, 1);
    }
    .highlight-purple_background {
        background: rgba(248, 243, 252, 1);
    }
    .highlight-pink_background {
        background: rgba(252, 241, 246, 1);
    }
    .highlight-red_background {
        background: rgba(253, 235, 236, 1);
    }
    .block-color-default {
        color: inherit;
        fill: inherit;
    }
    .block-color-gray {
        color: rgba(120, 119, 116, 1);
        fill: rgba(120, 119, 116, 1);
    }
    .block-color-brown {
        color: rgba(159, 107, 83, 1);
        fill: rgba(159, 107, 83, 1);
    }
    .block-color-orange {
        color: rgba(217, 115, 13, 1);
        fill: rgba(217, 115, 13, 1);
    }
    .block-color-yellow {
        color: rgba(203, 145, 47, 1);
        fill: rgba(203, 145, 47, 1);
    }
    .block-color-teal {
        color: rgba(68, 131, 97, 1);
        fill: rgba(68, 131, 97, 1);
    }
    .block-color-blue {
        color: rgba(51, 126, 169, 1);
        fill: rgba(51, 126, 169, 1);
    }
    .block-color-purple {
        color: rgba(144, 101, 176, 1);
        fill: rgba(144, 101, 176, 1);
    }
    .block-color-pink {
        color: rgba(193, 76, 138, 1);
        fill: rgba(193, 76, 138, 1);
    }
    .block-color-red {
        color: rgba(212, 76, 71, 1);
        fill: rgba(212, 76, 71, 1);
    }
    .block-color-default_background {
        color: inherit;
        fill: inherit;
    }
    .block-color-gray_background {
        background: rgba(248, 248, 247, 1);
    }
    .block-color-brown_background {
        background: rgba(244, 238, 238, 1);
    }
    .block-color-orange_background {
        background: rgba(251, 236, 221, 1);
    }
    .block-color-yellow_background {
        background: rgba(251, 243, 219, 1);
    }
    .block-color-teal_background {
        background: rgba(237, 243, 236, 1);
    }
    .block-color-blue_background {
        background: rgba(231, 243, 248, 1);
    }
    .block-color-purple_background {
        background: rgba(248, 243, 252, 1);
    }
    .block-color-pink_background {
        background: rgba(252, 241, 246, 1);
    }
    .block-color-red_background {
        background: rgba(253, 235, 236, 1);
    }
    .select-value-color-uiBlue { background-color: undefined; }
    .select-value-color-pink { background-color: rgba(225, 136, 179, 0.27); }
    .select-value-color-purple { background-color: rgba(168, 129, 197, 0.27); }
    .select-value-color-green { background-color: rgba(123, 183, 129, 0.27); }
    .select-value-color-gray { background-color: rgba(84, 72, 49, 0.15); }
    .select-value-color-transparentGray { background-color: undefined; }
    .select-value-color-translucentGray { background-color: undefined; }
    .select-value-color-orange { background-color: rgba(224, 124, 57, 0.27); }
    .select-value-color-brown { background-color: rgba(210, 162, 141, 0.35); }
    .select-value-color-red { background-color: rgba(244, 171, 159, 0.4); }
    .select-value-color-yellow { background-color: rgba(236, 191, 66, 0.39); }
    .select-value-color-blue { background-color: rgba(93, 165, 206, 0.27); }
    .select-value-color-pageGlass { background-color: undefined; }
    .select-value-color-washGlass { background-color: undefined; }
\u{space}\u{space}\u{space}\u{space}
    .checkbox {
        display: inline-flex;
        vertical-align: text-bottom;
        width: 16;
        height: 16;
        background-size: 16px;
        margin-left: 2px;
        margin-right: 5px;
    }
\u{space}\u{space}\u{space}\u{space}
    .checkbox-on {
        background-image: url("data:image/svg+xml;charset=UTF-8,%3Csvg%20width%3D%2216%22%20height%3D%2216%22%20viewBox%3D%220%200%2016%2016%22%20fill%3D%22none%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%0A%3Crect%20width%3D%2216%22%20height%3D%2216%22%20fill%3D%22%2358A9D7%22%2F%3E%0A%3Cpath%20d%3D%22M6.71429%2012.2852L14%204.9995L12.7143%203.71436L6.71429%209.71378L3.28571%206.2831L2%207.57092L6.71429%2012.2852Z%22%20fill%3D%22white%22%2F%3E%0A%3C%2Fsvg%3E");
    }
\u{space}\u{space}\u{space}\u{space}
    .checkbox-off {
        background-image: url("data:image/svg+xml;charset=UTF-8,%3Csvg%20width%3D%2216%22%20height%3D%2216%22%20viewBox%3D%220%200%2016%2016%22%20fill%3D%22none%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%0A%3Crect%20x%3D%220.75%22%20y%3D%220.75%22%20width%3D%2214.5%22%20height%3D%2214.5%22%20fill%3D%22white%22%20stroke%3D%22%2336352F%22%20stroke-width%3D%221.5%22%2F%3E%0A%3C%2Fsvg%3E");
    }
\u{space}\u{space}\u{space}\u{space}\u{space}\u{space}\u{space}\u{space}
    </style></head><body><article id="1d1604ef-9b4b-8020-9a43-e475a43661a0" class="page sans"><header><h1 class="page-title">Smart Calendar Reminder: Your Intelligent Schedule Assistant</h1><p class="page-description"></p></header><div class="page-body"><figure class="block-color-blue_background callout" style="white-space:pre-wrap;display:flex" id="1d1604ef-9b4b-80b2-927b-ddb2d55d6032"><div style="width:100%">👋 Welcome to Smart Calendar Reminder! This welcome message appears only during your first use.</div></figure><h1 id="1d1604ef-9b4b-80c5-a289-d2aedc69317d" class="block-color-yellow_background">Transform Your Calendar Experience</h1><p id="1d1604ef-9b4b-80f7-ac48-d98bc2a805e6" class="">While iOS Calendar is fantastic for basic scheduling, we all know those built-in reminders can be easy to miss. Adding manual alarms, calculating travel times, and customizing notifications with event details can become tedious and time-consuming. That&#x27;s where Smart Calendar Reminder comes in - your automated solution for intelligent schedule management!</p><h2 id="1d1604ef-9b4b-800f-9752-cb68ca87b1cf" class="">Powerful Features at Your Fingertips</h2><ul id="0ecdba52-af59-410f-9efb-321f8e2d4ba6" class="bulleted-list"><li style="list-style-type:disc">Seamless Calendar Integration - No manual input needed</li></ul><ul id="1d1604ef-9b4b-80b9-8d0d-fe7b3c28115b" class="bulleted-list"><li style="list-style-type:disc">Intelligent Travel Time Calculations powered by Apple Maps</li></ul><ul id="4f6b7aca-7c92-458d-9996-e8f891a3775d" class="bulleted-list"><li style="list-style-type:disc">Spoken Event Details - Hear your schedule clearly</li></ul><ul id="1d1604ef-9b4b-80f5-9fe9-ee50fd3e7795" class="bulleted-list"><li style="list-style-type:disc">Smart Preparation Time Management</li></ul><h2 id="fa2195d7-f08f-4058-a00a-18e2b562b5b2" class="">Smart Location Intelligence</h2><p id="1d1604ef-9b4b-80d3-9799-dd97b27a3773" class="">Our advanced travel time calculation system uses three methods to determine your departure location, in order of priority:</p><ol type="1" id="667c5bbb-f94c-480b-bccd-c84948a3c40f" class="numbered-list" start="1"><li>Custom Departure Address - Add this JSON format in your calendar event notes for specific departure points:<script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/prism.min.js" integrity="sha512-7Z9J3l1+EYfeaPKcGXu3MS/7T+w19WtKQY/n+xzmw4hZhJ9tyYmcUS+4QqAlzhicE5LAfMQSF3iFTK9bQdTxXg==" crossorigin="anonymous" referrerPolicy="no-referrer"></script><link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism.min.css" integrity="sha512-tN7Ec6zAFaVSG3TpNAKtk4DOHNpSwKHxxrsiw4GHKESGPs5njn/0sMCUMl2svV4wo4BK/rCP7juYz+zx+l6oeQ==" crossorigin="anonymous" referrerPolicy="no-referrer"/><pre id="1d1604ef-9b4b-80d1-9d4b-dfb42d06c7b8" class="code"><code class="language-JSON">{
        &quot;Street&quot;: &quot;your departure street&quot;,
        &quot;City&quot;: &quot;your departure city&quot;,
        &quot;State&quot;: &quot;your departure state&quot;,
        &quot;Country&quot;: &quot;your departure country&quot;,
        &quot;Postcode&quot;: &quot;your departure postcode&quot;
    }</code></pre></li></ol><ol type="1" id="1d1604ef-9b4b-80c6-b468-d002dd94b75d" class="numbered-list" start="2"><li>Home Address - Uses your pre-configured home address - perfect for regular schedules</li></ol><ol type="1" id="aba3d861-a84a-48f6-a163-ac441f18b1b3" class="numbered-list" start="3"><li>Current Location - Automatically uses your current position as a fallback</li></ol><figure class="block-color-yellow_background callout" style="white-space:pre-wrap;display:flex" id="1d1604ef-9b4b-80ed-a48d-f0cad158ed60"><div style="width:100%">Smart Travel Planning: The system automatically calculates additional travel time if you&#x27;re not at your departure location!</div></figure><h2 id="efb3fa4e-d05f-4bd3-bd94-b9b991e29ce4" class="">Voice Announcements</h2><ul id="1d1604ef-9b4b-8076-9c50-fcefa4c4903c" class="bulleted-list"><li style="list-style-type:disc">Hourly Schedule Updates: Hear upcoming events at the start of each hour</li></ul><ul id="a0eb2cf6-1637-4d13-94c8-356fd19cd78a" class="bulleted-list"><li style="list-style-type:disc">Smart Reminders: Get spoken alerts at perfectly timed intervals</li></ul><h2 id="1d1604ef-9b4b-80dd-9df1-d8fae003cae6" class="">Intelligent Automation System</h2><p id="15ce45ed-b4fa-4b81-bbd0-2fa585b5c7ce" class="">Our sophisticated automation system ensures you never miss an important event:</p><ul id="1d1604ef-9b4b-80c5-a181-f10518e7e73d" class="bulleted-list"><li style="list-style-type:disc">Daily Planning: 12:00 AM check of your next 24 hours</li></ul><ul id="f54bf941-4703-4cc3-9f61-408f1eed72ee" class="bulleted-list"><li style="list-style-type:disc">Real-time Updates: Hourly recalculation of travel times</li></ul><ul id="1d1604ef-9b4b-800d-b8f8-e85831f4b0ee" class="bulleted-list"><li style="list-style-type:disc">Dynamic Adjustments: Automatic alarm optimization</li></ul><figure class="block-color-gray_background callout" style="white-space:pre-wrap;display:flex" id="1d1604ef-9b4b-8075-9657-ed6135b16d17"><div style="width:100%">Example: For a 10:30 AM meeting with 3 hours total travel time, the system ensures your 7:30 AM alarm is set and continuously optimized based on real-time conditions.</div></figure><h1 id="1d1604ef-9b4b-803a-8fbf-c89822dbca0a" class="block-color-blue">Setup Guide</h1><p id="1d1604ef-9b4b-80a7-ae75-c35724896e17" class="">Let&#x27;s get your Smart Calendar Reminder configured with four essential automations:</p><h2 id="1d1604ef-9b4b-8072-ab56-d0757b2435ef" class="block-color-gray_background">Automation 1: Daily 12:00 AM Check</h2><p id="1d1604ef-9b4b-80c9-9b4a-ee2712524a0d" class="block-color-blue">Step 1. Open Shortcuts and tap [Automation], then tap [+] at the top right corner</p><figure id="1d1604ef-9b4b-8043-b390-ff859889379f" class="image"><a href="gZWfH4Kler-left.png"><img style="width:709.984375px" src="https://i.imgur.com/za6VDMA.jpeg"/></a></figure><p id="1d1604ef-9b4b-804a-9cb1-f487991237c6" class="">Step 2. Tap [Time of Day]</p><figure id="1d1604ef-9b4b-8085-99bb-e3d90115d5dd" class="image"><a href="NDyjdrLrYZ-left.png"><img style="width:709.984375px" src="https://i.imgur.com/z7aJ0OB.jpeg"/></a></figure><p id="1d1604ef-9b4b-806d-a7eb-f652a480cbc6" class="">Step 3. Follow the sequence shown in the image</p><figure id="1d1604ef-9b4b-80cd-9ca5-fc076df31898" class="image"><a href="6KJEFinDm6-left.png"><img style="width:709.984375px" src="https://i.imgur.com/u6C2AR9.jpeg"/></a></figure><p id="1d1604ef-9b4b-8050-b817-f0e2368f43ca" class="block-color-gray_background">Step 4. Tap [New Blank Automation]</p><figure id="1d1604ef-9b4b-8028-b872-eed1a3f6701a" class="image"><a href="XblW6TFHek-left.png"><img style="width:709.984375px" src="https://i.imgur.com/nrTr7Np.jpeg"/></a></figure><p id="b8f8c3cf-7fdc-4a99-b2ba-60e18fef34c7" class="">Step 5. Search for the [Number] action</p><figure id="1d1604ef-9b4b-80d0-ad58-f7a1dc1d1c48" class="image"><a href="4XgUTG3h3E-left.png"><img style="width:709.984375px" src="https://i.imgur.com/F6jogMJ.jpeg"/></a></figure><p id="1d1604ef-9b4b-804e-9fe3-c5b6fc8701fa" class="">Step 6. Input number 1</p><figure id="1d1604ef-9b4b-8056-be0b-c4cfaebae0f7" class="image"><a href="n0XhfXtA03-left.png"><img style="width:709.984375px" src="https://i.imgur.com/HUMvkry.jpeg"/></a></figure><p id="1d1604ef-9b4b-8004-b82f-c5b6250d69c0" class="">Step 7. Search for [Run Shortcut] action</p><figure id="1d1604ef-9b4b-801d-a2d0-e444c55bbdb1" class="image"><a href="BUB7V9ITn8-left.png"><img style="width:709.984375px" src="https://i.imgur.com/IbHA9Jf.jpeg"/></a></figure><p id="1d1604ef-9b4b-8031-a595-d6b268bb5bfc" class="">Step 8. Search and select [Smart Calendar Reminder] in [Run Shortcut] action’s shortcut field.</p><figure id="1d1604ef-9b4b-804c-8be0-d6060e3b5a73" class="image"><a href="b50xsbc2QT-left.png"><img style="width:709.984375px" src="https://i.imgur.com/41WbF2A.png"/></a></figure><p id="1d1604ef-9b4b-805d-96d8-c871e0493bdb" class="block-color-default_background">Step 9. Tap [Done] in the top right corner to complete setup</p><figure id="1d1604ef-9b4b-8024-864a-d9002a94e719" class="image"><a href="LjO11dxjS3-left.png"><img style="width:709.984375px" src="https://i.imgur.com/tmrW6r8.jpeg"/></a></figure><h2 id="1d1604ef-9b4b-8045-9247-e3afd799f547" class="">Automation 2: Hourly Check</h2><p id="1d1604ef-9b4b-809c-900e-e425d52b7a0a" class="">Follow the same steps as Automation 1, with these modifications:</p><ul id="1d1604ef-9b4b-80a8-9819-cfd9961eb078" class="bulleted-list"><li style="list-style-type:disc">In step 3, select all <em><strong><span style="border-bottom:0.05em solid">24 hourly times</span></strong></em></li></ul><ul id="1d1604ef-9b4b-80b3-b766-ed9c851957a5" class="bulleted-list"><li style="list-style-type:disc">In step 6, input number <strong>2</strong> instead of 1</li></ul><h2 id="1d1604ef-9b4b-80ad-a1ea-e247f84f2063" class="">Automation 3: Alarm Trigger</h2><p id="1d1604ef-9b4b-8044-9254-f9d3912d6d6c" class="">Follow the same steps as Automation 1, with these changes:</p><ul id="1d1604ef-9b4b-802e-98b3-c8202e4f8765" class="bulleted-list"><li style="list-style-type:disc">In step 2, tap [<strong>Alarm</strong>] instead of [Time of Day]</li></ul><ul id="1d1604ef-9b4b-80a5-9ccc-d6a2906a3429" class="bulleted-list"><li style="list-style-type:disc">Configure settings as shown:</li></ul><figure id="1d1604ef-9b4b-8014-b883-f88df7a348e1" class="image"><a href="fIF3p3ttC0-left.png"><img style="width:709.984375px" src="https://i.imgur.com/MTyZ3km.png"/></a></figure><ul id="1d1604ef-9b4b-80dc-a6f8-edc73fc17118" class="bulleted-list"><li style="list-style-type:disc">In step 6, input number <strong>3</strong> instead of 1</li></ul><h2 id="1d1604ef-9b4b-8025-9db9-e83367a64cdb" class="">Automation 4: Alarm Stop</h2><p id="1d1604ef-9b4b-805f-afe2-f2de398e695a" class="">Follow the same steps as Automation 1, with these changes:</p><ul id="10aa2fe6-80f0-4850-93c0-4fe14b146190" class="bulleted-list"><li style="list-style-type:disc">In step 2, tap [<strong>Alarm</strong>] instead of [Time of Day]</li></ul><ul id="1d1604ef-9b4b-80aa-baad-e6dd7acf4ad9" class="bulleted-list"><li style="list-style-type:disc">Configure settings as shown:</li></ul><figure id="1d1604ef-9b4b-8068-a490-e601bfafcfe7" class="image"><a href="E24uC2vV2j-left.png"><img style="width:709.984375px" src="https://i.imgur.com/2LbJK9D.png"/></a></figure><ul id="1d1604ef-9b4b-804f-bcba-f64ec9bd67f1" class="bulleted-list"><li style="list-style-type:disc">In step 6, input number <strong>4</strong> instead of 1</li></ul><figure class="block-color-teal_background callout" style="white-space:pre-wrap;display:flex" id="1d1604ef-9b4b-8031-8b44-ddb00fab6dee"><div style="width:100%">🎉 Congratulations! Once you&#x27;ve completed these automations, your Smart Calendar Reminder is ready to revolutionize your schedule management!</div></figure></div></article><span class="sans" style="font-size:14px;padding-top:2em"></span></body></html>

〔28〕 Set Name of 〔27 Text〕 to Welcome.html　» 29 30

〔29〕 Show Web View at 〔28 Renamed Item〕

〔30〕 Make PDF from 〔28 Renamed Item〕　»

〔31〕 Save File 〔30 PDF〕
• AskWhereToSave: false
• SaveFileOverwrite: true
• FileDestinationPath: 〔3 Version Dictionary .Name〕/Welcome.pdf

〔32〕 End If　▵26

〔33〕 Dictionary 　➔ menus　»
{  "mainMenu": {
      "Setup": {
         "title": "Setup",
         "sub": "Set Personal Preferences",
         "icon": "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"
      },
      "Change": {
         "title": "Change",
         "sub": "Change Personal Preferences",
         "icon": "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"
      },
      "View": {
         "title": "View",
         "sub": "View Personal Preferences or Automations Setup Inctructions",
         "icon": "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"
      }
   }
}

〔34〕 Get Dictionary from 〔33 menus.mainMenu〕　»

〔35〕 Repeat with Each in 〔34 Dictionary〕

〔36〕 Get Dictionary All Values in 〔Repeat Item as Dictionary〕 　➔ Options　»
• DictionaryKey: 〔Repeat Item as Dictionary’s Keys〕.title

〔37〕 Repeat[2] with Each in 〔36 Options as Dictionary〕

〔38〕 Text
BEGIN:VCARD
VERSION:3.0
N;CHARSET=utf-8:〔Repeat Item 2 as Dictionary.title〕;
ORG:〔Repeat Item 2 as Dictionary.sub〕;
PHOTO;ENCODING=b:〔Repeat Item 2 as Dictionary.icon〕;
END:VCARD

〔39〕 End Repeat[2] with Each

〔40〕 End Repeat with Each　»

〔41〕 Text　»
〔40 Repeat Results〕

〔42〕 Set Name of 〔41 Text〕 to mainMenu.vcf　»

〔43〕 Get Contacts from 〔42 Renamed Item〕　»

〔44〕 Choose from List 〔43 Contacts〕　» 45 78 83
• ChooseFromListActionPrompt: ☀️Welcome to Smart Calendar Reminder☀️

〔45〕 If 〔44 Selected Item’s Name〕 is Setup

〔46〕 Get File at Path 〔3 Version Dictionary .Name〕/aboutme.txt from Folder　»
• FileErrorIfNotFound: false

〔47〕 If 〔46 File’s File Size〕 does not have any value

〔48〕 Comment
All the information is stored in iCloud. The shortcut isn’t collecting anything.

〔49〕 Text　»
Choose Travel Time Calculation Method

1️⃣ Notes 🗓️ / Current 📍\u000D
Uses the address in the Calendar event Notes if available (routing via Notes if you're not already there), otherwise calculates directly from your current location to the event.\u000D
\u000D
2️⃣ Notes 🗓️ / Home 🏡\u000D
Uses the Notes address if available (same as 1️⃣), but if Notes are empty, routes via your home address if you're not already there, or directly from home if you are.\u000D
\u000D

〔50〕 Choose from Menu
• MenuPrompt: 〔49 Text〕
• MenuItems: [1️⃣ Notes 🗓️ / Current 📍,
2️⃣ Notes 🗓️ / Home 🏡]

〔51〕 Menu Item 1️⃣ Notes 🗓️ / Current 📍

〔52〕 Dictionary　»
{  "state": "\"\"",
   "street": "\"\"",
   "city": "\"\"",
   "country": "\"\"",
   "postcode": "\"\""
}

〔53〕 Set Variable HomeAddress to 〔52 Dictionary〕

〔54〕 Menu Item 2️⃣ Notes 🗓️ / Home 🏡

〔55〕 Text　»
Please provide your home address for accurate travel time calculations via Apple Maps.

〔56〕 Text　»
<!DOCTYPE html>
<html>
<head>
    <title>Address Collector</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        /* Modern CSS styling */
        body {
            font-family: 'Segoe UI', sans-serif;
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            padding: 20px;
            min-height: 100vh;
        }

        .form-container {
            max-width: 500px;
            margin: 20px auto;
            background: white;
            padding: 25px;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        }

        h2 {
            color: #2c3e50;
            text-align: center;
            margin-bottom: 25px;
        }

        .form-group {
            margin-bottom: 20px;
        }

        label {
            display: block;
            margin-bottom: 8px;
            color: #34495e;
            font-weight: 500;
        }

        input {
            width: 100%;
            padding: 12px;
            margin: 0; /* Equal left/right margins */
            border: 2px solid #e0e0e0;
            border-radius: 8px;
            font-size: 16px;
            transition: border-color 0.3s ease;
            box-sizing: border-box; /* Ensures padding doesn't affect width */
        }

        input:focus {
            outline: none;
            border-color: #3498db;
            box-shadow: 0 0 8px rgba(52, 152, 219, 0.2);
        }

        button {
            background: #3498db;
            color: white;
            padding: 15px 30px;
            border: none;
            border-radius: 8px;
            font-size: 16px;
            cursor: pointer;
            width: 100%;
            transition: background 0.3s ease;
        }

        button:hover {
            background: #2980b9;
        }

        /* New success message styling */
        .success-message {
            display: none;
            background: #e8f5e9;
            color: #2e7d32;
            padding: 20px;
            border-radius: 8px;
            margin-top: 20px;
            text-align: center;
        }

        .success-message.show {
            display: block;
        }
    </style>
</head>
<body>
    <div class="form-container">
        <h2>〔55 Text〕</h2>
        <form id="addressForm">
            <div class="form-group">
                <label>Street Address</label>
                <input type="text" id="street" placeholder="" required>
            </div>

            <div class="form-group">
                <label>City</label>
                <input type="text" id="city" placeholder="" required>
            </div>

            <div class="form-group">
                <label>State/Province</label>
                <input type="text" id="state" placeholder="" required>
            </div>

            <div class="form-group">
                <label>Country/Region</label>
                <input type="text" id="country" placeholder="" required>
            </div>

            <div class="form-group">
                <label>Postal Code</label>
                <input type="text" id="postcode" placeholder="" required>
            </div>

            <button type="button" onclick="sendToShortcut()">Submit Address</button>
        </form>

        <!-- Success message container -->
        <div class="success-message" id="successMessage">
            <p>Data collected successfully!</p>
        </div>
    </div>

<script>
function sendToShortcut() {
  const addressData = {
    street: document.getElementById('street').value,
    city: document.getElementById('city').value,
    state: document.getElementById('state').value,
    country: document.getElementById('country').value,
    postcode: document.getElementById('postcode').value
  };
\u{space}\u{space}
  // Copy data to clipboard
  navigator.clipboard.writeText(JSON.stringify(addressData));
\u{space}\u{space}
  // Show success message and hide form
  document.getElementById('addressForm').style.display = 'none';
  document.getElementById('successMessage').classList.add('show');
}
</script>
</body>
</html>

〔57〕 Set Name of 〔56 Text〕 to Address.html　»

〔58〕 Show Web View at 〔57 Renamed Item〕

〔59〕 Get Clipboard　»

〔60〕 Get Dictionary from 〔59 Clipboard〕　»

〔61〕 Set Variable HomeAddress to 〔60 Dictionary〕

〔62〕 End Menu　▵54

〔63〕 List　» 65
[Driving,
Walking,
Transit,
Biking]

〔64〕 Text　»
Select Travel Method (It will apply to all the events)

〔65〕 Choose from List 〔63 List〕 　➔ Travel Method Selected　»
• ChooseFromListActionPrompt: 〔64 Text〕

〔66〕 Set Variable TravelMethod to 〔65 Travel Method Selected〕

〔67〕 Text　»
Besides travel time, how many Extra Minutes Needed (e.g., '15 mins buffer')

〔68〕 Ask for Number Input 　➔ Extra Time Needed　»
• AskActionPrompt: 〔67 Text〕
• AskActionAllowsNegativeNumbers: false
• AskActionAllowsDecimalNumbers: false

〔69〕 Set Variable ExtraTime to 〔68 Extra Time Needed〕

〔70〕 Dictionary　»
{  "HomeAddress": "〔HomeAddress as Dictionary〕",
   "TravelMethod": "〔TravelMethod〕",
   "ExtraTime": "〔ExtraTime〕"
}

〔71〕 Text　»
〔70 Dictionary〕

〔72〕 Save File 〔71 Text〕
• Folder: {  "fileLocation": {
      "crossDeviceItemID": "docs.icloud.com:iCloud.is.workflow.my.workflows/documents/e51c720424ec90d3260ccd6f241343baea15b7f3",
      "fileProviderDomainID": "com.apple.CloudDocs.iCloudDriveFileProvider/46CA22EA-49CD-4A1D-9512-F48B36AA64B5",
      "appContainerBundleIdentifier": "com.apple.shortcuts",
      "relativeSubpath": "",
      "WFFileLocationType": "Shortcuts"
   },
   "filename": "Documents",
   "displayName": "Shortcuts"
}
• AskWhereToSave: false
• SaveFileOverwrite: true
• FileDestinationPath: 〔3 Version Dictionary .Name〕/aboutme.txt

〔73〕 Otherwise　▵47

〔74〕 Show Alert You have set up. If you want to modify, please tap [Change] instead.
• AlertActionCancelButtonShown: false

〔75〕 Run Shortcut Smart Calendar Reminder
• Workflow: {  "workflowIdentifier": "5A2BC55E-C195-4C6C-93E9-725F782CDD1B",
   "isSelf": true,
   "workflowName": "Smart Calendar Reminder"
}

〔76〕 End If

〔77〕 End If　▵45

〔78〕 If 〔44 Selected Item’s Name〕 is Change

〔79〕 Delete Files {  "fileLocation": {
      "crossDeviceItemID": "docs.icloud.com:iCloud.is.workflow.my.workflows/9F38EF56-AD52-45E7-8B63-200CBFF0E713/a708662a11276f4b1fa48be3c50990fd13a4ccdf",
      "fileProviderDomainID": "com.apple.CloudDocs.iCloudDriveFileProvider/F1A50FD9-D64E-426C-8EB2-9C6216034396",
      "appContainerBundleIdentifier": "com.apple.systemactions",
      "relativeSubpath": "Smart Calendar Reminder/aboutme.txt",
      "WFFileLocationType": "Shortcuts"
   },
   "filename": "aboutme.txt",
   "displayName": "aboutme.txt"
}
• DeleteImmediatelyDelete: true

〔80〕 Show Alert Your preferences are deleted. Please choose [Setup] from main menu to set up again.
• AlertActionCancelButtonShown: false

〔81〕 Run Shortcut Smart Calendar Reminder
• Workflow: {  "workflowIdentifier": "5A2BC55E-C195-4C6C-93E9-725F782CDD1B",
   "isSelf": true,
   "workflowName": "Smart Calendar Reminder"
}

〔82〕 End If

〔83〕 If 〔44 Selected Item’s Name〕 is View

〔84〕 Choose from Menu
• MenuItems: [Automations Setup Instructions,
Personal Preferences]

〔85〕 Menu Item Automations Setup Instructions

〔86〕 Open File {  "fileLocation": {
      "crossDeviceItemID": "docs.icloud.com:iCloud.is.workflow.my.workflows/E4DA358A-5903-4CC2-BBC8-FD498ED6EDB3/d459a12be98fb7e83aed794c6d0dcf774ef5d814",
      "fileProviderDomainID": "com.apple.CloudDocs.iCloudDriveFileProvider/F1A50FD9-D64E-426C-8EB2-9C6216034396",
      "appContainerBundleIdentifier": "com.apple.systemactions",
      "relativeSubpath": "Smart Calendar Reminder/Welcome.pdf",
      "WFFileLocationType": "Shortcuts"
   },
   "filename": "Welcome.pdf",
   "displayName": "Welcome.pdf"
}

〔87〕 Menu Item Personal Preferences

〔88〕 Open File {  "fileLocation": {
      "crossDeviceItemID": "docs.icloud.com:iCloud.is.workflow.my.workflows/81672621-501F-4225-8CDA-11AAF2112D81/06302c85b44ba41f3258ff7d1669b31859a28556",
      "fileProviderDomainID": "com.apple.CloudDocs.iCloudDriveFileProvider/F1A50FD9-D64E-426C-8EB2-9C6216034396",
      "appContainerBundleIdentifier": "com.apple.systemactions",
      "relativeSubpath": "Smart Calendar Reminder/aboutme.txt",
      "WFFileLocationType": "Shortcuts"
   },
   "filename": "aboutme.txt",
   "displayName": "aboutme.txt"
}

〔89〕 End Menu

〔90〕 End If　▵83

〔91〕 Otherwise　▵0

〔92〕 If 〔Shortcut Input as Number〕 is 1

〔93〕 Comment
*Revolutionizing event management by integrating calendar data with intelligent automation:

Voice announcements for upcoming events

Dynamic alarm calculation (travel + prep time)

Calendar-driven scheduling system
Eliminates manual reminders and ensures perfect timing synchronization*

〔94〕 Get File at Path Smart Calendar Reminder/aboutme.txt from Folder　»
• FileErrorIfNotFound: false

〔95〕 Get Dictionary from 〔94 File〕　» 96 99 100

〔96〕 Get Dictionary from 〔95 Dictionary.HomeAddress〕　»

〔97〕 Text　»
〔96 Dictionary.street〕 〔96 Dictionary.city〕 〔96 Dictionary.state〕 〔96 Dictionary.postcode〕 〔96 Dictionary.country〕\u{space}

〔98〕 Set Variable HomeAddress to 〔97 Text〕

〔99〕 Set Variable TravelMethod to 〔95 Dictionary.TravelMethod〕

〔100〕 Get Dictionary Value for ExtraTime in 〔95 Dictionary〕　»

〔101〕 Get Numbers from 〔100 Dictionary Value〕　»

〔102〕 Set Variable ExtraTime to 〔101 Numbers〕

〔103〕 Find Calendar Events All Calendar Events where　» 104 105
• ContentItemSortProperty: Start Date
• ContentItemSortOrder: Oldest First
• ContentItemFilter: • All the following are true
Start Date is in the next 1 days
Is Not All Day
Canceled is {"Bool":false}

〔104〕 If 〔103 Calendar Events〕 has any value

〔105〕 Repeat with Each in 〔103 Calendar Events〕

〔106〕 If 〔Repeat Item’s Location〕 has any value

〔107〕 Get Current Location　» 119 125 211
• Accuracy: Best

〔108〕 Comment
*To specify event-specific departure locations:

1. Create calendar event notes with JSON structure:
{
“Street”: “your departure street”,
“City”: “your departure city”,
“State”: “your departure state”,
“Country”: “your departure country”,
“Postcode”: “your departure postcode”
}
2. System prioritizes these over default locations*

〔109〕 If All are true　〔Repeat Item’s Notes〕 has any value　〔Repeat Item’s Notes〕 begins with {　〔Repeat Item’s Notes〕 ends with }

〔110〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY

〔111〕 Get Dictionary from 〔Repeat Item’s Notes〕 　➔ Notes Address Dictionary　» 112 113 114 115 116

〔112〕 Set Variable Calendar_Notes_Street to 〔111 Notes Address Dictionary.Street〕

〔113〕 Set Variable Calendar_Notes_City to 〔111 Notes Address Dictionary.City〕

〔114〕 Set Variable Calendar_Notes_State to 〔111 Notes Address Dictionary.State〕

〔115〕 Set Variable Calendar_Notes_Region to 〔111 Notes Address Dictionary.Country〕

〔116〕 Set Variable Calendar_Notes_ZIP_Code to 〔111 Notes Address Dictionary.Postcode〕

〔117〕 Text　»
〔Calendar_Notes_Street〕 〔Calendar_Notes_City〕 〔Calendar_Notes_State〕 〔Calendar_Notes_ZIP_Code〕 〔Calendar_Notes_Region〕

〔118〕 Set Variable NotesAddressString to 〔117 Text〕

〔119〕 If All are true　〔107 Current Location’s Street〕 is 〔Calendar_Notes_Street〕　〔107 Current Location’s City〕 is 〔Calendar_Notes_City〕　〔107 Current Location’s State〕 is 〔Calendar_Notes_State〕　〔107 Current Location’s Country〕 is 〔Calendar_Notes_Region〕　〔107 Current Location’s ZIP Code〕 is 〔Calendar_Notes_ZIP_Code〕

〔120〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY -> CALENDAR EVENT ADDRESS IS THE SAME WITH CURRENT LOCATION

〔121〕 Number 0　»

〔122〕 Set Variable CurrentToDeparture to 〔121 Number〕

〔123〕 Otherwise

〔124〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY -> CALENDAR EVENT ADDRESS IS NOT THE SAME WITH CURRENT LOCATION

〔125〕 Get 〔TravelMethod〕 Time　»
• GetDirectionsCustomLocation: 〔107 Current Location〕
• Destination: 〔NotesAddressString〕

〔126〕 Set Variable TravelTimeString to 〔125 Travel Time〕

〔127〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔128〕 Set Variable MatchString to 〔127 Matches〕

〔129〕 Count Items in 〔MatchString〕　»

〔130〕 If 〔129 Count〕 is 1

〔131〕 Get First Item from List 〔MatchString〕　»

〔132〕 Set Variable TravelDays to 〔131 Item from List〕

〔133〕 Otherwise

〔134〕 Number 0　»

〔135〕 Set Variable TravelDays to 〔134 Number〕

〔136〕 End If

〔137〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔138〕 Set Variable MatchString to 〔137 Matches〕

〔139〕 Count Items in 〔MatchString〕　»

〔140〕 If 〔139 Count〕 is 1

〔141〕 Get First Item from List 〔MatchString〕　»

〔142〕 Set Variable TravelHours to 〔141 Item from List〕

〔143〕 Otherwise

〔144〕 Number 0　»

〔145〕 Set Variable TravelHours to 〔144 Number〕

〔146〕 End If

〔147〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔148〕 Set Variable MatchString to 〔147 Matches〕

〔149〕 Count Items in 〔MatchString〕　»

〔150〕 If 〔149 Count〕 is 1

〔151〕 Get First Item from List 〔MatchString〕　»

〔152〕 Set Variable TravelMinutes to 〔151 Item from List〕

〔153〕 Otherwise

〔154〕 Number 0　»

〔155〕 Set Variable TravelMinutes to 〔154 Number〕

〔156〕 End If

〔157〕 Calculate 〔TravelDays〕 × 1440 　➔ Days　» 159

〔158〕 Calculate 〔TravelHours〕 × 60 　➔ Hours　»

〔159〕 Calculate 〔157 Days〕 + 〔158 Hours〕　»

〔160〕 Calculate 〔159 Calculation Result〕 + 〔TravelMinutes〕　»

〔161〕 Set Variable CurrentToDeparture to 〔160 Calculation Result〕

〔162〕 End If　▵123

〔163〕 Get 〔TravelMethod〕 Time 　➔ DepartureToDestination　»
• GetDirectionsCustomLocation: 〔NotesAddressString〕
• Destination: 〔Repeat Item’s Location〕

〔164〕 Set Variable TravelTimeString to 〔163 DepartureToDestination〕

〔165〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔166〕 Set Variable MatchString to 〔165 Matches〕

〔167〕 Count Items in 〔MatchString〕　»

〔168〕 If 〔167 Count〕 is 1

〔169〕 Get First Item from List 〔MatchString〕　»

〔170〕 Set Variable TravelDays to 〔169 Item from List〕

〔171〕 Otherwise

〔172〕 Number 0　»

〔173〕 Set Variable TravelDays to 〔172 Number〕

〔174〕 End If

〔175〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔176〕 Set Variable MatchString to 〔175 Matches〕

〔177〕 Count Items in 〔MatchString〕　»

〔178〕 If 〔177 Count〕 is 1

〔179〕 Get First Item from List 〔MatchString〕　»

〔180〕 Set Variable TravelHours to 〔179 Item from List〕

〔181〕 Otherwise

〔182〕 Number 0　»

〔183〕 Set Variable TravelHours to 〔182 Number〕

〔184〕 End If

〔185〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔186〕 Set Variable MatchString to 〔185 Matches〕

〔187〕 Count Items in 〔MatchString〕　»

〔188〕 If 〔187 Count〕 is 1

〔189〕 Get First Item from List 〔MatchString〕　»

〔190〕 Set Variable TravelMinutes to 〔189 Item from List〕

〔191〕 Otherwise

〔192〕 Number 0　»

〔193〕 Set Variable TravelMinutes to 〔192 Number〕

〔194〕 End If

〔195〕 Calculate 〔TravelDays〕 × 1440 　➔ Days　» 197

〔196〕 Calculate 〔TravelHours〕 × 60 　➔ Hours　»

〔197〕 Calculate 〔195 Days〕 + 〔196 Hours〕　»

〔198〕 Calculate 〔197 Calculation Result〕 + 〔TravelMinutes〕　»

〔199〕 Calculate 〔198 Calculation Result〕 + 〔CurrentToDeparture〕　»

〔200〕 Set Variable TravelTime to 〔199 Calculation Result〕

〔201〕 Otherwise　▵109

〔202〕 Comment
CALENDER EVENT NOTES IS BLANK

〔203〕 Get Dictionary from 〔HomeAddress〕 　➔ Home Address Dictionary　» 204 205 206 207 208

〔204〕 Get Dictionary Value for street in 〔203 Home Address Dictionary〕 　➔ home_Street　» 209 211

〔205〕 Get Dictionary Value for city in 〔203 Home Address Dictionary〕 　➔ home_City　» 209 211

〔206〕 Get Dictionary Value for state in 〔203 Home Address Dictionary〕 　➔ home_State　» 209 211

〔207〕 Get Dictionary Value for country in 〔203 Home Address Dictionary〕 　➔ home_Country　» 209 211

〔208〕 Get Dictionary Value for postcode in 〔203 Home Address Dictionary〕 　➔ home_Postcode　» 209 211

〔209〕 If All are true　〔204 home_Street〕 has any value　〔205 home_City〕 has any value　〔206 home_State〕 has any value　〔207 home_Country〕 has any value　〔208 home_Postcode〕 has any value

〔210〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED

〔211〕 If All are true　〔107 Current Location’s Street〕 is 〔204 home_Street〕　〔107 Current Location’s City〕 is 〔205 home_City〕　〔107 Current Location’s State〕 is 〔206 home_State〕　〔107 Current Location’s Country〕 is 〔207 home_Country〕　〔107 Current Location’s ZIP Code〕 is 〔208 home_Postcode〕

〔212〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED -> HOME ADDRESS IS THE SAME WITH CURRENT LOCATION

〔213〕 Number 0　»

〔214〕 Set Variable CurrentToDeparture to 〔213 Number〕

〔215〕 Otherwise

〔216〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED -> HOME ADDRESS IS NOT THE SAME WITH CURRENT LOCATION

〔217〕 Get 〔TravelMethod〕 Time　»
• Destination: 〔HomeAddress〕

〔218〕 Set Variable TravelTimeString to 〔217 Travel Time〕

〔219〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔220〕 Set Variable MatchString to 〔219 Matches〕

〔221〕 Count Items in 〔MatchString〕　»

〔222〕 If 〔221 Count〕 is 1

〔223〕 Get First Item from List 〔MatchString〕　»

〔224〕 Set Variable TravelDays to 〔223 Item from List〕

〔225〕 Otherwise

〔226〕 Number 0　»

〔227〕 Set Variable TravelDays to 〔226 Number〕

〔228〕 End If

〔229〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔230〕 Set Variable MatchString to 〔229 Matches〕

〔231〕 Count Items in 〔MatchString〕　»

〔232〕 If 〔231 Count〕 is 1

〔233〕 Get First Item from List 〔MatchString〕　»

〔234〕 Set Variable TravelHours to 〔233 Item from List〕

〔235〕 Otherwise

〔236〕 Number 0　»

〔237〕 Set Variable TravelHours to 〔236 Number〕

〔238〕 End If

〔239〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔240〕 Set Variable MatchString to 〔239 Matches〕

〔241〕 Count Items in 〔MatchString〕　»

〔242〕 If 〔241 Count〕 is 1

〔243〕 Get First Item from List 〔MatchString〕　»

〔244〕 Set Variable TravelMinutes to 〔243 Item from List〕

〔245〕 Otherwise

〔246〕 Number 0　»

〔247〕 Set Variable TravelMinutes to 〔246 Number〕

〔248〕 End If

〔249〕 Calculate 〔TravelDays〕 × 1440 　➔ Days　» 251

〔250〕 Calculate 〔TravelHours〕 × 60 　➔ Hours　»

〔251〕 Calculate 〔249 Days〕 + 〔250 Hours〕　»

〔252〕 Calculate 〔251 Calculation Result〕 + 〔TravelMinutes〕　»

〔253〕 Set Variable CurrentToDeparture to 〔252 Calculation Result〕

〔254〕 End If　▵215

〔255〕 Get 〔TravelMethod〕 Time 　➔ DepartureToDestination　»
• GetDirectionsCustomLocation: 〔HomeAddress〕
• Destination: 〔Repeat Item’s Location〕

〔256〕 Set Variable TravelTimeString to 〔255 DepartureToDestination〕

〔257〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔258〕 Set Variable MatchString to 〔257 Matches〕

〔259〕 Count Items in 〔MatchString〕　»

〔260〕 If 〔259 Count〕 is 1

〔261〕 Get First Item from List 〔MatchString〕　»

〔262〕 Set Variable TravelDays to 〔261 Item from List〕

〔263〕 Otherwise

〔264〕 Number 0　»

〔265〕 Set Variable TravelDays to 〔264 Number〕

〔266〕 End If

〔267〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔268〕 Set Variable MatchString to 〔267 Matches〕

〔269〕 Count Items in 〔MatchString〕　»

〔270〕 If 〔269 Count〕 is 1

〔271〕 Get First Item from List 〔MatchString〕　»

〔272〕 Set Variable TravelHours to 〔271 Item from List〕

〔273〕 Otherwise

〔274〕 Number 0　»

〔275〕 Set Variable TravelHours to 〔274 Number〕

〔276〕 End If

〔277〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔278〕 Set Variable MatchString to 〔277 Matches〕

〔279〕 Count Items in 〔MatchString〕　»

〔280〕 If 〔279 Count〕 is 1

〔281〕 Get First Item from List 〔MatchString〕　»

〔282〕 Set Variable TravelMinutes to 〔281 Item from List〕

〔283〕 Otherwise

〔284〕 Number 0　»

〔285〕 Set Variable TravelMinutes to 〔284 Number〕

〔286〕 End If

〔287〕 Calculate 〔TravelDays〕 × 1440 　➔ Days　» 289

〔288〕 Calculate 〔TravelHours〕 × 60 　➔ Hours　»

〔289〕 Calculate 〔287 Days〕 + 〔288 Hours〕　»

〔290〕 Calculate 〔289 Calculation Result〕 + 〔TravelMinutes〕　»

〔291〕 Calculate 〔290 Calculation Result〕 + 〔CurrentToDeparture〕　»

〔292〕 Set Variable TravelTime to 〔291 Calculation Result〕

〔293〕 Otherwise　▵209

〔294〕 Text
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS NOT MAINTAINED

〔295〕 Get 〔TravelMethod〕 Time　»
• Destination: 〔Repeat Item’s Location〕

〔296〕 Set Variable TravelTimeString to 〔295 Travel Time〕

〔297〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔298〕 Set Variable MatchString to 〔297 Matches〕

〔299〕 Count Items in 〔MatchString〕　»

〔300〕 If 〔299 Count〕 is 1

〔301〕 Get First Item from List 〔MatchString〕　»

〔302〕 Set Variable TravelDays to 〔301 Item from List〕

〔303〕 Otherwise

〔304〕 Number 0　»

〔305〕 Set Variable TravelDays to 〔304 Number〕

〔306〕 End If

〔307〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔308〕 Set Variable MatchString to 〔307 Matches〕

〔309〕 Count Items in 〔MatchString〕　»

〔310〕 If 〔309 Count〕 is 1

〔311〕 Get First Item from List 〔MatchString〕　»

〔312〕 Set Variable TravelHours to 〔311 Item from List〕

〔313〕 Otherwise

〔314〕 Number 0　»

〔315〕 Set Variable TravelHours to 〔314 Number〕

〔316〕 End If

〔317〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔318〕 Set Variable MatchString to 〔317 Matches〕

〔319〕 Count Items in 〔MatchString〕　»

〔320〕 If 〔319 Count〕 is 1

〔321〕 Get First Item from List 〔MatchString〕　»

〔322〕 Set Variable TravelMinutes to 〔321 Item from List〕

〔323〕 Otherwise

〔324〕 Number 0　»

〔325〕 Set Variable TravelMinutes to 〔324 Number〕

〔326〕 End If

〔327〕 Calculate 〔TravelDays〕 × 1440 　➔ Days　» 329

〔328〕 Calculate 〔TravelHours〕 × 60 　➔ Hours　»

〔329〕 Calculate 〔327 Days〕 + 〔328 Hours〕　»

〔330〕 Calculate 〔329 Calculation Result〕 + 〔TravelMinutes〕　»

〔331〕 Set Variable TravelTime to 〔330 Calculation Result〕

〔332〕 End If　▵293

〔333〕 End If　▵201

〔334〕 Otherwise　▵106

〔335〕 Number 0　»

〔336〕 Set Variable TravelTime to 〔335 Number〕

〔337〕 End If

〔338〕 Calculate 〔TravelTime〕 + 〔ExtraTime〕　»

〔339〕 Adjust Subtract Date 〔Repeat Item’s Start Date〕 　➔ Supposed Alarm Time　» 340 343 346 349 356 372 374 375 393 398 401
• Duration: 〔338 Calculation Result〕 min

〔340〕 Dictionary 　➔ Alarm Label Dictionary　» 372 377 393
{  "Event": "〔Repeat Item〕",
   "From": "〔Repeat Item’s Start Date〕",
   "To": "〔Repeat Item’s End Date〕",
   "Location": "〔Repeat Item’s Location〕",
   "AlarmTime": "〔339 Supposed Alarm Time〕"
}

〔341〕 Date Current Date 　➔ Current Date　» 342 343 374

〔342〕 Adjust Add Date 〔341 Current Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"dd MMM yyyy"}〕 　➔ 1 day after　» 356 375
• Duration: "1" days

〔343〕 If 〔339 Supposed Alarm Time〕 is 〔341 Current Date〕

〔344〕 Comment
supposed alarm time is exactly 12:00am

〔345〕 If 〔Repeat Item’s Location〕 has any value

〔346〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 at 〔Repeat Item’s Location〕 which  was supposed to get ready at 〔339 Supposed Alarm Time〕. Please check.

〔347〕 Set Variable Text to 〔346 Text〕

〔348〕 Otherwise

〔349〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 which  was supposed to get ready at 〔339 Supposed Alarm Time〕. Please check.

〔350〕 Set Variable Text to 〔349 Text〕

〔351〕 End If

〔352〕 Show Alert 〔Text〕

〔353〕 Show Notification 〔Text〕

〔354〕 Speak Text
• Text: 〔Text〕

〔355〕 Otherwise　▵343

〔356〕 If 〔339 Supposed Alarm Time〕 is 〔342 1 day after〕

〔357〕 Find Alarm All Alarm　» 358 359

〔358〕 If 〔357 Alarms〕 has any value

〔359〕 Repeat[2] with Each in 〔357 Alarms〕

〔360〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ AlarmLabelDictionary　» 361 362 364

〔361〕 Get Dictionary Value for Event in 〔360 AlarmLabelDictionary〕 　➔ Event　» 366

〔362〕 Get Dictionary Value for From in 〔360 AlarmLabelDictionary〕 　➔ From　»

〔363〕 Get Dates from 〔362 From〕 　➔ FromDate　» 366

〔364〕 Get Dictionary Value for To in 〔360 AlarmLabelDictionary〕 　➔ To　»

〔365〕 Get Dates from 〔364 To〕 　➔ ToDate　»

〔366〕 If All are true　〔361 Event’s Name〕 is 〔Repeat Item〕　〔363 FromDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔Repeat Item’s Start Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕　〔365 ToDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is • ConditionalActionString
〔Repeat Item’s End Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕• Date
〔Repeat Item’s End Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕

〔367〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔368〕 End If

〔369〕 End Repeat[2] with Each　▵359

〔370〕 End If　▵358

〔371〕 Comment
since this will be triggered at 12:00 am each day, when the supposed alarm time is 12:00 am in the next day, you can set alarm now

〔372〕 Add Alarm for 〔339 Supposed Alarm Time〕 called 〔340 Alarm Label Dictionary〕

〔373〕 Otherwise　▵356

〔374〕 If 〔339 Supposed Alarm Time〕 > 〔341 Current Date〕

〔375〕 If 〔339 Supposed Alarm Time〕 > 〔342 1 day after〕

〔376〕 Comment
when the time is other than 12:00 am of then next day, you cannot set alarm yet. If set, it will be today. For example, triggering time 2025-4-8 12:00 am, the supposed alarm time is 2025-4-9 08:00 am, if you set an alarm at 08:00 at 2025-4-8 12:00 am, it will alarm at 2025-4-8 08:00 am instead. So we need to record the supposed alarm time and trigger next day.

〔377〕 Set Variable Event to 〔340 Alarm Label Dictionary〕

〔378〕 Otherwise

〔379〕 Find Alarm All Alarm　» 380 381
• ContentItemFilter: {  "Value": {
      "WFActionParameterFilterPrefix": 1,
      "WFActionParameterFilterTemplates": [],
      "WFContentPredicateBoundedDate": false
   },
   "WFSerializationType": "WFContentPredicateTableTemplate"
}

〔380〕 If 〔379 Alarms〕 has any value

〔381〕 Repeat[2] with Each in 〔379 Alarms〕

〔382〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ AlarmLabelDictionary　» 383 384 386

〔383〕 Get Dictionary Value for Event in 〔382 AlarmLabelDictionary〕 　➔ Event　» 388

〔384〕 Get Dictionary Value for From in 〔382 AlarmLabelDictionary〕 　➔ From　»

〔385〕 Get Dates from 〔384 From〕 　➔ FromDate　» 388

〔386〕 Get Dictionary Value for To in 〔382 AlarmLabelDictionary〕 　➔ To　»

〔387〕 Get Dates from 〔386 To〕 　➔ ToDate　»

〔388〕 If All are true　〔383 Event’s Name〕 is 〔Repeat Item〕　〔385 FromDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔Repeat Item’s Start Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕　〔387 ToDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔Repeat Item’s End Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕

〔389〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔390〕 End If

〔391〕 End Repeat[2] with Each　▵381

〔392〕 End If　▵380

〔393〕 Add Alarm for 〔339 Supposed Alarm Time〕 called 〔340 Alarm Label Dictionary〕

〔394〕 End If　▵378

〔395〕 Otherwise　▵374

〔396〕 Comment
the supposed alarm time passed

〔397〕 If 〔Repeat Item’s Location〕 has any value

〔398〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 at 〔Repeat Item’s Location〕 which  was supposed to get ready at 〔339 Supposed Alarm Time〕. Please check.

〔399〕 Set Variable Text to 〔398 Text〕

〔400〕 Otherwise

〔401〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 which  was supposed to get ready at 〔339 Supposed Alarm Time〕. Please check.

〔402〕 Set Variable Text to 〔401 Text〕

〔403〕 End If

〔404〕 Show Alert 〔Text〕

〔405〕 Show Notification 〔Text〕

〔406〕 Speak Text
• Text: 〔Text〕

〔407〕 End If　▵395

〔408〕 End If　▵373

〔409〕 End If　▵355

〔410〕 Text
〔Event〕

〔411〕 If 〔Event〕 has any value

〔412〕 Get Dictionary from 〔Event〕　» 425

〔413〕 Text　»

〔414〕 Set Variable TextList to 〔413 Text〕

〔415〕 Add 〔Event〕 to Variable TextList

〔416〕 Get File at Path Smart Calendar Reminder/Future Alarms.txt from Folder　» 417 418
• FileErrorIfNotFound: false

〔417〕 If 〔416 File’s File Size〕 has any value

〔418〕 Split Text 〔416 File〕 by New Lines　»

〔419〕 Repeat[2] with Each in 〔418 Split Text〕

〔420〕 Get Dictionary from 〔Repeat Item 2〕　» 421 422 423 424

〔421〕 Get Dictionary Value for Event in 〔420 Dictionary〕 　➔ Event　» 425

〔422〕 Get Dictionary Value for From in 〔420 Dictionary〕 　➔ From　» 425

〔423〕 Get Dictionary Value for To in 〔420 Dictionary〕 　➔ To　» 425

〔424〕 Get Dictionary Value for Location in 〔420 Dictionary〕 　➔ Location　»

〔425〕 If Any are true　〔421 Event’s Name〕 is not 〔412 Dictionary.Event〕　〔422 From’s Name〕 is not 〔412 Dictionary.From〕　〔423 To’s Name〕 is not 〔412 Dictionary.To〕　〔424 Location’s Name〕 is not 〔412 Dictionary.Location〕

〔426〕 Add 〔Repeat Item 2〕 to Variable TextList

〔427〕 End If

〔428〕 End Repeat[2] with Each　▵419

〔429〕 Combine Text 〔TextList〕 with New Lines　»

〔430〕 Save File 〔429 Combined Text〕
• AskWhereToSave: false
• SaveFileOverwrite: true
• FileDestinationPath: Smart Calendar Reminder/Future Alarms.txt

〔431〕 Otherwise　▵417

〔432〕 Text　»

〔Event〕

〔433〕 Save File 〔432 Text〕
• AskWhereToSave: false
• FileDestinationPath: Smart Calendar Reminder/Future Alarms.txt

〔434〕 End If

〔435〕 End If　▵411

〔436〕 End Repeat with Each　▵105

〔437〕 End If　▵104

〔438〕 Get File at Path Smart Calendar Reminder/Future Alarms.txt from Folder　» 439 440
• FileErrorIfNotFound: false

〔439〕 If 〔438 File’s File Size〕 has any value

〔440〕 Split Text 〔438 File〕 by New Lines　»

〔441〕 Repeat with Each in 〔440 Split Text〕

〔442〕 Get Dictionary from 〔Repeat Item〕　» 443 444 454 465

〔443〕 If 〔442 Dictionary〕 has any value

〔444〕 Get Dates from 〔442 Dictionary.AlarmTime〕　» 445 465

〔445〕 If 〔444 Dates〕 is today

〔446〕 Find Alarm All Alarm　» 447 448
• ContentItemFilter: {  "Value": {
      "WFActionParameterFilterPrefix": 1,
      "WFContentPredicateBoundedDate": false,
      "WFActionParameterFilterTemplates": []
   },
   "WFSerializationType": "WFContentPredicateTableTemplate"
}

〔447〕 If 〔446 Alarms〕 has any value

〔448〕 Repeat[2] with Each in 〔446 Alarms〕

〔449〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ Alarm_Label_Dictionary　» 450 452 460

〔450〕 Get Dictionary Value for From in 〔449 Alarm_Label_Dictionary〕　»

〔451〕 Get Dates from 〔450 Dictionary Value〕 　➔ From_Date　» 460

〔452〕 Get Dictionary Value for To in 〔449 Alarm_Label_Dictionary〕　»

〔453〕 Get Dates from 〔452 Dictionary Value〕 　➔ To_Date　» 460

〔454〕 Get Dictionary from 〔442 Dictionary.Event〕 　➔ FutureAlarmLabelDictionary　» 455 456 458

〔455〕 Get Dictionary Value for Event in 〔454 FutureAlarmLabelDictionary〕 　➔ Event　» 460

〔456〕 Get Dictionary Value for From in 〔454 FutureAlarmLabelDictionary〕 　➔ From　»

〔457〕 Get Dates from 〔456 From〕 　➔ FromDate　» 460

〔458〕 Get Dictionary Value for To in 〔454 FutureAlarmLabelDictionary〕 　➔ To　»

〔459〕 Get Dates from 〔458 To〕 　➔ ToDate　»

〔460〕 If All are true　〔455 Event’s Name〕 is 〔449 Alarm_Label_Dictionary.Event〕　〔457 FromDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔451 From_Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕　〔459 ToDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔453 To_Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕

〔461〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔462〕 End If

〔463〕 End Repeat[2] with Each　▵448

〔464〕 End If　▵447

〔465〕 Add Alarm for 〔444 Dates〕 called 〔442 Dictionary.Event〕

〔466〕 End If　▵445

〔467〕 End If　▵443

〔468〕 End Repeat with Each　▵441

〔469〕 End If　▵439

〔470〕 End If　▵92

〔471〕 If 〔Shortcut Input as Number〕 is 2

〔472〕 Comment
1-Hour Event Processor
*Real-time event handler for immediate notifications:

Processes events within next 60 minutes

Provides most accurate travel estimates

Recommended for hourly automation*

〔473〕 Get File at Path Smart Calendar Reminder/aboutme.txt from Folder　»
• FileErrorIfNotFound: false

〔474〕 Get Dictionary from 〔473 File〕　» 475 478 479

〔475〕 Get Dictionary from 〔474 Dictionary.HomeAddress〕　»

〔476〕 Text　»
〔475 Dictionary.street〕 〔475 Dictionary.city〕 〔475 Dictionary.state〕 〔475 Dictionary.postcode〕 〔475 Dictionary.country〕

〔477〕 Set Variable Home_Address to 〔476 Text〕

〔478〕 Set Variable Travel_Method to 〔474 Dictionary.TravelMethod〕

〔479〕 Get Dictionary Value for ExtraTime in 〔474 Dictionary〕　»

〔480〕 Get Numbers from 〔479 Dictionary Value〕　»

〔481〕 Set Variable Extra_Time to 〔480 Numbers〕

〔482〕 Find Calendar Events All Calendar Events where　» 483 484 485 752
• ContentItemSortProperty: Start Date
• ContentItemSortOrder: Oldest First
• ContentItemFilter: • All the following are true
Start Date is in the next 1 hours
Is Not All Day
Canceled is {"Bool":false}

〔483〕 If 〔482 Calendar Events〕 has any value

〔484〕 Count Items in 〔482 Calendar Events〕　» 756 764

〔485〕 Repeat with Each in 〔482 Calendar Events〕

〔486〕 If 〔Repeat Item’s Location〕 has any value

〔487〕 Get Current Location　» 498 504 590
• Accuracy: Best

〔488〕 If All are true　〔Repeat Item’s Notes〕 has any value　〔Repeat Item’s Notes〕 begins with {　〔Repeat Item’s Notes〕 ends with }

〔489〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY

〔490〕 Get Dictionary from 〔Repeat Item’s Notes〕 　➔ NotesAddressDictionary　» 491 492 493 494 495

〔491〕 Set Variable CalendarNotesStreet to 〔490 NotesAddressDictionary.Street〕

〔492〕 Set Variable CalendarNotesCity to 〔490 NotesAddressDictionary.City〕

〔493〕 Set Variable CalendarNotesState to 〔490 NotesAddressDictionary.State〕

〔494〕 Set Variable CalendarNotesRegion to 〔490 NotesAddressDictionary.Country〕

〔495〕 Set Variable CalendarNotesZIPCode to 〔490 NotesAddressDictionary.Postcode〕

〔496〕 Text　»
〔CalendarNotesStreet〕 〔CalendarNotesCity〕 〔CalendarNotesState〕 〔CalendarNotesZIPCode〕 〔CalendarNotesRegion〕

〔497〕 Set Variable NotesAddressString to 〔496 Text〕

〔498〕 If All are true　〔487 Current Location’s Street〕 is 〔CalendarNotesStreet〕　〔487 Current Location’s City〕 is 〔CalendarNotesCity〕　〔487 Current Location’s State〕 is 〔CalendarNotesState〕　〔487 Current Location’s Country〕 is 〔CalendarNotesRegion〕　〔487 Current Location’s ZIP Code〕 is 〔CalendarNotesZIPCode〕

〔499〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY -> CALENDAR EVENT ADDRESS IS THE SAME WITH CURRENT LOCATION

〔500〕 Number 0　»

〔501〕 Set Variable CurrentToDeparture to 〔500 Number〕

〔502〕 Otherwise

〔503〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY -> CALENDAR EVENT ADDRESS IS NOT THE SAME WITH CURRENT LOCATION

〔504〕 Get 〔TravelMethod〕 Time　»
• GetDirectionsCustomLocation: 〔487 Current Location〕
• Destination: 〔NotesAddressString〕

〔505〕 Set Variable TravelTimeString to 〔504 Travel Time〕

〔506〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔507〕 Set Variable MatchString to 〔506 Matches〕

〔508〕 Count Items in 〔MatchString〕　»

〔509〕 If 〔508 Count〕 is 1

〔510〕 Get First Item from List 〔MatchString〕　»

〔511〕 Set Variable TravelDays to 〔510 Item from List〕

〔512〕 Otherwise

〔513〕 Number 0　»

〔514〕 Set Variable TravelDays to 〔513 Number〕

〔515〕 End If

〔516〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔517〕 Set Variable MatchString to 〔516 Matches〕

〔518〕 Count Items in 〔MatchString〕　»

〔519〕 If 〔518 Count〕 is 1

〔520〕 Get First Item from List 〔MatchString〕　»

〔521〕 Set Variable TravelHours to 〔520 Item from List〕

〔522〕 Otherwise

〔523〕 Number 0　»

〔524〕 Set Variable TravelHours to 〔523 Number〕

〔525〕 End If

〔526〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔527〕 Set Variable MatchString to 〔526 Matches〕

〔528〕 Count Items in 〔MatchString〕　»

〔529〕 If 〔528 Count〕 is 1

〔530〕 Get First Item from List 〔MatchString〕　»

〔531〕 Set Variable TravelMinutes to 〔530 Item from List〕

〔532〕 Otherwise

〔533〕 Number 0　»

〔534〕 Set Variable TravelMinutes to 〔533 Number〕

〔535〕 End If

〔536〕 Calculate 〔TravelDays〕 × 1440 　➔ Days　» 538

〔537〕 Calculate 〔TravelHours〕 × 60 　➔ Hours　»

〔538〕 Calculate 〔536 Days〕 + 〔537 Hours〕　»

〔539〕 Calculate 〔538 Calculation Result〕 + 〔TravelMinutes〕　»

〔540〕 Set Variable CurrentToDeparture to 〔539 Calculation Result〕

〔541〕 End If　▵502

〔542〕 Get 〔TravelMethod〕 Time 　➔ DepartureToDestination　»
• GetDirectionsCustomLocation: 〔NotesAddressString〕
• Destination: 〔Repeat Item’s Location〕

〔543〕 Set Variable TravelTimeString to 〔542 DepartureToDestination〕

〔544〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔545〕 Set Variable MatchString to 〔544 Matches〕

〔546〕 Count Items in 〔MatchString〕　»

〔547〕 If 〔546 Count〕 is 1

〔548〕 Get First Item from List 〔MatchString〕　»

〔549〕 Set Variable TravelDays to 〔548 Item from List〕

〔550〕 Otherwise

〔551〕 Number 0　»

〔552〕 Set Variable TravelDays to 〔551 Number〕

〔553〕 End If

〔554〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔555〕 Set Variable MatchString to 〔554 Matches〕

〔556〕 Count Items in 〔MatchString〕　»

〔557〕 If 〔556 Count〕 is 1

〔558〕 Get First Item from List 〔MatchString〕　»

〔559〕 Set Variable TravelHours to 〔558 Item from List〕

〔560〕 Otherwise

〔561〕 Number 0　»

〔562〕 Set Variable TravelHours to 〔561 Number〕

〔563〕 End If

〔564〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔565〕 Set Variable MatchString to 〔564 Matches〕

〔566〕 Count Items in 〔MatchString〕　»

〔567〕 If 〔566 Count〕 is 1

〔568〕 Get First Item from List 〔MatchString〕　»

〔569〕 Set Variable TravelMinutes to 〔568 Item from List〕

〔570〕 Otherwise

〔571〕 Number 0　»

〔572〕 Set Variable TravelMinutes to 〔571 Number〕

〔573〕 End If

〔574〕 Calculate 〔TravelDays〕 × 1440 　➔ Days　» 576

〔575〕 Calculate 〔TravelHours〕 × 60 　➔ Hours　»

〔576〕 Calculate 〔574 Days〕 + 〔575 Hours〕　»

〔577〕 Calculate 〔576 Calculation Result〕 + 〔TravelMinutes〕　»

〔578〕 Calculate 〔577 Calculation Result〕 + 〔CurrentToDeparture〕　»

〔579〕 Set Variable TravelTime to 〔578 Calculation Result〕

〔580〕 Otherwise　▵488

〔581〕 Comment
CALENDER EVENT NOTES IS BLANK

〔582〕 Get Dictionary from 〔HomeAddress〕 　➔ home_address_dictionary　» 583 584 585 586 587

〔583〕 Get Dictionary Value for street in 〔582 home_address_dictionary〕 　➔ HomeStreet　» 588 590

〔584〕 Get Dictionary Value for city in 〔582 home_address_dictionary〕 　➔ HomeCity　» 588 590

〔585〕 Get Dictionary Value for state in 〔582 home_address_dictionary〕 　➔ HomeState　» 588 590

〔586〕 Get Dictionary Value for country in 〔582 home_address_dictionary〕 　➔ HomeCountry　» 588 590

〔587〕 Get Dictionary Value for postcode in 〔582 home_address_dictionary〕 　➔ HomePostcode　» 588 590

〔588〕 If All are true　〔583 HomeStreet〕 has any value　〔584 HomeCity〕 has any value　〔585 HomeState〕 has any value　〔586 HomeCountry〕 has any value　〔587 HomePostcode〕 has any value

〔589〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED

〔590〕 If All are true　〔487 Current Location’s Street〕 is 〔583 HomeStreet〕　〔487 Current Location’s City〕 is 〔584 HomeCity〕　〔487 Current Location’s State〕 is 〔585 HomeState〕　〔487 Current Location’s Country〕 is 〔586 HomeCountry〕　〔487 Current Location’s ZIP Code〕 is 〔587 HomePostcode〕

〔591〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED -> HOME ADDRESS IS THE SAME WITH CURRENT LOCATION

〔592〕 Number 0　»

〔593〕 Set Variable CurrentToDeparture to 〔592 Number〕

〔594〕 Otherwise

〔595〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED -> HOME ADDRESS IS NOT THE SAME WITH CURRENT LOCATION

〔596〕 Get 〔TravelMethod〕 Time　»
• Destination: 〔HomeAddress〕

〔597〕 Set Variable TravelTimeString to 〔596 Travel Time〕

〔598〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔599〕 Set Variable MatchString to 〔598 Matches〕

〔600〕 Count Items in 〔MatchString〕　»

〔601〕 If 〔600 Count〕 is 1

〔602〕 Get First Item from List 〔MatchString〕　»

〔603〕 Set Variable TravelDays to 〔602 Item from List〕

〔604〕 Otherwise

〔605〕 Number 0　»

〔606〕 Set Variable TravelDays to 〔605 Number〕

〔607〕 End If

〔608〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔609〕 Set Variable MatchString to 〔608 Matches〕

〔610〕 Count Items in 〔MatchString〕　»

〔611〕 If 〔610 Count〕 is 1

〔612〕 Get First Item from List 〔MatchString〕　»

〔613〕 Set Variable TravelHours to 〔612 Item from List〕

〔614〕 Otherwise

〔615〕 Number 0　»

〔616〕 Set Variable TravelHours to 〔615 Number〕

〔617〕 End If

〔618〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔619〕 Set Variable MatchString to 〔618 Matches〕

〔620〕 Count Items in 〔MatchString〕　»

〔621〕 If 〔620 Count〕 is 1

〔622〕 Get First Item from List 〔MatchString〕　»

〔623〕 Set Variable TravelMinutes to 〔622 Item from List〕

〔624〕 Otherwise

〔625〕 Number 0　»

〔626〕 Set Variable TravelMinutes to 〔625 Number〕

〔627〕 End If

〔628〕 Calculate 〔TravelDays〕 × 1440 　➔ Days　» 630

〔629〕 Calculate 〔TravelHours〕 × 60 　➔ Hours　»

〔630〕 Calculate 〔628 Days〕 + 〔629 Hours〕　»

〔631〕 Calculate 〔630 Calculation Result〕 + 〔TravelMinutes〕　»

〔632〕 Set Variable CurrentToDeparture to 〔631 Calculation Result〕

〔633〕 End If　▵594

〔634〕 Get 〔TravelMethod〕 Time 　➔ DepartureToDestination　»
• GetDirectionsCustomLocation: 〔HomeAddress〕
• Destination: 〔Repeat Item’s Location〕

〔635〕 Set Variable TravelTimeString to 〔634 DepartureToDestination〕

〔636〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔637〕 Set Variable MatchString to 〔636 Matches〕

〔638〕 Count Items in 〔MatchString〕　»

〔639〕 If 〔638 Count〕 is 1

〔640〕 Get First Item from List 〔MatchString〕　»

〔641〕 Set Variable TravelDays to 〔640 Item from List〕

〔642〕 Otherwise

〔643〕 Number 0　»

〔644〕 Set Variable TravelDays to 〔643 Number〕

〔645〕 End If

〔646〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔647〕 Set Variable MatchString to 〔646 Matches〕

〔648〕 Count Items in 〔MatchString〕　»

〔649〕 If 〔648 Count〕 is 1

〔650〕 Get First Item from List 〔MatchString〕　»

〔651〕 Set Variable TravelHours to 〔650 Item from List〕

〔652〕 Otherwise

〔653〕 Number 0　»

〔654〕 Set Variable TravelHours to 〔653 Number〕

〔655〕 End If

〔656〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔657〕 Set Variable MatchString to 〔656 Matches〕

〔658〕 Count Items in 〔MatchString〕　»

〔659〕 If 〔658 Count〕 is 1

〔660〕 Get First Item from List 〔MatchString〕　»

〔661〕 Set Variable TravelMinutes to 〔660 Item from List〕

〔662〕 Otherwise

〔663〕 Number 0　»

〔664〕 Set Variable TravelMinutes to 〔663 Number〕

〔665〕 End If

〔666〕 Calculate 〔TravelDays〕 × 1440 　➔ Days　» 668

〔667〕 Calculate 〔TravelHours〕 × 60 　➔ Hours　»

〔668〕 Calculate 〔666 Days〕 + 〔667 Hours〕　»

〔669〕 Calculate 〔668 Calculation Result〕 + 〔TravelMinutes〕　»

〔670〕 Calculate 〔669 Calculation Result〕 + 〔CurrentToDeparture〕　»

〔671〕 Set Variable TravelTime to 〔670 Calculation Result〕

〔672〕 Otherwise　▵588

〔673〕 Text
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS NOT MAINTAINED

〔674〕 Get 〔TravelMethod〕 Time　»
• Destination: 〔Repeat Item’s Location〕

〔675〕 Set Variable TravelTimeString to 〔674 Travel Time〕

〔676〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔677〕 Set Variable MatchString to 〔676 Matches〕

〔678〕 Count Items in 〔MatchString〕　»

〔679〕 If 〔678 Count〕 is 1

〔680〕 Get First Item from List 〔MatchString〕　»

〔681〕 Set Variable TravelDays to 〔680 Item from List〕

〔682〕 Otherwise

〔683〕 Number 0　»

〔684〕 Set Variable TravelDays to 〔683 Number〕

〔685〕 End If

〔686〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔687〕 Set Variable MatchString to 〔686 Matches〕

〔688〕 Count Items in 〔MatchString〕　»

〔689〕 If 〔688 Count〕 is 1

〔690〕 Get First Item from List 〔MatchString〕　»

〔691〕 Set Variable TravelHours to 〔690 Item from List〕

〔692〕 Otherwise

〔693〕 Number 0　»

〔694〕 Set Variable TravelHours to 〔693 Number〕

〔695〕 End If

〔696〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔697〕 Set Variable MatchString to 〔696 Matches〕

〔698〕 Count Items in 〔MatchString〕　»

〔699〕 If 〔698 Count〕 is 1

〔700〕 Get First Item from List 〔MatchString〕　»

〔701〕 Set Variable TravelMinutes to 〔700 Item from List〕

〔702〕 Otherwise

〔703〕 Number 0　»

〔704〕 Set Variable TravelMinutes to 〔703 Number〕

〔705〕 End If

〔706〕 Calculate 〔TravelDays〕 × 1440 　➔ Days　» 708

〔707〕 Calculate 〔TravelHours〕 × 60 　➔ Hours　»

〔708〕 Calculate 〔706 Days〕 + 〔707 Hours〕　»

〔709〕 Calculate 〔708 Calculation Result〕 + 〔TravelMinutes〕　»

〔710〕 Set Variable TravelTime to 〔709 Calculation Result〕

〔711〕 End If　▵672

〔712〕 End If　▵580

〔713〕 Otherwise　▵486

〔714〕 Number 0　»

〔715〕 Set Variable TravelTime to 〔714 Number〕

〔716〕 End If

〔717〕 Find Alarm All Alarm　» 718 719
• ContentItemFilter: {  "Value": {
      "WFActionParameterFilterPrefix": 1,
      "WFContentPredicateBoundedDate": false,
      "WFActionParameterFilterTemplates": []
   },
   "WFSerializationType": "WFContentPredicateTableTemplate"
}

〔718〕 If 〔717 Alarms〕 has any value

〔719〕 Repeat[2] with Each in 〔717 Alarms〕

〔720〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ AlarmLabelDictionary　» 721 722 724

〔721〕 Get Dictionary Value for Event in 〔720 AlarmLabelDictionary〕 　➔ Event　» 726

〔722〕 Get Dictionary Value for From in 〔720 AlarmLabelDictionary〕 　➔ From　»

〔723〕 Get Dates from 〔722 From〕 　➔ FromDate　» 726

〔724〕 Get Dictionary Value for To in 〔720 AlarmLabelDictionary〕 　➔ To　»

〔725〕 Get Dates from 〔724 To〕 　➔ ToDate　»

〔726〕 If All are true　〔721 Event’s Name〕 is 〔Repeat Item〕　〔723 FromDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔Repeat Item’s Start Date{"Date Style":"Custom","WFDateFormat":"HH:mm","WFISO8601IncludeTime":false}〕　〔725 ToDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔Repeat Item’s End Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕

〔727〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔728〕 End If

〔729〕 End Repeat[2] with Each　▵719

〔730〕 End If　▵718

〔731〕 Calculate 〔TravelTime〕 + 〔Extra_Time〕　»

〔732〕 Adjust Subtract Date 〔Repeat Item’s Start Date〕 　➔ Supposed_Alarm_Time　» 734 736 739 746 747
• Duration: 〔731 Calculation Result〕 min

〔733〕 Date Current Date　»

〔734〕 If Any are true　〔732 Supposed_Alarm_Time〕 < 〔733 Date〕　〔732 Supposed_Alarm_Time〕 is 〔733 Date〕

〔735〕 If 〔Repeat Item’s Location〕 has any value

〔736〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 at 〔Repeat Item’s Location〕  which  was supposed to get ready at 〔732 Supposed_Alarm_Time〕. Please check.

〔737〕 Set Variable Text to 〔736 Text〕

〔738〕 Otherwise

〔739〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 which  was supposed to get ready at 〔732 Supposed_Alarm_Time〕. Please check.

〔740〕 Set Variable Text to 〔739 Text〕

〔741〕 End If

〔742〕 Show Alert 〔Text〕

〔743〕 Show Notification 〔Text〕

〔744〕 Speak Text
• Text: 〔Text〕

〔745〕 Otherwise　▵734

〔746〕 Dictionary　»
{  "Event": "〔Repeat Item〕",
   "From": "〔Repeat Item’s Start Date〕",
   "To": "〔Repeat Item’s End Date〕",
   "Location": "〔Repeat Item’s Location〕",
   "AlarmTime": "〔732 Supposed_Alarm_Time〕"
}

〔747〕 Add Alarm for 〔732 Supposed_Alarm_Time〕 called 〔746 Dictionary〕

〔748〕 End If

〔749〕 End Repeat with Each　▵485

〔750〕 Number 3　»

〔751〕 Repeat 〔750 Number〕 Times

〔752〕 Repeat[2] with Each in 〔482 Calendar Events〕

〔753〕 Format Date 〔Repeat Item 2’s Start Date〕　» 757 760 765 768
• DateFormatStyle: None

〔754〕 Format Date 〔Repeat Item 2’s End Date〕　» 757 760 765 768
• DateFormatStyle: None

〔755〕 If 〔Repeat Item 2’s Location〕 has any value

〔756〕 If 〔484 Count〕 > 1

〔757〕 Text　»
Event 〔Repeat Index 2〕 〔Repeat Item 2〕 from 〔753 Formatted Date〕 to 〔754 Formatted Date〕 at 〔Repeat Item 2’s Location〕

〔758〕 Set Variable Text to 〔757 Text〕

〔759〕 Otherwise

〔760〕 Text　»
Event  〔Repeat Item 2〕 from 〔753 Formatted Date〕 to 〔754 Formatted Date〕 at 〔Repeat Item 2’s Location〕

〔761〕 Set Variable Text to 〔760 Text〕

〔762〕 End If

〔763〕 Otherwise　▵755

〔764〕 If 〔484 Count〕 > 1

〔765〕 Text　»
Event 〔Repeat Index 2〕 〔Repeat Item 2〕 from 〔753 Formatted Date〕 to 〔754 Formatted Date〕

〔766〕 Set Variable Text to 〔765 Text〕

〔767〕 Otherwise

〔768〕 Text　»
Event  〔Repeat Item 2〕 from 〔753 Formatted Date〕 to 〔754 Formatted Date〕

〔769〕 Set Variable Text to 〔768 Text〕

〔770〕 End If

〔771〕 End If　▵763

〔772〕 Speak Text
• Text: 〔Text〕

〔773〕 Wait 1 seconds

〔774〕 End Repeat[2] with Each　▵752

〔775〕 End Repeat Times　▵751

〔776〕 End If　▵483

〔777〕 End If　▵471

〔778〕 If 〔Shortcut Input as Number〕 is 3

〔779〕 Comment
Alarm Activation Handler
Triggered by alarm events - manages notification flow

〔780〕 Dictionary　»
{  "stop": "no" }

〔781〕 Text　»
〔780 Dictionary〕

〔782〕 Save File 〔781 Text〕
• AskWhereToSave: false
• SaveFileOverwrite: true
• FileDestinationPath: Smart Calendar Reminder/stopflag.txt

〔783〕 Date Current Date　» 802

〔784〕 Find Alarm All Alarm　» 785 794
• ContentItemFilter: {  "Value": {
      "WFActionParameterFilterPrefix": 1,
      "WFContentPredicateBoundedDate": false,
      "WFActionParameterFilterTemplates": []
   },
   "WFSerializationType": "WFContentPredicateTableTemplate"
}

〔785〕 If 〔784 Alarms〕 has any value

〔786〕 Number 10000　» 787 788

〔787〕 Repeat 〔786 Number〕 Times

〔788〕 Get File at Path Smart Calendar Reminder/stopflag.txt from Folder　»
• FileErrorIfNotFound: false
• File: 〔786 Number〕

〔789〕 Get Dictionary from 〔788 File〕　»

〔790〕 Get Dictionary Value for stop in 〔789 Dictionary〕　»

〔791〕 If 〔790 Dictionary Value’s Name〕 is yes

〔792〕 Stop This Shortcut

〔793〕 End If

〔794〕 Repeat[2] with Each in 〔784 Alarms〕

〔795〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ alarm_label_dictionary　» 796 798 800 805 809 812

〔796〕 Get Dictionary Value for From in 〔795 alarm_label_dictionary〕　»

〔797〕 Get Dates from 〔796 Dictionary Value〕 　➔ From　» 803

〔798〕 Get Dictionary Value for To in 〔795 alarm_label_dictionary〕　»

〔799〕 Get Dates from 〔798 Dictionary Value〕 　➔ To　» 804

〔800〕 Get Dictionary Value for AlarmTime in 〔795 alarm_label_dictionary〕　»

〔801〕 Get Dates from 〔800 Dictionary Value〕 　➔ AlarmTime　»

〔802〕 If All are true　〔801 AlarmTime{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH"}〕 is 〔783 Date{"Date Style":"Custom","WFDateFormat":"HH","WFISO8601IncludeTime":false}〕　〔801 AlarmTime{"Date Style":"Custom","WFDateFormat":"mm","WFISO8601IncludeTime":false}〕 is 〔783 Date{"Date Style":"Custom","WFDateFormat":"mm","WFISO8601IncludeTime":false}〕

〔803〕 Format Date 〔797 From’s Time〕　» 809 812

〔804〕 Format Date 〔799 To’s Time〕　» 809 812

〔805〕 Get Dictionary Value for Location in 〔795 alarm_label_dictionary〕　»

〔806〕 Text　»
〔805 Dictionary Value〕

〔807〕 Count Characters in 〔806 Text〕　»

〔808〕 If 〔807 Count〕 > • ConditionalActionString
""• NumberValue
0

〔809〕 Text　»
Prepare for 〔795 alarm_label_dictionary.Event〕 from 〔803 Formatted Date〕 to 〔804 Formatted Date〕 at 〔795 alarm_label_dictionary.Location〕

〔810〕 Set Variable Text to 〔809 Text〕

〔811〕 Otherwise

〔812〕 Text　»
Prepare for 〔795 alarm_label_dictionary.Event〕 from 〔803 Formatted Date〕 to 〔804 Formatted Date〕

〔813〕 Set Variable Text to 〔812 Text〕

〔814〕 End If

〔815〕 Speak Text
• Text: 〔Text〕

〔816〕 End If　▵802

〔817〕 End Repeat[2] with Each　▵794

〔818〕 End Repeat Times　▵787

〔819〕 End If　▵785

〔820〕 End If　▵778

〔821〕 If 〔Shortcut Input as Number〕 is 4

〔822〕 Comment
input case 4:
Notification Interrupt System
Stop protocol for voice announcements when any alarm is stopped.

〔823〕 Dictionary　»
{  "stop": "yes" }

〔824〕 Text　»
〔823 Dictionary〕

〔825〕 Save File 〔824 Text〕
• AskWhereToSave: false
• SaveFileOverwrite: true
• FileDestinationPath: Smart Calendar Reminder/stopflag.txt

〔826〕 End If

〔827〕 If 〔Shortcut Input as Number〕 is 5

〔828〕 Comment
*Revolutionizing event management by integrating calendar data with intelligent automation:

Voice announcements for upcoming events

Dynamic alarm calculation (travel + prep time)

Calendar-driven scheduling system
Eliminates manual reminders and ensures perfect timing synchronization*

〔829〕 Get File at Path Smart Calendar Reminder/aboutme.txt from Folder　»
• FileErrorIfNotFound: false

〔830〕 Get Dictionary from 〔829 File〕　» 831 834 835

〔831〕 Get Dictionary from 〔830 Dictionary.HomeAddress〕　»

〔832〕 Text　»
〔831 Dictionary.street〕 〔831 Dictionary.city〕 〔831 Dictionary.state〕 〔831 Dictionary.postcode〕 〔831 Dictionary.country〕\u{space}

〔833〕 Set Variable HomeAddress to 〔832 Text〕

〔834〕 Set Variable TravelMethod to 〔830 Dictionary.TravelMethod〕

〔835〕 Get Dictionary Value for ExtraTime in 〔830 Dictionary〕　»

〔836〕 Get Numbers from 〔835 Dictionary Value〕　»

〔837〕 Set Variable ExtraTime to 〔836 Numbers〕

〔838〕 Find Calendar Events All Calendar Events where　» 839 840
• ContentItemSortProperty: Start Date
• ContentItemSortOrder: Oldest First
• ContentItemFilter: • All the following are true
Start Date is in the next 1 months
Is Not All Day
Canceled is {"Bool":false}

〔839〕 If 〔838 Calendar Events〕 has any value

〔840〕 Repeat with Each in 〔838 Calendar Events〕

〔841〕 If 〔Repeat Item’s Location〕 has any value

〔842〕 Get Current Location　» 854 860 946
• Accuracy: Best

〔843〕 Comment
*To specify event-specific departure locations:

1. Create calendar event notes with JSON structure:
{
“Street”: “your departure street”,
“City”: “your departure city”,
“State”: “your departure state”,
“Country”: “your departure country”,
“Postcode”: “your departure postcode”
}
2. System prioritizes these over default locations*

〔844〕 If All are true　〔Repeat Item’s Notes〕 has any value　〔Repeat Item’s Notes〕 begins with {　〔Repeat Item’s Notes〕 ends with }

〔845〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY

〔846〕 Get Dictionary from 〔Repeat Item’s Notes〕 　➔ Notes Address Dictionary　» 847 848 849 850 851

〔847〕 Set Variable Calendar_Notes_Street to 〔846 Notes Address Dictionary.Street〕

〔848〕 Set Variable Calendar_Notes_City to 〔846 Notes Address Dictionary.City〕

〔849〕 Set Variable Calendar_Notes_State to 〔846 Notes Address Dictionary.State〕

〔850〕 Set Variable Calendar_Notes_Region to 〔846 Notes Address Dictionary.Country〕

〔851〕 Set Variable Calendar_Notes_ZIP_Code to 〔846 Notes Address Dictionary.Postcode〕

〔852〕 Text　»
〔Calendar_Notes_Street〕 〔Calendar_Notes_City〕 〔Calendar_Notes_State〕 〔Calendar_Notes_ZIP_Code〕 〔Calendar_Notes_Region〕

〔853〕 Set Variable NotesAddressString to 〔852 Text〕

〔854〕 If All are true　〔842 Current Location’s Street〕 is 〔Calendar_Notes_Street〕　〔842 Current Location’s City〕 is 〔Calendar_Notes_City〕　〔842 Current Location’s State〕 is 〔Calendar_Notes_State〕　〔842 Current Location’s Country〕 is 〔Calendar_Notes_Region〕　〔842 Current Location’s ZIP Code〕 is 〔Calendar_Notes_ZIP_Code〕

〔855〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY -> CALENDAR EVENT ADDRESS IS THE SAME WITH CURRENT LOCATION

〔856〕 Number 0　»

〔857〕 Set Variable CurrentToDeparture to 〔856 Number〕

〔858〕 Otherwise

〔859〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY -> CALENDAR EVENT ADDRESS IS NOT THE SAME WITH CURRENT LOCATION

〔860〕 Get 〔TravelMethod〕 Time　»
• GetDirectionsCustomLocation: 〔842 Current Location〕
• Destination: 〔NotesAddressString〕

〔861〕 Set Variable TravelTimeString to 〔860 Travel Time〕

〔862〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔863〕 Set Variable MatchString to 〔862 Matches〕

〔864〕 Count Items in 〔MatchString〕　»

〔865〕 If 〔864 Count〕 is 1

〔866〕 Get First Item from List 〔MatchString〕　»

〔867〕 Set Variable TravelDays to 〔866 Item from List〕

〔868〕 Otherwise

〔869〕 Number 0　»

〔870〕 Set Variable TravelDays to 〔869 Number〕

〔871〕 End If

〔872〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔873〕 Set Variable MatchString to 〔872 Matches〕

〔874〕 Count Items in 〔MatchString〕　»

〔875〕 If 〔874 Count〕 is 1

〔876〕 Get First Item from List 〔MatchString〕　»

〔877〕 Set Variable TravelHours to 〔876 Item from List〕

〔878〕 Otherwise

〔879〕 Number 0　»

〔880〕 Set Variable TravelHours to 〔879 Number〕

〔881〕 End If

〔882〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔883〕 Set Variable MatchString to 〔882 Matches〕

〔884〕 Count Items in 〔MatchString〕　»

〔885〕 If 〔884 Count〕 is 1

〔886〕 Get First Item from List 〔MatchString〕　»

〔887〕 Set Variable TravelMinutes to 〔886 Item from List〕

〔888〕 Otherwise

〔889〕 Number 0　»

〔890〕 Set Variable TravelMinutes to 〔889 Number〕

〔891〕 End If

〔892〕 Calculate 〔TravelDays〕 × 1440 　➔ Days　» 894

〔893〕 Calculate 〔TravelHours〕 × 60 　➔ Hours　»

〔894〕 Calculate 〔892 Days〕 + 〔893 Hours〕　»

〔895〕 Calculate 〔894 Calculation Result〕 + 〔TravelMinutes〕　»

〔896〕 Set Variable CurrentToDeparture to 〔895 Calculation Result〕

〔897〕 End If　▵858

〔898〕 Get 〔TravelMethod〕 Time 　➔ DepartureToDestination　»
• GetDirectionsCustomLocation: 〔NotesAddressString〕
• Destination: 〔Repeat Item’s Location〕

〔899〕 Set Variable TravelTimeString to 〔898 DepartureToDestination〕

〔900〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔901〕 Set Variable MatchString to 〔900 Matches〕

〔902〕 Count Items in 〔MatchString〕　»

〔903〕 If 〔902 Count〕 is 1

〔904〕 Get First Item from List 〔MatchString〕　»

〔905〕 Set Variable TravelDays to 〔904 Item from List〕

〔906〕 Otherwise

〔907〕 Number 0　»

〔908〕 Set Variable TravelDays to 〔907 Number〕

〔909〕 End If

〔910〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔911〕 Set Variable MatchString to 〔910 Matches〕

〔912〕 Count Items in 〔MatchString〕　»

〔913〕 If 〔912 Count〕 is 1

〔914〕 Get First Item from List 〔MatchString〕　»

〔915〕 Set Variable TravelHours to 〔914 Item from List〕

〔916〕 Otherwise

〔917〕 Number 0　»

〔918〕 Set Variable TravelHours to 〔917 Number〕

〔919〕 End If

〔920〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔921〕 Set Variable MatchString to 〔920 Matches〕

〔922〕 Count Items in 〔MatchString〕　»

〔923〕 If 〔922 Count〕 is 1

〔924〕 Get First Item from List 〔MatchString〕　»

〔925〕 Set Variable TravelMinutes to 〔924 Item from List〕

〔926〕 Otherwise

〔927〕 Number 0　»

〔928〕 Set Variable TravelMinutes to 〔927 Number〕

〔929〕 End If

〔930〕 Calculate 〔TravelDays〕 × 1440 　➔ Days　» 932

〔931〕 Calculate 〔TravelHours〕 × 60 　➔ Hours　»

〔932〕 Calculate 〔930 Days〕 + 〔931 Hours〕　»

〔933〕 Calculate 〔932 Calculation Result〕 + 〔TravelMinutes〕　»

〔934〕 Calculate 〔933 Calculation Result〕 + 〔CurrentToDeparture〕　»

〔935〕 Set Variable TravelTime to 〔934 Calculation Result〕

〔936〕 Otherwise　▵844

〔937〕 Comment
CALENDER EVENT NOTES IS BLANK

〔938〕 Get Dictionary from 〔HomeAddress〕 　➔ Home Address Dictionary　» 939 940 941 942 943

〔939〕 Get Dictionary Value for street in 〔938 Home Address Dictionary〕 　➔ home_Street　» 944 946

〔940〕 Get Dictionary Value for city in 〔938 Home Address Dictionary〕 　➔ home_City　» 944 946

〔941〕 Get Dictionary Value for state in 〔938 Home Address Dictionary〕 　➔ home_State　» 944 946

〔942〕 Get Dictionary Value for country in 〔938 Home Address Dictionary〕 　➔ home_Country　» 944 946

〔943〕 Get Dictionary Value for postcode in 〔938 Home Address Dictionary〕 　➔ home_Postcode　» 944 946

〔944〕 If All are true　〔939 home_Street〕 has any value　〔940 home_City〕 has any value　〔941 home_State〕 has any value　〔942 home_Country〕 has any value　〔943 home_Postcode〕 has any value

〔945〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED

〔946〕 If All are true　〔842 Current Location’s Street〕 is 〔939 home_Street〕　〔842 Current Location’s City〕 is 〔940 home_City〕　〔842 Current Location’s State〕 is 〔941 home_State〕　〔842 Current Location’s Country〕 is 〔942 home_Country〕　〔842 Current Location’s ZIP Code〕 is 〔943 home_Postcode〕

〔947〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED -> HOME ADDRESS IS THE SAME WITH CURRENT LOCATION

〔948〕 Number 0　»

〔949〕 Set Variable CurrentToDeparture to 〔948 Number〕

〔950〕 Otherwise

〔951〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED -> HOME ADDRESS IS NOT THE SAME WITH CURRENT LOCATION

〔952〕 Get 〔TravelMethod〕 Time　»
• Destination: 〔HomeAddress〕

〔953〕 Set Variable TravelTimeString to 〔952 Travel Time〕

〔954〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔955〕 Set Variable MatchString to 〔954 Matches〕

〔956〕 Count Items in 〔MatchString〕　»

〔957〕 If 〔956 Count〕 is 1

〔958〕 Get First Item from List 〔MatchString〕　»

〔959〕 Set Variable TravelDays to 〔958 Item from List〕

〔960〕 Otherwise

〔961〕 Number 0　»

〔962〕 Set Variable TravelDays to 〔961 Number〕

〔963〕 End If

〔964〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔965〕 Set Variable MatchString to 〔964 Matches〕

〔966〕 Count Items in 〔MatchString〕　»

〔967〕 If 〔966 Count〕 is 1

〔968〕 Get First Item from List 〔MatchString〕　»

〔969〕 Set Variable TravelHours to 〔968 Item from List〕

〔970〕 Otherwise

〔971〕 Number 0　»

〔972〕 Set Variable TravelHours to 〔971 Number〕

〔973〕 End If

〔974〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔975〕 Set Variable MatchString to 〔974 Matches〕

〔976〕 Count Items in 〔MatchString〕　»

〔977〕 If 〔976 Count〕 is 1

〔978〕 Get First Item from List 〔MatchString〕　»

〔979〕 Set Variable TravelMinutes to 〔978 Item from List〕

〔980〕 Otherwise

〔981〕 Number 0　»

〔982〕 Set Variable TravelMinutes to 〔981 Number〕

〔983〕 End If

〔984〕 Calculate 〔TravelDays〕 × 1440 　➔ Days　» 986

〔985〕 Calculate 〔TravelHours〕 × 60 　➔ Hours　»

〔986〕 Calculate 〔984 Days〕 + 〔985 Hours〕　»

〔987〕 Calculate 〔986 Calculation Result〕 + 〔TravelMinutes〕　»

〔988〕 Set Variable CurrentToDeparture to 〔987 Calculation Result〕

〔989〕 End If　▵950

〔990〕 Get 〔TravelMethod〕 Time 　➔ DepartureToDestination　»
• GetDirectionsCustomLocation: 〔HomeAddress〕
• Destination: 〔Repeat Item’s Location〕

〔991〕 Set Variable TravelTimeString to 〔990 DepartureToDestination〕

〔992〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔993〕 Set Variable MatchString to 〔992 Matches〕

〔994〕 Count Items in 〔MatchString〕　»

〔995〕 If 〔994 Count〕 is 1

〔996〕 Get First Item from List 〔MatchString〕　»

〔997〕 Set Variable TravelDays to 〔996 Item from List〕

〔998〕 Otherwise

〔999〕 Number 0　»

〔1000〕 Set Variable TravelDays to 〔999 Number〕

〔1001〕 End If

〔1002〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1003〕 Set Variable MatchString to 〔1002 Matches〕

〔1004〕 Count Items in 〔MatchString〕　»

〔1005〕 If 〔1004 Count〕 is 1

〔1006〕 Get First Item from List 〔MatchString〕　»

〔1007〕 Set Variable TravelHours to 〔1006 Item from List〕

〔1008〕 Otherwise

〔1009〕 Number 0　»

〔1010〕 Set Variable TravelHours to 〔1009 Number〕

〔1011〕 End If

〔1012〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1013〕 Set Variable MatchString to 〔1012 Matches〕

〔1014〕 Count Items in 〔MatchString〕　»

〔1015〕 If 〔1014 Count〕 is 1

〔1016〕 Get First Item from List 〔MatchString〕　»

〔1017〕 Set Variable TravelMinutes to 〔1016 Item from List〕

〔1018〕 Otherwise

〔1019〕 Number 0　»

〔1020〕 Set Variable TravelMinutes to 〔1019 Number〕

〔1021〕 End If

〔1022〕 Calculate 〔TravelDays〕 × 1440 　➔ Days　» 1024

〔1023〕 Calculate 〔TravelHours〕 × 60 　➔ Hours　»

〔1024〕 Calculate 〔1022 Days〕 + 〔1023 Hours〕　»

〔1025〕 Calculate 〔1024 Calculation Result〕 + 〔TravelMinutes〕　»

〔1026〕 Calculate 〔1025 Calculation Result〕 + 〔CurrentToDeparture〕　»

〔1027〕 Set Variable TravelTime to 〔1026 Calculation Result〕

〔1028〕 Otherwise　▵944

〔1029〕 Text
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS NOT MAINTAINED

〔1030〕 Get 〔TravelMethod〕 Time　»
• Destination: 〔Repeat Item’s Location〕

〔1031〕 Set Variable TravelTimeString to 〔1030 Travel Time〕

〔1032〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1033〕 Set Variable MatchString to 〔1032 Matches〕

〔1034〕 Count Items in 〔MatchString〕　»

〔1035〕 If 〔1034 Count〕 is 1

〔1036〕 Get First Item from List 〔MatchString〕　»

〔1037〕 Set Variable TravelDays to 〔1036 Item from List〕

〔1038〕 Otherwise

〔1039〕 Number 0　»

〔1040〕 Set Variable TravelDays to 〔1039 Number〕

〔1041〕 End If

〔1042〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1043〕 Set Variable MatchString to 〔1042 Matches〕

〔1044〕 Count Items in 〔MatchString〕　»

〔1045〕 If 〔1044 Count〕 is 1

〔1046〕 Get First Item from List 〔MatchString〕　»

〔1047〕 Set Variable TravelHours to 〔1046 Item from List〕

〔1048〕 Otherwise

〔1049〕 Number 0　»

〔1050〕 Set Variable TravelHours to 〔1049 Number〕

〔1051〕 End If

〔1052〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1053〕 Set Variable MatchString to 〔1052 Matches〕

〔1054〕 Count Items in 〔MatchString〕　»

〔1055〕 If 〔1054 Count〕 is 1

〔1056〕 Get First Item from List 〔MatchString〕　»

〔1057〕 Set Variable TravelMinutes to 〔1056 Item from List〕

〔1058〕 Otherwise

〔1059〕 Number 0　»

〔1060〕 Set Variable TravelMinutes to 〔1059 Number〕

〔1061〕 End If

〔1062〕 Calculate 〔TravelDays〕 × 1440 　➔ Days　» 1064

〔1063〕 Calculate 〔TravelHours〕 × 60 　➔ Hours　»

〔1064〕 Calculate 〔1062 Days〕 + 〔1063 Hours〕　»

〔1065〕 Calculate 〔1064 Calculation Result〕 + 〔TravelMinutes〕　»

〔1066〕 Set Variable TravelTime to 〔1065 Calculation Result〕

〔1067〕 End If　▵1028

〔1068〕 End If　▵936

〔1069〕 Otherwise　▵841

〔1070〕 Number 0　»

〔1071〕 Set Variable TravelTime to 〔1070 Number〕

〔1072〕 End If

〔1073〕 Calculate 〔TravelTime〕 + 〔ExtraTime〕　»

〔1074〕 Adjust Subtract Date 〔Repeat Item’s Start Date〕 　➔ Supposed Alarm Time　» 1075 1078 1081 1084 1091 1107 1109 1110 1128 1133 1136
• Duration: 〔1073 Calculation Result〕 min

〔1075〕 Dictionary 　➔ Alarm Label Dictionary　» 1107 1112 1128
{  "Event": "〔Repeat Item〕",
   "From": "〔Repeat Item’s Start Date〕",
   "To": "〔Repeat Item’s End Date〕",
   "Location": "〔Repeat Item’s Location〕",
   "AlarmTime": "〔1074 Supposed Alarm Time〕"
}

〔1076〕 Date Current Date 　➔ Current Date　» 1077 1078 1109

〔1077〕 Adjust Add Date 〔1076 Current Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"dd MMM yyyy"}〕 　➔ 1 day after　» 1091 1092 1110 1114
• Duration: "1" days

〔1078〕 If 〔1074 Supposed Alarm Time〕 is 〔1076 Current Date〕

〔1079〕 Comment
supposed alarm time is exactly 12:00am

〔1080〕 If 〔Repeat Item’s Location〕 has any value

〔1081〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 at 〔Repeat Item’s Location〕 which  was supposed to get ready at 〔1074 Supposed Alarm Time〕. Please check.

〔1082〕 Set Variable Text to 〔1081 Text〕

〔1083〕 Otherwise

〔1084〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 which  was supposed to get ready at 〔1074 Supposed Alarm Time〕. Please check.

〔1085〕 Set Variable Text to 〔1084 Text〕

〔1086〕 End If

〔1087〕 Show Alert 〔Text〕

〔1088〕 Show Notification 〔Text〕

〔1089〕 Speak Text
• Text: 〔Text〕

〔1090〕 Otherwise　▵1078

〔1091〕 If 〔1074 Supposed Alarm Time〕 is 〔1077 1 day after〕

〔1092〕 Find Alarm 〔1077 1 day after〕　» 1093 1094

〔1093〕 If 〔1092 Alarms〕 has any value

〔1094〕 Repeat[2] with Each in 〔1092 Alarms〕

〔1095〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ AlarmLabelDictionary　» 1096 1097 1099

〔1096〕 Get Dictionary Value for Event in 〔1095 AlarmLabelDictionary〕 　➔ Event　» 1101

〔1097〕 Get Dictionary Value for From in 〔1095 AlarmLabelDictionary〕 　➔ From　»

〔1098〕 Get Dates from 〔1097 From〕 　➔ FromDate　» 1101

〔1099〕 Get Dictionary Value for To in 〔1095 AlarmLabelDictionary〕 　➔ To　»

〔1100〕 Get Dates from 〔1099 To〕 　➔ ToDate　»

〔1101〕 If All are true　〔1096 Event’s Name〕 is 〔Repeat Item〕　〔1098 FromDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔Repeat Item’s Start Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕　〔1100 ToDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is • ConditionalActionString
〔Repeat Item’s End Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕• Date
〔Repeat Item’s End Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕

〔1102〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔1103〕 End If

〔1104〕 End Repeat[2] with Each　▵1094

〔1105〕 End If　▵1093

〔1106〕 Comment
since this will be triggered at 12:00 am each day, when the supposed alarm time is 12:00 am in the next day, you can set alarm now

〔1107〕 Add Alarm for 〔1074 Supposed Alarm Time〕 called 〔1075 Alarm Label Dictionary〕

〔1108〕 Otherwise　▵1091

〔1109〕 If 〔1074 Supposed Alarm Time〕 > 〔1076 Current Date〕

〔1110〕 If 〔1074 Supposed Alarm Time〕 > 〔1077 1 day after〕

〔1111〕 Comment
when the time is other than 12:00 am of then next day, you cannot set alarm yet. If set, it will be today. For example, triggering time 2025-4-8 12:00 am, the supposed alarm time is 2025-4-9 08:00 am, if you set an alarm at 08:00 at 2025-4-8 12:00 am, it will alarm at 2025-4-8 08:00 am instead. So we need to record the supposed alarm time and trigger next day.

〔1112〕 Set Variable Event to 〔1075 Alarm Label Dictionary〕

〔1113〕 Otherwise

〔1114〕 Find Alarm 〔1077 1 day after〕　» 1115 1116
• ContentItemFilter: {  "Value": {
      "WFActionParameterFilterPrefix": 1,
      "WFContentPredicateBoundedDate": false,
      "WFActionParameterFilterTemplates": []
   },
   "WFSerializationType": "WFContentPredicateTableTemplate"
}

〔1115〕 If 〔1114 Alarms〕 has any value

〔1116〕 Repeat[2] with Each in 〔1114 Alarms〕

〔1117〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ AlarmLabelDictionary　» 1118 1119 1121

〔1118〕 Get Dictionary Value for Event in 〔1117 AlarmLabelDictionary〕 　➔ Event　» 1123

〔1119〕 Get Dictionary Value for From in 〔1117 AlarmLabelDictionary〕 　➔ From　»

〔1120〕 Get Dates from 〔1119 From〕 　➔ FromDate　» 1123

〔1121〕 Get Dictionary Value for To in 〔1117 AlarmLabelDictionary〕 　➔ To　»

〔1122〕 Get Dates from 〔1121 To〕 　➔ ToDate　»

〔1123〕 If All are true　〔1118 Event’s Name〕 is 〔Repeat Item〕　〔1120 FromDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔Repeat Item’s Start Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕　〔1122 ToDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔Repeat Item’s End Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕

〔1124〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔1125〕 End If

〔1126〕 End Repeat[2] with Each　▵1116

〔1127〕 End If　▵1115

〔1128〕 Add Alarm for 〔1074 Supposed Alarm Time〕 called 〔1075 Alarm Label Dictionary〕

〔1129〕 End If　▵1113

〔1130〕 Otherwise　▵1109

〔1131〕 Comment
the supposed alarm time passed

〔1132〕 If 〔Repeat Item’s Location〕 has any value

〔1133〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 at 〔Repeat Item’s Location〕 which  was supposed to get ready at 〔1074 Supposed Alarm Time〕. Please check.

〔1134〕 Set Variable Text to 〔1133 Text〕

〔1135〕 Otherwise

〔1136〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 which  was supposed to get ready at 〔1074 Supposed Alarm Time〕. Please check.

〔1137〕 Set Variable Text to 〔1136 Text〕

〔1138〕 End If

〔1139〕 Show Alert 〔Text〕

〔1140〕 Show Notification 〔Text〕

〔1141〕 Speak Text
• Text: 〔Text〕

〔1142〕 End If　▵1130

〔1143〕 End If　▵1108

〔1144〕 End If　▵1090

〔1145〕 Text
〔Event〕

〔1146〕 If 〔Event〕 has any value

〔1147〕 Get Dictionary from 〔Event〕　» 1160

〔1148〕 Text　»

〔1149〕 Set Variable TextList to 〔1148 Text〕

〔1150〕 Add 〔Event〕 to Variable TextList

〔1151〕 Get File at Path Smart Calendar Reminder/Future Alarms.txt from Folder　» 1152 1153
• FileErrorIfNotFound: false

〔1152〕 If 〔1151 File’s File Size〕 has any value

〔1153〕 Split Text 〔1151 File〕 by New Lines　»

〔1154〕 Repeat[2] with Each in 〔1153 Split Text〕

〔1155〕 Get Dictionary from 〔Repeat Item 2〕　» 1156 1157 1158 1159

〔1156〕 Get Dictionary Value for Event in 〔1155 Dictionary〕 　➔ Event　» 1160

〔1157〕 Get Dictionary Value for From in 〔1155 Dictionary〕 　➔ From　» 1160

〔1158〕 Get Dictionary Value for To in 〔1155 Dictionary〕 　➔ To　» 1160

〔1159〕 Get Dictionary Value for Location in 〔1155 Dictionary〕 　➔ Location　»

〔1160〕 If Any are true　〔1156 Event’s Name〕 is not 〔1147 Dictionary.Event〕　〔1157 From’s Name〕 is not 〔1147 Dictionary.From〕　〔1158 To’s Name〕 is not 〔1147 Dictionary.To〕　〔1159 Location’s Name〕 is not 〔1147 Dictionary.Location〕

〔1161〕 Add 〔Repeat Item 2〕 to Variable TextList

〔1162〕 End If

〔1163〕 End Repeat[2] with Each　▵1154

〔1164〕 Combine Text 〔TextList〕 with New Lines　»

〔1165〕 Save File 〔1164 Combined Text〕
• AskWhereToSave: false
• SaveFileOverwrite: true
• FileDestinationPath: Smart Calendar Reminder/Future Alarms.txt

〔1166〕 Otherwise　▵1152

〔1167〕 Text　»

〔Event〕

〔1168〕 Save File 〔1167 Text〕
• AskWhereToSave: false
• FileDestinationPath: Smart Calendar Reminder/Future Alarms.txt

〔1169〕 End If

〔1170〕 End If　▵1146

〔1171〕 End Repeat with Each　▵840

〔1172〕 End If　▵839

〔1173〕 Get File at Path Smart Calendar Reminder/Future Alarms.txt from Folder　» 1174 1175
• FileErrorIfNotFound: false

〔1174〕 If 〔1173 File’s File Size〕 has any value

〔1175〕 Split Text 〔1173 File〕 by New Lines　»

〔1176〕 Repeat with Each in 〔1175 Split Text〕

〔1177〕 Get Dictionary from 〔Repeat Item〕　» 1178 1179 1189 1200

〔1178〕 If 〔1177 Dictionary〕 has any value

〔1179〕 Get Dates from 〔1177 Dictionary.AlarmTime〕　» 1180 1181 1200

〔1180〕 If 〔1179 Dates〕 is today

〔1181〕 Find Alarm 〔1179 Dates〕　» 1182 1183
• ContentItemFilter: {  "Value": {
      "WFActionParameterFilterPrefix": 1,
      "WFContentPredicateBoundedDate": false,
      "WFActionParameterFilterTemplates": []
   },
   "WFSerializationType": "WFContentPredicateTableTemplate"
}

〔1182〕 If 〔1181 Alarms〕 has any value

〔1183〕 Repeat[2] with Each in 〔1181 Alarms〕

〔1184〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ Alarm_Label_Dictionary　» 1185 1187 1195

〔1185〕 Get Dictionary Value for From in 〔1184 Alarm_Label_Dictionary〕　»

〔1186〕 Get Dates from 〔1185 Dictionary Value〕 　➔ From_Date　» 1195

〔1187〕 Get Dictionary Value for To in 〔1184 Alarm_Label_Dictionary〕　»

〔1188〕 Get Dates from 〔1187 Dictionary Value〕 　➔ To_Date　» 1195

〔1189〕 Get Dictionary from 〔1177 Dictionary.Event〕 　➔ FutureAlarmLabelDictionary　» 1190 1191 1193

〔1190〕 Get Dictionary Value for Event in 〔1189 FutureAlarmLabelDictionary〕 　➔ Event　» 1195

〔1191〕 Get Dictionary Value for From in 〔1189 FutureAlarmLabelDictionary〕 　➔ From　»

〔1192〕 Get Dates from 〔1191 From〕 　➔ FromDate　» 1195

〔1193〕 Get Dictionary Value for To in 〔1189 FutureAlarmLabelDictionary〕 　➔ To　»

〔1194〕 Get Dates from 〔1193 To〕 　➔ ToDate　»

〔1195〕 If All are true　〔1190 Event’s Name〕 is 〔1184 Alarm_Label_Dictionary.Event〕　〔1192 FromDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔1186 From_Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕　〔1194 ToDate{"Date Style":"Custom","WFDateFormat":"HH:mm","WFISO8601IncludeTime":false}〕 is 〔1188 To_Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕

〔1196〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔1197〕 End If

〔1198〕 End Repeat[2] with Each　▵1183

〔1199〕 End If　▵1182

〔1200〕 Add Alarm for 〔1179 Dates〕 called 〔1177 Dictionary.Event〕

〔1201〕 End If　▵1180

〔1202〕 End If　▵1178

〔1203〕 End Repeat with Each　▵1176

〔1204〕 End If　▵1174

〔1205〕 End If　▵827

〔1206〕 If 〔Shortcut Input as Number〕 is 6

〔1207〕 Comment
*Revolutionizing event management by integrating calendar data with intelligent automation:

Voice announcements for upcoming events

Dynamic alarm calculation (travel + prep time)

Calendar-driven scheduling system
Eliminates manual reminders and ensures perfect timing synchronization*

〔1208〕 Get File at Path Smart Calendar Reminder/aboutme.txt from Folder　»
• FileErrorIfNotFound: false

〔1209〕 Get Dictionary from 〔1208 File〕　» 1210 1213 1214

〔1210〕 Get Dictionary from 〔1209 Dictionary.HomeAddress〕　»

〔1211〕 Text　»
〔1210 Dictionary.street〕 〔1210 Dictionary.city〕 〔1210 Dictionary.state〕 〔1210 Dictionary.postcode〕 〔1210 Dictionary.country〕\u{space}

〔1212〕 Set Variable HomeAddress to 〔1211 Text〕

〔1213〕 Set Variable TravelMethod to 〔1209 Dictionary.TravelMethod〕

〔1214〕 Get Dictionary Value for ExtraTime in 〔1209 Dictionary〕　»

〔1215〕 Get Numbers from 〔1214 Dictionary Value〕　»

〔1216〕 Set Variable ExtraTime to 〔1215 Numbers〕

〔1217〕 Find Calendar Events All Calendar Events where　» 1218 1219
• ContentItemSortProperty: Start Date
• ContentItemSortOrder: Oldest First
• ContentItemFilter: • All the following are true
Start Date is in the next 1 weeks
Is Not All Day
Canceled is {"Bool":false}

〔1218〕 If 〔1217 Calendar Events〕 has any value

〔1219〕 Repeat with Each in 〔1217 Calendar Events〕

〔1220〕 If 〔Repeat Item’s Location〕 has any value

〔1221〕 Get Current Location　» 1233 1239 1325
• Accuracy: Best

〔1222〕 Comment
*To specify event-specific departure locations:

1. Create calendar event notes with JSON structure:
{
“Street”: “your departure street”,
“City”: “your departure city”,
“State”: “your departure state”,
“Country”: “your departure country”,
“Postcode”: “your departure postcode”
}
2. System prioritizes these over default locations*

〔1223〕 If All are true　〔Repeat Item’s Notes〕 has any value　〔Repeat Item’s Notes〕 begins with {　〔Repeat Item’s Notes〕 ends with }

〔1224〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY

〔1225〕 Get Dictionary from 〔Repeat Item’s Notes〕 　➔ Notes Address Dictionary　» 1226 1227 1228 1229 1230

〔1226〕 Set Variable Calendar_Notes_Street to 〔1225 Notes Address Dictionary.Street〕

〔1227〕 Set Variable Calendar_Notes_City to 〔1225 Notes Address Dictionary.City〕

〔1228〕 Set Variable Calendar_Notes_State to 〔1225 Notes Address Dictionary.State〕

〔1229〕 Set Variable Calendar_Notes_Region to 〔1225 Notes Address Dictionary.Country〕

〔1230〕 Set Variable Calendar_Notes_ZIP_Code to 〔1225 Notes Address Dictionary.Postcode〕

〔1231〕 Text　»
〔Calendar_Notes_Street〕 〔Calendar_Notes_City〕 〔Calendar_Notes_State〕 〔Calendar_Notes_ZIP_Code〕 〔Calendar_Notes_Region〕

〔1232〕 Set Variable NotesAddressString to 〔1231 Text〕

〔1233〕 If All are true　〔1221 Current Location’s Street〕 is 〔Calendar_Notes_Street〕　〔1221 Current Location’s City〕 is 〔Calendar_Notes_City〕　〔1221 Current Location’s State〕 is 〔Calendar_Notes_State〕　〔1221 Current Location’s Country〕 is 〔Calendar_Notes_Region〕　〔1221 Current Location’s ZIP Code〕 is 〔Calendar_Notes_ZIP_Code〕

〔1234〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY -> CALENDAR EVENT ADDRESS IS THE SAME WITH CURRENT LOCATION

〔1235〕 Number 0　»

〔1236〕 Set Variable CurrentToDeparture to 〔1235 Number〕

〔1237〕 Otherwise

〔1238〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY -> CALENDAR EVENT ADDRESS IS NOT THE SAME WITH CURRENT LOCATION

〔1239〕 Get 〔TravelMethod〕 Time　»
• GetDirectionsCustomLocation: 〔1221 Current Location〕
• Destination: 〔NotesAddressString〕

〔1240〕 Set Variable TravelTimeString to 〔1239 Travel Time〕

〔1241〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1242〕 Set Variable MatchString to 〔1241 Matches〕

〔1243〕 Count Items in 〔MatchString〕　»

〔1244〕 If 〔1243 Count〕 is 1

〔1245〕 Get First Item from List 〔MatchString〕　»

〔1246〕 Set Variable TravelDays to 〔1245 Item from List〕

〔1247〕 Otherwise

〔1248〕 Number 0　»

〔1249〕 Set Variable TravelDays to 〔1248 Number〕

〔1250〕 End If

〔1251〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1252〕 Set Variable MatchString to 〔1251 Matches〕

〔1253〕 Count Items in 〔MatchString〕　»

〔1254〕 If 〔1253 Count〕 is 1

〔1255〕 Get First Item from List 〔MatchString〕　»

〔1256〕 Set Variable TravelHours to 〔1255 Item from List〕

〔1257〕 Otherwise

〔1258〕 Number 0　»

〔1259〕 Set Variable TravelHours to 〔1258 Number〕

〔1260〕 End If

〔1261〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1262〕 Set Variable MatchString to 〔1261 Matches〕

〔1263〕 Count Items in 〔MatchString〕　»

〔1264〕 If 〔1263 Count〕 is 1

〔1265〕 Get First Item from List 〔MatchString〕　»

〔1266〕 Set Variable TravelMinutes to 〔1265 Item from List〕

〔1267〕 Otherwise

〔1268〕 Number 0　»

〔1269〕 Set Variable TravelMinutes to 〔1268 Number〕

〔1270〕 End If

〔1271〕 Calculate 〔TravelDays〕 × 1440 　➔ Days　» 1273

〔1272〕 Calculate 〔TravelHours〕 × 60 　➔ Hours　»

〔1273〕 Calculate 〔1271 Days〕 + 〔1272 Hours〕　»

〔1274〕 Calculate 〔1273 Calculation Result〕 + 〔TravelMinutes〕　»

〔1275〕 Set Variable CurrentToDeparture to 〔1274 Calculation Result〕

〔1276〕 End If　▵1237

〔1277〕 Get 〔TravelMethod〕 Time 　➔ DepartureToDestination　»
• GetDirectionsCustomLocation: 〔NotesAddressString〕
• Destination: 〔Repeat Item’s Location〕

〔1278〕 Set Variable TravelTimeString to 〔1277 DepartureToDestination〕

〔1279〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1280〕 Set Variable MatchString to 〔1279 Matches〕

〔1281〕 Count Items in 〔MatchString〕　»

〔1282〕 If 〔1281 Count〕 is 1

〔1283〕 Get First Item from List 〔MatchString〕　»

〔1284〕 Set Variable TravelDays to 〔1283 Item from List〕

〔1285〕 Otherwise

〔1286〕 Number 0　»

〔1287〕 Set Variable TravelDays to 〔1286 Number〕

〔1288〕 End If

〔1289〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1290〕 Set Variable MatchString to 〔1289 Matches〕

〔1291〕 Count Items in 〔MatchString〕　»

〔1292〕 If 〔1291 Count〕 is 1

〔1293〕 Get First Item from List 〔MatchString〕　»

〔1294〕 Set Variable TravelHours to 〔1293 Item from List〕

〔1295〕 Otherwise

〔1296〕 Number 0　»

〔1297〕 Set Variable TravelHours to 〔1296 Number〕

〔1298〕 End If

〔1299〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1300〕 Set Variable MatchString to 〔1299 Matches〕

〔1301〕 Count Items in 〔MatchString〕　»

〔1302〕 If 〔1301 Count〕 is 1

〔1303〕 Get First Item from List 〔MatchString〕　»

〔1304〕 Set Variable TravelMinutes to 〔1303 Item from List〕

〔1305〕 Otherwise

〔1306〕 Number 0　»

〔1307〕 Set Variable TravelMinutes to 〔1306 Number〕

〔1308〕 End If

〔1309〕 Calculate 〔TravelDays〕 × 1440 　➔ Days　» 1311

〔1310〕 Calculate 〔TravelHours〕 × 60 　➔ Hours　»

〔1311〕 Calculate 〔1309 Days〕 + 〔1310 Hours〕　»

〔1312〕 Calculate 〔1311 Calculation Result〕 + 〔TravelMinutes〕　»

〔1313〕 Calculate 〔1312 Calculation Result〕 + 〔CurrentToDeparture〕　»

〔1314〕 Set Variable TravelTime to 〔1313 Calculation Result〕

〔1315〕 Otherwise　▵1223

〔1316〕 Comment
CALENDER EVENT NOTES IS BLANK

〔1317〕 Get Dictionary from 〔HomeAddress〕 　➔ Home Address Dictionary　» 1318 1319 1320 1321 1322

〔1318〕 Get Dictionary Value for street in 〔1317 Home Address Dictionary〕 　➔ home_Street　» 1323 1325

〔1319〕 Get Dictionary Value for city in 〔1317 Home Address Dictionary〕 　➔ home_City　» 1323 1325

〔1320〕 Get Dictionary Value for state in 〔1317 Home Address Dictionary〕 　➔ home_State　» 1323 1325

〔1321〕 Get Dictionary Value for country in 〔1317 Home Address Dictionary〕 　➔ home_Country　» 1323 1325

〔1322〕 Get Dictionary Value for postcode in 〔1317 Home Address Dictionary〕 　➔ home_Postcode　» 1323 1325

〔1323〕 If All are true　〔1318 home_Street〕 has any value　〔1319 home_City〕 has any value　〔1320 home_State〕 has any value　〔1321 home_Country〕 has any value　〔1322 home_Postcode〕 has any value

〔1324〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED

〔1325〕 If All are true　〔1221 Current Location’s Street〕 is 〔1318 home_Street〕　〔1221 Current Location’s City〕 is 〔1319 home_City〕　〔1221 Current Location’s State〕 is 〔1320 home_State〕　〔1221 Current Location’s Country〕 is 〔1321 home_Country〕　〔1221 Current Location’s ZIP Code〕 is 〔1322 home_Postcode〕

〔1326〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED -> HOME ADDRESS IS THE SAME WITH CURRENT LOCATION

〔1327〕 Number 0　»

〔1328〕 Set Variable CurrentToDeparture to 〔1327 Number〕

〔1329〕 Otherwise

〔1330〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED -> HOME ADDRESS IS NOT THE SAME WITH CURRENT LOCATION

〔1331〕 Get 〔TravelMethod〕 Time　»
• Destination: 〔HomeAddress〕

〔1332〕 Set Variable TravelTimeString to 〔1331 Travel Time〕

〔1333〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1334〕 Set Variable MatchString to 〔1333 Matches〕

〔1335〕 Count Items in 〔MatchString〕　»

〔1336〕 If 〔1335 Count〕 is 1

〔1337〕 Get First Item from List 〔MatchString〕　»

〔1338〕 Set Variable TravelDays to 〔1337 Item from List〕

〔1339〕 Otherwise

〔1340〕 Number 0　»

〔1341〕 Set Variable TravelDays to 〔1340 Number〕

〔1342〕 End If

〔1343〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1344〕 Set Variable MatchString to 〔1343 Matches〕

〔1345〕 Count Items in 〔MatchString〕　»

〔1346〕 If 〔1345 Count〕 is 1

〔1347〕 Get First Item from List 〔MatchString〕　»

〔1348〕 Set Variable TravelHours to 〔1347 Item from List〕

〔1349〕 Otherwise

〔1350〕 Number 0　»

〔1351〕 Set Variable TravelHours to 〔1350 Number〕

〔1352〕 End If

〔1353〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1354〕 Set Variable MatchString to 〔1353 Matches〕

〔1355〕 Count Items in 〔MatchString〕　»

〔1356〕 If 〔1355 Count〕 is 1

〔1357〕 Get First Item from List 〔MatchString〕　»

〔1358〕 Set Variable TravelMinutes to 〔1357 Item from List〕

〔1359〕 Otherwise

〔1360〕 Number 0　»

〔1361〕 Set Variable TravelMinutes to 〔1360 Number〕

〔1362〕 End If

〔1363〕 Calculate 〔TravelDays〕 × 1440 　➔ Days　» 1365

〔1364〕 Calculate 〔TravelHours〕 × 60 　➔ Hours　»

〔1365〕 Calculate 〔1363 Days〕 + 〔1364 Hours〕　»

〔1366〕 Calculate 〔1365 Calculation Result〕 + 〔TravelMinutes〕　»

〔1367〕 Set Variable CurrentToDeparture to 〔1366 Calculation Result〕

〔1368〕 End If　▵1329

〔1369〕 Get 〔TravelMethod〕 Time 　➔ DepartureToDestination　»
• GetDirectionsCustomLocation: 〔HomeAddress〕
• Destination: 〔Repeat Item’s Location〕

〔1370〕 Set Variable TravelTimeString to 〔1369 DepartureToDestination〕

〔1371〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1372〕 Set Variable MatchString to 〔1371 Matches〕

〔1373〕 Count Items in 〔MatchString〕　»

〔1374〕 If 〔1373 Count〕 is 1

〔1375〕 Get First Item from List 〔MatchString〕　»

〔1376〕 Set Variable TravelDays to 〔1375 Item from List〕

〔1377〕 Otherwise

〔1378〕 Number 0　»

〔1379〕 Set Variable TravelDays to 〔1378 Number〕

〔1380〕 End If

〔1381〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1382〕 Set Variable MatchString to 〔1381 Matches〕

〔1383〕 Count Items in 〔MatchString〕　»

〔1384〕 If 〔1383 Count〕 is 1

〔1385〕 Get First Item from List 〔MatchString〕　»

〔1386〕 Set Variable TravelHours to 〔1385 Item from List〕

〔1387〕 Otherwise

〔1388〕 Number 0　»

〔1389〕 Set Variable TravelHours to 〔1388 Number〕

〔1390〕 End If

〔1391〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1392〕 Set Variable MatchString to 〔1391 Matches〕

〔1393〕 Count Items in 〔MatchString〕　»

〔1394〕 If 〔1393 Count〕 is 1

〔1395〕 Get First Item from List 〔MatchString〕　»

〔1396〕 Set Variable TravelMinutes to 〔1395 Item from List〕

〔1397〕 Otherwise

〔1398〕 Number 0　»

〔1399〕 Set Variable TravelMinutes to 〔1398 Number〕

〔1400〕 End If

〔1401〕 Calculate 〔TravelDays〕 × 1440 　➔ Days　» 1403

〔1402〕 Calculate 〔TravelHours〕 × 60 　➔ Hours　»

〔1403〕 Calculate 〔1401 Days〕 + 〔1402 Hours〕　»

〔1404〕 Calculate 〔1403 Calculation Result〕 + 〔TravelMinutes〕　»

〔1405〕 Calculate 〔1404 Calculation Result〕 + 〔CurrentToDeparture〕　»

〔1406〕 Set Variable TravelTime to 〔1405 Calculation Result〕

〔1407〕 Otherwise　▵1323

〔1408〕 Text
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS NOT MAINTAINED

〔1409〕 Get 〔TravelMethod〕 Time　»
• Destination: 〔Repeat Item’s Location〕

〔1410〕 Set Variable TravelTimeString to 〔1409 Travel Time〕

〔1411〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1412〕 Set Variable MatchString to 〔1411 Matches〕

〔1413〕 Count Items in 〔MatchString〕　»

〔1414〕 If 〔1413 Count〕 is 1

〔1415〕 Get First Item from List 〔MatchString〕　»

〔1416〕 Set Variable TravelDays to 〔1415 Item from List〕

〔1417〕 Otherwise

〔1418〕 Number 0　»

〔1419〕 Set Variable TravelDays to 〔1418 Number〕

〔1420〕 End If

〔1421〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1422〕 Set Variable MatchString to 〔1421 Matches〕

〔1423〕 Count Items in 〔MatchString〕　»

〔1424〕 If 〔1423 Count〕 is 1

〔1425〕 Get First Item from List 〔MatchString〕　»

〔1426〕 Set Variable TravelHours to 〔1425 Item from List〕

〔1427〕 Otherwise

〔1428〕 Number 0　»

〔1429〕 Set Variable TravelHours to 〔1428 Number〕

〔1430〕 End If

〔1431〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1432〕 Set Variable MatchString to 〔1431 Matches〕

〔1433〕 Count Items in 〔MatchString〕　»

〔1434〕 If 〔1433 Count〕 is 1

〔1435〕 Get First Item from List 〔MatchString〕　»

〔1436〕 Set Variable TravelMinutes to 〔1435 Item from List〕

〔1437〕 Otherwise

〔1438〕 Number 0　»

〔1439〕 Set Variable TravelMinutes to 〔1438 Number〕

〔1440〕 End If

〔1441〕 Calculate 〔TravelDays〕 × 1440 　➔ Days　» 1443

〔1442〕 Calculate 〔TravelHours〕 × 60 　➔ Hours　»

〔1443〕 Calculate 〔1441 Days〕 + 〔1442 Hours〕　»

〔1444〕 Calculate 〔1443 Calculation Result〕 + 〔TravelMinutes〕　»

〔1445〕 Set Variable TravelTime to 〔1444 Calculation Result〕

〔1446〕 End If　▵1407

〔1447〕 End If　▵1315

〔1448〕 Otherwise　▵1220

〔1449〕 Number 0　»

〔1450〕 Set Variable TravelTime to 〔1449 Number〕

〔1451〕 End If

〔1452〕 Calculate 〔TravelTime〕 + 〔ExtraTime〕　»

〔1453〕 Adjust Subtract Date 〔Repeat Item’s Start Date〕 　➔ Supposed Alarm Time　» 1454 1457 1460 1463 1470 1486 1488 1489 1507 1512 1515
• Duration: 〔1452 Calculation Result〕 min

〔1454〕 Dictionary 　➔ Alarm Label Dictionary　» 1486 1491 1507
{  "Event": "〔Repeat Item〕",
   "From": "〔Repeat Item’s Start Date〕",
   "To": "〔Repeat Item’s End Date〕",
   "Location": "〔Repeat Item’s Location〕",
   "AlarmTime": "〔1453 Supposed Alarm Time〕"
}

〔1455〕 Date Current Date 　➔ Current Date　» 1456 1457 1488

〔1456〕 Adjust Add Date 〔1455 Current Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"dd MMM yyyy"}〕 　➔ 1 day after　» 1470 1471 1489 1493
• Duration: "1" days

〔1457〕 If 〔1453 Supposed Alarm Time〕 is 〔1455 Current Date〕

〔1458〕 Comment
supposed alarm time is exactly 12:00am

〔1459〕 If 〔Repeat Item’s Location〕 has any value

〔1460〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 at 〔Repeat Item’s Location〕 which  was supposed to get ready at 〔1453 Supposed Alarm Time〕. Please check.

〔1461〕 Set Variable Text to 〔1460 Text〕

〔1462〕 Otherwise

〔1463〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 which  was supposed to get ready at 〔1453 Supposed Alarm Time〕. Please check.

〔1464〕 Set Variable Text to 〔1463 Text〕

〔1465〕 End If

〔1466〕 Show Alert 〔Text〕

〔1467〕 Show Notification 〔Text〕

〔1468〕 Speak Text
• Text: 〔Text〕

〔1469〕 Otherwise　▵1457

〔1470〕 If 〔1453 Supposed Alarm Time〕 is 〔1456 1 day after〕

〔1471〕 Find Alarm 〔1456 1 day after〕　» 1472 1473

〔1472〕 If 〔1471 Alarms〕 has any value

〔1473〕 Repeat[2] with Each in 〔1471 Alarms〕

〔1474〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ AlarmLabelDictionary　» 1475 1476 1478

〔1475〕 Get Dictionary Value for Event in 〔1474 AlarmLabelDictionary〕 　➔ Event　» 1480

〔1476〕 Get Dictionary Value for From in 〔1474 AlarmLabelDictionary〕 　➔ From　»

〔1477〕 Get Dates from 〔1476 From〕 　➔ FromDate　» 1480

〔1478〕 Get Dictionary Value for To in 〔1474 AlarmLabelDictionary〕 　➔ To　»

〔1479〕 Get Dates from 〔1478 To〕 　➔ ToDate　»

〔1480〕 If All are true　〔1475 Event’s Name〕 is 〔Repeat Item〕　〔1477 FromDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔Repeat Item’s Start Date{"Date Style":"Custom","WFDateFormat":"HH:mm","WFISO8601IncludeTime":false}〕　〔1479 ToDate{"Date Style":"Custom","WFDateFormat":"HH:mm","WFISO8601IncludeTime":false}〕 is • ConditionalActionString
〔Repeat Item’s End Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕• Date
〔Repeat Item’s End Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕

〔1481〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔1482〕 End If

〔1483〕 End Repeat[2] with Each　▵1473

〔1484〕 End If　▵1472

〔1485〕 Comment
since this will be triggered at 12:00 am each day, when the supposed alarm time is 12:00 am in the next day, you can set alarm now

〔1486〕 Add Alarm for 〔1453 Supposed Alarm Time〕 called 〔1454 Alarm Label Dictionary〕

〔1487〕 Otherwise　▵1470

〔1488〕 If 〔1453 Supposed Alarm Time〕 > 〔1455 Current Date〕

〔1489〕 If 〔1453 Supposed Alarm Time〕 > 〔1456 1 day after〕

〔1490〕 Comment
when the time is other than 12:00 am of then next day, you cannot set alarm yet. If set, it will be today. For example, triggering time 2025-4-8 12:00 am, the supposed alarm time is 2025-4-9 08:00 am, if you set an alarm at 08:00 at 2025-4-8 12:00 am, it will alarm at 2025-4-8 08:00 am instead. So we need to record the supposed alarm time and trigger next day.

〔1491〕 Set Variable Event to 〔1454 Alarm Label Dictionary〕

〔1492〕 Otherwise

〔1493〕 Find Alarm 〔1456 1 day after〕　» 1494 1495
• ContentItemFilter: {  "Value": {
      "WFActionParameterFilterPrefix": 1,
      "WFActionParameterFilterTemplates": [],
      "WFContentPredicateBoundedDate": false
   },
   "WFSerializationType": "WFContentPredicateTableTemplate"
}

〔1494〕 If 〔1493 Alarms〕 has any value

〔1495〕 Repeat[2] with Each in 〔1493 Alarms〕

〔1496〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ AlarmLabelDictionary　» 1497 1498 1500

〔1497〕 Get Dictionary Value for Event in 〔1496 AlarmLabelDictionary〕 　➔ Event　» 1502

〔1498〕 Get Dictionary Value for From in 〔1496 AlarmLabelDictionary〕 　➔ From　»

〔1499〕 Get Dates from 〔1498 From〕 　➔ FromDate　» 1502

〔1500〕 Get Dictionary Value for To in 〔1496 AlarmLabelDictionary〕 　➔ To　»

〔1501〕 Get Dates from 〔1500 To〕 　➔ ToDate　»

〔1502〕 If All are true　〔1497 Event’s Name〕 is 〔Repeat Item〕　〔1499 FromDate{"Date Style":"Custom","WFDateFormat":"HH:mm","WFISO8601IncludeTime":false}〕 is 〔Repeat Item’s Start Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕　〔1501 ToDate{"Date Style":"Custom","WFDateFormat":"HH:mm","WFISO8601IncludeTime":false}〕 is 〔Repeat Item’s End Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕

〔1503〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔1504〕 End If

〔1505〕 End Repeat[2] with Each　▵1495

〔1506〕 End If　▵1494

〔1507〕 Add Alarm for 〔1453 Supposed Alarm Time〕 called 〔1454 Alarm Label Dictionary〕

〔1508〕 End If　▵1492

〔1509〕 Otherwise　▵1488

〔1510〕 Comment
the supposed alarm time passed

〔1511〕 If 〔Repeat Item’s Location〕 has any value

〔1512〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 at 〔Repeat Item’s Location〕 which  was supposed to get ready at 〔1453 Supposed Alarm Time〕. Please check.

〔1513〕 Set Variable Text to 〔1512 Text〕

〔1514〕 Otherwise

〔1515〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 which  was supposed to get ready at 〔1453 Supposed Alarm Time〕. Please check.

〔1516〕 Set Variable Text to 〔1515 Text〕

〔1517〕 End If

〔1518〕 Show Alert 〔Text〕

〔1519〕 Show Notification 〔Text〕

〔1520〕 Speak Text
• Text: 〔Text〕

〔1521〕 End If　▵1509

〔1522〕 End If　▵1487

〔1523〕 End If　▵1469

〔1524〕 Text
〔Event〕

〔1525〕 If 〔Event〕 has any value

〔1526〕 Get Dictionary from 〔Event〕　» 1539

〔1527〕 Text　»

〔1528〕 Set Variable TextList to 〔1527 Text〕

〔1529〕 Add 〔Event〕 to Variable TextList

〔1530〕 Get File at Path Smart Calendar Reminder/Future Alarms.txt from Folder　» 1531 1532
• FileErrorIfNotFound: false

〔1531〕 If 〔1530 File’s File Size〕 has any value

〔1532〕 Split Text 〔1530 File〕 by New Lines　»

〔1533〕 Repeat[2] with Each in 〔1532 Split Text〕

〔1534〕 Get Dictionary from 〔Repeat Item 2〕　» 1535 1536 1537 1538

〔1535〕 Get Dictionary Value for Event in 〔1534 Dictionary〕 　➔ Event　» 1539

〔1536〕 Get Dictionary Value for From in 〔1534 Dictionary〕 　➔ From　» 1539

〔1537〕 Get Dictionary Value for To in 〔1534 Dictionary〕 　➔ To　» 1539

〔1538〕 Get Dictionary Value for Location in 〔1534 Dictionary〕 　➔ Location　»

〔1539〕 If Any are true　〔1535 Event’s Name〕 is not 〔1526 Dictionary.Event〕　〔1536 From’s Name〕 is not 〔1526 Dictionary.From〕　〔1537 To’s Name〕 is not 〔1526 Dictionary.To〕　〔1538 Location’s Name〕 is not 〔1526 Dictionary.Location〕

〔1540〕 Add 〔Repeat Item 2〕 to Variable TextList

〔1541〕 End If

〔1542〕 End Repeat[2] with Each　▵1533

〔1543〕 Combine Text 〔TextList〕 with New Lines　»

〔1544〕 Save File 〔1543 Combined Text〕
• AskWhereToSave: false
• SaveFileOverwrite: true
• FileDestinationPath: Smart Calendar Reminder/Future Alarms.txt

〔1545〕 Otherwise　▵1531

〔1546〕 Text　»

〔Event〕

〔1547〕 Save File 〔1546 Text〕
• AskWhereToSave: false
• FileDestinationPath: Smart Calendar Reminder/Future Alarms.txt

〔1548〕 End If

〔1549〕 End If　▵1525

〔1550〕 End Repeat with Each　▵1219

〔1551〕 End If　▵1218

〔1552〕 Get File at Path Smart Calendar Reminder/Future Alarms.txt from Folder　» 1553 1554
• FileErrorIfNotFound: false

〔1553〕 If 〔1552 File’s File Size〕 has any value

〔1554〕 Split Text 〔1552 File〕 by New Lines　»

〔1555〕 Repeat with Each in 〔1554 Split Text〕

〔1556〕 Get Dictionary from 〔Repeat Item〕　» 1557 1558 1568 1579

〔1557〕 If 〔1556 Dictionary〕 has any value

〔1558〕 Get Dates from 〔1556 Dictionary.AlarmTime〕　» 1559 1560 1579

〔1559〕 If 〔1558 Dates〕 is today

〔1560〕 Find Alarm 〔1558 Dates〕　» 1561 1562
• ContentItemFilter: {  "Value": {
      "WFActionParameterFilterPrefix": 1,
      "WFActionParameterFilterTemplates": [],
      "WFContentPredicateBoundedDate": false
   },
   "WFSerializationType": "WFContentPredicateTableTemplate"
}

〔1561〕 If 〔1560 Alarms〕 has any value

〔1562〕 Repeat[2] with Each in 〔1560 Alarms〕

〔1563〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ Alarm_Label_Dictionary　» 1564 1566 1574

〔1564〕 Get Dictionary Value for From in 〔1563 Alarm_Label_Dictionary〕　»

〔1565〕 Get Dates from 〔1564 Dictionary Value〕 　➔ From_Date　» 1574

〔1566〕 Get Dictionary Value for To in 〔1563 Alarm_Label_Dictionary〕　»

〔1567〕 Get Dates from 〔1566 Dictionary Value〕 　➔ To_Date　» 1574

〔1568〕 Get Dictionary from 〔1556 Dictionary.Event〕 　➔ FutureAlarmLabelDictionary　» 1569 1570 1572

〔1569〕 Get Dictionary Value for Event in 〔1568 FutureAlarmLabelDictionary〕 　➔ Event　» 1574

〔1570〕 Get Dictionary Value for From in 〔1568 FutureAlarmLabelDictionary〕 　➔ From　»

〔1571〕 Get Dates from 〔1570 From〕 　➔ FromDate　» 1574

〔1572〕 Get Dictionary Value for To in 〔1568 FutureAlarmLabelDictionary〕 　➔ To　»

〔1573〕 Get Dates from 〔1572 To〕 　➔ ToDate　»

〔1574〕 If All are true　〔1569 Event’s Name〕 is 〔1563 Alarm_Label_Dictionary.Event〕　〔1571 FromDate{"Date Style":"Custom","WFDateFormat":"HH:mm","WFISO8601IncludeTime":false}〕 is 〔1565 From_Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕　〔1573 ToDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔1567 To_Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕

〔1575〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔1576〕 End If

〔1577〕 End Repeat[2] with Each　▵1562

〔1578〕 End If　▵1561

〔1579〕 Add Alarm for 〔1558 Dates〕 called 〔1556 Dictionary.Event〕

〔1580〕 End If　▵1559

〔1581〕 End If　▵1557

〔1582〕 End Repeat with Each　▵1555

〔1583〕 End If　▵1553

〔1584〕 End If　▵1206

〔1585〕 If 〔Shortcut Input as Number〕 is 7

〔1586〕 Comment
1-Hour Event Processor
*Real-time event handler for immediate notifications:

Processes events within next 60 minutes

Provides most accurate travel estimates

Recommended for hourly automation*

〔1587〕 Get File at Path Smart Calendar Reminder/aboutme.txt from Folder　»
• FileErrorIfNotFound: false

〔1588〕 Get Dictionary from 〔1587 File〕　» 1589 1592 1593

〔1589〕 Get Dictionary from 〔1588 Dictionary.HomeAddress〕　»

〔1590〕 Text　»
〔1589 Dictionary.street〕 〔1589 Dictionary.city〕 〔1589 Dictionary.state〕 〔1589 Dictionary.postcode〕 〔1589 Dictionary.country〕

〔1591〕 Set Variable Home_Address to 〔1590 Text〕

〔1592〕 Set Variable Travel_Method to 〔1588 Dictionary.TravelMethod〕

〔1593〕 Get Dictionary Value for ExtraTime in 〔1588 Dictionary〕　»

〔1594〕 Get Numbers from 〔1593 Dictionary Value〕　»

〔1595〕 Set Variable Extra_Time to 〔1594 Numbers〕

〔1596〕 Find Calendar Events All Calendar Events where　» 1597 1598 1599 1866
• ContentItemSortProperty: Start Date
• ContentItemSortOrder: Oldest First
• ContentItemFilter: • All the following are true
Start Date is in the next 30 minutes
Is Not All Day
Canceled is {"Bool":false}

〔1597〕 If 〔1596 Calendar Events〕 has any value

〔1598〕 Count Items in 〔1596 Calendar Events〕　» 1870 1878

〔1599〕 Repeat with Each in 〔1596 Calendar Events〕

〔1600〕 If 〔Repeat Item’s Location〕 has any value

〔1601〕 Get Current Location　» 1612 1618 1704
• Accuracy: Best

〔1602〕 If All are true　〔Repeat Item’s Notes〕 has any value　〔Repeat Item’s Notes〕 begins with {　〔Repeat Item’s Notes〕 ends with }

〔1603〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY

〔1604〕 Get Dictionary from 〔Repeat Item’s Notes〕 　➔ NotesAddressDictionary　» 1605 1606 1607 1608 1609

〔1605〕 Set Variable CalendarNotesStreet to 〔1604 NotesAddressDictionary.Street〕

〔1606〕 Set Variable CalendarNotesCity to 〔1604 NotesAddressDictionary.City〕

〔1607〕 Set Variable CalendarNotesState to 〔1604 NotesAddressDictionary.State〕

〔1608〕 Set Variable CalendarNotesRegion to 〔1604 NotesAddressDictionary.Country〕

〔1609〕 Set Variable CalendarNotesZIPCode to 〔1604 NotesAddressDictionary.Postcode〕

〔1610〕 Text　»
〔CalendarNotesStreet〕 〔CalendarNotesCity〕 〔CalendarNotesState〕 〔CalendarNotesZIPCode〕 〔CalendarNotesRegion〕

〔1611〕 Set Variable NotesAddressString to 〔1610 Text〕

〔1612〕 If All are true　〔1601 Current Location’s Street〕 is 〔CalendarNotesStreet〕　〔1601 Current Location’s City〕 is 〔CalendarNotesCity〕　〔1601 Current Location’s State〕 is 〔CalendarNotesState〕　〔1601 Current Location’s Country〕 is 〔CalendarNotesRegion〕　〔1601 Current Location’s ZIP Code〕 is 〔CalendarNotesZIPCode〕

〔1613〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY -> CALENDAR EVENT ADDRESS IS THE SAME WITH CURRENT LOCATION

〔1614〕 Number 0　»

〔1615〕 Set Variable CurrentToDeparture to 〔1614 Number〕

〔1616〕 Otherwise

〔1617〕 Comment
CALENDAR EVENT NOTES IS NOT BLANK AND IT’S A DICTIONARY -> CALENDAR EVENT ADDRESS IS NOT THE SAME WITH CURRENT LOCATION

〔1618〕 Get 〔TravelMethod〕 Time　»
• GetDirectionsCustomLocation: 〔1601 Current Location〕
• Destination: 〔NotesAddressString〕

〔1619〕 Set Variable TravelTimeString to 〔1618 Travel Time〕

〔1620〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1621〕 Set Variable MatchString to 〔1620 Matches〕

〔1622〕 Count Items in 〔MatchString〕　»

〔1623〕 If 〔1622 Count〕 is 1

〔1624〕 Get First Item from List 〔MatchString〕　»

〔1625〕 Set Variable TravelDays to 〔1624 Item from List〕

〔1626〕 Otherwise

〔1627〕 Number 0　»

〔1628〕 Set Variable TravelDays to 〔1627 Number〕

〔1629〕 End If

〔1630〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1631〕 Set Variable MatchString to 〔1630 Matches〕

〔1632〕 Count Items in 〔MatchString〕　»

〔1633〕 If 〔1632 Count〕 is 1

〔1634〕 Get First Item from List 〔MatchString〕　»

〔1635〕 Set Variable TravelHours to 〔1634 Item from List〕

〔1636〕 Otherwise

〔1637〕 Number 0　»

〔1638〕 Set Variable TravelHours to 〔1637 Number〕

〔1639〕 End If

〔1640〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1641〕 Set Variable MatchString to 〔1640 Matches〕

〔1642〕 Count Items in 〔MatchString〕　»

〔1643〕 If 〔1642 Count〕 is 1

〔1644〕 Get First Item from List 〔MatchString〕　»

〔1645〕 Set Variable TravelMinutes to 〔1644 Item from List〕

〔1646〕 Otherwise

〔1647〕 Number 0　»

〔1648〕 Set Variable TravelMinutes to 〔1647 Number〕

〔1649〕 End If

〔1650〕 Calculate 〔TravelDays〕 × 1440 　➔ Days　» 1652

〔1651〕 Calculate 〔TravelHours〕 × 60 　➔ Hours　»

〔1652〕 Calculate 〔1650 Days〕 + 〔1651 Hours〕　»

〔1653〕 Calculate 〔1652 Calculation Result〕 + 〔TravelMinutes〕　»

〔1654〕 Set Variable CurrentToDeparture to 〔1653 Calculation Result〕

〔1655〕 End If　▵1616

〔1656〕 Get 〔TravelMethod〕 Time 　➔ DepartureToDestination　»
• GetDirectionsCustomLocation: 〔NotesAddressString〕
• Destination: 〔Repeat Item’s Location〕

〔1657〕 Set Variable TravelTimeString to 〔1656 DepartureToDestination〕

〔1658〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1659〕 Set Variable MatchString to 〔1658 Matches〕

〔1660〕 Count Items in 〔MatchString〕　»

〔1661〕 If 〔1660 Count〕 is 1

〔1662〕 Get First Item from List 〔MatchString〕　»

〔1663〕 Set Variable TravelDays to 〔1662 Item from List〕

〔1664〕 Otherwise

〔1665〕 Number 0　»

〔1666〕 Set Variable TravelDays to 〔1665 Number〕

〔1667〕 End If

〔1668〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1669〕 Set Variable MatchString to 〔1668 Matches〕

〔1670〕 Count Items in 〔MatchString〕　»

〔1671〕 If 〔1670 Count〕 is 1

〔1672〕 Get First Item from List 〔MatchString〕　»

〔1673〕 Set Variable TravelHours to 〔1672 Item from List〕

〔1674〕 Otherwise

〔1675〕 Number 0　»

〔1676〕 Set Variable TravelHours to 〔1675 Number〕

〔1677〕 End If

〔1678〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1679〕 Set Variable MatchString to 〔1678 Matches〕

〔1680〕 Count Items in 〔MatchString〕　»

〔1681〕 If 〔1680 Count〕 is 1

〔1682〕 Get First Item from List 〔MatchString〕　»

〔1683〕 Set Variable TravelMinutes to 〔1682 Item from List〕

〔1684〕 Otherwise

〔1685〕 Number 0　»

〔1686〕 Set Variable TravelMinutes to 〔1685 Number〕

〔1687〕 End If

〔1688〕 Calculate 〔TravelDays〕 × 1440 　➔ Days　» 1690

〔1689〕 Calculate 〔TravelHours〕 × 60 　➔ Hours　»

〔1690〕 Calculate 〔1688 Days〕 + 〔1689 Hours〕　»

〔1691〕 Calculate 〔1690 Calculation Result〕 + 〔TravelMinutes〕　»

〔1692〕 Calculate 〔1691 Calculation Result〕 + 〔CurrentToDeparture〕　»

〔1693〕 Set Variable TravelTime to 〔1692 Calculation Result〕

〔1694〕 Otherwise　▵1602

〔1695〕 Comment
CALENDER EVENT NOTES IS BLANK

〔1696〕 Get Dictionary from 〔HomeAddress〕 　➔ home_address_dictionary　» 1697 1698 1699 1700 1701

〔1697〕 Get Dictionary Value for street in 〔1696 home_address_dictionary〕 　➔ HomeStreet　» 1702 1704

〔1698〕 Get Dictionary Value for city in 〔1696 home_address_dictionary〕 　➔ HomeCity　» 1702 1704

〔1699〕 Get Dictionary Value for state in 〔1696 home_address_dictionary〕 　➔ HomeState　» 1702 1704

〔1700〕 Get Dictionary Value for country in 〔1696 home_address_dictionary〕 　➔ HomeCountry　» 1702 1704

〔1701〕 Get Dictionary Value for postcode in 〔1696 home_address_dictionary〕 　➔ HomePostcode　» 1702 1704

〔1702〕 If All are true　〔1697 HomeStreet〕 has any value　〔1698 HomeCity〕 has any value　〔1699 HomeState〕 has any value　〔1700 HomeCountry〕 has any value　〔1701 HomePostcode〕 has any value

〔1703〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED

〔1704〕 If All are true　〔1601 Current Location’s Street〕 is 〔1697 HomeStreet〕　〔1601 Current Location’s City〕 is 〔1698 HomeCity〕　〔1601 Current Location’s State〕 is 〔1699 HomeState〕　〔1601 Current Location’s Country〕 is 〔1700 HomeCountry〕　〔1601 Current Location’s ZIP Code〕 is 〔1701 HomePostcode〕

〔1705〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED -> HOME ADDRESS IS THE SAME WITH CURRENT LOCATION

〔1706〕 Number 0　»

〔1707〕 Set Variable CurrentToDeparture to 〔1706 Number〕

〔1708〕 Otherwise

〔1709〕 Comment
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS MAINTAINED -> HOME ADDRESS IS NOT THE SAME WITH CURRENT LOCATION

〔1710〕 Get 〔TravelMethod〕 Time　»
• Destination: 〔HomeAddress〕

〔1711〕 Set Variable TravelTimeString to 〔1710 Travel Time〕

〔1712〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1713〕 Set Variable MatchString to 〔1712 Matches〕

〔1714〕 Count Items in 〔MatchString〕　»

〔1715〕 If 〔1714 Count〕 is 1

〔1716〕 Get First Item from List 〔MatchString〕　»

〔1717〕 Set Variable TravelDays to 〔1716 Item from List〕

〔1718〕 Otherwise

〔1719〕 Number 0　»

〔1720〕 Set Variable TravelDays to 〔1719 Number〕

〔1721〕 End If

〔1722〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1723〕 Set Variable MatchString to 〔1722 Matches〕

〔1724〕 Count Items in 〔MatchString〕　»

〔1725〕 If 〔1724 Count〕 is 1

〔1726〕 Get First Item from List 〔MatchString〕　»

〔1727〕 Set Variable TravelHours to 〔1726 Item from List〕

〔1728〕 Otherwise

〔1729〕 Number 0　»

〔1730〕 Set Variable TravelHours to 〔1729 Number〕

〔1731〕 End If

〔1732〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1733〕 Set Variable MatchString to 〔1732 Matches〕

〔1734〕 Count Items in 〔MatchString〕　»

〔1735〕 If 〔1734 Count〕 is 1

〔1736〕 Get First Item from List 〔MatchString〕　»

〔1737〕 Set Variable TravelMinutes to 〔1736 Item from List〕

〔1738〕 Otherwise

〔1739〕 Number 0　»

〔1740〕 Set Variable TravelMinutes to 〔1739 Number〕

〔1741〕 End If

〔1742〕 Calculate 〔TravelDays〕 × 1440 　➔ Days　» 1744

〔1743〕 Calculate 〔TravelHours〕 × 60 　➔ Hours　»

〔1744〕 Calculate 〔1742 Days〕 + 〔1743 Hours〕　»

〔1745〕 Calculate 〔1744 Calculation Result〕 + 〔TravelMinutes〕　»

〔1746〕 Set Variable CurrentToDeparture to 〔1745 Calculation Result〕

〔1747〕 End If　▵1708

〔1748〕 Get 〔TravelMethod〕 Time 　➔ DepartureToDestination　»
• GetDirectionsCustomLocation: 〔HomeAddress〕
• Destination: 〔Repeat Item’s Location〕

〔1749〕 Set Variable TravelTimeString to 〔1748 DepartureToDestination〕

〔1750〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1751〕 Set Variable MatchString to 〔1750 Matches〕

〔1752〕 Count Items in 〔MatchString〕　»

〔1753〕 If 〔1752 Count〕 is 1

〔1754〕 Get First Item from List 〔MatchString〕　»

〔1755〕 Set Variable TravelDays to 〔1754 Item from List〕

〔1756〕 Otherwise

〔1757〕 Number 0　»

〔1758〕 Set Variable TravelDays to 〔1757 Number〕

〔1759〕 End If

〔1760〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1761〕 Set Variable MatchString to 〔1760 Matches〕

〔1762〕 Count Items in 〔MatchString〕　»

〔1763〕 If 〔1762 Count〕 is 1

〔1764〕 Get First Item from List 〔MatchString〕　»

〔1765〕 Set Variable TravelHours to 〔1764 Item from List〕

〔1766〕 Otherwise

〔1767〕 Number 0　»

〔1768〕 Set Variable TravelHours to 〔1767 Number〕

〔1769〕 End If

〔1770〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1771〕 Set Variable MatchString to 〔1770 Matches〕

〔1772〕 Count Items in 〔MatchString〕　»

〔1773〕 If 〔1772 Count〕 is 1

〔1774〕 Get First Item from List 〔MatchString〕　»

〔1775〕 Set Variable TravelMinutes to 〔1774 Item from List〕

〔1776〕 Otherwise

〔1777〕 Number 0　»

〔1778〕 Set Variable TravelMinutes to 〔1777 Number〕

〔1779〕 End If

〔1780〕 Calculate 〔TravelDays〕 × 1440 　➔ Days　» 1782

〔1781〕 Calculate 〔TravelHours〕 × 60 　➔ Hours　»

〔1782〕 Calculate 〔1780 Days〕 + 〔1781 Hours〕　»

〔1783〕 Calculate 〔1782 Calculation Result〕 + 〔TravelMinutes〕　»

〔1784〕 Calculate 〔1783 Calculation Result〕 + 〔CurrentToDeparture〕　»

〔1785〕 Set Variable TravelTime to 〔1784 Calculation Result〕

〔1786〕 Otherwise　▵1702

〔1787〕 Text
CALENDER EVENT NOTES IS BLANK -> HOME ADDRESS WAS NOT MAINTAINED

〔1788〕 Get 〔TravelMethod〕 Time　»
• Destination: 〔Repeat Item’s Location〕

〔1789〕 Set Variable TravelTimeString to 〔1788 Travel Time〕

〔1790〕 Match Text (\d+)\s*day(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1791〕 Set Variable MatchString to 〔1790 Matches〕

〔1792〕 Count Items in 〔MatchString〕　»

〔1793〕 If 〔1792 Count〕 is 1

〔1794〕 Get First Item from List 〔MatchString〕　»

〔1795〕 Set Variable TravelDays to 〔1794 Item from List〕

〔1796〕 Otherwise

〔1797〕 Number 0　»

〔1798〕 Set Variable TravelDays to 〔1797 Number〕

〔1799〕 End If

〔1800〕 Match Text (\d+)\s*hour(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1801〕 Set Variable MatchString to 〔1800 Matches〕

〔1802〕 Count Items in 〔MatchString〕　»

〔1803〕 If 〔1802 Count〕 is 1

〔1804〕 Get First Item from List 〔MatchString〕　»

〔1805〕 Set Variable TravelHours to 〔1804 Item from List〕

〔1806〕 Otherwise

〔1807〕 Number 0　»

〔1808〕 Set Variable TravelHours to 〔1807 Number〕

〔1809〕 End If

〔1810〕 Match Text (\d+)\s*minute(?:s)? in 〔TravelTimeString〕　»
• MatchTextCaseSensitive: false

〔1811〕 Set Variable MatchString to 〔1810 Matches〕

〔1812〕 Count Items in 〔MatchString〕　»

〔1813〕 If 〔1812 Count〕 is 1

〔1814〕 Get First Item from List 〔MatchString〕　»

〔1815〕 Set Variable TravelMinutes to 〔1814 Item from List〕

〔1816〕 Otherwise

〔1817〕 Number 0　»

〔1818〕 Set Variable TravelMinutes to 〔1817 Number〕

〔1819〕 End If

〔1820〕 Calculate 〔TravelDays〕 × 1440 　➔ Days　» 1822

〔1821〕 Calculate 〔TravelHours〕 × 60 　➔ Hours　»

〔1822〕 Calculate 〔1820 Days〕 + 〔1821 Hours〕　»

〔1823〕 Calculate 〔1822 Calculation Result〕 + 〔TravelMinutes〕　»

〔1824〕 Set Variable TravelTime to 〔1823 Calculation Result〕

〔1825〕 End If　▵1786

〔1826〕 End If　▵1694

〔1827〕 Otherwise　▵1600

〔1828〕 Number 0　»

〔1829〕 Set Variable TravelTime to 〔1828 Number〕

〔1830〕 End If

〔1831〕 Find Alarm All Alarm　» 1832 1833
• ContentItemFilter: {  "Value": {
      "WFActionParameterFilterPrefix": 1,
      "WFContentPredicateBoundedDate": false,
      "WFActionParameterFilterTemplates": []
   },
   "WFSerializationType": "WFContentPredicateTableTemplate"
}

〔1832〕 If 〔1831 Alarms〕 has any value

〔1833〕 Repeat[2] with Each in 〔1831 Alarms〕

〔1834〕 Get Dictionary from 〔Repeat Item 2’s label〕 　➔ AlarmLabelDictionary　» 1835 1836 1838

〔1835〕 Get Dictionary Value for Event in 〔1834 AlarmLabelDictionary〕 　➔ Event　» 1840

〔1836〕 Get Dictionary Value for From in 〔1834 AlarmLabelDictionary〕 　➔ From　»

〔1837〕 Get Dates from 〔1836 From〕 　➔ FromDate　» 1840

〔1838〕 Get Dictionary Value for To in 〔1834 AlarmLabelDictionary〕 　➔ To　»

〔1839〕 Get Dates from 〔1838 To〕 　➔ ToDate　»

〔1840〕 If All are true　〔1835 Event’s Name〕 is 〔Repeat Item〕　〔1837 FromDate{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕 is 〔Repeat Item’s Start Date{"Date Style":"Custom","WFISO8601IncludeTime":false,"WFDateFormat":"HH:mm"}〕　〔1839 ToDate{"Date Style":"Custom","WFDateFormat":"HH:mm","WFISO8601IncludeTime":false}〕 is 〔Repeat Item’s End Date{"Date Style":"Custom","WFDateFormat":"HH:mm","WFISO8601IncludeTime":false}〕

〔1841〕 Delete Alarms
• entities: 〔Repeat Item 2〕

〔1842〕 End If

〔1843〕 End Repeat[2] with Each　▵1833

〔1844〕 End If　▵1832

〔1845〕 Calculate 〔TravelTime〕 + 〔Extra_Time〕　»

〔1846〕 Adjust Subtract Date 〔Repeat Item’s Start Date〕 　➔ Supposed_Alarm_Time　» 1848 1850 1853 1860 1861
• Duration: 〔1845 Calculation Result〕 min

〔1847〕 Date Current Date　»

〔1848〕 If Any are true　〔1846 Supposed_Alarm_Time〕 < 〔1847 Date〕　〔1846 Supposed_Alarm_Time〕 is 〔1847 Date〕

〔1849〕 If 〔Repeat Item’s Location〕 has any value

〔1850〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 at 〔Repeat Item’s Location〕  which  was supposed to get ready at 〔1846 Supposed_Alarm_Time〕. Please check.

〔1851〕 Set Variable Text to 〔1850 Text〕

〔1852〕 Otherwise

〔1853〕 Text　»
Event 〔Repeat Item〕 from 〔Repeat Item’s Start Date〕 to 〔Repeat Item’s End Date〕 which  was supposed to get ready at 〔1846 Supposed_Alarm_Time〕. Please check.

〔1854〕 Set Variable Text to 〔1853 Text〕

〔1855〕 End If

〔1856〕 Show Alert 〔Text〕

〔1857〕 Show Notification 〔Text〕

〔1858〕 Speak Text
• Text: 〔Text〕

〔1859〕 Otherwise　▵1848

〔1860〕 Dictionary　»
{  "Event": "〔Repeat Item〕",
   "From": "〔Repeat Item’s Start Date〕",
   "To": "〔Repeat Item’s End Date〕",
   "Location": "〔Repeat Item’s Location〕",
   "AlarmTime": "〔1846 Supposed_Alarm_Time〕"
}

〔1861〕 Add Alarm for 〔1846 Supposed_Alarm_Time〕 called 〔1860 Dictionary〕

〔1862〕 End If

〔1863〕 End Repeat with Each　▵1599

〔1864〕 Number 3　»

〔1865〕 Repeat 〔1864 Number〕 Times

〔1866〕 Repeat[2] with Each in 〔1596 Calendar Events〕

〔1867〕 Format Date 〔Repeat Item 2’s Start Date〕　» 1871 1874 1879 1882
• DateFormatStyle: None

〔1868〕 Format Date 〔Repeat Item 2’s End Date〕　» 1871 1874 1879 1882
• DateFormatStyle: None

〔1869〕 If 〔Repeat Item 2’s Location〕 has any value

〔1870〕 If 〔1598 Count〕 > 1

〔1871〕 Text　»
Event 〔Repeat Index 2〕 〔Repeat Item 2〕 from 〔1867 Formatted Date〕 to 〔1868 Formatted Date〕 at 〔Repeat Item 2’s Location〕

〔1872〕 Set Variable Text to 〔1871 Text〕

〔1873〕 Otherwise

〔1874〕 Text　»
Event  〔Repeat Item 2〕 from 〔1867 Formatted Date〕 to 〔1868 Formatted Date〕 at 〔Repeat Item 2’s Location〕

〔1875〕 Set Variable Text to 〔1874 Text〕

〔1876〕 End If

〔1877〕 Otherwise　▵1869

〔1878〕 If 〔1598 Count〕 > 1

〔1879〕 Text　»
Event 〔Repeat Index 2〕 〔Repeat Item 2〕 from 〔1867 Formatted Date〕 to 〔1868 Formatted Date〕

〔1880〕 Set Variable Text to 〔1879 Text〕

〔1881〕 Otherwise

〔1882〕 Text　»
Event  〔Repeat Item 2〕 from 〔1867 Formatted Date〕 to 〔1868 Formatted Date〕

〔1883〕 Set Variable Text to 〔1882 Text〕

〔1884〕 End If

〔1885〕 End If　▵1877

〔1886〕 Speak Text
• Text: 〔Text〕

〔1887〕 Wait 1 seconds

〔1888〕 End Repeat[2] with Each　▵1866

〔1889〕 End Repeat Times　▵1865

〔1890〕 End If　▵1597

〔1891〕 End If　▵1585

〔1892〕 End If　▵91